//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/util/kaldi-io.clif

#include <memory>
#include "clif/python/optional.h"
#include "util/kaldi-io.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::Input` as Input
bool Clif_PyObjAs(PyObject* input, ::kaldi::Input** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::Input>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::Input>* output);
PyObject* Clif_PyObjFrom(::kaldi::Input*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::Input>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::Input>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::Input*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::Input&, py::PostConv) = delete;
// CLIF use `::kaldi::InputType` as InputType
bool Clif_PyObjAs(PyObject* input, ::kaldi::InputType* output);
PyObject* Clif_PyObjFrom(const ::kaldi::InputType&, py::PostConv);
// CLIF use `::kaldi::Output` as Output
bool Clif_PyObjAs(PyObject* input, ::kaldi::Output** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::Output>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::Output>* output);
PyObject* Clif_PyObjFrom(::kaldi::Output*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::Output>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::Output>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::Output*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::Output&, py::PostConv) = delete;
// CLIF use `::kaldi::OutputType` as OutputType
bool Clif_PyObjAs(PyObject* input, ::kaldi::OutputType* output);
PyObject* Clif_PyObjFrom(const ::kaldi::OutputType&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_kaldi_io")) Py_DECREF(m);
// CLIF init_module else goto err;
