//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/util/options-ext.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "itf/options-itf-clifwrap.h"
#include "options-ext-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __options__ext_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyParseOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::ParseOptionsExt> cpp;
};
static ::kaldi::ParseOptionsExt* ThisPtr(PyObject*);

// __init__(usage:str)
static PyObject* wrapParseOptionsExt_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("usage"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::ParseOptionsExt>(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// @classmethod with_prefix(prefix:str, other:OptionsItf) -> ParseOptions
static PyObject* wrapParseOptionsExt_as_with_prefix(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("prefix"),
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:with_prefix", names, &a[0], &a[1])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("with_prefix", names[0], "::std::string", a[0]);
  ::kaldi::OptionsItf * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("with_prefix", names[1], "::kaldi::OptionsItf *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::ParseOptionsExt> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::ParseOptionsExt>(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// register_bool(name:str, value:bool, doc:str)
static PyObject* wrapRegisterBool_as_register_bool(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("name"),
      C("value"),
      C("doc"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:register_bool", names, &a[0], &a[1], &a[2])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register_bool", names[0], "::std::string", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("register_bool", names[1], "bool", a[1]);
  ::std::string arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("register_bool", names[2], "::std::string", a[2]);
  // Call actual C++ method.
  ::kaldi::ParseOptionsExt* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->RegisterBool(std::move(arg1), std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// register_int(name:str, value:int, doc:str)
static PyObject* wrapRegisterInt_as_register_int(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("name"),
      C("value"),
      C("doc"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:register_int", names, &a[0], &a[1], &a[2])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register_int", names[0], "::std::string", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("register_int", names[1], "int", a[1]);
  ::std::string arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("register_int", names[2], "::std::string", a[2]);
  // Call actual C++ method.
  ::kaldi::ParseOptionsExt* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->RegisterInt(std::move(arg1), std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// register_uint(name:str, value:int, doc:str)
static PyObject* wrapRegisterUInt_as_register_uint(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("name"),
      C("value"),
      C("doc"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:register_uint", names, &a[0], &a[1], &a[2])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register_uint", names[0], "::std::string", a[0]);
  unsigned int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("register_uint", names[1], "unsigned int", a[1]);
  ::std::string arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("register_uint", names[2], "::std::string", a[2]);
  // Call actual C++ method.
  ::kaldi::ParseOptionsExt* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->RegisterUInt(std::move(arg1), std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// register_float(name:str, value:float, doc:str)
static PyObject* wrapRegisterFloat_as_register_float(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("name"),
      C("value"),
      C("doc"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:register_float", names, &a[0], &a[1], &a[2])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register_float", names[0], "::std::string", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("register_float", names[1], "float", a[1]);
  ::std::string arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("register_float", names[2], "::std::string", a[2]);
  // Call actual C++ method.
  ::kaldi::ParseOptionsExt* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->RegisterFloat(std::move(arg1), std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// register_double(name:str, value:float, doc:str)
static PyObject* wrapRegisterDouble_as_register_double(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("name"),
      C("value"),
      C("doc"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:register_double", names, &a[0], &a[1], &a[2])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register_double", names[0], "::std::string", a[0]);
  double arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("register_double", names[1], "double", a[1]);
  ::std::string arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("register_double", names[2], "::std::string", a[2]);
  // Call actual C++ method.
  ::kaldi::ParseOptionsExt* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->RegisterDouble(std::move(arg1), std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// register_str(name:str, value:str, doc:str)
static PyObject* wrapRegisterString_as_register_str(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("name"),
      C("value"),
      C("doc"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:register_str", names, &a[0], &a[1], &a[2])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register_str", names[0], "::std::string", a[0]);
  ::std::string arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("register_str", names[1], "::std::string", a[1]);
  ::std::string arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("register_str", names[2], "::std::string", a[2]);
  // Call actual C++ method.
  ::kaldi::ParseOptionsExt* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->RegisterString(std::move(arg1), std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// disable_option(name:str)
static PyObject* wrapDisableOption_as_disable_option(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("name"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:disable_option", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("disable_option", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::ParseOptionsExt* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DisableOption(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _read(argv:list<str>) -> int
static PyObject* wrapRead_as__read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("argv"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_read", names, &a[0])) return nullptr;
  ::std::vector< ::std::string> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_read", names[0], "::std::vector< ::std::string>", a[0]);
  // Call actual C++ method.
  ::kaldi::ParseOptionsExt* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Read(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// print_usage(print_command_line:bool=default)
static PyObject* wrapPrintUsage_as_print_usage(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("print_command_line"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:print_usage", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  bool arg1;
  if (nargs > 0) {
    if (!a[0]) arg1 = (bool)false;
    else if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("print_usage", names[0], "bool", a[0]);
  }
  // Call actual C++ method.
  ::kaldi::ParseOptionsExt* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    c->PrintUsage(); break;
  case 1:
    c->PrintUsage(std::move(arg1)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// print_config()
static PyObject* wrapPrintConfig_as_print_config(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::ParseOptionsExt* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->PrintConfig();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read_config_file(filename:str)
static PyObject* wrapReadConfigFile_as_read_config_file(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("filename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:read_config_file", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read_config_file", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::ParseOptionsExt* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ReadConfigFile(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// num_args() -> int
static PyObject* wrapNumArgs_as_num_args(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::ParseOptionsExt* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumArgs();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_arg(param:int) -> str
static PyObject* wrapGetArg_as_get_arg(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("param"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_arg", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_arg", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::ParseOptionsExt* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetArg(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// get_opt_arg(param:int) -> str
static PyObject* wrapGetOptArg_as_get_opt_arg(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("param"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_opt_arg", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_opt_arg", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::ParseOptionsExt* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetOptArg(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

namespace py_Options {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::ParseOptionsExt::Options> cpp;
};
static ::kaldi::ParseOptionsExt::Options* ThisPtr(PyObject*);

static PyObject* get_bool_map(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->bool_map, {_1,_0});
}

static int set_bool_map(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the bool_map attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->bool_map)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for bool_map:dict<str, bool>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_int_map(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->int_map, {_1,_0});
}

static int set_int_map(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the int_map attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->int_map)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for int_map:dict<str, int>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_uint_map(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->uint_map, {_1,_0});
}

static int set_uint_map(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the uint_map attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->uint_map)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for uint_map:dict<str, int>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_float_map(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->float_map, {_1,_0});
}

static int set_float_map(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the float_map attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->float_map)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for float_map:dict<str, float>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_double_map(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->double_map, {_1,_0});
}

static int set_double_map(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the double_map attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->double_map)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for double_map:dict<str, float>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_str_map(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->str_map, {_1,_1});
}

static int set_str_map(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the str_map attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->str_map)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for str_map:dict<str, str>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("bool_map"), get_bool_map, set_bool_map, C("C++ ::std::map< ::std::string, bool> ParseOptionsExt::Options.bool_map")},
  {C("int_map"), get_int_map, set_int_map, C("C++ ::std::map< ::std::string, ::int32> ParseOptionsExt::Options.int_map")},
  {C("uint_map"), get_uint_map, set_uint_map, C("C++ ::std::map< ::std::string, ::uint32> ParseOptionsExt::Options.uint_map")},
  {C("float_map"), get_float_map, set_float_map, C("C++ ::std::map< ::std::string, float> ParseOptionsExt::Options.float_map")},
  {C("double_map"), get_double_map, set_double_map, C("C++ ::std::map< ::std::string, double> ParseOptionsExt::Options.double_map")},
  {C("str_map"), get_str_map, set_str_map, C("C++ ::std::map< ::std::string, ::std::string> ParseOptionsExt::Options.str_map")},
  {}
};

// _Options __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// _Options __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// _Options __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_options_ext.ParseOptions._Options", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::ParseOptionsExt::Options", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  nullptr,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "_Options takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::ParseOptionsExt::Options>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::ParseOptionsExt::Options* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_ParseOptionsExt_Options"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::ParseOptionsExt::Options"));
      if (!PyErr_Occurred()) {
        ::kaldi::ParseOptionsExt::Options* c = static_cast<::kaldi::ParseOptionsExt::Options*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::ParseOptionsExt::Options*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace py_Options

// _get_options() -> _Options
static PyObject* wrapGetOptions_as__get_options(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::ParseOptionsExt* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::ParseOptionsExt::Options ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetOptions();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod escape(str:str) -> str
static PyObject* wrapEscape_as_escape(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("str"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:escape", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("escape", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::ParseOptions::Escape(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// Implicit cast this as ::kaldi::ParseOptions*
static PyObject* as_kaldi_ParseOptions(PyObject* self) {
  ::kaldi::ParseOptions* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::ParseOptions"), nullptr);
}

// Implicit cast this as ::kaldi::OptionsItf*
static PyObject* as_kaldi_OptionsItf(PyObject* self) {
  ::kaldi::OptionsItf* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::OptionsItf"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapParseOptionsExt_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(usage:str)\n  Calls C++ function\n  void ::kaldi::ParseOptionsExt::ParseOptionsExt(::std::string)")},
  {C("with_prefix"), (PyCFunction)wrapParseOptionsExt_as_with_prefix, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("with_prefix(prefix:str, other:OptionsItf) -> ParseOptions\n\nCreates a new child parser with the given prefix.\n\nThis is a constructor for the special case where some options are\nregistered with a prefix to avoid conflicts. The object thus created\nwill only be used temporarily to register an options class with the\nparent options parser (which is passed as `other`) using the given\nprefix. It should not be used for any other purpose, and the prefix\nmust not be the empty string.\n\nArgs:\n  prefix (str): Prefix for the child parser.\n  other (str): Parent parser.\n\nExample:\n  To register and parse MFCC options with the prefix `mfcc`, e.g.,\n  `--mfcc.frame-shift=10.0` instead of just `--frame-shift=10.0`::\n\n    po = ParseOptions()\n    po_mfcc = ParseOptions.with_prefix(\"mfcc\", po)\n    mfcc_opts = MfccOptions()\n    mfcc_opts.register(po_mfcc)\n    opts = po.parse_args()")},
  {C("register_bool"), (PyCFunction)wrapRegisterBool_as_register_bool, METH_VARARGS | METH_KEYWORDS, C("register_bool(name:str, value:bool, doc:str)\n\nRegisters a Boolean option.\n\nArgs:\n  name (str): Option name.\n  value (bool): Default value.\n  doc (str): Option description.")},
  {C("register_int"), (PyCFunction)wrapRegisterInt_as_register_int, METH_VARARGS | METH_KEYWORDS, C("register_int(name:str, value:int, doc:str)\n\nRegisters an integer option.\n\nArgs:\n  name (str): Option name.\n  value (int): Default value.\n  doc (str): Option description.")},
  {C("register_uint"), (PyCFunction)wrapRegisterUInt_as_register_uint, METH_VARARGS | METH_KEYWORDS, C("register_uint(name:str, value:int, doc:str)\n\nRegisters an unsigned integer option.\n\nArgs:\n  name (str): Option name.\n  value (int): Default value.\n  doc (str): Option description.")},
  {C("register_float"), (PyCFunction)wrapRegisterFloat_as_register_float, METH_VARARGS | METH_KEYWORDS, C("register_float(name:str, value:float, doc:str)\n\nRegisters a single precision float option.\n\nArgs:\n  name (str): Option name.\n  value (float): Default value.\n  doc (str): Option description.")},
  {C("register_double"), (PyCFunction)wrapRegisterDouble_as_register_double, METH_VARARGS | METH_KEYWORDS, C("register_double(name:str, value:float, doc:str)\n\nRegisters a double precision float option.\n\nArgs:\n  name (str): Option name.\n  value (float): Default value.\n  doc (str): Option description.")},
  {C("register_str"), (PyCFunction)wrapRegisterString_as_register_str, METH_VARARGS | METH_KEYWORDS, C("register_str(name:str, value:str, doc:str)\n\nRegisters a string option.\n\nArgs:\n  name (str): Option name.\n  value (str): Default value.\n  doc (str): Option description.")},
  {C("disable_option"), (PyCFunction)wrapDisableOption_as_disable_option, METH_VARARGS | METH_KEYWORDS, C("disable_option(name:str)\n\nDisables an option.\n\nIf called after registering an option and before calling `parse_args`,\ndisables that option from being used.\n\nArgs:\n  name (str): Option name.\n\nRaises:\n  RuntimeError: If given option had not been registered.")},
  {C("_read"), (PyCFunction)wrapRead_as__read, METH_VARARGS | METH_KEYWORDS, C("_read(argv:list<str>) -> int\n  Calls C++ function\n  int ::kaldi::ParseOptionsExt::Read(::std::vector< ::std::string>)")},
  {C("print_usage"), (PyCFunction)wrapPrintUsage_as_print_usage, METH_VARARGS | METH_KEYWORDS, C("print_usage(print_command_line:bool=default)\n\nPrints the usage string.\n\nArgs:\n  print_command_line (bool): Prints the command line.")},
  {C("print_config"), (PyCFunction)wrapPrintConfig_as_print_config, METH_NOARGS, C("print_config()\n\nPrints the actual configuration of all registered options.")},
  {C("read_config_file"), (PyCFunction)wrapReadConfigFile_as_read_config_file, METH_VARARGS | METH_KEYWORDS, C("read_config_file(filename:str)\n\nReads configuration from file.\n\nArgs:\n  filename (str) : Config file location.")},
  {C("num_args"), (PyCFunction)wrapNumArgs_as_num_args, METH_NOARGS, C("num_args() -> int\n\nReturns the actual number of positional arguments.")},
  {C("get_arg"), (PyCFunction)wrapGetArg_as_get_arg, METH_VARARGS | METH_KEYWORDS, C("get_arg(param:int) -> str\n\nReturns a required positional argument.\n\nArgs:\n  param (int): 1-based index position for the argument.\n\nRaises:\n  RuntimeError: If `param < 1` or `param > self.numargs()`.")},
  {C("get_opt_arg"), (PyCFunction)wrapGetOptArg_as_get_opt_arg, METH_VARARGS | METH_KEYWORDS, C("get_opt_arg(param:int) -> str\n\nReturns an optional positional argument.\n\nArgs:\n  param (int): 1-based index position for the argument.\n\nReturns:\n  The argument at the given position if `param <= self.num_args()`,\n  empty string otherwise.")},
  {C("_get_options"), (PyCFunction)wrapGetOptions_as__get_options, METH_NOARGS, C("_get_options() -> _Options\n  Calls C++ function\n  ::kaldi::ParseOptionsExt::Options ::kaldi::ParseOptionsExt::GetOptions()")},
  {C("escape"), (PyCFunction)wrapEscape_as_escape, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("escape(str:str) -> str\n\nReturns a quoted and escaped version of given string.")},
  {C("as_kaldi_ParseOptions"), (PyCFunction)as_kaldi_ParseOptions, METH_NOARGS, C("Upcast to ::kaldi::ParseOptions*")},
  {C("as_kaldi_OptionsItf"), (PyCFunction)as_kaldi_OptionsItf, METH_NOARGS, C("Upcast to ::kaldi::OptionsItf*")},
  {}
};

// ParseOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ParseOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ParseOptions __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_options_ext.ParseOptions",         // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::ParseOptionsExt", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapParseOptionsExt_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::ParseOptionsExt* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_ParseOptionsExt"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::ParseOptionsExt"));
      if (!PyErr_Occurred()) {
        ::kaldi::ParseOptionsExt* c = static_cast<::kaldi::ParseOptionsExt*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::ParseOptionsExt*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyParseOptions


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyParseOptions::py_Options::wrapper_Type) < 0) return false;
  Py_INCREF(&pyParseOptions::py_Options::wrapper_Type);  // For PyModule_AddObject to steal.
  PyObject* base_cls = ImportFQName("kaldi.itf._options_itf.OptionsItf");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._options_itf.OptionsItf is not a new style class inheriting from object.");
    return false;
  }
  pyParseOptions::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyParseOptions::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._options_itf.OptionsItf is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyParseOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyParseOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_options_ext",  // module name
  "CLIF-generated module for util/options-ext.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyDict_SetItemString(pyParseOptions::wrapper_Type.tp_dict, "_Options", reinterpret_cast<PyObject*>(&pyParseOptions::py_Options::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "ParseOptions", reinterpret_cast<PyObject*>(&pyParseOptions::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __options__ext_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// ParseOptions to/from ::kaldi::ParseOptionsExt conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::ParseOptionsExt** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::ParseOptionsExt* cpp = __options__ext_clifwrap::pyParseOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::ParseOptionsExt>* c) {
  assert(c != nullptr);
  ::kaldi::ParseOptionsExt* cpp = __options__ext_clifwrap::pyParseOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__options__ext_clifwrap::pyParseOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::ParseOptionsExt>* c) {
  assert(c != nullptr);
  ::kaldi::ParseOptionsExt* cpp = __options__ext_clifwrap::pyParseOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__options__ext_clifwrap::pyParseOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ParseOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::ParseOptionsExt* c) {
  assert(c != nullptr);
  ::kaldi::ParseOptionsExt* cpp = __options__ext_clifwrap::pyParseOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::ParseOptionsExt>* c) {
  assert(c != nullptr);
  ::kaldi::ParseOptionsExt* cpp = __options__ext_clifwrap::pyParseOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::ParseOptionsExt* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__options__ext_clifwrap::pyParseOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__options__ext_clifwrap::pyParseOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ParseOptionsExt>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::ParseOptionsExt> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__options__ext_clifwrap::pyParseOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__options__ext_clifwrap::pyParseOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ParseOptionsExt>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::ParseOptionsExt> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__options__ext_clifwrap::pyParseOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__options__ext_clifwrap::pyParseOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ParseOptionsExt>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::ParseOptionsExt& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__options__ext_clifwrap::pyParseOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__options__ext_clifwrap::pyParseOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::ParseOptionsExt>(c);
  return py;
}

// ParseOptions._Options to/from ::kaldi::ParseOptionsExt::Options conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::ParseOptionsExt::Options** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::ParseOptionsExt::Options* cpp = __options__ext_clifwrap::pyParseOptions::py_Options::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::ParseOptionsExt::Options>* c) {
  assert(c != nullptr);
  ::kaldi::ParseOptionsExt::Options* cpp = __options__ext_clifwrap::pyParseOptions::py_Options::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__options__ext_clifwrap::pyParseOptions::py_Options::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::ParseOptionsExt::Options>* c) {
  assert(c != nullptr);
  ::kaldi::ParseOptionsExt::Options* cpp = __options__ext_clifwrap::pyParseOptions::py_Options::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__options__ext_clifwrap::pyParseOptions::py_Options::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ParseOptions._Options instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::ParseOptionsExt::Options* c) {
  assert(c != nullptr);
  ::kaldi::ParseOptionsExt::Options* cpp = __options__ext_clifwrap::pyParseOptions::py_Options::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::ParseOptionsExt::Options>* c) {
  assert(c != nullptr);
  ::kaldi::ParseOptionsExt::Options* cpp = __options__ext_clifwrap::pyParseOptions::py_Options::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::ParseOptionsExt::Options* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__options__ext_clifwrap::pyParseOptions::py_Options::wrapper_Type, NULL, NULL);
  reinterpret_cast<__options__ext_clifwrap::pyParseOptions::py_Options::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ParseOptionsExt::Options>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::ParseOptionsExt::Options> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__options__ext_clifwrap::pyParseOptions::py_Options::wrapper_Type, NULL, NULL);
  reinterpret_cast<__options__ext_clifwrap::pyParseOptions::py_Options::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ParseOptionsExt::Options>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::ParseOptionsExt::Options> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__options__ext_clifwrap::pyParseOptions::py_Options::wrapper_Type, NULL, NULL);
  reinterpret_cast<__options__ext_clifwrap::pyParseOptions::py_Options::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ParseOptionsExt::Options>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::ParseOptionsExt::Options& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__options__ext_clifwrap::pyParseOptions::py_Options::wrapper_Type, NULL, NULL);
  reinterpret_cast<__options__ext_clifwrap::pyParseOptions::py_Options::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::ParseOptionsExt::Options>(c);
  return py;
}

}  // namespace kaldi
