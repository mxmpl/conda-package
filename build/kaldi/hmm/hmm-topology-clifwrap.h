//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/hmm/hmm-topology.clif

#include <memory>
#include "clif/python/optional.h"
#include "hmm/hmm-topology.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::HmmTopology` as HmmTopology
bool Clif_PyObjAs(PyObject* input, ::kaldi::HmmTopology** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::HmmTopology>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::HmmTopology>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::HmmTopology* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::HmmTopology>* output);
PyObject* Clif_PyObjFrom(::kaldi::HmmTopology*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::HmmTopology>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::HmmTopology>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::HmmTopology&, py::PostConv);
// CLIF use `::kaldi::HmmTopology::HmmState` as HmmTopology.HmmState
bool Clif_PyObjAs(PyObject* input, ::kaldi::HmmTopology::HmmState** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::HmmTopology::HmmState>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::HmmTopology::HmmState>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::HmmTopology::HmmState* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::HmmTopology::HmmState>* output);
PyObject* Clif_PyObjFrom(::kaldi::HmmTopology::HmmState*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::HmmTopology::HmmState>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::HmmTopology::HmmState>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::HmmTopology::HmmState&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_hmm_topology")) Py_DECREF(m);
// CLIF init_module else goto err;
