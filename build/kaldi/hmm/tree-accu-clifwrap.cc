//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/hmm/tree-accu.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "itf/options-itf-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "tree/clusterable-classes-clifwrap.h"
#include "hmm/transition-model-clifwrap.h"
#include "tree-accu-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __tree__accu_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyAccumulateTreeStatsOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::AccumulateTreeStatsOptions> cpp;
};
static ::kaldi::AccumulateTreeStatsOptions* ThisPtr(PyObject*);

static PyObject* get_var_floor(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->var_floor, {});
}

static int set_var_floor(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the var_floor attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->var_floor)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for var_floor:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_ci_phones_str(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->ci_phones_str, _1);
}

static int set_ci_phones_str(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the ci_phones_str attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->ci_phones_str)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for ci_phones_str:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_phone_map_rxfilename(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->phone_map_rxfilename, _1);
}

static int set_phone_map_rxfilename(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the phone_map_rxfilename attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->phone_map_rxfilename)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for phone_map_rxfilename:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_collapse_pdf_classes(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->collapse_pdf_classes, {});
}

static int set_collapse_pdf_classes(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the collapse_pdf_classes attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->collapse_pdf_classes)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for collapse_pdf_classes:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_context_width(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->context_width, {});
}

static int set_context_width(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the context_width attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->context_width)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for context_width:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_central_position(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->central_position, {});
}

static int set_central_position(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the central_position attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->central_position)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for central_position:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::AccumulateTreeStatsOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("var_floor"), get_var_floor, set_var_floor, C("C++ ::kaldi::BaseFloat AccumulateTreeStatsOptions.var_floor")},
  {C("ci_phones_str"), get_ci_phones_str, set_ci_phones_str, C("C++ ::std::string AccumulateTreeStatsOptions.ci_phones_str")},
  {C("phone_map_rxfilename"), get_phone_map_rxfilename, set_phone_map_rxfilename, C("C++ ::std::string AccumulateTreeStatsOptions.phone_map_rxfilename")},
  {C("collapse_pdf_classes"), get_collapse_pdf_classes, set_collapse_pdf_classes, C("C++ bool AccumulateTreeStatsOptions.collapse_pdf_classes")},
  {C("context_width"), get_context_width, set_context_width, C("C++ int AccumulateTreeStatsOptions.context_width")},
  {C("central_position"), get_central_position, set_central_position, C("C++ int AccumulateTreeStatsOptions.central_position")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::AccumulateTreeStatsOptions::Register(::kaldi::OptionsItf *)")},
  {}
};

// AccumulateTreeStatsOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// AccumulateTreeStatsOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// AccumulateTreeStatsOptions __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_tree_accu.AccumulateTreeStatsOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::AccumulateTreeStatsOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "AccumulateTreeStatsOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::AccumulateTreeStatsOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::AccumulateTreeStatsOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_AccumulateTreeStatsOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::AccumulateTreeStatsOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::AccumulateTreeStatsOptions* c = static_cast<::kaldi::AccumulateTreeStatsOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::AccumulateTreeStatsOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyAccumulateTreeStatsOptions

namespace pyAccumulateTreeStatsInfo {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::AccumulateTreeStatsInfo> cpp;
};
static ::kaldi::AccumulateTreeStatsInfo* ThisPtr(PyObject*);

static PyObject* get_var_floor(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->var_floor, {});
}

static int set_var_floor(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the var_floor attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->var_floor)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for var_floor:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_ci_phones(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->ci_phones, {});
}

static int set_ci_phones(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the ci_phones attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->ci_phones)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for ci_phones:list<int>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_phone_map(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->phone_map, {});
}

static int set_phone_map(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the phone_map attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->phone_map)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for phone_map:list<int>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_context_width(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->context_width, {});
}

static int set_context_width(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the context_width attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->context_width)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for context_width:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_central_position(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->central_position, {});
}

static int set_central_position(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the central_position attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->central_position)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for central_position:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// __init__(opts:AccumulateTreeStatsOptions)
static PyObject* wrapAccumulateTreeStatsInfo_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::kaldi::AccumulateTreeStatsOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::AccumulateTreeStatsOptions", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::AccumulateTreeStatsInfo>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("var_floor"), get_var_floor, set_var_floor, C("C++ ::kaldi::BaseFloat AccumulateTreeStatsInfo.var_floor")},
  {C("ci_phones"), get_ci_phones, set_ci_phones, C("C++ ::std::vector< ::int32> AccumulateTreeStatsInfo.ci_phones")},
  {C("phone_map"), get_phone_map, set_phone_map, C("C++ ::std::vector< ::int32> AccumulateTreeStatsInfo.phone_map")},
  {C("context_width"), get_context_width, set_context_width, C("C++ ::int32 AccumulateTreeStatsInfo.context_width")},
  {C("central_position"), get_central_position, set_central_position, C("C++ ::int32 AccumulateTreeStatsInfo.central_position")},
  {}
};

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapAccumulateTreeStatsInfo_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(opts:AccumulateTreeStatsOptions)\n  Calls C++ function\n  void ::kaldi::AccumulateTreeStatsInfo::AccumulateTreeStatsInfo(::kaldi::AccumulateTreeStatsOptions)")},
  {}
};

// AccumulateTreeStatsInfo __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// AccumulateTreeStatsInfo __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// AccumulateTreeStatsInfo __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_tree_accu.AccumulateTreeStatsInfo", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::AccumulateTreeStatsInfo", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapAccumulateTreeStatsInfo_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::AccumulateTreeStatsInfo* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_AccumulateTreeStatsInfo"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::AccumulateTreeStatsInfo"));
      if (!PyErr_Occurred()) {
        ::kaldi::AccumulateTreeStatsInfo* c = static_cast<::kaldi::AccumulateTreeStatsInfo*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::AccumulateTreeStatsInfo*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyAccumulateTreeStatsInfo

// accumulate_tree_stats(trans_model:TransitionModel, info:AccumulateTreeStatsInfo, alignment:list<int>, features:Matrix) -> dict<list<tuple<int, int>>, GaussClusterable>
static PyObject* wrapAccumulateTreeStats_as_accumulate_tree_stats(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("trans_model"),
      C("info"),
      C("alignment"),
      C("features"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:accumulate_tree_stats", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::TransitionModel* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_tree_stats", names[0], "::kaldi::TransitionModel", a[0]);
  ::kaldi::AccumulateTreeStatsInfo* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_tree_stats", names[1], "::kaldi::AccumulateTreeStatsInfo", a[1]);
  ::std::vector< ::int32> arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate_tree_stats", names[2], "::std::vector< ::int32>", a[2]);
  ::kaldi::Matrix<float>* arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("accumulate_tree_stats", names[3], "::kaldi::Matrix<float>", a[3]);
  ::std::map< ::kaldi::EventType, ::kaldi::GaussClusterable *> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::AccumulateTreeStats(*arg1, *arg2, std::move(arg3), *arg4, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// read_phone_map(phone_map_rxfilename:str) -> list<int>
static PyObject* wrapReadPhoneMap_as_read_phone_map(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("phone_map_rxfilename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:read_phone_map", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read_phone_map", names[0], "::std::string", a[0]);
  ::std::vector< ::int32> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::ReadPhoneMap(std::move(arg1), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("accumulate_tree_stats"), (PyCFunction)wrapAccumulateTreeStats_as_accumulate_tree_stats, METH_VARARGS | METH_KEYWORDS, C("accumulate_tree_stats(trans_model:TransitionModel, info:AccumulateTreeStatsInfo, alignment:list<int>, features:Matrix) -> dict<list<tuple<int, int>>, GaussClusterable>\n  Calls C++ function\n  void ::kaldi::AccumulateTreeStats(::kaldi::TransitionModel, ::kaldi::AccumulateTreeStatsInfo, ::std::vector< ::int32>, ::kaldi::Matrix<float>, ::std::map< ::kaldi::EventType, ::kaldi::GaussClusterable *>*)")},
  {C("read_phone_map"), (PyCFunction)wrapReadPhoneMap_as_read_phone_map, METH_VARARGS | METH_KEYWORDS, C("read_phone_map(phone_map_rxfilename:str) -> list<int>\n  Calls C++ function\n  void ::kaldi::ReadPhoneMap(::std::string, ::std::vector< ::int32>*)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyAccumulateTreeStatsOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyAccumulateTreeStatsOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyAccumulateTreeStatsInfo::wrapper_Type) < 0) return false;
  Py_INCREF(&pyAccumulateTreeStatsInfo::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_tree_accu",  // module name
  "CLIF-generated module for hmm/tree-accu.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_clusterable_classes")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_transition_model")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "AccumulateTreeStatsOptions", reinterpret_cast<PyObject*>(&pyAccumulateTreeStatsOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "AccumulateTreeStatsInfo", reinterpret_cast<PyObject*>(&pyAccumulateTreeStatsInfo::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __tree__accu_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// AccumulateTreeStatsInfo to/from ::kaldi::AccumulateTreeStatsInfo conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::AccumulateTreeStatsInfo** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::AccumulateTreeStatsInfo* cpp = __tree__accu_clifwrap::pyAccumulateTreeStatsInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::AccumulateTreeStatsInfo>* c) {
  assert(c != nullptr);
  ::kaldi::AccumulateTreeStatsInfo* cpp = __tree__accu_clifwrap::pyAccumulateTreeStatsInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__tree__accu_clifwrap::pyAccumulateTreeStatsInfo::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::AccumulateTreeStatsInfo>* c) {
  assert(c != nullptr);
  ::kaldi::AccumulateTreeStatsInfo* cpp = __tree__accu_clifwrap::pyAccumulateTreeStatsInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__tree__accu_clifwrap::pyAccumulateTreeStatsInfo::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert AccumulateTreeStatsInfo instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::AccumulateTreeStatsInfo* c) {
  assert(c != nullptr);
  ::kaldi::AccumulateTreeStatsInfo* cpp = __tree__accu_clifwrap::pyAccumulateTreeStatsInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::AccumulateTreeStatsInfo>* c) {
  assert(c != nullptr);
  ::kaldi::AccumulateTreeStatsInfo* cpp = __tree__accu_clifwrap::pyAccumulateTreeStatsInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::AccumulateTreeStatsInfo* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__tree__accu_clifwrap::pyAccumulateTreeStatsInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__tree__accu_clifwrap::pyAccumulateTreeStatsInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::AccumulateTreeStatsInfo>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::AccumulateTreeStatsInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__tree__accu_clifwrap::pyAccumulateTreeStatsInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__tree__accu_clifwrap::pyAccumulateTreeStatsInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::AccumulateTreeStatsInfo>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::AccumulateTreeStatsInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__tree__accu_clifwrap::pyAccumulateTreeStatsInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__tree__accu_clifwrap::pyAccumulateTreeStatsInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::AccumulateTreeStatsInfo>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::AccumulateTreeStatsInfo& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__tree__accu_clifwrap::pyAccumulateTreeStatsInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__tree__accu_clifwrap::pyAccumulateTreeStatsInfo::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::AccumulateTreeStatsInfo>(c);
  return py;
}

// AccumulateTreeStatsOptions to/from ::kaldi::AccumulateTreeStatsOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::AccumulateTreeStatsOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::AccumulateTreeStatsOptions* cpp = __tree__accu_clifwrap::pyAccumulateTreeStatsOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::AccumulateTreeStatsOptions>* c) {
  assert(c != nullptr);
  ::kaldi::AccumulateTreeStatsOptions* cpp = __tree__accu_clifwrap::pyAccumulateTreeStatsOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__tree__accu_clifwrap::pyAccumulateTreeStatsOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::AccumulateTreeStatsOptions>* c) {
  assert(c != nullptr);
  ::kaldi::AccumulateTreeStatsOptions* cpp = __tree__accu_clifwrap::pyAccumulateTreeStatsOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__tree__accu_clifwrap::pyAccumulateTreeStatsOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert AccumulateTreeStatsOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::AccumulateTreeStatsOptions* c) {
  assert(c != nullptr);
  ::kaldi::AccumulateTreeStatsOptions* cpp = __tree__accu_clifwrap::pyAccumulateTreeStatsOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::AccumulateTreeStatsOptions>* c) {
  assert(c != nullptr);
  ::kaldi::AccumulateTreeStatsOptions* cpp = __tree__accu_clifwrap::pyAccumulateTreeStatsOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::AccumulateTreeStatsOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__tree__accu_clifwrap::pyAccumulateTreeStatsOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__tree__accu_clifwrap::pyAccumulateTreeStatsOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::AccumulateTreeStatsOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::AccumulateTreeStatsOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__tree__accu_clifwrap::pyAccumulateTreeStatsOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__tree__accu_clifwrap::pyAccumulateTreeStatsOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::AccumulateTreeStatsOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::AccumulateTreeStatsOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__tree__accu_clifwrap::pyAccumulateTreeStatsOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__tree__accu_clifwrap::pyAccumulateTreeStatsOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::AccumulateTreeStatsOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::AccumulateTreeStatsOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__tree__accu_clifwrap::pyAccumulateTreeStatsOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__tree__accu_clifwrap::pyAccumulateTreeStatsOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::AccumulateTreeStatsOptions>(c);
  return py;
}

}  // namespace kaldi
