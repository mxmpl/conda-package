//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/online2/online-feature-pipeline.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "itf/options-itf-clifwrap.h"
#include "feat/feature-mfcc-clifwrap.h"
#include "feat/feature-plp-clifwrap.h"
#include "feat/feature-fbank-clifwrap.h"
#include "feat/online-feature-clifwrap.h"
#include "feat/pitch-functions-clifwrap.h"
#include "feat/feature-functions-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "online-feature-pipeline-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __online__feature__pipeline_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyOnlineFeaturePipelineCommandLineConfig {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineFeaturePipelineCommandLineConfig> cpp;
};
static ::kaldi::OnlineFeaturePipelineCommandLineConfig* ThisPtr(PyObject*);

static PyObject* get_feature_type(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->feature_type, _1);
}

static int set_feature_type(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the feature_type attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->feature_type)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for feature_type:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_mfcc_config(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->mfcc_config, _1);
}

static int set_mfcc_config(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the mfcc_config attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->mfcc_config)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for mfcc_config:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_plp_config(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->plp_config, _1);
}

static int set_plp_config(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the plp_config attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->plp_config)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for plp_config:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_fbank_config(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->fbank_config, _1);
}

static int set_fbank_config(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the fbank_config attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->fbank_config)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for fbank_config:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_add_pitch(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->add_pitch, {});
}

static int set_add_pitch(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the add_pitch attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->add_pitch)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for add_pitch:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_pitch_config(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->pitch_config, _1);
}

static int set_pitch_config(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the pitch_config attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->pitch_config)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for pitch_config:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_pitch_process_config(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->pitch_process_config, _1);
}

static int set_pitch_process_config(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the pitch_process_config attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->pitch_process_config)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for pitch_process_config:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_cmvn_config(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->cmvn_config, _1);
}

static int set_cmvn_config(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the cmvn_config attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->cmvn_config)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for cmvn_config:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_global_cmvn_stats_rxfilename(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->global_cmvn_stats_rxfilename, _1);
}

static int set_global_cmvn_stats_rxfilename(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the global_cmvn_stats_rxfilename attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->global_cmvn_stats_rxfilename)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for global_cmvn_stats_rxfilename:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_add_deltas(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->add_deltas, {});
}

static int set_add_deltas(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the add_deltas attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->add_deltas)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for add_deltas:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_delta_config(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->delta_config, _1);
}

static int set_delta_config(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the delta_config attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->delta_config)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for delta_config:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_splice_feats(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->splice_feats, {});
}

static int set_splice_feats(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the splice_feats attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->splice_feats)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for splice_feats:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_splice_config(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->splice_config, _1);
}

static int set_splice_config(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the splice_config attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->splice_config)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for splice_config:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_lda_rxfilename(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->lda_rxfilename, _1);
}

static int set_lda_rxfilename(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the lda_rxfilename attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->lda_rxfilename)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for lda_rxfilename:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineFeaturePipelineCommandLineConfig* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("feature_type"), get_feature_type, set_feature_type, C("C++ ::std::string OnlineFeaturePipelineCommandLineConfig.feature_type")},
  {C("mfcc_config"), get_mfcc_config, set_mfcc_config, C("C++ ::std::string OnlineFeaturePipelineCommandLineConfig.mfcc_config")},
  {C("plp_config"), get_plp_config, set_plp_config, C("C++ ::std::string OnlineFeaturePipelineCommandLineConfig.plp_config")},
  {C("fbank_config"), get_fbank_config, set_fbank_config, C("C++ ::std::string OnlineFeaturePipelineCommandLineConfig.fbank_config")},
  {C("add_pitch"), get_add_pitch, set_add_pitch, C("C++ bool OnlineFeaturePipelineCommandLineConfig.add_pitch")},
  {C("pitch_config"), get_pitch_config, set_pitch_config, C("C++ ::std::string OnlineFeaturePipelineCommandLineConfig.pitch_config")},
  {C("pitch_process_config"), get_pitch_process_config, set_pitch_process_config, C("C++ ::std::string OnlineFeaturePipelineCommandLineConfig.pitch_process_config")},
  {C("cmvn_config"), get_cmvn_config, set_cmvn_config, C("C++ ::std::string OnlineFeaturePipelineCommandLineConfig.cmvn_config")},
  {C("global_cmvn_stats_rxfilename"), get_global_cmvn_stats_rxfilename, set_global_cmvn_stats_rxfilename, C("C++ ::std::string OnlineFeaturePipelineCommandLineConfig.global_cmvn_stats_rxfilename")},
  {C("add_deltas"), get_add_deltas, set_add_deltas, C("C++ bool OnlineFeaturePipelineCommandLineConfig.add_deltas")},
  {C("delta_config"), get_delta_config, set_delta_config, C("C++ ::std::string OnlineFeaturePipelineCommandLineConfig.delta_config")},
  {C("splice_feats"), get_splice_feats, set_splice_feats, C("C++ bool OnlineFeaturePipelineCommandLineConfig.splice_feats")},
  {C("splice_config"), get_splice_config, set_splice_config, C("C++ ::std::string OnlineFeaturePipelineCommandLineConfig.splice_config")},
  {C("lda_rxfilename"), get_lda_rxfilename, set_lda_rxfilename, C("C++ ::std::string OnlineFeaturePipelineCommandLineConfig.lda_rxfilename")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::OnlineFeaturePipelineCommandLineConfig::Register(::kaldi::OptionsItf *)")},
  {}
};

// OnlineFeaturePipelineCommandLineConfig __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlineFeaturePipelineCommandLineConfig __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineFeaturePipelineCommandLineConfig __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_feature_pipeline.OnlineFeaturePipelineCommandLineConfig", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineFeaturePipelineCommandLineConfig", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "OnlineFeaturePipelineCommandLineConfig takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineFeaturePipelineCommandLineConfig>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineFeaturePipelineCommandLineConfig* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineFeaturePipelineCommandLineConfig"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineFeaturePipelineCommandLineConfig"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineFeaturePipelineCommandLineConfig* c = static_cast<::kaldi::OnlineFeaturePipelineCommandLineConfig*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineFeaturePipelineCommandLineConfig*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineFeaturePipelineCommandLineConfig

namespace pyOnlineFeaturePipelineConfig {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineFeaturePipelineConfig> cpp;
};
static ::kaldi::OnlineFeaturePipelineConfig* ThisPtr(PyObject*);

static PyObject* get_feature_type(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->feature_type, _1);
}

static int set_feature_type(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the feature_type attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->feature_type)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for feature_type:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_mfcc_opts(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->mfcc_opts), {});
}

static int set_mfcc_opts(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the mfcc_opts attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->mfcc_opts)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for mfcc_opts:MfccOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_plp_opts(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->plp_opts), {});
}

static int set_plp_opts(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the plp_opts attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->plp_opts)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for plp_opts:PlpOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_fbank_opts(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->fbank_opts), {});
}

static int set_fbank_opts(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the fbank_opts attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->fbank_opts)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for fbank_opts:FbankOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_add_pitch(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->add_pitch, {});
}

static int set_add_pitch(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the add_pitch attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->add_pitch)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for add_pitch:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_pitch_opts(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->pitch_opts), {});
}

static int set_pitch_opts(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the pitch_opts attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->pitch_opts)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for pitch_opts:PitchExtractionOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_pitch_process_opts(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->pitch_process_opts), {});
}

static int set_pitch_process_opts(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the pitch_process_opts attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->pitch_process_opts)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for pitch_process_opts:ProcessPitchOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_cmvn_opts(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->cmvn_opts), {});
}

static int set_cmvn_opts(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the cmvn_opts attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->cmvn_opts)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for cmvn_opts:OnlineCmvnOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_add_deltas(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->add_deltas, {});
}

static int set_add_deltas(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the add_deltas attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->add_deltas)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for add_deltas:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_delta_opts(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->delta_opts), {});
}

static int set_delta_opts(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the delta_opts attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->delta_opts)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for delta_opts:DeltaFeaturesOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_splice_feats(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->splice_feats, {});
}

static int set_splice_feats(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the splice_feats attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->splice_feats)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for splice_feats:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_splice_opts(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->splice_opts), {});
}

static int set_splice_opts(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the splice_opts attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->splice_opts)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for splice_opts:OnlineSpliceOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_lda_rxfilename(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->lda_rxfilename, _1);
}

static int set_lda_rxfilename(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the lda_rxfilename attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->lda_rxfilename)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for lda_rxfilename:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_global_cmvn_stats_rxfilename(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->global_cmvn_stats_rxfilename, _1);
}

static int set_global_cmvn_stats_rxfilename(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the global_cmvn_stats_rxfilename attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->global_cmvn_stats_rxfilename)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for global_cmvn_stats_rxfilename:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// @classmethod new_with_config(cmdline_config:OnlineFeaturePipelineCommandLineConfig) -> OnlineFeaturePipelineConfig
static PyObject* wrapOnlineFeaturePipelineConfig_as_new_with_config(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("cmdline_config"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:new_with_config", names, &a[0])) return nullptr;
  ::kaldi::OnlineFeaturePipelineCommandLineConfig* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new_with_config", names[0], "::kaldi::OnlineFeaturePipelineCommandLineConfig", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::OnlineFeaturePipelineConfig> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::OnlineFeaturePipelineConfig>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// frame_shift_in_seconds() -> float
static PyObject* wrapFrameShiftInSeconds_as_frame_shift_in_seconds(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineFeaturePipelineConfig* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FrameShiftInSeconds();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyGetSetDef Properties[] = {
  {C("feature_type"), get_feature_type, set_feature_type, C("C++ ::std::string OnlineFeaturePipelineConfig.feature_type")},
  {C("mfcc_opts"), get_mfcc_opts, set_mfcc_opts, C("C++ ::kaldi::MfccOptions OnlineFeaturePipelineConfig.mfcc_opts")},
  {C("plp_opts"), get_plp_opts, set_plp_opts, C("C++ ::kaldi::PlpOptions OnlineFeaturePipelineConfig.plp_opts")},
  {C("fbank_opts"), get_fbank_opts, set_fbank_opts, C("C++ ::kaldi::FbankOptions OnlineFeaturePipelineConfig.fbank_opts")},
  {C("add_pitch"), get_add_pitch, set_add_pitch, C("C++ bool OnlineFeaturePipelineConfig.add_pitch")},
  {C("pitch_opts"), get_pitch_opts, set_pitch_opts, C("C++ ::kaldi::PitchExtractionOptions OnlineFeaturePipelineConfig.pitch_opts")},
  {C("pitch_process_opts"), get_pitch_process_opts, set_pitch_process_opts, C("C++ ::kaldi::ProcessPitchOptions OnlineFeaturePipelineConfig.pitch_process_opts")},
  {C("cmvn_opts"), get_cmvn_opts, set_cmvn_opts, C("C++ ::kaldi::OnlineCmvnOptions OnlineFeaturePipelineConfig.cmvn_opts")},
  {C("add_deltas"), get_add_deltas, set_add_deltas, C("C++ bool OnlineFeaturePipelineConfig.add_deltas")},
  {C("delta_opts"), get_delta_opts, set_delta_opts, C("C++ ::kaldi::DeltaFeaturesOptions OnlineFeaturePipelineConfig.delta_opts")},
  {C("splice_feats"), get_splice_feats, set_splice_feats, C("C++ bool OnlineFeaturePipelineConfig.splice_feats")},
  {C("splice_opts"), get_splice_opts, set_splice_opts, C("C++ ::kaldi::OnlineSpliceOptions OnlineFeaturePipelineConfig.splice_opts")},
  {C("lda_rxfilename"), get_lda_rxfilename, set_lda_rxfilename, C("C++ ::std::string OnlineFeaturePipelineConfig.lda_rxfilename")},
  {C("global_cmvn_stats_rxfilename"), get_global_cmvn_stats_rxfilename, set_global_cmvn_stats_rxfilename, C("C++ ::std::string OnlineFeaturePipelineConfig.global_cmvn_stats_rxfilename")},
  {}
};

static PyMethodDef Methods[] = {
  {C("new_with_config"), (PyCFunction)wrapOnlineFeaturePipelineConfig_as_new_with_config, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new_with_config(cmdline_config:OnlineFeaturePipelineCommandLineConfig) -> OnlineFeaturePipelineConfig\n  Calls C++ function\n  std::unique_ptr<::kaldi::OnlineFeaturePipelineConfig> ::kaldi::OnlineFeaturePipelineConfig::OnlineFeaturePipelineConfig(::kaldi::OnlineFeaturePipelineCommandLineConfig)")},
  {C("frame_shift_in_seconds"), (PyCFunction)wrapFrameShiftInSeconds_as_frame_shift_in_seconds, METH_NOARGS, C("frame_shift_in_seconds() -> float\n  Calls C++ function\n  float ::kaldi::OnlineFeaturePipelineConfig::FrameShiftInSeconds()")},
  {}
};

// OnlineFeaturePipelineConfig __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlineFeaturePipelineConfig __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineFeaturePipelineConfig __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_feature_pipeline.OnlineFeaturePipelineConfig", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineFeaturePipelineConfig", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "OnlineFeaturePipelineConfig takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineFeaturePipelineConfig>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineFeaturePipelineConfig* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineFeaturePipelineConfig"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineFeaturePipelineConfig"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineFeaturePipelineConfig* c = static_cast<::kaldi::OnlineFeaturePipelineConfig*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineFeaturePipelineConfig*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineFeaturePipelineConfig

namespace py_OnlineFeaturePipeline {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineFeaturePipeline> cpp;
};
static ::kaldi::OnlineFeaturePipeline* ThisPtr(PyObject*);

// __init__(config:OnlineFeaturePipelineConfig)
static PyObject* wrapOnlineFeaturePipeline_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("config"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::kaldi::OnlineFeaturePipelineConfig* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::OnlineFeaturePipelineConfig", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineFeaturePipeline>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineFeaturePipeline* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_last_frame(frame:int) -> bool
static PyObject* wrapIsLastFrame_as_is_last_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_last_frame", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_last_frame", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineFeaturePipeline* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsLastFrame(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_frames_ready() -> int
static PyObject* wrapNumFramesReady_as_num_frames_ready(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineFeaturePipeline* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFramesReady();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_frame(frame:int, feat:VectorBase)
static PyObject* wrapGetFrame_as_get_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("feat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_frame", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_frame", names[0], "int", a[0]);
  ::kaldi::VectorBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_frame", names[1], "::kaldi::VectorBase<float> *", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineFeaturePipeline* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetFrame(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _get_as_matrix() -> Matrix
static PyObject* wrapGetAsMatrix_as__get_as_matrix(PyObject* self) {
  ::kaldi::Matrix<float> ret0{};
  // Call actual C++ method.
  ::kaldi::OnlineFeaturePipeline* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetAsMatrix(&ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// freeze_cmvn()
static PyObject* wrapFreezeCmvn_as_freeze_cmvn(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineFeaturePipeline* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->FreezeCmvn();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_cmvn_state(cmvn_state:OnlineCmvnState)
static PyObject* wrapSetCmvnState_as_set_cmvn_state(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("cmvn_state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_cmvn_state", names, &a[0])) return nullptr;
  ::kaldi::OnlineCmvnState* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_cmvn_state", names[0], "::kaldi::OnlineCmvnState", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineFeaturePipeline* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetCmvnState(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// get_cmvn_state() -> OnlineCmvnState
static PyObject* wrapGetCmvnState_as_get_cmvn_state(PyObject* self) {
  ::kaldi::OnlineCmvnState ret0{};
  // Call actual C++ method.
  ::kaldi::OnlineFeaturePipeline* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetCmvnState(&ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// accept_waveform(sampling_rate:float, waveform:VectorBase)
static PyObject* wrapAcceptWaveform_as_accept_waveform(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("sampling_rate"),
      C("waveform"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:accept_waveform", names, &a[0], &a[1])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accept_waveform", names[0], "float", a[0]);
  ::kaldi::VectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accept_waveform", names[1], "::kaldi::VectorBase<float>", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineFeaturePipeline* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AcceptWaveform(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// frame_shift_in_seconds() -> float
static PyObject* wrapFrameShiftInSeconds_as_frame_shift_in_seconds(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineFeaturePipeline* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FrameShiftInSeconds();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// input_finished()
static PyObject* wrapInputFinished_as_input_finished(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineFeaturePipeline* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->InputFinished();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_transform(transform:MatrixBase)
static PyObject* wrapSetTransform_as_set_transform(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("transform"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_transform", names, &a[0])) return nullptr;
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_transform", names[0], "::kaldi::MatrixBase<float>", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineFeaturePipeline* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetTransform(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// have_fmllr_transform() -> bool
static PyObject* wrapHaveFmllrTransform_as_have_fmllr_transform(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineFeaturePipeline* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->HaveFmllrTransform();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _new() -> _OnlineFeaturePipeline
static PyObject* wrapNew_as__new(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineFeaturePipeline* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::gtl::optional<::kaldi::OnlineFeaturePipeline *> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->New();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0.value()), {});
}

// Implicit cast this as ::kaldi::OnlineFeatureInterface*
static PyObject* as_kaldi_OnlineFeatureInterface(PyObject* self) {
  ::kaldi::OnlineFeatureInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::OnlineFeatureInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapOnlineFeaturePipeline_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(config:OnlineFeaturePipelineConfig)\n  Calls C++ function\n  void ::kaldi::OnlineFeaturePipeline::OnlineFeaturePipeline(::kaldi::OnlineFeaturePipelineConfig)")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::OnlineFeaturePipeline::Dim()")},
  {C("is_last_frame"), (PyCFunction)wrapIsLastFrame_as_is_last_frame, METH_VARARGS | METH_KEYWORDS, C("is_last_frame(frame:int) -> bool\n  Calls C++ function\n  bool ::kaldi::OnlineFeaturePipeline::IsLastFrame(int)")},
  {C("num_frames_ready"), (PyCFunction)wrapNumFramesReady_as_num_frames_ready, METH_NOARGS, C("num_frames_ready() -> int\n  Calls C++ function\n  int ::kaldi::OnlineFeaturePipeline::NumFramesReady()")},
  {C("get_frame"), (PyCFunction)wrapGetFrame_as_get_frame, METH_VARARGS | METH_KEYWORDS, C("get_frame(frame:int, feat:VectorBase)\n  Calls C++ function\n  void ::kaldi::OnlineFeaturePipeline::GetFrame(int, ::kaldi::VectorBase<float> *)")},
  {C("_get_as_matrix"), (PyCFunction)wrapGetAsMatrix_as__get_as_matrix, METH_NOARGS, C("_get_as_matrix() -> Matrix\n  Calls C++ function\n  void ::kaldi::OnlineFeaturePipeline::GetAsMatrix(::kaldi::Matrix<float>*)")},
  {C("freeze_cmvn"), (PyCFunction)wrapFreezeCmvn_as_freeze_cmvn, METH_NOARGS, C("freeze_cmvn()\n  Calls C++ function\n  void ::kaldi::OnlineFeaturePipeline::FreezeCmvn()")},
  {C("set_cmvn_state"), (PyCFunction)wrapSetCmvnState_as_set_cmvn_state, METH_VARARGS | METH_KEYWORDS, C("set_cmvn_state(cmvn_state:OnlineCmvnState)\n  Calls C++ function\n  void ::kaldi::OnlineFeaturePipeline::SetCmvnState(::kaldi::OnlineCmvnState)")},
  {C("get_cmvn_state"), (PyCFunction)wrapGetCmvnState_as_get_cmvn_state, METH_NOARGS, C("get_cmvn_state() -> OnlineCmvnState\n  Calls C++ function\n  void ::kaldi::OnlineFeaturePipeline::GetCmvnState(::kaldi::OnlineCmvnState*)")},
  {C("accept_waveform"), (PyCFunction)wrapAcceptWaveform_as_accept_waveform, METH_VARARGS | METH_KEYWORDS, C("accept_waveform(sampling_rate:float, waveform:VectorBase)\n  Calls C++ function\n  void ::kaldi::OnlineFeaturePipeline::AcceptWaveform(float, ::kaldi::VectorBase<float>)")},
  {C("frame_shift_in_seconds"), (PyCFunction)wrapFrameShiftInSeconds_as_frame_shift_in_seconds, METH_NOARGS, C("frame_shift_in_seconds() -> float\n  Calls C++ function\n  float ::kaldi::OnlineFeaturePipeline::FrameShiftInSeconds()")},
  {C("input_finished"), (PyCFunction)wrapInputFinished_as_input_finished, METH_NOARGS, C("input_finished()\n\nTells the class that you wont be providing any more waveform")},
  {C("set_transform"), (PyCFunction)wrapSetTransform_as_set_transform, METH_VARARGS | METH_KEYWORDS, C("set_transform(transform:MatrixBase)\n\nThis is used to set the fMLLR transform")},
  {C("have_fmllr_transform"), (PyCFunction)wrapHaveFmllrTransform_as_have_fmllr_transform, METH_NOARGS, C("have_fmllr_transform() -> bool\n\nReturns true if an fMLLR transform has been set")},
  {C("_new"), (PyCFunction)wrapNew_as__new, METH_NOARGS, C("_new() -> _OnlineFeaturePipeline\n\nReturns a newly initialized copy of *this")},
  {C("as_kaldi_OnlineFeatureInterface"), (PyCFunction)as_kaldi_OnlineFeatureInterface, METH_NOARGS, C("Upcast to ::kaldi::OnlineFeatureInterface*")},
  {}
};

// _OnlineFeaturePipeline __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// _OnlineFeaturePipeline __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// _OnlineFeaturePipeline __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_feature_pipeline._OnlineFeaturePipeline", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineFeaturePipeline", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapOnlineFeaturePipeline_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineFeaturePipeline* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineFeaturePipeline"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineFeaturePipeline"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineFeaturePipeline* c = static_cast<::kaldi::OnlineFeaturePipeline*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineFeaturePipeline*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace py_OnlineFeaturePipeline


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyOnlineFeaturePipelineCommandLineConfig::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineFeaturePipelineCommandLineConfig::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyOnlineFeaturePipelineConfig::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineFeaturePipelineConfig::wrapper_Type);  // For PyModule_AddObject to steal.
  PyObject* base_cls = ImportFQName("kaldi.itf._online_feature_itf.OnlineFeatureInterface");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._online_feature_itf.OnlineFeatureInterface is not a new style class inheriting from object.");
    return false;
  }
  py_OnlineFeaturePipeline::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (py_OnlineFeaturePipeline::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._online_feature_itf.OnlineFeatureInterface is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&py_OnlineFeaturePipeline::wrapper_Type) < 0) return false;
  Py_INCREF(&py_OnlineFeaturePipeline::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_online_feature_pipeline",  // module name
  "CLIF-generated module for online2/online-feature-pipeline.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_feature_mfcc")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_feature_plp")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_feature_fbank")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_online_feature")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_pitch_functions")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_feature_functions")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "OnlineFeaturePipelineCommandLineConfig", reinterpret_cast<PyObject*>(&pyOnlineFeaturePipelineCommandLineConfig::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "OnlineFeaturePipelineConfig", reinterpret_cast<PyObject*>(&pyOnlineFeaturePipelineConfig::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "_OnlineFeaturePipeline", reinterpret_cast<PyObject*>(&py_OnlineFeaturePipeline::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __online__feature__pipeline_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// OnlineFeaturePipelineCommandLineConfig to/from ::kaldi::OnlineFeaturePipelineCommandLineConfig conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineFeaturePipelineCommandLineConfig** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineFeaturePipelineCommandLineConfig* cpp = __online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineCommandLineConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineFeaturePipelineCommandLineConfig>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineFeaturePipelineCommandLineConfig* cpp = __online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineCommandLineConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineCommandLineConfig::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineFeaturePipelineCommandLineConfig>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineFeaturePipelineCommandLineConfig* cpp = __online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineCommandLineConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineCommandLineConfig::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineFeaturePipelineCommandLineConfig instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineFeaturePipelineCommandLineConfig* c) {
  assert(c != nullptr);
  ::kaldi::OnlineFeaturePipelineCommandLineConfig* cpp = __online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineCommandLineConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::OnlineFeaturePipelineCommandLineConfig>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineFeaturePipelineCommandLineConfig* cpp = __online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineCommandLineConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineFeaturePipelineCommandLineConfig* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineCommandLineConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineCommandLineConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineFeaturePipelineCommandLineConfig>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineFeaturePipelineCommandLineConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineCommandLineConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineCommandLineConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineFeaturePipelineCommandLineConfig>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineFeaturePipelineCommandLineConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineCommandLineConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineCommandLineConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineFeaturePipelineCommandLineConfig>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::OnlineFeaturePipelineCommandLineConfig& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineCommandLineConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineCommandLineConfig::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::OnlineFeaturePipelineCommandLineConfig>(c);
  return py;
}

// OnlineFeaturePipelineConfig to/from ::kaldi::OnlineFeaturePipelineConfig conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineFeaturePipelineConfig** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineFeaturePipelineConfig* cpp = __online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineFeaturePipelineConfig>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineFeaturePipelineConfig* cpp = __online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineConfig::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineFeaturePipelineConfig>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineFeaturePipelineConfig* cpp = __online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineConfig::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineFeaturePipelineConfig instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineFeaturePipelineConfig* c) {
  assert(c != nullptr);
  ::kaldi::OnlineFeaturePipelineConfig* cpp = __online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::OnlineFeaturePipelineConfig>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineFeaturePipelineConfig* cpp = __online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineFeaturePipelineConfig* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineFeaturePipelineConfig>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineFeaturePipelineConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineFeaturePipelineConfig>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineFeaturePipelineConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineFeaturePipelineConfig>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::OnlineFeaturePipelineConfig& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature__pipeline_clifwrap::pyOnlineFeaturePipelineConfig::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::OnlineFeaturePipelineConfig>(c);
  return py;
}

// _OnlineFeaturePipeline to/from ::kaldi::OnlineFeaturePipeline conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineFeaturePipeline** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineFeaturePipeline* cpp = __online__feature__pipeline_clifwrap::py_OnlineFeaturePipeline::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineFeaturePipeline>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineFeaturePipeline* cpp = __online__feature__pipeline_clifwrap::py_OnlineFeaturePipeline::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__feature__pipeline_clifwrap::py_OnlineFeaturePipeline::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineFeaturePipeline>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineFeaturePipeline* cpp = __online__feature__pipeline_clifwrap::py_OnlineFeaturePipeline::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__feature__pipeline_clifwrap::py_OnlineFeaturePipeline::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert _OnlineFeaturePipeline instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineFeaturePipeline* c) {
  assert(c != nullptr);
  ::kaldi::OnlineFeaturePipeline* cpp = __online__feature__pipeline_clifwrap::py_OnlineFeaturePipeline::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::OnlineFeaturePipeline>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineFeaturePipeline* cpp = __online__feature__pipeline_clifwrap::py_OnlineFeaturePipeline::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineFeaturePipeline* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature__pipeline_clifwrap::py_OnlineFeaturePipeline::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature__pipeline_clifwrap::py_OnlineFeaturePipeline::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineFeaturePipeline>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineFeaturePipeline> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature__pipeline_clifwrap::py_OnlineFeaturePipeline::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature__pipeline_clifwrap::py_OnlineFeaturePipeline::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineFeaturePipeline>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineFeaturePipeline> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature__pipeline_clifwrap::py_OnlineFeaturePipeline::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature__pipeline_clifwrap::py_OnlineFeaturePipeline::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineFeaturePipeline>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::OnlineFeaturePipeline& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__online__feature__pipeline_clifwrap::py_OnlineFeaturePipeline::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature__pipeline_clifwrap::py_OnlineFeaturePipeline::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::OnlineFeaturePipeline>(c);
  return py;
}

}  // namespace kaldi
