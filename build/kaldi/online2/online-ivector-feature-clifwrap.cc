//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/online2/online-ivector-feature.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "itf/options-itf-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "gmm/diag-gmm-clifwrap.h"
#include "ivector/ivector-extractor-clifwrap.h"
#include "feat/online-feature-clifwrap.h"
#include "base/iostream-clifwrap.h"
#include "decoder/lattice-faster-online-decoder-clifwrap.h"
#include "itf/online-feature-itf-clifwrap.h"
#include "hmm/transition-model-clifwrap.h"
#include "online-ivector-feature-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __online__ivector__feature_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyOnlineIvectorExtractionConfig {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineIvectorExtractionConfig> cpp;
};
static ::kaldi::OnlineIvectorExtractionConfig* ThisPtr(PyObject*);

static PyObject* get_lda_mat_rxfilename(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->lda_mat_rxfilename, _1);
}

static int set_lda_mat_rxfilename(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the lda_mat_rxfilename attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->lda_mat_rxfilename)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for lda_mat_rxfilename:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_global_cmvn_stats_rxfilename(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->global_cmvn_stats_rxfilename, _1);
}

static int set_global_cmvn_stats_rxfilename(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the global_cmvn_stats_rxfilename attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->global_cmvn_stats_rxfilename)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for global_cmvn_stats_rxfilename:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_splice_config_rxfilename(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->splice_config_rxfilename, _1);
}

static int set_splice_config_rxfilename(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the splice_config_rxfilename attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->splice_config_rxfilename)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for splice_config_rxfilename:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_cmvn_config_rxfilename(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->cmvn_config_rxfilename, _1);
}

static int set_cmvn_config_rxfilename(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the cmvn_config_rxfilename attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->cmvn_config_rxfilename)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for cmvn_config_rxfilename:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_diag_ubm_rxfilename(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->diag_ubm_rxfilename, _1);
}

static int set_diag_ubm_rxfilename(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the diag_ubm_rxfilename attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->diag_ubm_rxfilename)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for diag_ubm_rxfilename:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_ivector_extractor_rxfilename(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->ivector_extractor_rxfilename, _1);
}

static int set_ivector_extractor_rxfilename(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the ivector_extractor_rxfilename attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->ivector_extractor_rxfilename)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for ivector_extractor_rxfilename:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_ivector_period(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->ivector_period, {});
}

static int set_ivector_period(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the ivector_period attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->ivector_period)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for ivector_period:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_num_gselect(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->num_gselect, {});
}

static int set_num_gselect(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the num_gselect attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->num_gselect)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for num_gselect:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_min_post(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->min_post, {});
}

static int set_min_post(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the min_post attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->min_post)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for min_post:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_posterior_scale(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->posterior_scale, {});
}

static int set_posterior_scale(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the posterior_scale attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->posterior_scale)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for posterior_scale:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_max_count(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->max_count, {});
}

static int set_max_count(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the max_count attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->max_count)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for max_count:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_num_cg_iters(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->num_cg_iters, {});
}

static int set_num_cg_iters(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the num_cg_iters attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->num_cg_iters)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for num_cg_iters:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_use_most_recent_ivector(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->use_most_recent_ivector, {});
}

static int set_use_most_recent_ivector(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the use_most_recent_ivector attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->use_most_recent_ivector)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for use_most_recent_ivector:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_greedy_ivector_extractor(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->greedy_ivector_extractor, {});
}

static int set_greedy_ivector_extractor(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the greedy_ivector_extractor attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->greedy_ivector_extractor)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for greedy_ivector_extractor:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_max_remembered_frames(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->max_remembered_frames, {});
}

static int set_max_remembered_frames(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the max_remembered_frames attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->max_remembered_frames)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for max_remembered_frames:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineIvectorExtractionConfig* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("lda_mat_rxfilename"), get_lda_mat_rxfilename, set_lda_mat_rxfilename, C("C++ ::std::string OnlineIvectorExtractionConfig.lda_mat_rxfilename")},
  {C("global_cmvn_stats_rxfilename"), get_global_cmvn_stats_rxfilename, set_global_cmvn_stats_rxfilename, C("C++ ::std::string OnlineIvectorExtractionConfig.global_cmvn_stats_rxfilename")},
  {C("splice_config_rxfilename"), get_splice_config_rxfilename, set_splice_config_rxfilename, C("C++ ::std::string OnlineIvectorExtractionConfig.splice_config_rxfilename")},
  {C("cmvn_config_rxfilename"), get_cmvn_config_rxfilename, set_cmvn_config_rxfilename, C("C++ ::std::string OnlineIvectorExtractionConfig.cmvn_config_rxfilename")},
  {C("diag_ubm_rxfilename"), get_diag_ubm_rxfilename, set_diag_ubm_rxfilename, C("C++ ::std::string OnlineIvectorExtractionConfig.diag_ubm_rxfilename")},
  {C("ivector_extractor_rxfilename"), get_ivector_extractor_rxfilename, set_ivector_extractor_rxfilename, C("C++ ::std::string OnlineIvectorExtractionConfig.ivector_extractor_rxfilename")},
  {C("ivector_period"), get_ivector_period, set_ivector_period, C("C++ ::int32 OnlineIvectorExtractionConfig.ivector_period")},
  {C("num_gselect"), get_num_gselect, set_num_gselect, C("C++ ::int32 OnlineIvectorExtractionConfig.num_gselect")},
  {C("min_post"), get_min_post, set_min_post, C("C++ ::kaldi::BaseFloat OnlineIvectorExtractionConfig.min_post")},
  {C("posterior_scale"), get_posterior_scale, set_posterior_scale, C("C++ ::kaldi::BaseFloat OnlineIvectorExtractionConfig.posterior_scale")},
  {C("max_count"), get_max_count, set_max_count, C("C++ ::kaldi::BaseFloat OnlineIvectorExtractionConfig.max_count")},
  {C("num_cg_iters"), get_num_cg_iters, set_num_cg_iters, C("C++ ::int32 OnlineIvectorExtractionConfig.num_cg_iters")},
  {C("use_most_recent_ivector"), get_use_most_recent_ivector, set_use_most_recent_ivector, C("C++ bool OnlineIvectorExtractionConfig.use_most_recent_ivector")},
  {C("greedy_ivector_extractor"), get_greedy_ivector_extractor, set_greedy_ivector_extractor, C("C++ bool OnlineIvectorExtractionConfig.greedy_ivector_extractor")},
  {C("max_remembered_frames"), get_max_remembered_frames, set_max_remembered_frames, C("C++ ::kaldi::BaseFloat OnlineIvectorExtractionConfig.max_remembered_frames")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::OnlineIvectorExtractionConfig::Register(::kaldi::OptionsItf *)")},
  {}
};

// OnlineIvectorExtractionConfig __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlineIvectorExtractionConfig __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineIvectorExtractionConfig __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_ivector_feature.OnlineIvectorExtractionConfig", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineIvectorExtractionConfig", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "OnlineIvectorExtractionConfig takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineIvectorExtractionConfig>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineIvectorExtractionConfig* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineIvectorExtractionConfig"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineIvectorExtractionConfig"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineIvectorExtractionConfig* c = static_cast<::kaldi::OnlineIvectorExtractionConfig*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineIvectorExtractionConfig*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineIvectorExtractionConfig

namespace py_OnlineIvectorExtractionInfo {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineIvectorExtractionInfo> cpp;
};
static ::kaldi::OnlineIvectorExtractionInfo* ThisPtr(PyObject*);

static PyObject* get_lda_mat(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->lda_mat), {});
}

static int set_lda_mat(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the _lda_mat attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->lda_mat)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for _lda_mat:Matrix", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_global_cmvn_stats(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->global_cmvn_stats), {});
}

static int set_global_cmvn_stats(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the _global_cmvn_stats attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->global_cmvn_stats)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for _global_cmvn_stats:DoubleMatrix", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_cmvn_opts(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->cmvn_opts), {});
}

static int set_cmvn_opts(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the cmvn_opts attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->cmvn_opts)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for cmvn_opts:OnlineCmvnOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_splice_opts(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->splice_opts), {});
}

static int set_splice_opts(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the splice_opts attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->splice_opts)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for splice_opts:OnlineSpliceOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_extractor(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->extractor), {});
}

static int set_extractor(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the extractor attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->extractor)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for extractor:IvectorExtractor", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_ivector_period(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->ivector_period, {});
}

static int set_ivector_period(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the ivector_period attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->ivector_period)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for ivector_period:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_num_gselect(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->num_gselect, {});
}

static int set_num_gselect(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the num_gselect attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->num_gselect)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for num_gselect:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_min_post(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->min_post, {});
}

static int set_min_post(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the min_post attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->min_post)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for min_post:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_posterior_scale(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->posterior_scale, {});
}

static int set_posterior_scale(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the posterior_scale attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->posterior_scale)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for posterior_scale:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_max_count(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->max_count, {});
}

static int set_max_count(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the max_count attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->max_count)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for max_count:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_num_cg_iters(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->num_cg_iters, {});
}

static int set_num_cg_iters(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the num_cg_iters attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->num_cg_iters)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for num_cg_iters:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_use_most_recent_ivector(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->use_most_recent_ivector, {});
}

static int set_use_most_recent_ivector(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the use_most_recent_ivector attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->use_most_recent_ivector)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for use_most_recent_ivector:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_greedy_ivector_extractor(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->greedy_ivector_extractor, {});
}

static int set_greedy_ivector_extractor(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the greedy_ivector_extractor attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->greedy_ivector_extractor)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for greedy_ivector_extractor:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_max_remembered_frames(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->max_remembered_frames, {});
}

static int set_max_remembered_frames(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the max_remembered_frames attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->max_remembered_frames)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for max_remembered_frames:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// @classmethod new_with_config(config:OnlineIvectorExtractionConfig) -> _OnlineIvectorExtractionInfo
static PyObject* wrapOnlineIvectorExtractionInfo_as_new_with_config(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("config"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:new_with_config", names, &a[0])) return nullptr;
  ::kaldi::OnlineIvectorExtractionConfig* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new_with_config", names[0], "::kaldi::OnlineIvectorExtractionConfig", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::OnlineIvectorExtractionInfo> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::OnlineIvectorExtractionInfo>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// init(config:OnlineIvectorExtractionConfig)
static PyObject* wrapInit_as_init(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("config"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:init", names, &a[0])) return nullptr;
  ::kaldi::OnlineIvectorExtractionConfig* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("init", names[0], "::kaldi::OnlineIvectorExtractionConfig", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineIvectorExtractionInfo* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Init(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// check()
static PyObject* wrapCheck_as_check(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineIvectorExtractionInfo* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Check();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("_lda_mat"), get_lda_mat, set_lda_mat, C("C++ ::kaldi::Matrix< ::kaldi::BaseFloat> OnlineIvectorExtractionInfo.lda_mat")},
  {C("_global_cmvn_stats"), get_global_cmvn_stats, set_global_cmvn_stats, C("C++ ::kaldi::Matrix<double> OnlineIvectorExtractionInfo.global_cmvn_stats")},
  {C("cmvn_opts"), get_cmvn_opts, set_cmvn_opts, C("C++ ::kaldi::OnlineCmvnOptions OnlineIvectorExtractionInfo.cmvn_opts")},
  {C("splice_opts"), get_splice_opts, set_splice_opts, C("C++ ::kaldi::OnlineSpliceOptions OnlineIvectorExtractionInfo.splice_opts")},
  {C("extractor"), get_extractor, set_extractor, C("C++ ::kaldi::IvectorExtractor OnlineIvectorExtractionInfo.extractor")},
  {C("ivector_period"), get_ivector_period, set_ivector_period, C("C++ ::int32 OnlineIvectorExtractionInfo.ivector_period")},
  {C("num_gselect"), get_num_gselect, set_num_gselect, C("C++ ::int32 OnlineIvectorExtractionInfo.num_gselect")},
  {C("min_post"), get_min_post, set_min_post, C("C++ ::kaldi::BaseFloat OnlineIvectorExtractionInfo.min_post")},
  {C("posterior_scale"), get_posterior_scale, set_posterior_scale, C("C++ ::kaldi::BaseFloat OnlineIvectorExtractionInfo.posterior_scale")},
  {C("max_count"), get_max_count, set_max_count, C("C++ ::kaldi::BaseFloat OnlineIvectorExtractionInfo.max_count")},
  {C("num_cg_iters"), get_num_cg_iters, set_num_cg_iters, C("C++ ::int32 OnlineIvectorExtractionInfo.num_cg_iters")},
  {C("use_most_recent_ivector"), get_use_most_recent_ivector, set_use_most_recent_ivector, C("C++ bool OnlineIvectorExtractionInfo.use_most_recent_ivector")},
  {C("greedy_ivector_extractor"), get_greedy_ivector_extractor, set_greedy_ivector_extractor, C("C++ bool OnlineIvectorExtractionInfo.greedy_ivector_extractor")},
  {C("max_remembered_frames"), get_max_remembered_frames, set_max_remembered_frames, C("C++ ::kaldi::BaseFloat OnlineIvectorExtractionInfo.max_remembered_frames")},
  {}
};

static PyMethodDef Methods[] = {
  {C("new_with_config"), (PyCFunction)wrapOnlineIvectorExtractionInfo_as_new_with_config, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new_with_config(config:OnlineIvectorExtractionConfig) -> _OnlineIvectorExtractionInfo\n  Calls C++ function\n  std::unique_ptr<::kaldi::OnlineIvectorExtractionInfo> ::kaldi::OnlineIvectorExtractionInfo::OnlineIvectorExtractionInfo(::kaldi::OnlineIvectorExtractionConfig)")},
  {C("init"), (PyCFunction)wrapInit_as_init, METH_VARARGS | METH_KEYWORDS, C("init(config:OnlineIvectorExtractionConfig)\n  Calls C++ function\n  void ::kaldi::OnlineIvectorExtractionInfo::Init(::kaldi::OnlineIvectorExtractionConfig)")},
  {C("check"), (PyCFunction)wrapCheck_as_check, METH_NOARGS, C("check()\n  Calls C++ function\n  void ::kaldi::OnlineIvectorExtractionInfo::Check()")},
  {}
};

// _OnlineIvectorExtractionInfo __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// _OnlineIvectorExtractionInfo __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// _OnlineIvectorExtractionInfo __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_ivector_feature._OnlineIvectorExtractionInfo", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineIvectorExtractionInfo", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "_OnlineIvectorExtractionInfo takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineIvectorExtractionInfo>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineIvectorExtractionInfo* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineIvectorExtractionInfo"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineIvectorExtractionInfo"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineIvectorExtractionInfo* c = static_cast<::kaldi::OnlineIvectorExtractionInfo*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineIvectorExtractionInfo*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace py_OnlineIvectorExtractionInfo

namespace pyOnlineIvectorExtractorAdaptationState {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineIvectorExtractorAdaptationState> cpp;
};
static ::kaldi::OnlineIvectorExtractorAdaptationState* ThisPtr(PyObject*);

static PyObject* get_cmvn_state(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->cmvn_state), {});
}

static int set_cmvn_state(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the cmvn_state attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->cmvn_state)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for cmvn_state:OnlineCmvnState", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_ivector_stats(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->ivector_stats), {});
}

static int set_ivector_stats(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the ivector_stats attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->ivector_stats)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for ivector_stats:OnlineIvectorEstimationStats", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// @classmethod new_with_info(info:_OnlineIvectorExtractionInfo) -> OnlineIvectorExtractorAdaptationState
static PyObject* wrapOnlineIvectorExtractorAdaptationState_as_new_with_info(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("info"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:new_with_info", names, &a[0])) return nullptr;
  ::kaldi::OnlineIvectorExtractionInfo* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new_with_info", names[0], "::kaldi::OnlineIvectorExtractionInfo", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::OnlineIvectorExtractorAdaptationState> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::OnlineIvectorExtractorAdaptationState>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod new_with_other(other:OnlineIvectorExtractorAdaptationState) -> OnlineIvectorExtractorAdaptationState
static PyObject* wrapOnlineIvectorExtractorAdaptationState_as_new_with_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:new_with_other", names, &a[0])) return nullptr;
  ::kaldi::OnlineIvectorExtractorAdaptationState* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new_with_other", names[0], "::kaldi::OnlineIvectorExtractorAdaptationState", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::OnlineIvectorExtractorAdaptationState> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::OnlineIvectorExtractorAdaptationState>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// limit_frames(max_remembered_frames:float, posterior_scale:float)
static PyObject* wrapLimitFrames_as_limit_frames(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("max_remembered_frames"),
      C("posterior_scale"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:limit_frames", names, &a[0], &a[1])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("limit_frames", names[0], "float", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("limit_frames", names[1], "float", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineIvectorExtractorAdaptationState* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->LimitFrames(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineIvectorExtractorAdaptationState* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(is:istream, binary:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineIvectorExtractorAdaptationState* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("cmvn_state"), get_cmvn_state, set_cmvn_state, C("C++ ::kaldi::OnlineCmvnState OnlineIvectorExtractorAdaptationState.cmvn_state")},
  {C("ivector_stats"), get_ivector_stats, set_ivector_stats, C("C++ ::kaldi::OnlineIvectorEstimationStats OnlineIvectorExtractorAdaptationState.ivector_stats")},
  {}
};

static PyMethodDef Methods[] = {
  {C("new_with_info"), (PyCFunction)wrapOnlineIvectorExtractorAdaptationState_as_new_with_info, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new_with_info(info:_OnlineIvectorExtractionInfo) -> OnlineIvectorExtractorAdaptationState\n  Calls C++ function\n  std::unique_ptr<::kaldi::OnlineIvectorExtractorAdaptationState> ::kaldi::OnlineIvectorExtractorAdaptationState::OnlineIvectorExtractorAdaptationState(::kaldi::OnlineIvectorExtractionInfo)")},
  {C("new_with_other"), (PyCFunction)wrapOnlineIvectorExtractorAdaptationState_as_new_with_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new_with_other(other:OnlineIvectorExtractorAdaptationState) -> OnlineIvectorExtractorAdaptationState\n  Calls C++ function\n  std::unique_ptr<::kaldi::OnlineIvectorExtractorAdaptationState> ::kaldi::OnlineIvectorExtractorAdaptationState::OnlineIvectorExtractorAdaptationState(::kaldi::OnlineIvectorExtractorAdaptationState)")},
  {C("limit_frames"), (PyCFunction)wrapLimitFrames_as_limit_frames, METH_VARARGS | METH_KEYWORDS, C("limit_frames(max_remembered_frames:float, posterior_scale:float)\n\nScales down the stats if needed to ensure the number of frames in the speaker-specific CMVN stats does not exceed max_remembered_frames")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::OnlineIvectorExtractorAdaptationState::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool)\n  Calls C++ function\n  void ::kaldi::OnlineIvectorExtractorAdaptationState::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool)")},
  {}
};

// OnlineIvectorExtractorAdaptationState __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineIvectorExtractorAdaptationState __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_ivector_feature.OnlineIvectorExtractorAdaptationState", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineIvectorExtractorAdaptationState", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineIvectorExtractorAdaptationState* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineIvectorExtractorAdaptationState"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineIvectorExtractorAdaptationState"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineIvectorExtractorAdaptationState* c = static_cast<::kaldi::OnlineIvectorExtractorAdaptationState*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineIvectorExtractorAdaptationState*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineIvectorExtractorAdaptationState

namespace pyOnlineIvectorFeature {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineIvectorFeature> cpp;
};
static ::kaldi::OnlineIvectorFeature* ThisPtr(PyObject*);

// __init__(info:_OnlineIvectorExtractionInfo, base_feature:OnlineFeatureInterface)
static PyObject* wrapOnlineIvectorFeature_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("info"),
      C("base_feature"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::kaldi::OnlineIvectorExtractionInfo* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::OnlineIvectorExtractionInfo", a[0]);
  ::kaldi::OnlineFeatureInterface * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::OnlineFeatureInterface *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineIvectorFeature>(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineIvectorFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_last_frame(frame:int) -> bool
static PyObject* wrapIsLastFrame_as_is_last_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_last_frame", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_last_frame", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineIvectorFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsLastFrame(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_ready_frames() -> int
static PyObject* wrapNumFramesReady_as_num_ready_frames(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineIvectorFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFramesReady();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// frame_shift_in_seconds() -> float
static PyObject* wrapFrameShiftInSeconds_as_frame_shift_in_seconds(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineIvectorFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FrameShiftInSeconds();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_frame(frame:int, feat:VectorBase)
static PyObject* wrapGetFrame_as_get_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("feat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_frame", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_frame", names[0], "int", a[0]);
  ::kaldi::VectorBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_frame", names[1], "::kaldi::VectorBase<float> *", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineIvectorFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetFrame(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_adaptation_state(adaptation_state:OnlineIvectorExtractorAdaptationState)
static PyObject* wrapSetAdaptationState_as_set_adaptation_state(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("adaptation_state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_adaptation_state", names, &a[0])) return nullptr;
  ::kaldi::OnlineIvectorExtractorAdaptationState* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_adaptation_state", names[0], "::kaldi::OnlineIvectorExtractorAdaptationState", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineIvectorFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetAdaptationState(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// get_adaptation_state(adaptation_state:OnlineIvectorExtractorAdaptationState)
static PyObject* wrapGetAdaptationState_as_get_adaptation_state(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("adaptation_state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_adaptation_state", names, &a[0])) return nullptr;
  ::kaldi::OnlineIvectorExtractorAdaptationState * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_adaptation_state", names[0], "::kaldi::OnlineIvectorExtractorAdaptationState *", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineIvectorFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetAdaptationState(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// ubm_loglike_per_frame() -> float
static PyObject* wrapUbmLogLikePerFrame_as_ubm_loglike_per_frame(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineIvectorFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->UbmLogLikePerFrame();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// objf_impr_per_frame() -> float
static PyObject* wrapObjfImprPerFrame_as_objf_impr_per_frame(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineIvectorFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->ObjfImprPerFrame();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_frames() -> float
static PyObject* wrapNumFrames_as_num_frames(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineIvectorFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFrames();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// update_weight_frames(delta_weights:list<tuple<int, float>>)
static PyObject* wrapUpdateFrameWeights_as_update_weight_frames(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("delta_weights"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:update_weight_frames", names, &a[0])) return nullptr;
  ::std::vector< ::std::pair< ::int32, ::kaldi::BaseFloat> > arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("update_weight_frames", names[0], "::std::vector< ::std::pair< ::int32, ::kaldi::BaseFloat> >", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineIvectorFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->UpdateFrameWeights(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::kaldi::OnlineFeatureInterface*
static PyObject* as_kaldi_OnlineFeatureInterface(PyObject* self) {
  ::kaldi::OnlineFeatureInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::OnlineFeatureInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapOnlineIvectorFeature_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(info:_OnlineIvectorExtractionInfo, base_feature:OnlineFeatureInterface)\n\nConstructor\n\nArgs:\n  base_feature (OnlineIvectorFeature): raw MFCC or PLP or filterbank used to train the iVector extractor")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n\nReturns the iVector dimension")},
  {C("is_last_frame"), (PyCFunction)wrapIsLastFrame_as_is_last_frame, METH_VARARGS | METH_KEYWORDS, C("is_last_frame(frame:int) -> bool\n  Calls C++ function\n  bool ::kaldi::OnlineIvectorFeature::IsLastFrame(int)")},
  {C("num_ready_frames"), (PyCFunction)wrapNumFramesReady_as_num_ready_frames, METH_NOARGS, C("num_ready_frames() -> int\n  Calls C++ function\n  int ::kaldi::OnlineIvectorFeature::NumFramesReady()")},
  {C("frame_shift_in_seconds"), (PyCFunction)wrapFrameShiftInSeconds_as_frame_shift_in_seconds, METH_NOARGS, C("frame_shift_in_seconds() -> float\n  Calls C++ function\n  float ::kaldi::OnlineIvectorFeature::FrameShiftInSeconds()")},
  {C("get_frame"), (PyCFunction)wrapGetFrame_as_get_frame, METH_VARARGS | METH_KEYWORDS, C("get_frame(frame:int, feat:VectorBase)\n  Calls C++ function\n  void ::kaldi::OnlineIvectorFeature::GetFrame(int, ::kaldi::VectorBase<float> *)")},
  {C("set_adaptation_state"), (PyCFunction)wrapSetAdaptationState_as_set_adaptation_state, METH_VARARGS | METH_KEYWORDS, C("set_adaptation_state(adaptation_state:OnlineIvectorExtractorAdaptationState)\n\nSet the adaptation state to a particular value")},
  {C("get_adaptation_state"), (PyCFunction)wrapGetAdaptationState_as_get_adaptation_state, METH_VARARGS | METH_KEYWORDS, C("get_adaptation_state(adaptation_state:OnlineIvectorExtractorAdaptationState)\n\nGet the adaptation state")},
  {C("ubm_loglike_per_frame"), (PyCFunction)wrapUbmLogLikePerFrame_as_ubm_loglike_per_frame, METH_NOARGS, C("ubm_loglike_per_frame() -> float\n\nUBM log-like per frame")},
  {C("objf_impr_per_frame"), (PyCFunction)wrapObjfImprPerFrame_as_objf_impr_per_frame, METH_NOARGS, C("objf_impr_per_frame() -> float\n\nObjective improvement per frame from iVector estimation")},
  {C("num_frames"), (PyCFunction)wrapNumFrames_as_num_frames, METH_NOARGS, C("num_frames() -> float\n  Calls C++ function\n  float ::kaldi::OnlineIvectorFeature::NumFrames()")},
  {C("update_weight_frames"), (PyCFunction)wrapUpdateFrameWeights_as_update_weight_frames, METH_VARARGS | METH_KEYWORDS, C("update_weight_frames(delta_weights:list<tuple<int, float>>)\n  Calls C++ function\n  void ::kaldi::OnlineIvectorFeature::UpdateFrameWeights(::std::vector< ::std::pair< ::int32, ::kaldi::BaseFloat> >)")},
  {C("as_kaldi_OnlineFeatureInterface"), (PyCFunction)as_kaldi_OnlineFeatureInterface, METH_NOARGS, C("Upcast to ::kaldi::OnlineFeatureInterface*")},
  {}
};

// OnlineIvectorFeature __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlineIvectorFeature __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineIvectorFeature __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_ivector_feature.OnlineIvectorFeature", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "OnlineIvectorFeature is an online feature-extraction class that's responsible\nfor extracting iVectors from raw features such as MFCC, PLP or filterbank.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapOnlineIvectorFeature_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineIvectorFeature* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineIvectorFeature"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineIvectorFeature"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineIvectorFeature* c = static_cast<::kaldi::OnlineIvectorFeature*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineIvectorFeature*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineIvectorFeature

namespace pyOnlineSilenceWeightingConfig {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineSilenceWeightingConfig> cpp;
};
static ::kaldi::OnlineSilenceWeightingConfig* ThisPtr(PyObject*);

static PyObject* get_silence_phones_str(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->silence_phones_str, _1);
}

static int set_silence_phones_str(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the silence_phones_str attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->silence_phones_str)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for silence_phones_str:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_silence_weight(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->silence_weight, {});
}

static int set_silence_weight(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the silence_weight attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->silence_weight)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for silence_weight:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_max_state_duration(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->max_state_duration, {});
}

static int set_max_state_duration(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the max_state_duration attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->max_state_duration)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for max_state_duration:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_new_data_weight(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->new_data_weight, {});
}

static int set_new_data_weight(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the new_data_weight attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->new_data_weight)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for new_data_weight:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// active() -> bool
static PyObject* wrapActive_as_active(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineSilenceWeightingConfig* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Active();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineSilenceWeightingConfig* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// register_with_prefix(prefix:str, opts:OptionsItf)
static PyObject* wrapRegisterWithPrefix_as_register_with_prefix(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("prefix"),
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:register_with_prefix", names, &a[0], &a[1])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register_with_prefix", names[0], "::std::string", a[0]);
  ::kaldi::OptionsItf * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("register_with_prefix", names[1], "::kaldi::OptionsItf *", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineSilenceWeightingConfig* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->RegisterWithPrefix(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("silence_phones_str"), get_silence_phones_str, set_silence_phones_str, C("C++ ::std::string OnlineSilenceWeightingConfig.silence_phones_str")},
  {C("silence_weight"), get_silence_weight, set_silence_weight, C("C++ ::kaldi::BaseFloat OnlineSilenceWeightingConfig.silence_weight")},
  {C("max_state_duration"), get_max_state_duration, set_max_state_duration, C("C++ ::kaldi::BaseFloat OnlineSilenceWeightingConfig.max_state_duration")},
  {C("new_data_weight"), get_new_data_weight, set_new_data_weight, C("C++ ::kaldi::BaseFloat OnlineSilenceWeightingConfig.new_data_weight")},
  {}
};

static PyMethodDef Methods[] = {
  {C("active"), (PyCFunction)wrapActive_as_active, METH_NOARGS, C("active() -> bool\n  Calls C++ function\n  bool ::kaldi::OnlineSilenceWeightingConfig::Active()")},
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::OnlineSilenceWeightingConfig::Register(::kaldi::OptionsItf *)")},
  {C("register_with_prefix"), (PyCFunction)wrapRegisterWithPrefix_as_register_with_prefix, METH_VARARGS | METH_KEYWORDS, C("register_with_prefix(prefix:str, opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::OnlineSilenceWeightingConfig::RegisterWithPrefix(::std::string, ::kaldi::OptionsItf *)")},
  {}
};

// OnlineSilenceWeightingConfig __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlineSilenceWeightingConfig __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineSilenceWeightingConfig __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_ivector_feature.OnlineSilenceWeightingConfig", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineSilenceWeightingConfig", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "OnlineSilenceWeightingConfig takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineSilenceWeightingConfig>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineSilenceWeightingConfig* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineSilenceWeightingConfig"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineSilenceWeightingConfig"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineSilenceWeightingConfig* c = static_cast<::kaldi::OnlineSilenceWeightingConfig*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineSilenceWeightingConfig*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineSilenceWeightingConfig

namespace pyOnlineSilenceWeighting {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineSilenceWeighting> cpp;
};
static ::kaldi::OnlineSilenceWeighting* ThisPtr(PyObject*);

// __init__(trans_model:TransitionModel, config:OnlineSilenceWeightingConfig, frame_subsampling_factor:int=default)
static PyObject* wrapOnlineSilenceWeighting_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("trans_model"),
      C("config"),
      C("frame_subsampling_factor"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:__init__", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::TransitionModel* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::TransitionModel", a[0]);
  ::kaldi::OnlineSilenceWeightingConfig* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::OnlineSilenceWeightingConfig", a[1]);
  int arg3;
  if (nargs > 2) {
    if (!a[2]) arg3 = (int)1;
    else if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "int", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineSilenceWeighting>(*arg1, *arg2); break;
  case 3:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineSilenceWeighting>(*arg1, *arg2, std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// active() -> bool
static PyObject* wrapActive_as_active(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineSilenceWeighting* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Active();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// compute_current_traceback(decoder:LatticeFasterOnlineDecoder)
static PyObject* wrapComputeCurrentTraceback_as_compute_current_traceback(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("decoder"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:compute_current_traceback", names, &a[0])) return nullptr;
  ::kaldi::LatticeFasterOnlineDecoder* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_current_traceback", names[0], "::kaldi::LatticeFasterOnlineDecoder", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineSilenceWeighting* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ComputeCurrentTraceback(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// get_delta_weights(num_frames_ready_in:int) -> list<tuple<int, float>>
static PyObject* wrapGetDeltaWeights_as_get_delta_weights(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("num_frames_ready_in"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_delta_weights", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_delta_weights", names[0], "int", a[0]);
  ::std::vector< ::std::pair< ::int32, ::kaldi::BaseFloat> > ret0{};
  // Call actual C++ method.
  ::kaldi::OnlineSilenceWeighting* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetDeltaWeights(std::move(arg1), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapOnlineSilenceWeighting_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(trans_model:TransitionModel, config:OnlineSilenceWeightingConfig, frame_subsampling_factor:int=default)\n  Calls C++ function\n  void ::kaldi::OnlineSilenceWeighting::OnlineSilenceWeighting(::kaldi::TransitionModel, ::kaldi::OnlineSilenceWeightingConfig, int)")},
  {C("active"), (PyCFunction)wrapActive_as_active, METH_NOARGS, C("active() -> bool\n  Calls C++ function\n  bool ::kaldi::OnlineSilenceWeighting::Active()")},
  {C("compute_current_traceback"), (PyCFunction)wrapComputeCurrentTraceback_as_compute_current_traceback, METH_VARARGS | METH_KEYWORDS, C("compute_current_traceback(decoder:LatticeFasterOnlineDecoder)\n  Calls C++ function\n  void ::kaldi::OnlineSilenceWeighting::ComputeCurrentTraceback(::kaldi::LatticeFasterOnlineDecoder)")},
  {C("get_delta_weights"), (PyCFunction)wrapGetDeltaWeights_as_get_delta_weights, METH_VARARGS | METH_KEYWORDS, C("get_delta_weights(num_frames_ready_in:int) -> list<tuple<int, float>>\n\nCalling this function gets the changes in weight that require us to modify the stats. Output format is (frame-index, delta-weight).\n\nArgs:\n  num_frames_ready_in (int): number of frames available at the input of the online iVector extractor class")},
  {}
};

// OnlineSilenceWeighting __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlineSilenceWeighting __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineSilenceWeighting __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_ivector_feature.OnlineSilenceWeighting", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineSilenceWeighting", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapOnlineSilenceWeighting_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineSilenceWeighting* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineSilenceWeighting"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineSilenceWeighting"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineSilenceWeighting* c = static_cast<::kaldi::OnlineSilenceWeighting*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineSilenceWeighting*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineSilenceWeighting


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyOnlineIvectorExtractionConfig::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineIvectorExtractionConfig::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&py_OnlineIvectorExtractionInfo::wrapper_Type) < 0) return false;
  Py_INCREF(&py_OnlineIvectorExtractionInfo::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyOnlineIvectorExtractorAdaptationState::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineIvectorExtractorAdaptationState::wrapper_Type);  // For PyModule_AddObject to steal.
  PyObject* base_cls = ImportFQName("kaldi.itf._online_feature_itf.OnlineFeatureInterface");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._online_feature_itf.OnlineFeatureInterface is not a new style class inheriting from object.");
    return false;
  }
  pyOnlineIvectorFeature::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyOnlineIvectorFeature::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._online_feature_itf.OnlineFeatureInterface is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyOnlineIvectorFeature::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineIvectorFeature::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyOnlineSilenceWeightingConfig::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineSilenceWeightingConfig::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyOnlineSilenceWeighting::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineSilenceWeighting::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_online_ivector_feature",  // module name
  "CLIF-generated module for online2/online-ivector-feature.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_diag_gmm")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_ivector_extractor")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_online_feature")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_lattice_faster_online_decoder")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_online_feature_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_transition_model")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "OnlineIvectorExtractionConfig", reinterpret_cast<PyObject*>(&pyOnlineIvectorExtractionConfig::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "_OnlineIvectorExtractionInfo", reinterpret_cast<PyObject*>(&py_OnlineIvectorExtractionInfo::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "OnlineIvectorExtractorAdaptationState", reinterpret_cast<PyObject*>(&pyOnlineIvectorExtractorAdaptationState::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "OnlineIvectorFeature", reinterpret_cast<PyObject*>(&pyOnlineIvectorFeature::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "OnlineSilenceWeightingConfig", reinterpret_cast<PyObject*>(&pyOnlineSilenceWeightingConfig::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "OnlineSilenceWeighting", reinterpret_cast<PyObject*>(&pyOnlineSilenceWeighting::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __online__ivector__feature_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// OnlineIvectorExtractionConfig to/from ::kaldi::OnlineIvectorExtractionConfig conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineIvectorExtractionConfig** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineIvectorExtractionConfig* cpp = __online__ivector__feature_clifwrap::pyOnlineIvectorExtractionConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineIvectorExtractionConfig>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineIvectorExtractionConfig* cpp = __online__ivector__feature_clifwrap::pyOnlineIvectorExtractionConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineIvectorExtractionConfig::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineIvectorExtractionConfig>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineIvectorExtractionConfig* cpp = __online__ivector__feature_clifwrap::pyOnlineIvectorExtractionConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineIvectorExtractionConfig::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineIvectorExtractionConfig instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineIvectorExtractionConfig* c) {
  assert(c != nullptr);
  ::kaldi::OnlineIvectorExtractionConfig* cpp = __online__ivector__feature_clifwrap::pyOnlineIvectorExtractionConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::OnlineIvectorExtractionConfig>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineIvectorExtractionConfig* cpp = __online__ivector__feature_clifwrap::pyOnlineIvectorExtractionConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineIvectorExtractionConfig* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__ivector__feature_clifwrap::pyOnlineIvectorExtractionConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineIvectorExtractionConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineIvectorExtractionConfig>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineIvectorExtractionConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__ivector__feature_clifwrap::pyOnlineIvectorExtractionConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineIvectorExtractionConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineIvectorExtractionConfig>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineIvectorExtractionConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__ivector__feature_clifwrap::pyOnlineIvectorExtractionConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineIvectorExtractionConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineIvectorExtractionConfig>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::OnlineIvectorExtractionConfig& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__online__ivector__feature_clifwrap::pyOnlineIvectorExtractionConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineIvectorExtractionConfig::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::OnlineIvectorExtractionConfig>(c);
  return py;
}

// OnlineIvectorExtractorAdaptationState to/from ::kaldi::OnlineIvectorExtractorAdaptationState conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineIvectorExtractorAdaptationState** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineIvectorExtractorAdaptationState* cpp = __online__ivector__feature_clifwrap::pyOnlineIvectorExtractorAdaptationState::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineIvectorExtractorAdaptationState>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineIvectorExtractorAdaptationState* cpp = __online__ivector__feature_clifwrap::pyOnlineIvectorExtractorAdaptationState::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineIvectorExtractorAdaptationState::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineIvectorExtractorAdaptationState>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineIvectorExtractorAdaptationState* cpp = __online__ivector__feature_clifwrap::pyOnlineIvectorExtractorAdaptationState::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineIvectorExtractorAdaptationState::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineIvectorExtractorAdaptationState instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineIvectorExtractorAdaptationState* c) {
  assert(c != nullptr);
  ::kaldi::OnlineIvectorExtractorAdaptationState* cpp = __online__ivector__feature_clifwrap::pyOnlineIvectorExtractorAdaptationState::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::OnlineIvectorExtractorAdaptationState>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineIvectorExtractorAdaptationState* cpp = __online__ivector__feature_clifwrap::pyOnlineIvectorExtractorAdaptationState::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineIvectorExtractorAdaptationState* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__ivector__feature_clifwrap::pyOnlineIvectorExtractorAdaptationState::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineIvectorExtractorAdaptationState::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineIvectorExtractorAdaptationState>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineIvectorExtractorAdaptationState> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__ivector__feature_clifwrap::pyOnlineIvectorExtractorAdaptationState::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineIvectorExtractorAdaptationState::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineIvectorExtractorAdaptationState>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineIvectorExtractorAdaptationState> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__ivector__feature_clifwrap::pyOnlineIvectorExtractorAdaptationState::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineIvectorExtractorAdaptationState::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineIvectorExtractorAdaptationState>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::OnlineIvectorExtractorAdaptationState& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__online__ivector__feature_clifwrap::pyOnlineIvectorExtractorAdaptationState::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineIvectorExtractorAdaptationState::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::OnlineIvectorExtractorAdaptationState>(c);
  return py;
}

// OnlineIvectorFeature to/from ::kaldi::OnlineIvectorFeature conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineIvectorFeature** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineIvectorFeature* cpp = __online__ivector__feature_clifwrap::pyOnlineIvectorFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineIvectorFeature>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineIvectorFeature* cpp = __online__ivector__feature_clifwrap::pyOnlineIvectorFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineIvectorFeature::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineIvectorFeature>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineIvectorFeature* cpp = __online__ivector__feature_clifwrap::pyOnlineIvectorFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineIvectorFeature::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineIvectorFeature instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineIvectorFeature* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__ivector__feature_clifwrap::pyOnlineIvectorFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineIvectorFeature::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineIvectorFeature>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineIvectorFeature> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__ivector__feature_clifwrap::pyOnlineIvectorFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineIvectorFeature::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineIvectorFeature>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineIvectorFeature> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__ivector__feature_clifwrap::pyOnlineIvectorFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineIvectorFeature::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineIvectorFeature>(std::move(c));
  return py;
}

// OnlineSilenceWeighting to/from ::kaldi::OnlineSilenceWeighting conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineSilenceWeighting** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineSilenceWeighting* cpp = __online__ivector__feature_clifwrap::pyOnlineSilenceWeighting::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineSilenceWeighting>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineSilenceWeighting* cpp = __online__ivector__feature_clifwrap::pyOnlineSilenceWeighting::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineSilenceWeighting::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineSilenceWeighting>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineSilenceWeighting* cpp = __online__ivector__feature_clifwrap::pyOnlineSilenceWeighting::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineSilenceWeighting::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineSilenceWeighting instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineSilenceWeighting* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__ivector__feature_clifwrap::pyOnlineSilenceWeighting::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineSilenceWeighting::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineSilenceWeighting>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineSilenceWeighting> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__ivector__feature_clifwrap::pyOnlineSilenceWeighting::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineSilenceWeighting::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineSilenceWeighting>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineSilenceWeighting> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__ivector__feature_clifwrap::pyOnlineSilenceWeighting::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineSilenceWeighting::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineSilenceWeighting>(std::move(c));
  return py;
}

// OnlineSilenceWeightingConfig to/from ::kaldi::OnlineSilenceWeightingConfig conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineSilenceWeightingConfig** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineSilenceWeightingConfig* cpp = __online__ivector__feature_clifwrap::pyOnlineSilenceWeightingConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineSilenceWeightingConfig>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineSilenceWeightingConfig* cpp = __online__ivector__feature_clifwrap::pyOnlineSilenceWeightingConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineSilenceWeightingConfig::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineSilenceWeightingConfig>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineSilenceWeightingConfig* cpp = __online__ivector__feature_clifwrap::pyOnlineSilenceWeightingConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineSilenceWeightingConfig::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineSilenceWeightingConfig instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineSilenceWeightingConfig* c) {
  assert(c != nullptr);
  ::kaldi::OnlineSilenceWeightingConfig* cpp = __online__ivector__feature_clifwrap::pyOnlineSilenceWeightingConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::OnlineSilenceWeightingConfig>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineSilenceWeightingConfig* cpp = __online__ivector__feature_clifwrap::pyOnlineSilenceWeightingConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineSilenceWeightingConfig* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__ivector__feature_clifwrap::pyOnlineSilenceWeightingConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineSilenceWeightingConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineSilenceWeightingConfig>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineSilenceWeightingConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__ivector__feature_clifwrap::pyOnlineSilenceWeightingConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineSilenceWeightingConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineSilenceWeightingConfig>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineSilenceWeightingConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__ivector__feature_clifwrap::pyOnlineSilenceWeightingConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineSilenceWeightingConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineSilenceWeightingConfig>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::OnlineSilenceWeightingConfig& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__online__ivector__feature_clifwrap::pyOnlineSilenceWeightingConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__ivector__feature_clifwrap::pyOnlineSilenceWeightingConfig::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::OnlineSilenceWeightingConfig>(c);
  return py;
}

// _OnlineIvectorExtractionInfo to/from ::kaldi::OnlineIvectorExtractionInfo conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineIvectorExtractionInfo** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineIvectorExtractionInfo* cpp = __online__ivector__feature_clifwrap::py_OnlineIvectorExtractionInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineIvectorExtractionInfo>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineIvectorExtractionInfo* cpp = __online__ivector__feature_clifwrap::py_OnlineIvectorExtractionInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__ivector__feature_clifwrap::py_OnlineIvectorExtractionInfo::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineIvectorExtractionInfo>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineIvectorExtractionInfo* cpp = __online__ivector__feature_clifwrap::py_OnlineIvectorExtractionInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__ivector__feature_clifwrap::py_OnlineIvectorExtractionInfo::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert _OnlineIvectorExtractionInfo instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineIvectorExtractionInfo* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__ivector__feature_clifwrap::py_OnlineIvectorExtractionInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__ivector__feature_clifwrap::py_OnlineIvectorExtractionInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineIvectorExtractionInfo>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineIvectorExtractionInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__ivector__feature_clifwrap::py_OnlineIvectorExtractionInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__ivector__feature_clifwrap::py_OnlineIvectorExtractionInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineIvectorExtractionInfo>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineIvectorExtractionInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__ivector__feature_clifwrap::py_OnlineIvectorExtractionInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__ivector__feature_clifwrap::py_OnlineIvectorExtractionInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineIvectorExtractionInfo>(std::move(c));
  return py;
}

}  // namespace kaldi
