//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/online2/online-feature-pipeline.clif

#include <memory>
#include "clif/python/optional.h"
#include "online2/online-feature-pipeline.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::OnlineFeaturePipelineCommandLineConfig` as OnlineFeaturePipelineCommandLineConfig
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineFeaturePipelineCommandLineConfig** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineFeaturePipelineCommandLineConfig>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineFeaturePipelineCommandLineConfig>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineFeaturePipelineCommandLineConfig* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::OnlineFeaturePipelineCommandLineConfig>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineFeaturePipelineCommandLineConfig*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineFeaturePipelineCommandLineConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineFeaturePipelineCommandLineConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineFeaturePipelineCommandLineConfig&, py::PostConv);
// CLIF use `::kaldi::OnlineFeaturePipelineConfig` as OnlineFeaturePipelineConfig
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineFeaturePipelineConfig** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineFeaturePipelineConfig>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineFeaturePipelineConfig>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineFeaturePipelineConfig* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::OnlineFeaturePipelineConfig>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineFeaturePipelineConfig*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineFeaturePipelineConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineFeaturePipelineConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineFeaturePipelineConfig&, py::PostConv);
// CLIF use `::kaldi::OnlineFeaturePipeline` as _OnlineFeaturePipeline
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineFeaturePipeline** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineFeaturePipeline>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineFeaturePipeline>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineFeaturePipeline* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::OnlineFeaturePipeline>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineFeaturePipeline*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineFeaturePipeline>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineFeaturePipeline>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineFeaturePipeline&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_online_feature_pipeline")) Py_DECREF(m);
// CLIF init_module else goto err;
