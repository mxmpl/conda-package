//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/matrix/optimization.clif

#include <memory>
#include "clif/python/optional.h"
#include "matrix/optimization.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::LbfgsOptions` as LbfgsOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::LbfgsOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::LbfgsOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::LbfgsOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::LbfgsOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::LbfgsOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::LbfgsOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::LbfgsOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::LbfgsOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::LbfgsOptions&, py::PostConv);
// CLIF use `::kaldi::LinearCgdOptions` as LinearCgdOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::LinearCgdOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::LinearCgdOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::LinearCgdOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::LinearCgdOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::LinearCgdOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::LinearCgdOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::LinearCgdOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::LinearCgdOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::LinearCgdOptions&, py::PostConv);
// CLIF use `::kaldi::OptimizeLbfgs<float>` as OptimizeLbfgs
bool Clif_PyObjAs(PyObject* input, ::kaldi::OptimizeLbfgs<float>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OptimizeLbfgs<float>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OptimizeLbfgs<float>>* output);
PyObject* Clif_PyObjFrom(::kaldi::OptimizeLbfgs<float>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OptimizeLbfgs<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OptimizeLbfgs<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OptimizeLbfgs<float>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::OptimizeLbfgs<float>&, py::PostConv) = delete;

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_optimization")) Py_DECREF(m);
// CLIF init_module else goto err;
