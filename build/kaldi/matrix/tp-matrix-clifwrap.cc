//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/matrix/tp-matrix.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "matrix/matrix-common-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "matrix/sp-matrix-clifwrap.h"
#include "matrix/matrix-ext.h"
#include "tp-matrix-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __tp__matrix_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyTpMatrix {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::TpMatrix<float>> cpp;
};
static ::kaldi::TpMatrix<float>* ThisPtr(PyObject*);

// @classmethod from_size(r:int, resize_type:MatrixResizeType=default) -> TpMatrix
static PyObject* wrapTpMatrix_as_from_size(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("r"),
      C("resize_type"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:from_size", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_size", names[0], "int", a[0]);
  ::kaldi::MatrixResizeType arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_size", names[1], "::kaldi::MatrixResizeType", a[1]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::TpMatrix<float>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    ret0 = ::gtl::MakeUnique<::kaldi::TpMatrix<float>>(std::move(arg1)); break;
  case 2:
    ret0 = ::gtl::MakeUnique<::kaldi::TpMatrix<float>>(std::move(arg1), std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_other(orig:TpMatrix) -> TpMatrix
static PyObject* wrapTpMatrix_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("orig"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::kaldi::TpMatrix<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::kaldi::TpMatrix<float>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::TpMatrix<float>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::TpMatrix<float>>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// getitem(r:int, c:int) -> float
static PyObject* wrapgetitem(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("r"),
      C("c"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:getitem", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("getitem", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("getitem", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::TpMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->operator()(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// cholesky_(orig:SpMatrix)
static PyObject* wrapCholesky_as_cholesky_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("orig"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:cholesky_", names, &a[0])) return nullptr;
  ::kaldi::SpMatrix<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("cholesky_", names[0], "::kaldi::SpMatrix<float>", a[0]);
  // Call actual C++ method.
  ::kaldi::TpMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Cholesky(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// invert_()
static PyObject* wrapInvert_as_invert_(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::TpMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Invert();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// invert_double_()
static PyObject* wrapInvertDouble_as_invert_double_(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::TpMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->InvertDouble();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// swap_with_triangular_(other:TpMatrix)
static PyObject* wrapSwap_as_swap_with_triangular_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:swap_with_triangular_", names, &a[0])) return nullptr;
  ::kaldi::TpMatrix<float> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("swap_with_triangular_", names[0], "::kaldi::TpMatrix<float> *", a[0]);
  // Call actual C++ method.
  ::kaldi::TpMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Swap(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// determinant() -> float
static PyObject* wrapDeterminant_as_determinant(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::TpMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Determinant();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// copy_from_mat_(M:MatrixBase, trans:MatrixTransposeType=default)
static PyObject* wrapCopyFromMat_as_copy_from_mat_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("M"),
      C("trans"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:copy_from_mat_", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_from_mat_", names[0], "::kaldi::MatrixBase<float>", a[0]);
  ::kaldi::MatrixTransposeType arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("copy_from_mat_", names[1], "::kaldi::MatrixTransposeType", a[1]);
  }
  // Call actual C++ method.
  ::kaldi::TpMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    c->CopyFromMat(*arg1); break;
  case 2:
    c->CopyFromMat(*arg1, std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// copy_from_tp_(other:TpMatrix)
static PyObject* wrapCopyFromTp_as_copy_from_tp_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:copy_from_tp_", names, &a[0])) return nullptr;
  ::kaldi::TpMatrix<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_from_tp_", names[0], "::kaldi::TpMatrix<float>", a[0]);
  // Call actual C++ method.
  ::kaldi::TpMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CopyFromTp(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// add_tp(alpha:float, M:TpMatrix)
static PyObject* wrapAddTp_as_add_tp(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("alpha"),
      C("M"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:add_tp", names, &a[0], &a[1])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add_tp", names[0], "float", a[0]);
  ::kaldi::TpMatrix<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("add_tp", names[1], "::kaldi::TpMatrix<float>", a[1]);
  // Call actual C++ method.
  ::kaldi::TpMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AddTp(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::kaldi::PackedMatrix<float>*
static PyObject* as_kaldi_PackedMatrix_float(PyObject* self) {
  ::kaldi::PackedMatrix<float>* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::PackedMatrix<float>"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("from_size"), (PyCFunction)wrapTpMatrix_as_from_size, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_size(r:int, resize_type:MatrixResizeType=default) -> TpMatrix\n\nCreates a new triangular matrix of given size.\n\nArgs:\n  r (int): The number or rows.\n  resize_type (:class:`MatrixResizeType`): Determines how the elements\n    are initialized. If SET_ZERO (or COPY_DATA), they are set to zero.\n    If UNDEFINED, they are left uninitialized. Defaults to SET_ZERO.")},
  {C("from_other"), (PyCFunction)wrapTpMatrix_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(orig:TpMatrix) -> TpMatrix\n\nCreates a new triangular matrix from the given triangular matrix.\n\nArgs:\n    orig (TpMatrix): The input triangular matrix.")},
  {C("getitem"), (PyCFunction)wrapgetitem, METH_VARARGS | METH_KEYWORDS, C("getitem(r:int, c:int) -> float\n\nGets the element at the given index.\n\nArgs:\n  r (int): The row index of the element to get.\n  c (int): The column index of the element to get.\n\nReturns:\n  The element at the given index.\n\nRaises:\n  RuntimeError: If r > num_rows or c > num_cols.")},
  {C("cholesky_"), (PyCFunction)wrapCholesky_as_cholesky_, METH_VARARGS | METH_KEYWORDS, C("cholesky_(orig:SpMatrix)\n\nPerforms Cholesky decomposition.\n\nArgs:\n  orig (SpMatrix): The input symmetric matrix.")},
  {C("invert_"), (PyCFunction)wrapInvert_as_invert_, METH_NOARGS, C("invert_()\n\nInverts the matrix")},
  {C("invert_double_"), (PyCFunction)wrapInvertDouble_as_invert_double_, METH_NOARGS, C("invert_double_()\n\nInverts the matrix in double precision.")},
  {C("swap_with_triangular_"), (PyCFunction)wrapSwap_as_swap_with_triangular_, METH_VARARGS | METH_KEYWORDS, C("swap_with_triangular_(other:TpMatrix)\n\nSwaps the contents with another triangular matrix.\n\nShallow swap.\n\nArgs:\n  other (TpMatrix): The matrix to swap contents with.")},
  {C("determinant"), (PyCFunction)wrapDeterminant_as_determinant, METH_NOARGS, C("determinant() -> float\n\nReturns the determinant of the matrix.")},
  {C("copy_from_mat_"), (PyCFunction)wrapCopyFromMat_as_copy_from_mat_, METH_VARARGS | METH_KEYWORDS, C("copy_from_mat_(M:MatrixBase, trans:MatrixTransposeType=default)\n\nCopies the elements from a square matrix.\n\nArgs:\n    M (MatrixBase): The input matrix.\n    trans(MatrixTransposeType): Determines which elements are copied.\n       If NO_TRANS, copies the lower triangular elements.\n       If TRANS, copies the upper triangular elements.\n       Defaults to NO_TRANS\n\nRaises:\n    RuntimeError: If M is not square or if dimensions of self and M\n      are different.")},
  {C("copy_from_tp_"), (PyCFunction)wrapCopyFromTp_as_copy_from_tp_, METH_VARARGS | METH_KEYWORDS, C("copy_from_tp_(other:TpMatrix)\n\nCopies the elements from another triangular matrix.\n\nArgs:\n  other (TpMatrix): The input triangular matrix.\n\nRaises:\n  RuntimeError: In case of dimension mismatch.")},
  {C("add_tp"), (PyCFunction)wrapAddTp_as_add_tp, METH_VARARGS | METH_KEYWORDS, C("add_tp(alpha:float, M:TpMatrix)\n\nPerforms self = self+alpha*M.\n\nArgs:\n  alpha(float): A constant\n  M(TpMatrix): A triangular matrix\n\nRaises:\n  RuntimeError: In case of dimension mismatch.")},
  {C("as_kaldi_PackedMatrix_float"), (PyCFunction)as_kaldi_PackedMatrix_float, METH_NOARGS, C("Upcast to ::kaldi::PackedMatrix<float>*")},
  {}
};

// TpMatrix __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// TpMatrix __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// TpMatrix __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_tp_matrix.TpMatrix",               // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Single precision triangular matrix.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "TpMatrix takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::TpMatrix<float>>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::TpMatrix<float>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_TpMatrix_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::TpMatrix<float>"));
      if (!PyErr_Occurred()) {
        ::kaldi::TpMatrix<float>* c = static_cast<::kaldi::TpMatrix<float>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::TpMatrix<float>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyTpMatrix

namespace pyDoubleTpMatrix {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::TpMatrix<double>> cpp;
};
static ::kaldi::TpMatrix<double>* ThisPtr(PyObject*);

// @classmethod from_size(r:int, resize_type:MatrixResizeType=default) -> DoubleTpMatrix
static PyObject* wrapTpMatrix_as_from_size(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("r"),
      C("resize_type"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:from_size", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_size", names[0], "int", a[0]);
  ::kaldi::MatrixResizeType arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_size", names[1], "::kaldi::MatrixResizeType", a[1]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::TpMatrix<double>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    ret0 = ::gtl::MakeUnique<::kaldi::TpMatrix<double>>(std::move(arg1)); break;
  case 2:
    ret0 = ::gtl::MakeUnique<::kaldi::TpMatrix<double>>(std::move(arg1), std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_other(orig:DoubleTpMatrix) -> DoubleTpMatrix
static PyObject* wrapTpMatrix_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("orig"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::kaldi::TpMatrix<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::kaldi::TpMatrix<double>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::TpMatrix<double>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::TpMatrix<double>>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// getitem(r:int, c:int) -> float
static PyObject* wrapgetitem(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("r"),
      C("c"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:getitem", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("getitem", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("getitem", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::TpMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  double ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->operator()(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// cholesky_(orig:DoubleSpMatrix)
static PyObject* wrapCholesky_as_cholesky_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("orig"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:cholesky_", names, &a[0])) return nullptr;
  ::kaldi::SpMatrix<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("cholesky_", names[0], "::kaldi::SpMatrix<double>", a[0]);
  // Call actual C++ method.
  ::kaldi::TpMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Cholesky(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// invert_()
static PyObject* wrapInvert_as_invert_(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::TpMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Invert();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// invert_double_()
static PyObject* wrapInvertDouble_as_invert_double_(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::TpMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->InvertDouble();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// swap_with_triangular_(other:DoubleTpMatrix)
static PyObject* wrapSwap_as_swap_with_triangular_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:swap_with_triangular_", names, &a[0])) return nullptr;
  ::kaldi::TpMatrix<double> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("swap_with_triangular_", names[0], "::kaldi::TpMatrix<double> *", a[0]);
  // Call actual C++ method.
  ::kaldi::TpMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Swap(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// determinant() -> float
static PyObject* wrapDeterminant_as_determinant(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::TpMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  double ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Determinant();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// copy_from_mat_(M:DoubleMatrixBase, trans:MatrixTransposeType=default)
static PyObject* wrapCopyFromMat_as_copy_from_mat_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("M"),
      C("trans"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:copy_from_mat_", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::MatrixBase<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_from_mat_", names[0], "::kaldi::MatrixBase<double>", a[0]);
  ::kaldi::MatrixTransposeType arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("copy_from_mat_", names[1], "::kaldi::MatrixTransposeType", a[1]);
  }
  // Call actual C++ method.
  ::kaldi::TpMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    c->CopyFromMat(*arg1); break;
  case 2:
    c->CopyFromMat(*arg1, std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// copy_from_tp_(other:DoubleTpMatrix)
static PyObject* wrapCopyFromTp_as_copy_from_tp_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:copy_from_tp_", names, &a[0])) return nullptr;
  ::kaldi::TpMatrix<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_from_tp_", names[0], "::kaldi::TpMatrix<double>", a[0]);
  // Call actual C++ method.
  ::kaldi::TpMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CopyFromTp(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// add_tp(alpha:float, M:DoubleTpMatrix)
static PyObject* wrapAddTp_as_add_tp(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("alpha"),
      C("M"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:add_tp", names, &a[0], &a[1])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add_tp", names[0], "double", a[0]);
  ::kaldi::TpMatrix<double>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("add_tp", names[1], "::kaldi::TpMatrix<double>", a[1]);
  // Call actual C++ method.
  ::kaldi::TpMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AddTp(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::kaldi::PackedMatrix<double>*
static PyObject* as_kaldi_PackedMatrix_double(PyObject* self) {
  ::kaldi::PackedMatrix<double>* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::PackedMatrix<double>"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("from_size"), (PyCFunction)wrapTpMatrix_as_from_size, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_size(r:int, resize_type:MatrixResizeType=default) -> DoubleTpMatrix\n\nCreates a new triangular matrix of given size.\n\nArgs:\n  r (int): The number or rows.\n  resize_type (:class:`MatrixResizeType`): Determines how the elements\n    are initialized. If SET_ZERO (or COPY_DATA), they are set to zero.\n    If UNDEFINED, they are left uninitialized. Defaults to SET_ZERO.")},
  {C("from_other"), (PyCFunction)wrapTpMatrix_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(orig:DoubleTpMatrix) -> DoubleTpMatrix\n\nCreates a new triangular matrix from the given triangular matrix.\n\nArgs:\n    orig (DoubleTpMatrix): The input triangular matrix.")},
  {C("getitem"), (PyCFunction)wrapgetitem, METH_VARARGS | METH_KEYWORDS, C("getitem(r:int, c:int) -> float\n\nGets the element at the given index.\n\nArgs:\n  r (int): The row index of the element to get.\n  c (int): The column index of the element to get.\n\nReturns:\n  The element at the given index.\n\nRaises:\n  RuntimeError: If r > num_rows or c > num_cols.")},
  {C("cholesky_"), (PyCFunction)wrapCholesky_as_cholesky_, METH_VARARGS | METH_KEYWORDS, C("cholesky_(orig:DoubleSpMatrix)\n\nPerforms Cholesky decomposition.\n\nArgs:\n  orig (DoubleSpMatrix): The input symmetric matrix.")},
  {C("invert_"), (PyCFunction)wrapInvert_as_invert_, METH_NOARGS, C("invert_()\n\nInverts the matrix")},
  {C("invert_double_"), (PyCFunction)wrapInvertDouble_as_invert_double_, METH_NOARGS, C("invert_double_()\n\nInverts the matrix in double precision.")},
  {C("swap_with_triangular_"), (PyCFunction)wrapSwap_as_swap_with_triangular_, METH_VARARGS | METH_KEYWORDS, C("swap_with_triangular_(other:DoubleTpMatrix)\n\nSwaps the contents with another triangular matrix.\n\nShallow swap.\n\nArgs:\n  other (DoubleTpMatrix): The matrix to swap contents with.")},
  {C("determinant"), (PyCFunction)wrapDeterminant_as_determinant, METH_NOARGS, C("determinant() -> float\n\nReturns the determinant of the matrix.")},
  {C("copy_from_mat_"), (PyCFunction)wrapCopyFromMat_as_copy_from_mat_, METH_VARARGS | METH_KEYWORDS, C("copy_from_mat_(M:DoubleMatrixBase, trans:MatrixTransposeType=default)\n\nCopies the elements from a square matrix.\n\nArgs:\n    M (DoubleMatrixBase): The input matrix.\n    trans(MatrixTransposeType): Determines which elements are copied.\n       If NO_TRANS, copies the lower triangular elements.\n       If TRANS, copies the upper triangular elements.\n       Defaults to NO_TRANS\n\nRaises:\n    RuntimeError: If M is not square or if dimensions of self and M\n      are different.")},
  {C("copy_from_tp_"), (PyCFunction)wrapCopyFromTp_as_copy_from_tp_, METH_VARARGS | METH_KEYWORDS, C("copy_from_tp_(other:DoubleTpMatrix)\n\nCopies the elements from another triangular matrix.\n\nArgs:\n  other (DoubleTpMatrix): The input triangular matrix.\n\nRaises:\n  RuntimeError: In case of dimension mismatch.")},
  {C("add_tp"), (PyCFunction)wrapAddTp_as_add_tp, METH_VARARGS | METH_KEYWORDS, C("add_tp(alpha:float, M:DoubleTpMatrix)\n\nPerforms self = self+alpha*M.\n\nArgs:\n  alpha(float): A constant\n  M(DoubleTpMatrix): A triangular matrix\n\nRaises:\n  RuntimeError: In case of dimension mismatch.")},
  {C("as_kaldi_PackedMatrix_double"), (PyCFunction)as_kaldi_PackedMatrix_double, METH_NOARGS, C("Upcast to ::kaldi::PackedMatrix<double>*")},
  {}
};

// DoubleTpMatrix __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// DoubleTpMatrix __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// DoubleTpMatrix __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_tp_matrix.DoubleTpMatrix",         // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Double precision triangular matrix.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "DoubleTpMatrix takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::TpMatrix<double>>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::TpMatrix<double>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_TpMatrix_double"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::TpMatrix<double>"));
      if (!PyErr_Occurred()) {
        ::kaldi::TpMatrix<double>* c = static_cast<::kaldi::TpMatrix<double>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::TpMatrix<double>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyDoubleTpMatrix


// Initialize module

bool Ready() {
  PyObject* base_cls = ImportFQName("kaldi.matrix._packed_matrix.PackedMatrix");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.matrix._packed_matrix.PackedMatrix is not a new style class inheriting from object.");
    return false;
  }
  pyTpMatrix::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyTpMatrix::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.matrix._packed_matrix.PackedMatrix is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyTpMatrix::wrapper_Type) < 0) return false;
  Py_INCREF(&pyTpMatrix::wrapper_Type);  // For PyModule_AddObject to steal.
  base_cls = ImportFQName("kaldi.matrix._packed_matrix.DoublePackedMatrix");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.matrix._packed_matrix.DoublePackedMatrix is not a new style class inheriting from object.");
    return false;
  }
  pyDoubleTpMatrix::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyDoubleTpMatrix::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.matrix._packed_matrix.DoublePackedMatrix is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyDoubleTpMatrix::wrapper_Type) < 0) return false;
  Py_INCREF(&pyDoubleTpMatrix::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_tp_matrix",  // module name
  "CLIF-generated module for matrix/tp-matrix.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_matrix_common")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_sp_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_matrix_ext")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "TpMatrix", reinterpret_cast<PyObject*>(&pyTpMatrix::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "DoubleTpMatrix", reinterpret_cast<PyObject*>(&pyDoubleTpMatrix::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __tp__matrix_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// DoubleTpMatrix to/from ::kaldi::TpMatrix<double> conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::TpMatrix<double>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::TpMatrix<double>* cpp = __tp__matrix_clifwrap::pyDoubleTpMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::TpMatrix<double>>* c) {
  assert(c != nullptr);
  ::kaldi::TpMatrix<double>* cpp = __tp__matrix_clifwrap::pyDoubleTpMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__tp__matrix_clifwrap::pyDoubleTpMatrix::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::TpMatrix<double>>* c) {
  assert(c != nullptr);
  ::kaldi::TpMatrix<double>* cpp = __tp__matrix_clifwrap::pyDoubleTpMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__tp__matrix_clifwrap::pyDoubleTpMatrix::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert DoubleTpMatrix instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::TpMatrix<double>* c) {
  assert(c != nullptr);
  ::kaldi::TpMatrix<double>* cpp = __tp__matrix_clifwrap::pyDoubleTpMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::TpMatrix<double>>* c) {
  assert(c != nullptr);
  ::kaldi::TpMatrix<double>* cpp = __tp__matrix_clifwrap::pyDoubleTpMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::TpMatrix<double>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__tp__matrix_clifwrap::pyDoubleTpMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__tp__matrix_clifwrap::pyDoubleTpMatrix::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::TpMatrix<double>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TpMatrix<double>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__tp__matrix_clifwrap::pyDoubleTpMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__tp__matrix_clifwrap::pyDoubleTpMatrix::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::TpMatrix<double>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TpMatrix<double>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__tp__matrix_clifwrap::pyDoubleTpMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__tp__matrix_clifwrap::pyDoubleTpMatrix::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::TpMatrix<double>>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::TpMatrix<double>& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__tp__matrix_clifwrap::pyDoubleTpMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__tp__matrix_clifwrap::pyDoubleTpMatrix::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::TpMatrix<double>>(c);
  return py;
}

// TpMatrix to/from ::kaldi::TpMatrix<float> conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::TpMatrix<float>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::TpMatrix<float>* cpp = __tp__matrix_clifwrap::pyTpMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::TpMatrix<float>>* c) {
  assert(c != nullptr);
  ::kaldi::TpMatrix<float>* cpp = __tp__matrix_clifwrap::pyTpMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__tp__matrix_clifwrap::pyTpMatrix::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::TpMatrix<float>>* c) {
  assert(c != nullptr);
  ::kaldi::TpMatrix<float>* cpp = __tp__matrix_clifwrap::pyTpMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__tp__matrix_clifwrap::pyTpMatrix::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert TpMatrix instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::TpMatrix<float>* c) {
  assert(c != nullptr);
  ::kaldi::TpMatrix<float>* cpp = __tp__matrix_clifwrap::pyTpMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::TpMatrix<float>>* c) {
  assert(c != nullptr);
  ::kaldi::TpMatrix<float>* cpp = __tp__matrix_clifwrap::pyTpMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::TpMatrix<float>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__tp__matrix_clifwrap::pyTpMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__tp__matrix_clifwrap::pyTpMatrix::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::TpMatrix<float>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TpMatrix<float>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__tp__matrix_clifwrap::pyTpMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__tp__matrix_clifwrap::pyTpMatrix::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::TpMatrix<float>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TpMatrix<float>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__tp__matrix_clifwrap::pyTpMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__tp__matrix_clifwrap::pyTpMatrix::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::TpMatrix<float>>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::TpMatrix<float>& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__tp__matrix_clifwrap::pyTpMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__tp__matrix_clifwrap::pyTpMatrix::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::TpMatrix<float>>(c);
  return py;
}

}  // namespace kaldi
