//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/matrix/compressed-matrix.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "matrix/matrix-common-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "compressed-matrix-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __compressed__matrix_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes

static PyObject *_Enum{}, *_IntEnum{};  // set below in Init()


// Create Python Enum object (cached in _CompressionMethod) for ::kaldi::CompressionMethod
static PyObject* wrapCompressionMethod() {
  PyObject *py, *py_enum_class{}, *names = PyTuple_New(7);
  if (names == nullptr) return nullptr;
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("AUTO"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::CompressionMethod>::type>(::kaldi::CompressionMethod::kAutomaticMethod)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 0, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("SPEECH_FEATURE"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::CompressionMethod>::type>(::kaldi::CompressionMethod::kSpeechFeature)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 1, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("TWO_BYTE_AUTO"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::CompressionMethod>::type>(::kaldi::CompressionMethod::kTwoByteAuto)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 2, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("TWO_BYTE_SIGNED_INTEGER"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::CompressionMethod>::type>(::kaldi::CompressionMethod::kTwoByteSignedInteger)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 3, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("ONE_BYTE_AUTO"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::CompressionMethod>::type>(::kaldi::CompressionMethod::kOneByteAuto)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 4, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("ONE_BYTE_UNSIGNED_INTEGER"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::CompressionMethod>::type>(::kaldi::CompressionMethod::kOneByteUnsignedInteger)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 5, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("TWO_BYTE_ZERO_ONE"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::CompressionMethod>::type>(::kaldi::CompressionMethod::kOneByteZeroOne)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 6, py);
  py = PyUnicode_FromString("CompressionMethod");
  py_enum_class = PyObject_CallFunctionObjArgs(_IntEnum, py, names, nullptr);
  Py_DECREF(py);
err:
  Py_DECREF(names);
  return py_enum_class;
}
static PyObject* _CompressionMethod{};  // set by above func in Init()

namespace pyCompressedMatrix {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::CompressedMatrix> cpp;
};
static ::kaldi::CompressedMatrix* ThisPtr(PyObject*);

// @classmethod new(mat:MatrixBase, method:CompressionMethod=default) -> CompressedMatrix
static PyObject* wrapCompressedMatrix_as_new(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("mat"),
      C("method"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:new", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new", names[0], "::kaldi::MatrixBase<float>", a[0]);
  ::kaldi::CompressionMethod arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("new", names[1], "::kaldi::CompressionMethod", a[1]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::CompressedMatrix> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    ret0 = ::gtl::MakeUnique<::kaldi::CompressedMatrix>(*arg1); break;
  case 2:
    ret0 = ::gtl::MakeUnique<::kaldi::CompressedMatrix>(*arg1, std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod new_with_range(mat:CompressedMatrix, row_offset:int, num_rows:int, col_offset:int, num_cols:int, allow_padding:bool=default) -> CompressedMatrix
static PyObject* wrapCompressedMatrix_as_new_with_range(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[6]{};
  char* names[] = {
      C("mat"),
      C("row_offset"),
      C("num_rows"),
      C("col_offset"),
      C("num_cols"),
      C("allow_padding"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOO|O:new_with_range", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 6; nargs > 5; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::CompressedMatrix* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new_with_range", names[0], "::kaldi::CompressedMatrix", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("new_with_range", names[1], "int", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("new_with_range", names[2], "int", a[2]);
  int arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("new_with_range", names[3], "int", a[3]);
  int arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("new_with_range", names[4], "int", a[4]);
  bool arg6;
  if (nargs > 5) {
    if (!a[5]) arg6 = (bool)false;
    else if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("new_with_range", names[5], "bool", a[5]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::CompressedMatrix> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 5:
    ret0 = ::gtl::MakeUnique<::kaldi::CompressedMatrix>(*arg1, std::move(arg2), std::move(arg3), std::move(arg4), std::move(arg5)); break;
  case 6:
    ret0 = ::gtl::MakeUnique<::kaldi::CompressedMatrix>(*arg1, std::move(arg2), std::move(arg3), std::move(arg4), std::move(arg5), std::move(arg6)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod new_with_other(mat:CompressedMatrix) -> CompressedMatrix
static PyObject* wrapCompressedMatrix_as_new_with_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("mat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:new_with_other", names, &a[0])) return nullptr;
  ::kaldi::CompressedMatrix* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new_with_other", names[0], "::kaldi::CompressedMatrix", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::CompressedMatrix> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::CompressedMatrix>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// copy_from_mat(mat:MatrixBase, method:CompressionMethod=default)
static PyObject* wrapCopyFromMat_as_copy_from_mat(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("mat"),
      C("method"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:copy_from_mat", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_from_mat", names[0], "::kaldi::MatrixBase<float>", a[0]);
  ::kaldi::CompressionMethod arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("copy_from_mat", names[1], "::kaldi::CompressionMethod", a[1]);
  }
  // Call actual C++ method.
  ::kaldi::CompressedMatrix* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    c->CopyFromMat(*arg1); break;
  case 2:
    c->CopyFromMat(*arg1, std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// copy_to_mat(mat:MatrixBase, method:MatrixTransposeType=default)
static PyObject* wrapCopyToMat_as_copy_to_mat(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("mat"),
      C("method"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:copy_to_mat", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::MatrixBase<float> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_to_mat", names[0], "::kaldi::MatrixBase<float> *", a[0]);
  ::kaldi::MatrixTransposeType arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("copy_to_mat", names[1], "::kaldi::MatrixTransposeType", a[1]);
  }
  // Call actual C++ method.
  ::kaldi::CompressedMatrix* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    c->CopyToMat(arg1); break;
  case 2:
    c->CopyToMat(arg1, std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyObject* get_num_rows(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->NumRows(), {});
}

static PyObject* get_num_cols(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->NumCols(), {});
}

// copy_row_to_vec(row:int, v:VectorBase)
static PyObject* wrapCopyRowToVec_as_copy_row_to_vec(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("row"),
      C("v"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:copy_row_to_vec", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_row_to_vec", names[0], "int", a[0]);
  ::kaldi::VectorBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("copy_row_to_vec", names[1], "::kaldi::VectorBase<float> *", a[1]);
  // Call actual C++ method.
  ::kaldi::CompressedMatrix* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CopyRowToVec(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// copy_col_to_vec(col:int, v:VectorBase)
static PyObject* wrapCopyColToVec_as_copy_col_to_vec(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("col"),
      C("v"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:copy_col_to_vec", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_col_to_vec", names[0], "int", a[0]);
  ::kaldi::VectorBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("copy_col_to_vec", names[1], "::kaldi::VectorBase<float> *", a[1]);
  // Call actual C++ method.
  ::kaldi::CompressedMatrix* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CopyColToVec(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// copy_to_mat_offset(row_offset:int, col_offset:int, dest:MatrixBase)
static PyObject* wrapCopyToMat_as_copy_to_mat_offset(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("row_offset"),
      C("col_offset"),
      C("dest"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:copy_to_mat_offset", names, &a[0], &a[1], &a[2])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_to_mat_offset", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("copy_to_mat_offset", names[1], "int", a[1]);
  ::kaldi::MatrixBase<float> * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("copy_to_mat_offset", names[2], "::kaldi::MatrixBase<float> *", a[2]);
  // Call actual C++ method.
  ::kaldi::CompressedMatrix* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CopyToMat(std::move(arg1), std::move(arg2), arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// swap(other:CompressedMatrix)
static PyObject* wrapSwap_as_swap(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:swap", names, &a[0])) return nullptr;
  ::kaldi::CompressedMatrix * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("swap", names[0], "::kaldi::CompressedMatrix *", a[0]);
  // Call actual C++ method.
  ::kaldi::CompressedMatrix* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Swap(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// clear()
static PyObject* wrapClear_as_clear(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CompressedMatrix* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Clear();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// scale(alpha:float)
static PyObject* wrapScale_as_scale(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("alpha"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:scale", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("scale", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::CompressedMatrix* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Scale(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("num_rows"), get_num_rows, nullptr, C("Number of rows (zero for empty matrix).")},
  {C("num_cols"), get_num_cols, nullptr, C("Number of columns (zero for empty matrix).")},
  {}
};

static PyMethodDef Methods[] = {
  {C("new"), (PyCFunction)wrapCompressedMatrix_as_new, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new(mat:MatrixBase, method:CompressionMethod=default) -> CompressedMatrix\n\nCopy the data from a MatrixBase and compress it\n\nArgs:\n    mat(MatrixBase): A matrix\n    method(CompressionMethod): The way we will compress the matrix.\n                               Default is kAutomaticMethod")},
  {C("new_with_range"), (PyCFunction)wrapCompressedMatrix_as_new_with_range, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new_with_range(mat:CompressedMatrix, row_offset:int, num_rows:int, col_offset:int, num_cols:int, allow_padding:bool=default) -> CompressedMatrix\n\nCreate a compressed matrix from another compressed matrix. If allow padding is true\nyou can create an \"expanded\" matrix by either having a negative row_offset or by\nsetting num_rows>mat.num_rows.\n\nArgs:\n    mat(CompressedMatrix): A compressed matrix\n    row_offset(int): From which row of mat to start copying. Indexing starts at 0\n    num_rows(int): How many rows of mat to copy\n    col_offset(int): From which column of mat to start copying. Indexing starts at 0\n    num_cols(int): How many columns of mat to copy\n    allow_padding(bool): Allows you to violate ``row'' dimentionality conditions\n\n Raises:\n    Error in case dimensionality violations (taking also allow_padding into consideration).")},
  {C("new_with_other"), (PyCFunction)wrapCompressedMatrix_as_new_with_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new_with_other(mat:CompressedMatrix) -> CompressedMatrix\n\nSet this matrix (self) as the other (mat)\n\nArgs:\n    mat(CompressedMatrix): A compressed Matrix")},
  {C("copy_from_mat"), (PyCFunction)wrapCopyFromMat_as_copy_from_mat, METH_VARARGS | METH_KEYWORDS, C("copy_from_mat(mat:MatrixBase, method:CompressionMethod=default)\n\nCopy data from another matrix to self.\n\nArgs:\n    mat(MatrixBase): The matrix from which we will copy the data\n    method(CompresssionMethod): Which compression method to use")},
  {C("copy_to_mat"), (PyCFunction)wrapCopyToMat_as_copy_to_mat, METH_VARARGS | METH_KEYWORDS, C("copy_to_mat(mat:MatrixBase, method:MatrixTransposeType=default)\n\nPerfomrs mat=self if MatrixTransposeType is kNoTrans,\n   or mat^T=self if MatrixTransposeType is kTrans.\n\nArgs:\n    mat(MatrixBase): The destination matrix\n    method(MatrixTransposeType): Determines transposition of mat.\n                                 Default value is kNoTrans\n\nRaises:\n    Error in case of dimension mismatch")},
  {C("copy_row_to_vec"), (PyCFunction)wrapCopyRowToVec_as_copy_row_to_vec, METH_VARARGS | METH_KEYWORDS, C("copy_row_to_vec(row:int, v:VectorBase)\n\nUncompresess and copies row of the matrix into vector v.\n\nArgs:\n    row(int): Indexes the row. Indexing starts from 0\n    v(VectorBase): The vector that will store the row.\n\nRaises:\n    Error in case of dimesnionality mismatch")},
  {C("copy_col_to_vec"), (PyCFunction)wrapCopyColToVec_as_copy_col_to_vec, METH_VARARGS | METH_KEYWORDS, C("copy_col_to_vec(col:int, v:VectorBase)\n\nUncompresess and copies column of the matrix into vector v.\n\nArgs:\n    col(int): Indexes the row. Indexing starts from 0\n    v(VectorBase): The vector that will store the row.\n\nRaises:\n    Error in case of dimesnionality mismatch")},
  {C("copy_to_mat_offset"), (PyCFunction)wrapCopyToMat_as_copy_to_mat_offset, METH_VARARGS | METH_KEYWORDS, C("copy_to_mat_offset(row_offset:int, col_offset:int, dest:MatrixBase)\n\nUncompresses and copies submatrix of compressed matrix\n   into matrix dest. Submatrix starts at row row_offset and column\n   column_offset and its size is defined by size of provided matrix\n   dest.\n\nArgs:\n    row_offset(int): The row offset. Indexing starts from 0\n    col_offset(int): The col offset. Indexing starts from 0\n    dest(MatrixBase): The matrix that will store the submatrix of self\n\nRaises:\n    Error in case of dimesnionality violations.")},
  {C("swap"), (PyCFunction)wrapSwap_as_swap, METH_VARARGS | METH_KEYWORDS, C("swap(other:CompressedMatrix)\n\nSwap elements with another compressed matrix. Shallow swap.\n\nArgs:\n    other(CompressedMatrix): A compressed matrix\n\nRaises:\n    Error in case od dimension mismatch.")},
  {C("clear"), (PyCFunction)wrapClear_as_clear, METH_NOARGS, C("clear()\n\nDeletes the data of the matrix")},
  {C("scale"), (PyCFunction)wrapScale_as_scale, METH_VARARGS | METH_KEYWORDS, C("scale(alpha:float)\n\nscales all elements of matrix by alpha.")},
  {}
};

// CompressedMatrix __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// CompressedMatrix __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// CompressedMatrix __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_compressed_matrix.CompressedMatrix", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "A lossily compressed Matrix class", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "CompressedMatrix takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::CompressedMatrix>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::CompressedMatrix* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_CompressedMatrix"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::CompressedMatrix"));
      if (!PyErr_Occurred()) {
        ::kaldi::CompressedMatrix* c = static_cast<::kaldi::CompressedMatrix*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::CompressedMatrix*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyCompressedMatrix


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyCompressedMatrix::wrapper_Type) < 0) return false;
  Py_INCREF(&pyCompressedMatrix::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_compressed_matrix",  // module name
  "CLIF-generated module for matrix/compressed-matrix.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_matrix_common")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  {PyObject* em = PyImport_ImportModule("enum");
   if (em == nullptr) goto err;
   _Enum = PyObject_GetAttrString(em, "Enum");
   _IntEnum = PyObject_GetAttrString(em, "IntEnum");
   Py_DECREF(em);}
  if (!_Enum || !_IntEnum) {
    Py_XDECREF(_Enum);
    Py_XDECREF(_IntEnum);
    goto err;
  }
  if (PyModule_AddObject(module, "CompressionMethod", (_CompressionMethod=wrapCompressionMethod())) < 0) goto err;
  if (PyModule_AddObject(module, "CompressedMatrix", reinterpret_cast<PyObject*>(&pyCompressedMatrix::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __compressed__matrix_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// CompressedMatrix to/from ::kaldi::CompressedMatrix conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::CompressedMatrix** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::CompressedMatrix* cpp = __compressed__matrix_clifwrap::pyCompressedMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::CompressedMatrix>* c) {
  assert(c != nullptr);
  ::kaldi::CompressedMatrix* cpp = __compressed__matrix_clifwrap::pyCompressedMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__compressed__matrix_clifwrap::pyCompressedMatrix::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::CompressedMatrix>* c) {
  assert(c != nullptr);
  ::kaldi::CompressedMatrix* cpp = __compressed__matrix_clifwrap::pyCompressedMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__compressed__matrix_clifwrap::pyCompressedMatrix::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert CompressedMatrix instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::CompressedMatrix* c) {
  assert(c != nullptr);
  ::kaldi::CompressedMatrix* cpp = __compressed__matrix_clifwrap::pyCompressedMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::CompressedMatrix>* c) {
  assert(c != nullptr);
  ::kaldi::CompressedMatrix* cpp = __compressed__matrix_clifwrap::pyCompressedMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::CompressedMatrix* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__compressed__matrix_clifwrap::pyCompressedMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__compressed__matrix_clifwrap::pyCompressedMatrix::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CompressedMatrix>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::CompressedMatrix> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__compressed__matrix_clifwrap::pyCompressedMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__compressed__matrix_clifwrap::pyCompressedMatrix::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CompressedMatrix>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::CompressedMatrix> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__compressed__matrix_clifwrap::pyCompressedMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__compressed__matrix_clifwrap::pyCompressedMatrix::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CompressedMatrix>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::CompressedMatrix& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__compressed__matrix_clifwrap::pyCompressedMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__compressed__matrix_clifwrap::pyCompressedMatrix::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::CompressedMatrix>(c);
  return py;
}

// CompressionMethod:IntEnum to/from enum ::kaldi::CompressionMethod conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::CompressionMethod* c) {
  assert(c != nullptr);
  if (!PyObject_IsInstance(py, __compressed__matrix_clifwrap::_CompressionMethod)) {
    PyErr_Format(PyExc_TypeError, "expecting enum CompressionMethod, got %s %s", ClassName(py), ClassType(py));
    return false;
  }
  typename std::underlying_type<::kaldi::CompressionMethod>::type v;
  PyObject* value = PyObject_GetAttrString(py, "value");
  if (value == nullptr || !Clif_PyObjAs(value, &v)) return false;
  Py_DECREF(value);
  *c = static_cast<::kaldi::CompressionMethod>(v);
  return true;
}

PyObject* Clif_PyObjFrom(const ::kaldi::CompressionMethod& c, py::PostConv) {
  return PyObject_CallFunctionObjArgs(__compressed__matrix_clifwrap::_CompressionMethod, PyInt_FromLong(
      static_cast<typename std::underlying_type<::kaldi::CompressionMethod>::type>(c)), nullptr);
}

}  // namespace kaldi
