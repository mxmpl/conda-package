//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/matrix/packed-matrix.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "matrix/matrix-common-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "matrix/matrix-ext.h"
#include "packed-matrix-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __packed__matrix_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyPackedMatrix {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::PackedMatrix<float>> cpp;
};
static ::kaldi::PackedMatrix<float>* ThisPtr(PyObject*);

static PyObject* get_num_rows(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->NumRows(), {});
}

static PyObject* get_num_cols(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->NumCols(), {});
}

// @classmethod from_size(r:int, resize_type:MatrixResizeType=default) -> PackedMatrix
static PyObject* wrapPackedMatrix_as_from_size(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("r"),
      C("resize_type"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:from_size", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_size", names[0], "int", a[0]);
  ::kaldi::MatrixResizeType arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_size", names[1], "::kaldi::MatrixResizeType", a[1]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::PackedMatrix<float>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    ret0 = ::gtl::MakeUnique<::kaldi::PackedMatrix<float>>(std::move(arg1)); break;
  case 2:
    ret0 = ::gtl::MakeUnique<::kaldi::PackedMatrix<float>>(std::move(arg1), std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_other(orig:PackedMatrix) -> PackedMatrix
static PyObject* wrapPackedMatrix_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("orig"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::kaldi::PackedMatrix<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::kaldi::PackedMatrix<float>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::PackedMatrix<float>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::PackedMatrix<float>>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// set_zero_()
static PyObject* wrapSetZero_as_set_zero_(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::PackedMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetZero();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// set_unit_()
static PyObject* wrapSetUnit_as_set_unit_(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::PackedMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetUnit();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// set_randn_()
static PyObject* wrapSetRandn_as_set_randn_(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::PackedMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetRandn();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// trace() -> float
static PyObject* wrapTrace_as_trace(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::PackedMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Trace();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// resize_(num_rows:int, resize_type:MatrixResizeType=default)
static PyObject* wrapResize_as_resize_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("num_rows"),
      C("resize_type"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:resize_", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("resize_", names[0], "int", a[0]);
  ::kaldi::MatrixResizeType arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("resize_", names[1], "::kaldi::MatrixResizeType", a[1]);
  }
  // Call actual C++ method.
  ::kaldi::PackedMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    c->Resize(std::move(arg1)); break;
  case 2:
    c->Resize(std::move(arg1), std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// add_to_diag_(r:float)
static PyObject* wrapAddToDiag_as_add_to_diag_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("r"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:add_to_diag_", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add_to_diag_", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::PackedMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AddToDiag(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// scale_diag_(alpha:float)
static PyObject* wrapScaleDiag_as_scale_diag_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("alpha"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:scale_diag_", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("scale_diag_", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::PackedMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ScaleDiag(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// set_diag_(alpha:float)
static PyObject* wrapSetDiag_as_set_diag_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("alpha"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_diag_", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_diag_", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::PackedMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetDiag(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// copy_from_packed_(orig:PackedMatrix)
static PyObject* wrapCopyFromPacked_as_copy_from_packed_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("orig"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:copy_from_packed_", names, &a[0])) return nullptr;
  ::kaldi::PackedMatrix<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_from_packed_", names[0], "::kaldi::PackedMatrix<float>", a[0]);
  // Call actual C++ method.
  ::kaldi::PackedMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CopyFromPacked(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// copy_from_vec_(orig:SubVector)
static PyObject* wrapCopyFromVec_as_copy_from_vec_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("orig"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:copy_from_vec_", names, &a[0])) return nullptr;
  ::kaldi::SubVector<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_from_vec_", names[0], "::kaldi::SubVector<float>", a[0]);
  // Call actual C++ method.
  ::kaldi::PackedMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CopyFromVec(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// __len__() -> int
static PyObject* wrapNumRows_as___len__(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::PackedMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumRows();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// size_in_bytes() -> int
static PyObject* wrapSizeInBytes_as_size_in_bytes(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::PackedMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->SizeInBytes();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// getitem(r:int, c:int) -> float
static PyObject* wrapgetitem(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("r"),
      C("c"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:getitem", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("getitem", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("getitem", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::PackedMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->operator()(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// max() -> float
static PyObject* wrapMax_as_max(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::PackedMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Max();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// min() -> float
static PyObject* wrapMin_as_min(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::PackedMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Min();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// scale_(c:float)
static PyObject* wrapScale_as_scale_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("c"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:scale_", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("scale_", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::PackedMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Scale(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// read_(is:istream, binary:bool, add:bool=default)
static PyObject* wrapRead_as_read_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("is"),
      C("binary"),
      C("add"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:read_", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read_", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read_", names[1], "bool", a[1]);
  bool arg3;
  if (nargs > 2) {
    if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("read_", names[2], "bool", a[2]);
  }
  // Call actual C++ method.
  ::kaldi::PackedMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    c->Read(*arg1, std::move(arg2)); break;
  case 3:
    c->Read(*arg1, std::move(arg2), std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::PackedMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// swap_with_packed_(other:PackedMatrix)
static PyObject* wrapSwap_as_swap_with_packed_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:swap_with_packed_", names, &a[0])) return nullptr;
  ::kaldi::PackedMatrix<float> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("swap_with_packed_", names[0], "::kaldi::PackedMatrix<float> *", a[0]);
  // Call actual C++ method.
  ::kaldi::PackedMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Swap(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// swap_with_matrix_(other:Matrix)
static PyObject* wrapSwap_as_swap_with_matrix_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:swap_with_matrix_", names, &a[0])) return nullptr;
  ::kaldi::Matrix<float> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("swap_with_matrix_", names[0], "::kaldi::Matrix<float> *", a[0]);
  // Call actual C++ method.
  ::kaldi::PackedMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Swap(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

static PyGetSetDef Properties[] = {
  {C("num_rows"), get_num_rows, nullptr, C("The number of rows.")},
  {C("num_cols"), get_num_cols, nullptr, C("The number of columns.")},
  {}
};

PySequenceMethods AsSequence = {
  slot::adapter<Py_ssize_t, slot::as_size, wrapNumRows_as___len__>, // sq_length
  nullptr,                             // sq_concat
  nullptr,                             // sq_repeat
  nullptr,                             // sq_item
  nullptr,                             // was_sq_slice
  nullptr,                             // sq_ass_item
  nullptr,                             // was_sq_ass_slice
  nullptr,                             // sq_contains
  nullptr,                             // sq_inplace_concat
  nullptr,                             // sq_inplace_repeat
};

PyMappingMethods AsMapping = {
  slot::adapter<Py_ssize_t, slot::as_size, wrapNumRows_as___len__>, // mp_length
  nullptr,                             // mp_subscript
  nullptr,                             // mp_ass_subscript
};

static PyMethodDef Methods[] = {
  {C("from_size"), (PyCFunction)wrapPackedMatrix_as_from_size, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_size(r:int, resize_type:MatrixResizeType=default) -> PackedMatrix\n\nCreates a new packed matrix of given size.\n\nArgs:\n  r (int): The number or rows.\n  resize_type (:class:`MatrixResizeType`): Determines how the elements\n    are initialized. If SET_ZERO (or COPY_DATA), they are set to zero.\n    If UNDEFINED, they are left uninitialized. Defaults to SET_ZERO.\n\nNote:\n  Since packed matrices are for storing square matrices, the number\n  of columns is always equal to the number of rows.")},
  {C("from_other"), (PyCFunction)wrapPackedMatrix_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(orig:PackedMatrix) -> PackedMatrix\n\nCreates a new packed matrix from the given packed matrix.\n\nArgs:\n    orig (PackedMatrix): The input packed matrix.")},
  {C("set_zero_"), (PyCFunction)wrapSetZero_as_set_zero_, METH_NOARGS, C("set_zero_()\n\nSets the elements to zero.")},
  {C("set_unit_"), (PyCFunction)wrapSetUnit_as_set_unit_, METH_NOARGS, C("set_unit_()\n\nSets diagonal elements to one, off-diagonal elements to zero.")},
  {C("set_randn_"), (PyCFunction)wrapSetRandn_as_set_randn_, METH_NOARGS, C("set_randn_()\n\nSets the elements to numbers from standard normal distribution.")},
  {C("trace"), (PyCFunction)wrapTrace_as_trace, METH_NOARGS, C("trace() -> float\n\nReturns the trace of the matrix.")},
  {C("resize_"), (PyCFunction)wrapResize_as_resize_, METH_VARARGS | METH_KEYWORDS, C("resize_(num_rows:int, resize_type:MatrixResizeType=default)\n\nResizes the matrix.\n\nArgs:\n  num_rows (int): The new number of rows.\n  resize_type (:class:`MatrixResizeType`): Determines how the elements\n    are initialized. If SET_ZERO, they are set to zero. If UNDEFINED,\n    they are left uninitialized. If COPY_DATA, existing elements are\n    retained, new ones are set to zero. Defaults to SET_ZERO.")},
  {C("add_to_diag_"), (PyCFunction)wrapAddToDiag_as_add_to_diag_, METH_VARARGS | METH_KEYWORDS, C("add_to_diag_(r:float)\n\nAdds a constant r to the diagonal of the matrix.\n\nArgs:\n    r(float): A constant")},
  {C("scale_diag_"), (PyCFunction)wrapScaleDiag_as_scale_diag_, METH_VARARGS | METH_KEYWORDS, C("scale_diag_(alpha:float)\n\nScales the diagonal of the matrix by alpha.\n\nArgs:\n    alpha(float): A scaling constant")},
  {C("set_diag_"), (PyCFunction)wrapSetDiag_as_set_diag_, METH_VARARGS | METH_KEYWORDS, C("set_diag_(alpha:float)\n\nSets all the diagonal elements to alpha.\n\nArgs:\n    alpha(float): A constant")},
  {C("copy_from_packed_"), (PyCFunction)wrapCopyFromPacked_as_copy_from_packed_, METH_VARARGS | METH_KEYWORDS, C("copy_from_packed_(orig:PackedMatrix)\n\nCopies the elements from a packed matrix.\n\nArgs:\n    orig(PackedMatrix): The packed matrix to copy from.\n\nRaises:\n    RuntimeError: In case of dimension mismatch.")},
  {C("copy_from_vec_"), (PyCFunction)wrapCopyFromVec_as_copy_from_vec_, METH_VARARGS | METH_KEYWORDS, C("copy_from_vec_(orig:SubVector)\n\nCopies the elements from a vector.\n\nInterprets the vector as having the same layout as the packed matrix.\nInput vector and the packed matrix must have the same size, i.e.\n`orig.size == (self.num_rows * self.num_cols+1) / 2`.\n\nArgs:\n    orig (SubVector): The vector to copy from.")},
  {C("size_in_bytes"), (PyCFunction)wrapSizeInBytes_as_size_in_bytes, METH_NOARGS, C("size_in_bytes() -> int\n\nReturns the size (in bytes) of the data held by the matrix.")},
  {C("getitem"), (PyCFunction)wrapgetitem, METH_VARARGS | METH_KEYWORDS, C("getitem(r:int, c:int) -> float\n\nGets the element at the given index.\n\nArgs:\n  r (int): The row index of the element to get.\n  c (int): The column index of the element to get.\n\nReturns:\n  The element at the given index.\n\nRaises:\n  RuntimeError: If r > num_rows or c > num_cols.")},
  {C("max"), (PyCFunction)wrapMax_as_max, METH_NOARGS, C("max() -> float\n\nReturns the maximum value in the matrix.")},
  {C("min"), (PyCFunction)wrapMin_as_min, METH_NOARGS, C("min() -> float\n\nReturns the minimum value in the matrix.")},
  {C("scale_"), (PyCFunction)wrapScale_as_scale_, METH_VARARGS | METH_KEYWORDS, C("scale_(c:float)\n\nScales each element with the given scalar.\n\nArgs:\n  c (float): The scaling coefficient.")},
  {C("read_"), (PyCFunction)wrapRead_as_read_, METH_VARARGS | METH_KEYWORDS, C("read_(is:istream, binary:bool, add:bool=default)\n\nReads the matrix from the given C++ stream.\n\nArgs:\n  is (istream): The input C++ stream.\n  binary (bool): Whether the stream is binary.\n  add (bool): Whether to add existing contents to the read matrix.\n    Defaults to False.")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n\nWrites the matrix to given C++ stream.\n\nArgs:\n    os (ostream): The output C++ straem.\n    binary (bool): Whether the stream is binary.")},
  {C("swap_with_packed_"), (PyCFunction)wrapSwap_as_swap_with_packed_, METH_VARARGS | METH_KEYWORDS, C("swap_with_packed_(other:PackedMatrix)\n\nSwaps the contents with another packed matrix.\n\nShallow swap.\n\nArgs:\n  other (PackedMatrix): The matrix to swap contents with.")},
  {C("swap_with_matrix_"), (PyCFunction)wrapSwap_as_swap_with_matrix_, METH_VARARGS | METH_KEYWORDS, C("swap_with_matrix_(other:Matrix)\n\nSwaps the contents with a matrix.\n\nShallow swap.\n\nArgs:\n  other (Matrix): The matrix to swap contents with.")},
  {}
};

// PackedMatrix __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// PackedMatrix __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// PackedMatrix __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_packed_matrix.PackedMatrix",       // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  &AsSequence,                         // tp_as_sequence
  &AsMapping,                          // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Base class for single precision triangular and symmetric matrices.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "PackedMatrix takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::PackedMatrix<float>>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::PackedMatrix<float>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_PackedMatrix_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::PackedMatrix<float>"));
      if (!PyErr_Occurred()) {
        ::kaldi::PackedMatrix<float>* c = static_cast<::kaldi::PackedMatrix<float>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::PackedMatrix<float>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyPackedMatrix

namespace pyDoublePackedMatrix {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::PackedMatrix<double>> cpp;
};
static ::kaldi::PackedMatrix<double>* ThisPtr(PyObject*);

static PyObject* get_num_rows(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->NumRows(), {});
}

static PyObject* get_num_cols(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->NumCols(), {});
}

// @classmethod from_size(r:int, resize_type:MatrixResizeType=default) -> DoublePackedMatrix
static PyObject* wrapPackedMatrix_as_from_size(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("r"),
      C("resize_type"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:from_size", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_size", names[0], "int", a[0]);
  ::kaldi::MatrixResizeType arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_size", names[1], "::kaldi::MatrixResizeType", a[1]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::PackedMatrix<double>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    ret0 = ::gtl::MakeUnique<::kaldi::PackedMatrix<double>>(std::move(arg1)); break;
  case 2:
    ret0 = ::gtl::MakeUnique<::kaldi::PackedMatrix<double>>(std::move(arg1), std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_other(orig:DoublePackedMatrix) -> DoublePackedMatrix
static PyObject* wrapPackedMatrix_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("orig"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::kaldi::PackedMatrix<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::kaldi::PackedMatrix<double>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::PackedMatrix<double>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::PackedMatrix<double>>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// set_zero_()
static PyObject* wrapSetZero_as_set_zero_(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::PackedMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetZero();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// set_unit_()
static PyObject* wrapSetUnit_as_set_unit_(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::PackedMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetUnit();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// set_randn_()
static PyObject* wrapSetRandn_as_set_randn_(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::PackedMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetRandn();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// trace() -> float
static PyObject* wrapTrace_as_trace(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::PackedMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  double ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Trace();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// resize_(num_rows:int, resize_type:MatrixResizeType=default)
static PyObject* wrapResize_as_resize_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("num_rows"),
      C("resize_type"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:resize_", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("resize_", names[0], "int", a[0]);
  ::kaldi::MatrixResizeType arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("resize_", names[1], "::kaldi::MatrixResizeType", a[1]);
  }
  // Call actual C++ method.
  ::kaldi::PackedMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    c->Resize(std::move(arg1)); break;
  case 2:
    c->Resize(std::move(arg1), std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// add_to_diag_(r:float)
static PyObject* wrapAddToDiag_as_add_to_diag_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("r"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:add_to_diag_", names, &a[0])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add_to_diag_", names[0], "double", a[0]);
  // Call actual C++ method.
  ::kaldi::PackedMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AddToDiag(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// scale_diag_(alpha:float)
static PyObject* wrapScaleDiag_as_scale_diag_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("alpha"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:scale_diag_", names, &a[0])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("scale_diag_", names[0], "double", a[0]);
  // Call actual C++ method.
  ::kaldi::PackedMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ScaleDiag(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// set_diag_(alpha:float)
static PyObject* wrapSetDiag_as_set_diag_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("alpha"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_diag_", names, &a[0])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_diag_", names[0], "double", a[0]);
  // Call actual C++ method.
  ::kaldi::PackedMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetDiag(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// copy_from_packed_(orig:DoublePackedMatrix)
static PyObject* wrapCopyFromPacked_as_copy_from_packed_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("orig"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:copy_from_packed_", names, &a[0])) return nullptr;
  ::kaldi::PackedMatrix<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_from_packed_", names[0], "::kaldi::PackedMatrix<double>", a[0]);
  // Call actual C++ method.
  ::kaldi::PackedMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CopyFromPacked(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// copy_from_vec_(orig:DoubleSubVector)
static PyObject* wrapCopyFromVec_as_copy_from_vec_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("orig"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:copy_from_vec_", names, &a[0])) return nullptr;
  ::kaldi::SubVector<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_from_vec_", names[0], "::kaldi::SubVector<double>", a[0]);
  // Call actual C++ method.
  ::kaldi::PackedMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CopyFromVec(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// __len__() -> int
static PyObject* wrapNumRows_as___len__(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::PackedMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumRows();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// size_in_bytes() -> int
static PyObject* wrapSizeInBytes_as_size_in_bytes(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::PackedMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->SizeInBytes();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// getitem(r:int, c:int) -> float
static PyObject* wrapgetitem(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("r"),
      C("c"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:getitem", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("getitem", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("getitem", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::PackedMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  double ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->operator()(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// max() -> float
static PyObject* wrapMax_as_max(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::PackedMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  double ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Max();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// min() -> float
static PyObject* wrapMin_as_min(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::PackedMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  double ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Min();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// scale_(c:float)
static PyObject* wrapScale_as_scale_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("c"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:scale_", names, &a[0])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("scale_", names[0], "double", a[0]);
  // Call actual C++ method.
  ::kaldi::PackedMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Scale(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// read_(is:istream, binary:bool, add:bool=default)
static PyObject* wrapRead_as_read_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("is"),
      C("binary"),
      C("add"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:read_", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read_", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read_", names[1], "bool", a[1]);
  bool arg3;
  if (nargs > 2) {
    if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("read_", names[2], "bool", a[2]);
  }
  // Call actual C++ method.
  ::kaldi::PackedMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    c->Read(*arg1, std::move(arg2)); break;
  case 3:
    c->Read(*arg1, std::move(arg2), std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::PackedMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// swap_with_packed_(other:DoublePackedMatrix)
static PyObject* wrapSwap_as_swap_with_packed_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:swap_with_packed_", names, &a[0])) return nullptr;
  ::kaldi::PackedMatrix<double> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("swap_with_packed_", names[0], "::kaldi::PackedMatrix<double> *", a[0]);
  // Call actual C++ method.
  ::kaldi::PackedMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Swap(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// swap_with_matrix_(other:DoubleMatrix)
static PyObject* wrapSwap_as_swap_with_matrix_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:swap_with_matrix_", names, &a[0])) return nullptr;
  ::kaldi::Matrix<double> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("swap_with_matrix_", names[0], "::kaldi::Matrix<double> *", a[0]);
  // Call actual C++ method.
  ::kaldi::PackedMatrix<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Swap(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

static PyGetSetDef Properties[] = {
  {C("num_rows"), get_num_rows, nullptr, C("The number of rows.")},
  {C("num_cols"), get_num_cols, nullptr, C("The number of columns.")},
  {}
};

PySequenceMethods AsSequence = {
  slot::adapter<Py_ssize_t, slot::as_size, wrapNumRows_as___len__>, // sq_length
  nullptr,                             // sq_concat
  nullptr,                             // sq_repeat
  nullptr,                             // sq_item
  nullptr,                             // was_sq_slice
  nullptr,                             // sq_ass_item
  nullptr,                             // was_sq_ass_slice
  nullptr,                             // sq_contains
  nullptr,                             // sq_inplace_concat
  nullptr,                             // sq_inplace_repeat
};

PyMappingMethods AsMapping = {
  slot::adapter<Py_ssize_t, slot::as_size, wrapNumRows_as___len__>, // mp_length
  nullptr,                             // mp_subscript
  nullptr,                             // mp_ass_subscript
};

static PyMethodDef Methods[] = {
  {C("from_size"), (PyCFunction)wrapPackedMatrix_as_from_size, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_size(r:int, resize_type:MatrixResizeType=default) -> DoublePackedMatrix\n\nCreates a new packed matrix of given size.\n\nArgs:\n  r (int): The number or rows.\n  resize_type (:class:`MatrixResizeType`): Determines how the elements\n    are initialized. If SET_ZERO (or COPY_DATA), they are set to zero.\n    If UNDEFINED, they are left uninitialized. Defaults to SET_ZERO.\n\nNote:\n  Since packed matrices are for storing square matrices, the number\n  of columns is always equal to the number of rows.")},
  {C("from_other"), (PyCFunction)wrapPackedMatrix_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(orig:DoublePackedMatrix) -> DoublePackedMatrix\n\nCreates a new packed matrix from the given packed matrix.\n\nArgs:\n    orig (PackedMatrix): The input packed matrix.")},
  {C("set_zero_"), (PyCFunction)wrapSetZero_as_set_zero_, METH_NOARGS, C("set_zero_()\n\nSets the elements to zero.")},
  {C("set_unit_"), (PyCFunction)wrapSetUnit_as_set_unit_, METH_NOARGS, C("set_unit_()\n\nSets diagonal elements to one, off-diagonal elements to zero.")},
  {C("set_randn_"), (PyCFunction)wrapSetRandn_as_set_randn_, METH_NOARGS, C("set_randn_()\n\nSets the elements to numbers from standard normal distribution.")},
  {C("trace"), (PyCFunction)wrapTrace_as_trace, METH_NOARGS, C("trace() -> float\n\nReturns the trace of the matrix.")},
  {C("resize_"), (PyCFunction)wrapResize_as_resize_, METH_VARARGS | METH_KEYWORDS, C("resize_(num_rows:int, resize_type:MatrixResizeType=default)\n\nResizes the matrix.\n\nArgs:\n  num_rows (int): The new number of rows.\n  resize_type (:class:`MatrixResizeType`): Determines how the elements\n    are initialized. If SET_ZERO, they are set to zero. If UNDEFINED,\n    they are left uninitialized. If COPY_DATA, existing elements are\n    retained, new ones are set to zero. Defaults to SET_ZERO.")},
  {C("add_to_diag_"), (PyCFunction)wrapAddToDiag_as_add_to_diag_, METH_VARARGS | METH_KEYWORDS, C("add_to_diag_(r:float)\n\nAdds a constant r to the diagonal of the matrix.\n\nArgs:\n    r(float): A constant")},
  {C("scale_diag_"), (PyCFunction)wrapScaleDiag_as_scale_diag_, METH_VARARGS | METH_KEYWORDS, C("scale_diag_(alpha:float)\n\nScales the diagonal of the matrix by alpha.\n\nArgs:\n    alpha(float): A scaling constant")},
  {C("set_diag_"), (PyCFunction)wrapSetDiag_as_set_diag_, METH_VARARGS | METH_KEYWORDS, C("set_diag_(alpha:float)\n\nSets all the diagonal elements to alpha.\n\nArgs:\n    alpha(float): A constant")},
  {C("copy_from_packed_"), (PyCFunction)wrapCopyFromPacked_as_copy_from_packed_, METH_VARARGS | METH_KEYWORDS, C("copy_from_packed_(orig:DoublePackedMatrix)\n\nCopies the elements from a packed matrix.\n\nArgs:\n    orig(DoublePackedMatrix): The packed matrix to copy from.\n\nRaises:\n    RuntimeError: In case of dimension mismatch.")},
  {C("copy_from_vec_"), (PyCFunction)wrapCopyFromVec_as_copy_from_vec_, METH_VARARGS | METH_KEYWORDS, C("copy_from_vec_(orig:DoubleSubVector)\n\nCopies the elements from a vector.\n\nInterprets the vector as having the same layout as the packed matrix.\nInput vector and the packed matrix must have the same size, i.e.\n`orig.size == (self.num_rows * self.num_cols+1) / 2`.\n\nArgs:\n    orig (DoubleSubVector): The vector to copy from.")},
  {C("size_in_bytes"), (PyCFunction)wrapSizeInBytes_as_size_in_bytes, METH_NOARGS, C("size_in_bytes() -> int\n\nReturns the size (in bytes) of the data held by the matrix.")},
  {C("getitem"), (PyCFunction)wrapgetitem, METH_VARARGS | METH_KEYWORDS, C("getitem(r:int, c:int) -> float\n\nGets the element at the given index.\n\nArgs:\n  r (int): The row index of the element to get.\n  c (int): The column index of the element to get.\n\nReturns:\n  The element at the given index.\n\nRaises:\n  RuntimeError: If r > num_rows or c > num_cols.")},
  {C("max"), (PyCFunction)wrapMax_as_max, METH_NOARGS, C("max() -> float\n\nReturns the maximum value in the matrix.")},
  {C("min"), (PyCFunction)wrapMin_as_min, METH_NOARGS, C("min() -> float\n\nReturns the minimum value in the matrix.")},
  {C("scale_"), (PyCFunction)wrapScale_as_scale_, METH_VARARGS | METH_KEYWORDS, C("scale_(c:float)\n\nScales each element with the given scalar.\n\nArgs:\n  c (float): The scaling coefficient.")},
  {C("read_"), (PyCFunction)wrapRead_as_read_, METH_VARARGS | METH_KEYWORDS, C("read_(is:istream, binary:bool, add:bool=default)\n\nReads the matrix from the given C++ stream.\n\nArgs:\n  is (istream): The input C++ stream.\n  binary (bool): Whether the stream is binary.\n  add (bool): Whether to add existing contents to the read matrix.\n    Defaults to False.")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n\nWrites the matrix to given C++ stream.\n\nArgs:\n    os (ostream): The output C++ straem.\n    binary (bool): Whether the stream is binary.")},
  {C("swap_with_packed_"), (PyCFunction)wrapSwap_as_swap_with_packed_, METH_VARARGS | METH_KEYWORDS, C("swap_with_packed_(other:DoublePackedMatrix)\n\nSwaps the contents with another packed matrix.\n\nShallow swap.\n\nArgs:\n  other (PackedMatrix): The matrix to swap contents with.")},
  {C("swap_with_matrix_"), (PyCFunction)wrapSwap_as_swap_with_matrix_, METH_VARARGS | METH_KEYWORDS, C("swap_with_matrix_(other:DoubleMatrix)\n\nSwaps the contents with a matrix.\n\nShallow swap.\n\nArgs:\n  other (Matrix): The matrix to swap contents with.")},
  {}
};

// DoublePackedMatrix __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// DoublePackedMatrix __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// DoublePackedMatrix __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_packed_matrix.DoublePackedMatrix", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  &AsSequence,                         // tp_as_sequence
  &AsMapping,                          // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Base class for single precision triangular and symmetric matrices.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "DoublePackedMatrix takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::PackedMatrix<double>>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::PackedMatrix<double>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_PackedMatrix_double"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::PackedMatrix<double>"));
      if (!PyErr_Occurred()) {
        ::kaldi::PackedMatrix<double>* c = static_cast<::kaldi::PackedMatrix<double>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::PackedMatrix<double>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyDoublePackedMatrix


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyPackedMatrix::wrapper_Type) < 0) return false;
  Py_INCREF(&pyPackedMatrix::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyDoublePackedMatrix::wrapper_Type) < 0) return false;
  Py_INCREF(&pyDoublePackedMatrix::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_packed_matrix",  // module name
  "CLIF-generated module for matrix/packed-matrix.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_matrix_common")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_matrix_ext")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "PackedMatrix", reinterpret_cast<PyObject*>(&pyPackedMatrix::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "DoublePackedMatrix", reinterpret_cast<PyObject*>(&pyDoublePackedMatrix::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __packed__matrix_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// DoublePackedMatrix to/from ::kaldi::PackedMatrix<double> conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::PackedMatrix<double>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::PackedMatrix<double>* cpp = __packed__matrix_clifwrap::pyDoublePackedMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::PackedMatrix<double>>* c) {
  assert(c != nullptr);
  ::kaldi::PackedMatrix<double>* cpp = __packed__matrix_clifwrap::pyDoublePackedMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__packed__matrix_clifwrap::pyDoublePackedMatrix::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::PackedMatrix<double>>* c) {
  assert(c != nullptr);
  ::kaldi::PackedMatrix<double>* cpp = __packed__matrix_clifwrap::pyDoublePackedMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__packed__matrix_clifwrap::pyDoublePackedMatrix::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert DoublePackedMatrix instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::PackedMatrix<double>* c) {
  assert(c != nullptr);
  ::kaldi::PackedMatrix<double>* cpp = __packed__matrix_clifwrap::pyDoublePackedMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::PackedMatrix<double>>* c) {
  assert(c != nullptr);
  ::kaldi::PackedMatrix<double>* cpp = __packed__matrix_clifwrap::pyDoublePackedMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::PackedMatrix<double>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__packed__matrix_clifwrap::pyDoublePackedMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__packed__matrix_clifwrap::pyDoublePackedMatrix::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PackedMatrix<double>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::PackedMatrix<double>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__packed__matrix_clifwrap::pyDoublePackedMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__packed__matrix_clifwrap::pyDoublePackedMatrix::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PackedMatrix<double>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::PackedMatrix<double>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__packed__matrix_clifwrap::pyDoublePackedMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__packed__matrix_clifwrap::pyDoublePackedMatrix::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PackedMatrix<double>>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::PackedMatrix<double>& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__packed__matrix_clifwrap::pyDoublePackedMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__packed__matrix_clifwrap::pyDoublePackedMatrix::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::PackedMatrix<double>>(c);
  return py;
}

// PackedMatrix to/from ::kaldi::PackedMatrix<float> conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::PackedMatrix<float>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::PackedMatrix<float>* cpp = __packed__matrix_clifwrap::pyPackedMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::PackedMatrix<float>>* c) {
  assert(c != nullptr);
  ::kaldi::PackedMatrix<float>* cpp = __packed__matrix_clifwrap::pyPackedMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__packed__matrix_clifwrap::pyPackedMatrix::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::PackedMatrix<float>>* c) {
  assert(c != nullptr);
  ::kaldi::PackedMatrix<float>* cpp = __packed__matrix_clifwrap::pyPackedMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__packed__matrix_clifwrap::pyPackedMatrix::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert PackedMatrix instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::PackedMatrix<float>* c) {
  assert(c != nullptr);
  ::kaldi::PackedMatrix<float>* cpp = __packed__matrix_clifwrap::pyPackedMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::PackedMatrix<float>>* c) {
  assert(c != nullptr);
  ::kaldi::PackedMatrix<float>* cpp = __packed__matrix_clifwrap::pyPackedMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::PackedMatrix<float>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__packed__matrix_clifwrap::pyPackedMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__packed__matrix_clifwrap::pyPackedMatrix::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PackedMatrix<float>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::PackedMatrix<float>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__packed__matrix_clifwrap::pyPackedMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__packed__matrix_clifwrap::pyPackedMatrix::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PackedMatrix<float>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::PackedMatrix<float>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__packed__matrix_clifwrap::pyPackedMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__packed__matrix_clifwrap::pyPackedMatrix::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PackedMatrix<float>>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::PackedMatrix<float>& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__packed__matrix_clifwrap::pyPackedMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__packed__matrix_clifwrap::pyPackedMatrix::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::PackedMatrix<float>>(c);
  return py;
}

}  // namespace kaldi
