//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/lm/kaldi-rnnlm.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "fstext/float-weight-clifwrap.h"
#include "fstext/lattice-weight-clifwrap.h"
#include "fstext/arc-clifwrap.h"
#include "itf/options-itf-clifwrap.h"
#include "kaldi-rnnlm-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __kaldi__rnnlm_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyKaldiRnnlmWrapperOpts {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::KaldiRnnlmWrapperOpts> cpp;
};
static ::kaldi::KaldiRnnlmWrapperOpts* ThisPtr(PyObject*);

static PyObject* get_unk_symbol(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->unk_symbol, _1);
}

static int set_unk_symbol(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the unk_symbol attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->unk_symbol)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for unk_symbol:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_eos_symbol(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->eos_symbol, _1);
}

static int set_eos_symbol(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the eos_symbol attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->eos_symbol)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for eos_symbol:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::KaldiRnnlmWrapperOpts* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("unk_symbol"), get_unk_symbol, set_unk_symbol, C("Unknown symbol, e.g. <unk>.")},
  {C("eos_symbol"), get_eos_symbol, set_eos_symbol, C("EOS symbol, e.g. </s>.")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n\nRegisters options with an object implementing the options interface.\n\nArgs:\n  opts (OptionsItf): An object implementing the options interface.\n    Typically a command-line option parser.")},
  {}
};

// KaldiRnnlmWrapperOpts __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// KaldiRnnlmWrapperOpts __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// KaldiRnnlmWrapperOpts __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_kaldi_rnnlm.KaldiRnnlmWrapperOpts", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Options for wrapping a Mikolov RNNLM.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "KaldiRnnlmWrapperOpts takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::KaldiRnnlmWrapperOpts>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::KaldiRnnlmWrapperOpts* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_KaldiRnnlmWrapperOpts"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::KaldiRnnlmWrapperOpts"));
      if (!PyErr_Occurred()) {
        ::kaldi::KaldiRnnlmWrapperOpts* c = static_cast<::kaldi::KaldiRnnlmWrapperOpts*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::KaldiRnnlmWrapperOpts*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyKaldiRnnlmWrapperOpts

namespace pyKaldiRnnlmWrapper {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::KaldiRnnlmWrapper> cpp;
};
static ::kaldi::KaldiRnnlmWrapper* ThisPtr(PyObject*);

// __init__(opts:KaldiRnnlmWrapperOpts, unk_prob_rspecifier:str, word_symbol_table_rxfilename:str, rnnlm_rxfilename:str)
static PyObject* wrapKaldiRnnlmWrapper_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("opts"),
      C("unk_prob_rspecifier"),
      C("word_symbol_table_rxfilename"),
      C("rnnlm_rxfilename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:__init__", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::KaldiRnnlmWrapperOpts* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::KaldiRnnlmWrapperOpts", a[0]);
  ::std::string arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::std::string", a[1]);
  ::std::string arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::std::string", a[2]);
  ::std::string arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "::std::string", a[3]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::KaldiRnnlmWrapper>(*arg1, std::move(arg2), std::move(arg3), std::move(arg4));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// get_hidden_layer_size() -> int
static PyObject* wrapGetHiddenLayerSize_as_get_hidden_layer_size(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::KaldiRnnlmWrapper* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetHiddenLayerSize();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_eos() -> int
static PyObject* wrapGetEos_as_get_eos(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::KaldiRnnlmWrapper* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetEos();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_log_prob(word:int, wseq:list<int>, context_in:list<float>) -> (logprob:float, context_out:list<float>)
static PyObject* wrapGetLogProb_as_get_log_prob(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("word"),
      C("wseq"),
      C("context_in"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:get_log_prob", names, &a[0], &a[1], &a[2])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_log_prob", names[0], "int", a[0]);
  ::std::vector< ::int32> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_log_prob", names[1], "::std::vector< ::int32>", a[1]);
  ::std::vector<float> arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("get_log_prob", names[2], "::std::vector<float>", a[2]);
  ::std::vector<float> ret1{};
  // Call actual C++ method.
  ::kaldi::KaldiRnnlmWrapper* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetLogProb(std::move(arg1), std::move(arg2), std::move(arg3), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapKaldiRnnlmWrapper_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(opts:KaldiRnnlmWrapperOpts, unk_prob_rspecifier:str, word_symbol_table_rxfilename:str, rnnlm_rxfilename:str)\n  Calls C++ function\n  void ::kaldi::KaldiRnnlmWrapper::KaldiRnnlmWrapper(::kaldi::KaldiRnnlmWrapperOpts, ::std::string, ::std::string, ::std::string)")},
  {C("get_hidden_layer_size"), (PyCFunction)wrapGetHiddenLayerSize_as_get_hidden_layer_size, METH_NOARGS, C("get_hidden_layer_size() -> int\n\nReturns the size of hidden layer.")},
  {C("get_eos"), (PyCFunction)wrapGetEos_as_get_eos, METH_NOARGS, C("get_eos() -> int\n\nReturns the label for EOS symbol.")},
  {C("get_log_prob"), (PyCFunction)wrapGetLogProb_as_get_log_prob, METH_VARARGS | METH_KEYWORDS, C("get_log_prob(word:int, wseq:list<int>, context_in:list<float>) -> (logprob:float, context_out:list<float>)\n\nComputes the log probability of the word given the history.\n\nComputes the log probability of the word given the history and the\ninitial context vector. Returns the log probability and the final\ncontext vector.")},
  {}
};

// KaldiRnnlmWrapper __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// KaldiRnnlmWrapper __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// KaldiRnnlmWrapper __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_kaldi_rnnlm.KaldiRnnlmWrapper",    // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Mikolov RNNLM wrapper.",            // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapKaldiRnnlmWrapper_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::KaldiRnnlmWrapper* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_KaldiRnnlmWrapper"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::KaldiRnnlmWrapper"));
      if (!PyErr_Occurred()) {
        ::kaldi::KaldiRnnlmWrapper* c = static_cast<::kaldi::KaldiRnnlmWrapper*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::KaldiRnnlmWrapper*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyKaldiRnnlmWrapper

namespace pyRnnlmDeterministicFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::RnnlmDeterministicFst> cpp;
};
static ::kaldi::RnnlmDeterministicFst* ThisPtr(PyObject*);

// __init__(max_ngram_order:int, rnnlm:KaldiRnnlmWrapper)
static PyObject* wrapRnnlmDeterministicFst_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("max_ngram_order"),
      C("rnnlm"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "int", a[0]);
  ::kaldi::KaldiRnnlmWrapper * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::KaldiRnnlmWrapper *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::RnnlmDeterministicFst>(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// start() -> int
static PyObject* wrapStart_as_start(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RnnlmDeterministicFst* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Start();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// final(state:int) -> TropicalWeight
static PyObject* wrapFinal_as_final(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:final", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("final", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::RnnlmDeterministicFst* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::TropicalWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Final(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_arc(s:int, ilabel:int) -> (success:bool, oarc:StdArc)
static PyObject* wrapGetArc_as_get_arc(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("s"),
      C("ilabel"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_arc", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_arc", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_arc", names[1], "int", a[1]);
  ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > ret1{};
  // Call actual C++ method.
  ::kaldi::RnnlmDeterministicFst* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetArc(std::move(arg1), std::move(arg2), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  PyObject* pyproc = ImportFQName("kaldi.util._value_error_on_false");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// Implicit cast this as ::fst::DeterministicOnDemandFst< ::fst::StdArc>*
static PyObject* as_fst_DeterministicOnDemandFst__fst_StdArc(PyObject* self) {
  ::fst::DeterministicOnDemandFst< ::fst::StdArc>* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::DeterministicOnDemandFst< ::fst::StdArc>"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapRnnlmDeterministicFst_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(max_ngram_order:int, rnnlm:KaldiRnnlmWrapper)\n  Calls C++ function\n  void ::kaldi::RnnlmDeterministicFst::RnnlmDeterministicFst(int, ::kaldi::KaldiRnnlmWrapper *)")},
  {C("start"), (PyCFunction)wrapStart_as_start, METH_NOARGS, C("start() -> int\n\nReturns the start state index.")},
  {C("final"), (PyCFunction)wrapFinal_as_final, METH_VARARGS | METH_KEYWORDS, C("final(state:int) -> TropicalWeight\n\nReturns the final weight of the given state.")},
  {C("get_arc"), (PyCFunction)wrapGetArc_as_get_arc, METH_VARARGS | METH_KEYWORDS, C("get_arc(s:int, ilabel:int) -> (success:bool, oarc:StdArc)\n\nCreates an on demand arc and returns it.\n\nArgs:\n  s (int): State index.\n  ilabel (int): Arc label.\n\nReturns:\n  The created arc.")},
  {C("as_fst_DeterministicOnDemandFst__fst_StdArc"), (PyCFunction)as_fst_DeterministicOnDemandFst__fst_StdArc, METH_NOARGS, C("Upcast to ::fst::DeterministicOnDemandFst< ::fst::StdArc>*")},
  {}
};

// RnnlmDeterministicFst __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// RnnlmDeterministicFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// RnnlmDeterministicFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_kaldi_rnnlm.RnnlmDeterministicFst", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Deterministic on-demand Mikolov RNNLM FST.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapRnnlmDeterministicFst_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::RnnlmDeterministicFst* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_RnnlmDeterministicFst"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::RnnlmDeterministicFst"));
      if (!PyErr_Occurred()) {
        ::kaldi::RnnlmDeterministicFst* c = static_cast<::kaldi::RnnlmDeterministicFst*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::RnnlmDeterministicFst*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyRnnlmDeterministicFst


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyKaldiRnnlmWrapperOpts::wrapper_Type) < 0) return false;
  Py_INCREF(&pyKaldiRnnlmWrapperOpts::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyKaldiRnnlmWrapper::wrapper_Type) < 0) return false;
  Py_INCREF(&pyKaldiRnnlmWrapper::wrapper_Type);  // For PyModule_AddObject to steal.
  PyObject* base_cls = ImportFQName("kaldi.fstext._deterministic_fst.StdDeterministicOnDemandFst");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._deterministic_fst.StdDeterministicOnDemandFst is not a new style class inheriting from object.");
    return false;
  }
  pyRnnlmDeterministicFst::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyRnnlmDeterministicFst::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._deterministic_fst.StdDeterministicOnDemandFst is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyRnnlmDeterministicFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyRnnlmDeterministicFst::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_kaldi_rnnlm",  // module name
  "CLIF-generated module for lm/kaldi-rnnlm.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_float_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_lattice_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_arc")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "KaldiRnnlmWrapperOpts", reinterpret_cast<PyObject*>(&pyKaldiRnnlmWrapperOpts::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "KaldiRnnlmWrapper", reinterpret_cast<PyObject*>(&pyKaldiRnnlmWrapper::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "RnnlmDeterministicFst", reinterpret_cast<PyObject*>(&pyRnnlmDeterministicFst::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __kaldi__rnnlm_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// KaldiRnnlmWrapper to/from ::kaldi::KaldiRnnlmWrapper conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::KaldiRnnlmWrapper** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::KaldiRnnlmWrapper* cpp = __kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapper::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::KaldiRnnlmWrapper>* c) {
  assert(c != nullptr);
  ::kaldi::KaldiRnnlmWrapper* cpp = __kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapper::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapper::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::KaldiRnnlmWrapper>* c) {
  assert(c != nullptr);
  ::kaldi::KaldiRnnlmWrapper* cpp = __kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapper::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapper::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert KaldiRnnlmWrapper instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::KaldiRnnlmWrapper* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapper::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapper::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::KaldiRnnlmWrapper>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::KaldiRnnlmWrapper> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapper::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapper::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::KaldiRnnlmWrapper>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::KaldiRnnlmWrapper> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapper::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapper::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::KaldiRnnlmWrapper>(std::move(c));
  return py;
}

// KaldiRnnlmWrapperOpts to/from ::kaldi::KaldiRnnlmWrapperOpts conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::KaldiRnnlmWrapperOpts** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::KaldiRnnlmWrapperOpts* cpp = __kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapperOpts::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::KaldiRnnlmWrapperOpts>* c) {
  assert(c != nullptr);
  ::kaldi::KaldiRnnlmWrapperOpts* cpp = __kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapperOpts::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapperOpts::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::KaldiRnnlmWrapperOpts>* c) {
  assert(c != nullptr);
  ::kaldi::KaldiRnnlmWrapperOpts* cpp = __kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapperOpts::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapperOpts::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert KaldiRnnlmWrapperOpts instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::KaldiRnnlmWrapperOpts* c) {
  assert(c != nullptr);
  ::kaldi::KaldiRnnlmWrapperOpts* cpp = __kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapperOpts::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::KaldiRnnlmWrapperOpts>* c) {
  assert(c != nullptr);
  ::kaldi::KaldiRnnlmWrapperOpts* cpp = __kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapperOpts::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::KaldiRnnlmWrapperOpts* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapperOpts::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapperOpts::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::KaldiRnnlmWrapperOpts>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::KaldiRnnlmWrapperOpts> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapperOpts::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapperOpts::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::KaldiRnnlmWrapperOpts>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::KaldiRnnlmWrapperOpts> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapperOpts::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapperOpts::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::KaldiRnnlmWrapperOpts>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::KaldiRnnlmWrapperOpts& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapperOpts::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__rnnlm_clifwrap::pyKaldiRnnlmWrapperOpts::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::KaldiRnnlmWrapperOpts>(c);
  return py;
}

// RnnlmDeterministicFst to/from ::kaldi::RnnlmDeterministicFst conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::RnnlmDeterministicFst** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::RnnlmDeterministicFst* cpp = __kaldi__rnnlm_clifwrap::pyRnnlmDeterministicFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::RnnlmDeterministicFst>* c) {
  assert(c != nullptr);
  ::kaldi::RnnlmDeterministicFst* cpp = __kaldi__rnnlm_clifwrap::pyRnnlmDeterministicFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__kaldi__rnnlm_clifwrap::pyRnnlmDeterministicFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::RnnlmDeterministicFst>* c) {
  assert(c != nullptr);
  ::kaldi::RnnlmDeterministicFst* cpp = __kaldi__rnnlm_clifwrap::pyRnnlmDeterministicFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__kaldi__rnnlm_clifwrap::pyRnnlmDeterministicFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert RnnlmDeterministicFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::RnnlmDeterministicFst* c) {
  assert(c != nullptr);
  ::kaldi::RnnlmDeterministicFst* cpp = __kaldi__rnnlm_clifwrap::pyRnnlmDeterministicFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::RnnlmDeterministicFst>* c) {
  assert(c != nullptr);
  ::kaldi::RnnlmDeterministicFst* cpp = __kaldi__rnnlm_clifwrap::pyRnnlmDeterministicFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::RnnlmDeterministicFst* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__rnnlm_clifwrap::pyRnnlmDeterministicFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__rnnlm_clifwrap::pyRnnlmDeterministicFst::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RnnlmDeterministicFst>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RnnlmDeterministicFst> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__rnnlm_clifwrap::pyRnnlmDeterministicFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__rnnlm_clifwrap::pyRnnlmDeterministicFst::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RnnlmDeterministicFst>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RnnlmDeterministicFst> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__rnnlm_clifwrap::pyRnnlmDeterministicFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__rnnlm_clifwrap::pyRnnlmDeterministicFst::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RnnlmDeterministicFst>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::RnnlmDeterministicFst& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__kaldi__rnnlm_clifwrap::pyRnnlmDeterministicFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__rnnlm_clifwrap::pyRnnlmDeterministicFst::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::RnnlmDeterministicFst>(c);
  return py;
}

}  // namespace kaldi
