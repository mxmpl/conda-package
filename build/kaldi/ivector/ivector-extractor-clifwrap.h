//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/ivector/ivector-extractor.clif

#include <memory>
#include "clif/python/optional.h"
#include "ivector/ivector-extractor.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::IvectorEstimationOptions` as IvectorEstimationOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::IvectorEstimationOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::IvectorEstimationOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::IvectorEstimationOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::IvectorEstimationOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::IvectorEstimationOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::IvectorEstimationOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::IvectorEstimationOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::IvectorEstimationOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::IvectorEstimationOptions&, py::PostConv);
// CLIF use `::kaldi::IvectorExtractor` as IvectorExtractor
bool Clif_PyObjAs(PyObject* input, ::kaldi::IvectorExtractor** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::IvectorExtractor>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::IvectorExtractor>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::IvectorExtractor* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::IvectorExtractor>* output);
PyObject* Clif_PyObjFrom(::kaldi::IvectorExtractor*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::IvectorExtractor>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::IvectorExtractor>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::IvectorExtractor&, py::PostConv);
// CLIF use `::kaldi::IvectorExtractorEstimationOptions` as IvectorExtractorEstimationOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::IvectorExtractorEstimationOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::IvectorExtractorEstimationOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::IvectorExtractorEstimationOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::IvectorExtractorEstimationOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::IvectorExtractorEstimationOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::IvectorExtractorEstimationOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::IvectorExtractorEstimationOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::IvectorExtractorEstimationOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::IvectorExtractorEstimationOptions&, py::PostConv);
// CLIF use `::kaldi::IvectorExtractorOptions` as IvectorExtractorOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::IvectorExtractorOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::IvectorExtractorOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::IvectorExtractorOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::IvectorExtractorOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::IvectorExtractorOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::IvectorExtractorOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::IvectorExtractorOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::IvectorExtractorOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::IvectorExtractorOptions&, py::PostConv);
// CLIF use `::kaldi::IvectorExtractorStats` as IvectorExtractorStats
bool Clif_PyObjAs(PyObject* input, ::kaldi::IvectorExtractorStats** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::IvectorExtractorStats>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::IvectorExtractorStats>* output);
PyObject* Clif_PyObjFrom(::kaldi::IvectorExtractorStats*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::IvectorExtractorStats>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::IvectorExtractorStats>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::IvectorExtractorStats*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::IvectorExtractorStats&, py::PostConv) = delete;
// CLIF use `::kaldi::IvectorExtractorStatsOptions` as IvectorExtractorStatsOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::IvectorExtractorStatsOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::IvectorExtractorStatsOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::IvectorExtractorStatsOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::IvectorExtractorStatsOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::IvectorExtractorStatsOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::IvectorExtractorStatsOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::IvectorExtractorStatsOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::IvectorExtractorStatsOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::IvectorExtractorStatsOptions&, py::PostConv);
// CLIF use `::kaldi::IvectorExtractorUtteranceStats` as IvectorExtractorUtteranceStats
bool Clif_PyObjAs(PyObject* input, ::kaldi::IvectorExtractorUtteranceStats** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::IvectorExtractorUtteranceStats>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::IvectorExtractorUtteranceStats>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::IvectorExtractorUtteranceStats* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::IvectorExtractorUtteranceStats>* output);
PyObject* Clif_PyObjFrom(::kaldi::IvectorExtractorUtteranceStats*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::IvectorExtractorUtteranceStats>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::IvectorExtractorUtteranceStats>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::IvectorExtractorUtteranceStats&, py::PostConv);
// CLIF use `::kaldi::OnlineIvectorEstimationStats` as OnlineIvectorEstimationStats
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineIvectorEstimationStats** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineIvectorEstimationStats>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineIvectorEstimationStats>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineIvectorEstimationStats* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::OnlineIvectorEstimationStats>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineIvectorEstimationStats*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineIvectorEstimationStats>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineIvectorEstimationStats>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineIvectorEstimationStats&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_ivector_extractor")) Py_DECREF(m);
// CLIF init_module else goto err;
