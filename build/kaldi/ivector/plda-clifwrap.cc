//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/ivector/plda.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "itf/options-itf-clifwrap.h"
#include "base/iostream-clifwrap.h"
#include "plda-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __plda_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyPldaConfig {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::PldaConfig> cpp;
};
static ::kaldi::PldaConfig* ThisPtr(PyObject*);

static PyObject* get_normalize_length(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->normalize_length, {});
}

static int set_normalize_length(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the normalize_length attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->normalize_length)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for normalize_length:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_simple_length_norm(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->simple_length_norm, {});
}

static int set_simple_length_norm(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the simple_length_norm attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->simple_length_norm)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for simple_length_norm:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::PldaConfig* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("normalize_length"), get_normalize_length, set_normalize_length, C("C++ bool PldaConfig.normalize_length")},
  {C("simple_length_norm"), get_simple_length_norm, set_simple_length_norm, C("C++ bool PldaConfig.simple_length_norm")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::PldaConfig::Register(::kaldi::OptionsItf *)")},
  {}
};

// PldaConfig __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// PldaConfig __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// PldaConfig __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_plda.PldaConfig",                  // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::PldaConfig", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "PldaConfig takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::PldaConfig>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::PldaConfig* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_PldaConfig"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::PldaConfig"));
      if (!PyErr_Occurred()) {
        ::kaldi::PldaConfig* c = static_cast<::kaldi::PldaConfig*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::PldaConfig*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyPldaConfig

namespace pyPlda {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::Plda> cpp;
};
static ::kaldi::Plda* ThisPtr(PyObject*);

// @classmethod from_other(other:Plda) -> Plda
static PyObject* wrapPlda_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::kaldi::Plda* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::kaldi::Plda", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::Plda> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::Plda>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// transform_ivector(config:PldaConfig, ivector:DoubleVectorBase, num_examples:int, transformed_ivector:DoubleVectorBase) -> float
static PyObject* wrapTransformIvector_as_transform_ivector(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("config"),
      C("ivector"),
      C("num_examples"),
      C("transformed_ivector"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:transform_ivector", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::PldaConfig* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("transform_ivector", names[0], "::kaldi::PldaConfig", a[0]);
  ::kaldi::VectorBase<double>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("transform_ivector", names[1], "::kaldi::VectorBase<double>", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("transform_ivector", names[2], "int", a[2]);
  ::kaldi::VectorBase<double> * arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("transform_ivector", names[3], "::kaldi::VectorBase<double> *", a[3]);
  // Call actual C++ method.
  ::kaldi::Plda* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  double ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->TransformIvector(*arg1, *arg2, std::move(arg3), arg4);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// transform_ivector_single(config:PldaConfig, ivector:VectorBase, num_examples:int, transformed_ivector:VectorBase) -> float
static PyObject* wrapTransformIvector_as_transform_ivector_single(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("config"),
      C("ivector"),
      C("num_examples"),
      C("transformed_ivector"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:transform_ivector_single", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::PldaConfig* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("transform_ivector_single", names[0], "::kaldi::PldaConfig", a[0]);
  ::kaldi::VectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("transform_ivector_single", names[1], "::kaldi::VectorBase<float>", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("transform_ivector_single", names[2], "int", a[2]);
  ::kaldi::VectorBase<float> * arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("transform_ivector_single", names[3], "::kaldi::VectorBase<float> *", a[3]);
  // Call actual C++ method.
  ::kaldi::Plda* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->TransformIvector(*arg1, *arg2, std::move(arg3), arg4);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// log_likelihood_ratio(transformed_train_ivector:DoubleVectorBase, num_train_utts:int, transformed_test_ivector:DoubleVectorBase) -> float
static PyObject* wrapLogLikelihoodRatio_as_log_likelihood_ratio(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("transformed_train_ivector"),
      C("num_train_utts"),
      C("transformed_test_ivector"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:log_likelihood_ratio", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::VectorBase<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("log_likelihood_ratio", names[0], "::kaldi::VectorBase<double>", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("log_likelihood_ratio", names[1], "int", a[1]);
  ::kaldi::VectorBase<double>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("log_likelihood_ratio", names[2], "::kaldi::VectorBase<double>", a[2]);
  // Call actual C++ method.
  ::kaldi::Plda* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  double ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->LogLikelihoodRatio(*arg1, std::move(arg2), *arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// smooth_within_class_covariance(smoothing_factor:float)
static PyObject* wrapSmoothWithinClassCovariance_as_smooth_within_class_covariance(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("smoothing_factor"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:smooth_within_class_covariance", names, &a[0])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("smooth_within_class_covariance", names[0], "double", a[0]);
  // Call actual C++ method.
  ::kaldi::Plda* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SmoothWithinClassCovariance(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// apply_transform(in_transform:DoubleMatrix)
static PyObject* wrapApplyTransform_as_apply_transform(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("in_transform"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:apply_transform", names, &a[0])) return nullptr;
  ::kaldi::Matrix<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("apply_transform", names[0], "::kaldi::Matrix<double>", a[0]);
  // Call actual C++ method.
  ::kaldi::Plda* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ApplyTransform(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::Plda* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::Plda* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(os:istream, binary:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::Plda* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("from_other"), (PyCFunction)wrapPlda_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(other:Plda) -> Plda\n  Calls C++ function\n  std::unique_ptr<::kaldi::Plda> ::kaldi::Plda::Plda(::kaldi::Plda)")},
  {C("transform_ivector"), (PyCFunction)wrapTransformIvector_as_transform_ivector, METH_VARARGS | METH_KEYWORDS, C("transform_ivector(config:PldaConfig, ivector:DoubleVectorBase, num_examples:int, transformed_ivector:DoubleVectorBase) -> float\n  Calls C++ function\n  double ::kaldi::Plda::TransformIvector(::kaldi::PldaConfig, ::kaldi::VectorBase<double>, int, ::kaldi::VectorBase<double> *)")},
  {C("transform_ivector_single"), (PyCFunction)wrapTransformIvector_as_transform_ivector_single, METH_VARARGS | METH_KEYWORDS, C("transform_ivector_single(config:PldaConfig, ivector:VectorBase, num_examples:int, transformed_ivector:VectorBase) -> float\n  Calls C++ function\n  float ::kaldi::Plda::TransformIvector(::kaldi::PldaConfig, ::kaldi::VectorBase<float>, int, ::kaldi::VectorBase<float> *)")},
  {C("log_likelihood_ratio"), (PyCFunction)wrapLogLikelihoodRatio_as_log_likelihood_ratio, METH_VARARGS | METH_KEYWORDS, C("log_likelihood_ratio(transformed_train_ivector:DoubleVectorBase, num_train_utts:int, transformed_test_ivector:DoubleVectorBase) -> float\n  Calls C++ function\n  double ::kaldi::Plda::LogLikelihoodRatio(::kaldi::VectorBase<double>, int, ::kaldi::VectorBase<double>)")},
  {C("smooth_within_class_covariance"), (PyCFunction)wrapSmoothWithinClassCovariance_as_smooth_within_class_covariance, METH_VARARGS | METH_KEYWORDS, C("smooth_within_class_covariance(smoothing_factor:float)\n  Calls C++ function\n  void ::kaldi::Plda::SmoothWithinClassCovariance(double)")},
  {C("apply_transform"), (PyCFunction)wrapApplyTransform_as_apply_transform, METH_VARARGS | METH_KEYWORDS, C("apply_transform(in_transform:DoubleMatrix)\n  Calls C++ function\n  void ::kaldi::Plda::ApplyTransform(::kaldi::Matrix<double>)")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::Plda::Dim()")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::Plda::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(os:istream, binary:bool)\n  Calls C++ function\n  void ::kaldi::Plda::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool)")},
  {}
};

// Plda __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// Plda __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// Plda __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_plda.Plda",                        // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::Plda",    // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "Plda takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::Plda>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::Plda* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_Plda"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::Plda"));
      if (!PyErr_Occurred()) {
        ::kaldi::Plda* c = static_cast<::kaldi::Plda*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::Plda*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyPlda

namespace pyPldaStats {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::PldaStats> cpp;
};
static ::kaldi::PldaStats* ThisPtr(PyObject*);

// add_samples(weight:float, group:DoubleMatrix)
static PyObject* wrapAddSamples_as_add_samples(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("weight"),
      C("group"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:add_samples", names, &a[0], &a[1])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add_samples", names[0], "double", a[0]);
  ::kaldi::Matrix<double>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("add_samples", names[1], "::kaldi::Matrix<double>", a[1]);
  // Call actual C++ method.
  ::kaldi::PldaStats* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AddSamples(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::PldaStats* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// init(dim:int)
static PyObject* wrapInit_as_init(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("dim"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:init", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("init", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::PldaStats* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Init(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// sort()
static PyObject* wrapSort_as_sort(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::PldaStats* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Sort();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// is_sorted() -> bool
static PyObject* wrapIsSorted_as_is_sorted(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::PldaStats* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsSorted();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("add_samples"), (PyCFunction)wrapAddSamples_as_add_samples, METH_VARARGS | METH_KEYWORDS, C("add_samples(weight:float, group:DoubleMatrix)\n  Calls C++ function\n  void ::kaldi::PldaStats::AddSamples(double, ::kaldi::Matrix<double>)")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::PldaStats::Dim()")},
  {C("init"), (PyCFunction)wrapInit_as_init, METH_VARARGS | METH_KEYWORDS, C("init(dim:int)\n  Calls C++ function\n  void ::kaldi::PldaStats::Init(int)")},
  {C("sort"), (PyCFunction)wrapSort_as_sort, METH_NOARGS, C("sort()\n  Calls C++ function\n  void ::kaldi::PldaStats::Sort()")},
  {C("is_sorted"), (PyCFunction)wrapIsSorted_as_is_sorted, METH_NOARGS, C("is_sorted() -> bool\n  Calls C++ function\n  bool ::kaldi::PldaStats::IsSorted()")},
  {}
};

// PldaStats __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// PldaStats __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// PldaStats __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_plda.PldaStats",                   // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::PldaStats", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "PldaStats takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::PldaStats>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::PldaStats* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_PldaStats"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::PldaStats"));
      if (!PyErr_Occurred()) {
        ::kaldi::PldaStats* c = static_cast<::kaldi::PldaStats*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::PldaStats*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyPldaStats

namespace pyPldaEstimationConfig {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::PldaEstimationConfig> cpp;
};
static ::kaldi::PldaEstimationConfig* ThisPtr(PyObject*);

static PyObject* get_num_em_iters(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->num_em_iters, {});
}

static int set_num_em_iters(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the num_em_iters attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->num_em_iters)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for num_em_iters:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::PldaEstimationConfig* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("num_em_iters"), get_num_em_iters, set_num_em_iters, C("C++ ::int32 PldaEstimationConfig.num_em_iters")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::PldaEstimationConfig::Register(::kaldi::OptionsItf *)")},
  {}
};

// PldaEstimationConfig __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// PldaEstimationConfig __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// PldaEstimationConfig __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_plda.PldaEstimationConfig",        // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::PldaEstimationConfig", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "PldaEstimationConfig takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::PldaEstimationConfig>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::PldaEstimationConfig* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_PldaEstimationConfig"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::PldaEstimationConfig"));
      if (!PyErr_Occurred()) {
        ::kaldi::PldaEstimationConfig* c = static_cast<::kaldi::PldaEstimationConfig*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::PldaEstimationConfig*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyPldaEstimationConfig

namespace pyPldaUnsupervisedAdaptorConfig {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::PldaUnsupervisedAdaptorConfig> cpp;
};
static ::kaldi::PldaUnsupervisedAdaptorConfig* ThisPtr(PyObject*);

static PyObject* get_mean_diff_scale(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->mean_diff_scale, {});
}

static int set_mean_diff_scale(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the mean_diff_scale attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->mean_diff_scale)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for mean_diff_scale:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_within_covar_scale(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->within_covar_scale, {});
}

static int set_within_covar_scale(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the within_covar_scale attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->within_covar_scale)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for within_covar_scale:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_between_covar_scale(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->between_covar_scale, {});
}

static int set_between_covar_scale(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the between_covar_scale attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->between_covar_scale)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for between_covar_scale:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::PldaUnsupervisedAdaptorConfig* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("mean_diff_scale"), get_mean_diff_scale, set_mean_diff_scale, C("C++ ::kaldi::BaseFloat PldaUnsupervisedAdaptorConfig.mean_diff_scale")},
  {C("within_covar_scale"), get_within_covar_scale, set_within_covar_scale, C("C++ ::kaldi::BaseFloat PldaUnsupervisedAdaptorConfig.within_covar_scale")},
  {C("between_covar_scale"), get_between_covar_scale, set_between_covar_scale, C("C++ ::kaldi::BaseFloat PldaUnsupervisedAdaptorConfig.between_covar_scale")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::PldaUnsupervisedAdaptorConfig::Register(::kaldi::OptionsItf *)")},
  {}
};

// PldaUnsupervisedAdaptorConfig __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// PldaUnsupervisedAdaptorConfig __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// PldaUnsupervisedAdaptorConfig __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_plda.PldaUnsupervisedAdaptorConfig", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::PldaUnsupervisedAdaptorConfig", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "PldaUnsupervisedAdaptorConfig takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::PldaUnsupervisedAdaptorConfig>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::PldaUnsupervisedAdaptorConfig* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_PldaUnsupervisedAdaptorConfig"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::PldaUnsupervisedAdaptorConfig"));
      if (!PyErr_Occurred()) {
        ::kaldi::PldaUnsupervisedAdaptorConfig* c = static_cast<::kaldi::PldaUnsupervisedAdaptorConfig*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::PldaUnsupervisedAdaptorConfig*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyPldaUnsupervisedAdaptorConfig

namespace pyPldaUnsupervisedAdaptor {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::PldaUnsupervisedAdaptor> cpp;
};
static ::kaldi::PldaUnsupervisedAdaptor* ThisPtr(PyObject*);

// add_double_stats(weight:float, ivector:DoubleVector)
static PyObject* wrapAddStats_as_add_double_stats(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("weight"),
      C("ivector"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:add_double_stats", names, &a[0], &a[1])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add_double_stats", names[0], "double", a[0]);
  ::kaldi::Vector<double>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("add_double_stats", names[1], "::kaldi::Vector<double>", a[1]);
  // Call actual C++ method.
  ::kaldi::PldaUnsupervisedAdaptor* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AddStats(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// add_stats(weight:float, ivector:Vector)
static PyObject* wrapAddStats_as_add_stats(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("weight"),
      C("ivector"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:add_stats", names, &a[0], &a[1])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add_stats", names[0], "double", a[0]);
  ::kaldi::Vector<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("add_stats", names[1], "::kaldi::Vector<float>", a[1]);
  // Call actual C++ method.
  ::kaldi::PldaUnsupervisedAdaptor* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AddStats(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// update_plda(config:PldaUnsupervisedAdaptorConfig, plda:Plda)
static PyObject* wrapUpdatePlda_as_update_plda(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("config"),
      C("plda"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:update_plda", names, &a[0], &a[1])) return nullptr;
  ::kaldi::PldaUnsupervisedAdaptorConfig* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("update_plda", names[0], "::kaldi::PldaUnsupervisedAdaptorConfig", a[0]);
  ::kaldi::Plda * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("update_plda", names[1], "::kaldi::Plda *", a[1]);
  // Call actual C++ method.
  ::kaldi::PldaUnsupervisedAdaptor* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->UpdatePlda(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("add_double_stats"), (PyCFunction)wrapAddStats_as_add_double_stats, METH_VARARGS | METH_KEYWORDS, C("add_double_stats(weight:float, ivector:DoubleVector)\n  Calls C++ function\n  void ::kaldi::PldaUnsupervisedAdaptor::AddStats(double, ::kaldi::Vector<double>)")},
  {C("add_stats"), (PyCFunction)wrapAddStats_as_add_stats, METH_VARARGS | METH_KEYWORDS, C("add_stats(weight:float, ivector:Vector)\n  Calls C++ function\n  void ::kaldi::PldaUnsupervisedAdaptor::AddStats(double, ::kaldi::Vector<float>)")},
  {C("update_plda"), (PyCFunction)wrapUpdatePlda_as_update_plda, METH_VARARGS | METH_KEYWORDS, C("update_plda(config:PldaUnsupervisedAdaptorConfig, plda:Plda)\n  Calls C++ function\n  void ::kaldi::PldaUnsupervisedAdaptor::UpdatePlda(::kaldi::PldaUnsupervisedAdaptorConfig, ::kaldi::Plda *)")},
  {}
};

// PldaUnsupervisedAdaptor __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// PldaUnsupervisedAdaptor __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// PldaUnsupervisedAdaptor __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_plda.PldaUnsupervisedAdaptor",     // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::PldaUnsupervisedAdaptor", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "PldaUnsupervisedAdaptor takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::PldaUnsupervisedAdaptor>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::PldaUnsupervisedAdaptor* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_PldaUnsupervisedAdaptor"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::PldaUnsupervisedAdaptor"));
      if (!PyErr_Occurred()) {
        ::kaldi::PldaUnsupervisedAdaptor* c = static_cast<::kaldi::PldaUnsupervisedAdaptor*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::PldaUnsupervisedAdaptor*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyPldaUnsupervisedAdaptor


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyPldaConfig::wrapper_Type) < 0) return false;
  Py_INCREF(&pyPldaConfig::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyPlda::wrapper_Type) < 0) return false;
  Py_INCREF(&pyPlda::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyPldaStats::wrapper_Type) < 0) return false;
  Py_INCREF(&pyPldaStats::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyPldaEstimationConfig::wrapper_Type) < 0) return false;
  Py_INCREF(&pyPldaEstimationConfig::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyPldaUnsupervisedAdaptorConfig::wrapper_Type) < 0) return false;
  Py_INCREF(&pyPldaUnsupervisedAdaptorConfig::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyPldaUnsupervisedAdaptor::wrapper_Type) < 0) return false;
  Py_INCREF(&pyPldaUnsupervisedAdaptor::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_plda",  // module name
  "CLIF-generated module for ivector/plda.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "PldaConfig", reinterpret_cast<PyObject*>(&pyPldaConfig::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "Plda", reinterpret_cast<PyObject*>(&pyPlda::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "PldaStats", reinterpret_cast<PyObject*>(&pyPldaStats::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "PldaEstimationConfig", reinterpret_cast<PyObject*>(&pyPldaEstimationConfig::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "PldaUnsupervisedAdaptorConfig", reinterpret_cast<PyObject*>(&pyPldaUnsupervisedAdaptorConfig::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "PldaUnsupervisedAdaptor", reinterpret_cast<PyObject*>(&pyPldaUnsupervisedAdaptor::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __plda_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// Plda to/from ::kaldi::Plda conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::Plda** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::Plda* cpp = __plda_clifwrap::pyPlda::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::Plda>* c) {
  assert(c != nullptr);
  ::kaldi::Plda* cpp = __plda_clifwrap::pyPlda::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__plda_clifwrap::pyPlda::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::Plda>* c) {
  assert(c != nullptr);
  ::kaldi::Plda* cpp = __plda_clifwrap::pyPlda::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__plda_clifwrap::pyPlda::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert Plda instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::Plda* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__plda_clifwrap::pyPlda::wrapper_Type, NULL, NULL);
  reinterpret_cast<__plda_clifwrap::pyPlda::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::Plda>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::Plda> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__plda_clifwrap::pyPlda::wrapper_Type, NULL, NULL);
  reinterpret_cast<__plda_clifwrap::pyPlda::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::Plda>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::Plda> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__plda_clifwrap::pyPlda::wrapper_Type, NULL, NULL);
  reinterpret_cast<__plda_clifwrap::pyPlda::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::Plda>(std::move(c));
  return py;
}

// PldaConfig to/from ::kaldi::PldaConfig conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::PldaConfig** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::PldaConfig* cpp = __plda_clifwrap::pyPldaConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::PldaConfig>* c) {
  assert(c != nullptr);
  ::kaldi::PldaConfig* cpp = __plda_clifwrap::pyPldaConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__plda_clifwrap::pyPldaConfig::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::PldaConfig>* c) {
  assert(c != nullptr);
  ::kaldi::PldaConfig* cpp = __plda_clifwrap::pyPldaConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__plda_clifwrap::pyPldaConfig::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert PldaConfig instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::PldaConfig* c) {
  assert(c != nullptr);
  ::kaldi::PldaConfig* cpp = __plda_clifwrap::pyPldaConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::PldaConfig>* c) {
  assert(c != nullptr);
  ::kaldi::PldaConfig* cpp = __plda_clifwrap::pyPldaConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::PldaConfig* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__plda_clifwrap::pyPldaConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__plda_clifwrap::pyPldaConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PldaConfig>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::PldaConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__plda_clifwrap::pyPldaConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__plda_clifwrap::pyPldaConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PldaConfig>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::PldaConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__plda_clifwrap::pyPldaConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__plda_clifwrap::pyPldaConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PldaConfig>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::PldaConfig& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__plda_clifwrap::pyPldaConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__plda_clifwrap::pyPldaConfig::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::PldaConfig>(c);
  return py;
}

// PldaEstimationConfig to/from ::kaldi::PldaEstimationConfig conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::PldaEstimationConfig** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::PldaEstimationConfig* cpp = __plda_clifwrap::pyPldaEstimationConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::PldaEstimationConfig>* c) {
  assert(c != nullptr);
  ::kaldi::PldaEstimationConfig* cpp = __plda_clifwrap::pyPldaEstimationConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__plda_clifwrap::pyPldaEstimationConfig::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::PldaEstimationConfig>* c) {
  assert(c != nullptr);
  ::kaldi::PldaEstimationConfig* cpp = __plda_clifwrap::pyPldaEstimationConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__plda_clifwrap::pyPldaEstimationConfig::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert PldaEstimationConfig instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::PldaEstimationConfig* c) {
  assert(c != nullptr);
  ::kaldi::PldaEstimationConfig* cpp = __plda_clifwrap::pyPldaEstimationConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::PldaEstimationConfig>* c) {
  assert(c != nullptr);
  ::kaldi::PldaEstimationConfig* cpp = __plda_clifwrap::pyPldaEstimationConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::PldaEstimationConfig* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__plda_clifwrap::pyPldaEstimationConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__plda_clifwrap::pyPldaEstimationConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PldaEstimationConfig>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::PldaEstimationConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__plda_clifwrap::pyPldaEstimationConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__plda_clifwrap::pyPldaEstimationConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PldaEstimationConfig>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::PldaEstimationConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__plda_clifwrap::pyPldaEstimationConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__plda_clifwrap::pyPldaEstimationConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PldaEstimationConfig>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::PldaEstimationConfig& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__plda_clifwrap::pyPldaEstimationConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__plda_clifwrap::pyPldaEstimationConfig::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::PldaEstimationConfig>(c);
  return py;
}

// PldaStats to/from ::kaldi::PldaStats conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::PldaStats** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::PldaStats* cpp = __plda_clifwrap::pyPldaStats::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::PldaStats>* c) {
  assert(c != nullptr);
  ::kaldi::PldaStats* cpp = __plda_clifwrap::pyPldaStats::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__plda_clifwrap::pyPldaStats::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::PldaStats>* c) {
  assert(c != nullptr);
  ::kaldi::PldaStats* cpp = __plda_clifwrap::pyPldaStats::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__plda_clifwrap::pyPldaStats::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert PldaStats instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::PldaStats* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__plda_clifwrap::pyPldaStats::wrapper_Type, NULL, NULL);
  reinterpret_cast<__plda_clifwrap::pyPldaStats::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PldaStats>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::PldaStats> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__plda_clifwrap::pyPldaStats::wrapper_Type, NULL, NULL);
  reinterpret_cast<__plda_clifwrap::pyPldaStats::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PldaStats>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::PldaStats> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__plda_clifwrap::pyPldaStats::wrapper_Type, NULL, NULL);
  reinterpret_cast<__plda_clifwrap::pyPldaStats::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PldaStats>(std::move(c));
  return py;
}

// PldaUnsupervisedAdaptor to/from ::kaldi::PldaUnsupervisedAdaptor conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::PldaUnsupervisedAdaptor** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::PldaUnsupervisedAdaptor* cpp = __plda_clifwrap::pyPldaUnsupervisedAdaptor::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::PldaUnsupervisedAdaptor>* c) {
  assert(c != nullptr);
  ::kaldi::PldaUnsupervisedAdaptor* cpp = __plda_clifwrap::pyPldaUnsupervisedAdaptor::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__plda_clifwrap::pyPldaUnsupervisedAdaptor::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::PldaUnsupervisedAdaptor>* c) {
  assert(c != nullptr);
  ::kaldi::PldaUnsupervisedAdaptor* cpp = __plda_clifwrap::pyPldaUnsupervisedAdaptor::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__plda_clifwrap::pyPldaUnsupervisedAdaptor::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert PldaUnsupervisedAdaptor instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::PldaUnsupervisedAdaptor* c) {
  assert(c != nullptr);
  ::kaldi::PldaUnsupervisedAdaptor* cpp = __plda_clifwrap::pyPldaUnsupervisedAdaptor::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::PldaUnsupervisedAdaptor>* c) {
  assert(c != nullptr);
  ::kaldi::PldaUnsupervisedAdaptor* cpp = __plda_clifwrap::pyPldaUnsupervisedAdaptor::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::PldaUnsupervisedAdaptor* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__plda_clifwrap::pyPldaUnsupervisedAdaptor::wrapper_Type, NULL, NULL);
  reinterpret_cast<__plda_clifwrap::pyPldaUnsupervisedAdaptor::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PldaUnsupervisedAdaptor>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::PldaUnsupervisedAdaptor> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__plda_clifwrap::pyPldaUnsupervisedAdaptor::wrapper_Type, NULL, NULL);
  reinterpret_cast<__plda_clifwrap::pyPldaUnsupervisedAdaptor::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PldaUnsupervisedAdaptor>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::PldaUnsupervisedAdaptor> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__plda_clifwrap::pyPldaUnsupervisedAdaptor::wrapper_Type, NULL, NULL);
  reinterpret_cast<__plda_clifwrap::pyPldaUnsupervisedAdaptor::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PldaUnsupervisedAdaptor>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::PldaUnsupervisedAdaptor& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__plda_clifwrap::pyPldaUnsupervisedAdaptor::wrapper_Type, NULL, NULL);
  reinterpret_cast<__plda_clifwrap::pyPldaUnsupervisedAdaptor::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::PldaUnsupervisedAdaptor>(c);
  return py;
}

// PldaUnsupervisedAdaptorConfig to/from ::kaldi::PldaUnsupervisedAdaptorConfig conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::PldaUnsupervisedAdaptorConfig** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::PldaUnsupervisedAdaptorConfig* cpp = __plda_clifwrap::pyPldaUnsupervisedAdaptorConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::PldaUnsupervisedAdaptorConfig>* c) {
  assert(c != nullptr);
  ::kaldi::PldaUnsupervisedAdaptorConfig* cpp = __plda_clifwrap::pyPldaUnsupervisedAdaptorConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__plda_clifwrap::pyPldaUnsupervisedAdaptorConfig::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::PldaUnsupervisedAdaptorConfig>* c) {
  assert(c != nullptr);
  ::kaldi::PldaUnsupervisedAdaptorConfig* cpp = __plda_clifwrap::pyPldaUnsupervisedAdaptorConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__plda_clifwrap::pyPldaUnsupervisedAdaptorConfig::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert PldaUnsupervisedAdaptorConfig instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::PldaUnsupervisedAdaptorConfig* c) {
  assert(c != nullptr);
  ::kaldi::PldaUnsupervisedAdaptorConfig* cpp = __plda_clifwrap::pyPldaUnsupervisedAdaptorConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::PldaUnsupervisedAdaptorConfig>* c) {
  assert(c != nullptr);
  ::kaldi::PldaUnsupervisedAdaptorConfig* cpp = __plda_clifwrap::pyPldaUnsupervisedAdaptorConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::PldaUnsupervisedAdaptorConfig* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__plda_clifwrap::pyPldaUnsupervisedAdaptorConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__plda_clifwrap::pyPldaUnsupervisedAdaptorConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PldaUnsupervisedAdaptorConfig>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::PldaUnsupervisedAdaptorConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__plda_clifwrap::pyPldaUnsupervisedAdaptorConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__plda_clifwrap::pyPldaUnsupervisedAdaptorConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PldaUnsupervisedAdaptorConfig>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::PldaUnsupervisedAdaptorConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__plda_clifwrap::pyPldaUnsupervisedAdaptorConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__plda_clifwrap::pyPldaUnsupervisedAdaptorConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PldaUnsupervisedAdaptorConfig>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::PldaUnsupervisedAdaptorConfig& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__plda_clifwrap::pyPldaUnsupervisedAdaptorConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__plda_clifwrap::pyPldaUnsupervisedAdaptorConfig::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::PldaUnsupervisedAdaptorConfig>(c);
  return py;
}

}  // namespace kaldi
