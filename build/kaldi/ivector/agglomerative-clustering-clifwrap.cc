//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/ivector/agglomerative-clustering.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "agglomerative-clustering-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __agglomerative__clustering_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyAhcCluster {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::AhcCluster> cpp;
};
static ::kaldi::AhcCluster* ThisPtr(PyObject*);

static PyObject* get_id(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->id, {});
}

static int set_id(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the id attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->id)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for id:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_parent1(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->parent1, {});
}

static int set_parent1(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the parent1 attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->parent1)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for parent1:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_parent2(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->parent2, {});
}

static int set_parent2(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the parent2 attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->parent2)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for parent2:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_size(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->size, {});
}

static int set_size(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the size attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->size)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for size:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_utt_ids(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->utt_ids, {});
}

static int set_utt_ids(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the utt_ids attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->utt_ids)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for utt_ids:list<int>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// __init__(id:int, p1:int, p2:int, utts:list<int>)
static PyObject* wrapAhcCluster_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("id"),
      C("p1"),
      C("p2"),
      C("utts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:__init__", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "int", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "int", a[2]);
  ::std::vector< ::int32> arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "::std::vector< ::int32>", a[3]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::AhcCluster>(std::move(arg1), std::move(arg2), std::move(arg3), std::move(arg4));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("id"), get_id, set_id, C("C++ ::int32 AhcCluster.id")},
  {C("parent1"), get_parent1, set_parent1, C("C++ ::int32 AhcCluster.parent1")},
  {C("parent2"), get_parent2, set_parent2, C("C++ ::int32 AhcCluster.parent2")},
  {C("size"), get_size, set_size, C("C++ ::int32 AhcCluster.size")},
  {C("utt_ids"), get_utt_ids, set_utt_ids, C("C++ ::std::vector< ::int32> AhcCluster.utt_ids")},
  {}
};

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapAhcCluster_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(id:int, p1:int, p2:int, utts:list<int>)\n  Calls C++ function\n  void ::kaldi::AhcCluster::AhcCluster(int, int, int, ::std::vector< ::int32>)")},
  {}
};

// AhcCluster __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// AhcCluster __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// AhcCluster __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_agglomerative_clustering.AhcCluster", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::AhcCluster", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapAhcCluster_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::AhcCluster* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_AhcCluster"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::AhcCluster"));
      if (!PyErr_Occurred()) {
        ::kaldi::AhcCluster* c = static_cast<::kaldi::AhcCluster*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::AhcCluster*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyAhcCluster

namespace pyAgglomerativeClusterer {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::AgglomerativeClusterer> cpp;
};
static ::kaldi::AgglomerativeClusterer* ThisPtr(PyObject*);

// __init__(costs:Matrix, thresh:float, min_clust:int)
static PyObject* wrapAgglomerativeClusterer_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("costs"),
      C("thresh"),
      C("min_clust"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:__init__", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::Matrix<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::Matrix<float>", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "float", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "int", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::AgglomerativeClusterer>(*arg1, std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// cluster() -> list<int>
static PyObject* wrapCluster_as_cluster(PyObject* self) {
  ::std::vector< ::int32> ret0{};
  // Call actual C++ method.
  ::kaldi::AgglomerativeClusterer* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Cluster(&ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapAgglomerativeClusterer_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(costs:Matrix, thresh:float, min_clust:int)\n  Calls C++ function\n  void ::kaldi::AgglomerativeClusterer::AgglomerativeClusterer(::kaldi::Matrix<float>, float, int)")},
  {C("cluster"), (PyCFunction)wrapCluster_as_cluster, METH_NOARGS, C("cluster() -> list<int>\n  Calls C++ function\n  void ::kaldi::AgglomerativeClusterer::Cluster(::std::vector< ::int32>*)")},
  {}
};

// AgglomerativeClusterer __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// AgglomerativeClusterer __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// AgglomerativeClusterer __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_agglomerative_clustering.AgglomerativeClusterer", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::AgglomerativeClusterer", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapAgglomerativeClusterer_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::AgglomerativeClusterer* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_AgglomerativeClusterer"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::AgglomerativeClusterer"));
      if (!PyErr_Occurred()) {
        ::kaldi::AgglomerativeClusterer* c = static_cast<::kaldi::AgglomerativeClusterer*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::AgglomerativeClusterer*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyAgglomerativeClusterer

// agglomerative_cluster(costs:Matrix, thresh:float, min_clust:int) -> list<int>
static PyObject* wrapAgglomerativeCluster_as_agglomerative_cluster(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("costs"),
      C("thresh"),
      C("min_clust"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:agglomerative_cluster", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::Matrix<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("agglomerative_cluster", names[0], "::kaldi::Matrix<float>", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("agglomerative_cluster", names[1], "float", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("agglomerative_cluster", names[2], "int", a[2]);
  ::std::vector< ::int32> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::AgglomerativeCluster(*arg1, std::move(arg2), std::move(arg3), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("agglomerative_cluster"), (PyCFunction)wrapAgglomerativeCluster_as_agglomerative_cluster, METH_VARARGS | METH_KEYWORDS, C("agglomerative_cluster(costs:Matrix, thresh:float, min_clust:int) -> list<int>\n  Calls C++ function\n  void ::kaldi::AgglomerativeCluster(::kaldi::Matrix<float>, float, int, ::std::vector< ::int32>*)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyAhcCluster::wrapper_Type) < 0) return false;
  Py_INCREF(&pyAhcCluster::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyAgglomerativeClusterer::wrapper_Type) < 0) return false;
  Py_INCREF(&pyAgglomerativeClusterer::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_agglomerative_clustering",  // module name
  "CLIF-generated module for ivector/agglomerative-clustering.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "AhcCluster", reinterpret_cast<PyObject*>(&pyAhcCluster::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "AgglomerativeClusterer", reinterpret_cast<PyObject*>(&pyAgglomerativeClusterer::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __agglomerative__clustering_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// AgglomerativeClusterer to/from ::kaldi::AgglomerativeClusterer conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::AgglomerativeClusterer** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::AgglomerativeClusterer* cpp = __agglomerative__clustering_clifwrap::pyAgglomerativeClusterer::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::AgglomerativeClusterer>* c) {
  assert(c != nullptr);
  ::kaldi::AgglomerativeClusterer* cpp = __agglomerative__clustering_clifwrap::pyAgglomerativeClusterer::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__agglomerative__clustering_clifwrap::pyAgglomerativeClusterer::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::AgglomerativeClusterer>* c) {
  assert(c != nullptr);
  ::kaldi::AgglomerativeClusterer* cpp = __agglomerative__clustering_clifwrap::pyAgglomerativeClusterer::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__agglomerative__clustering_clifwrap::pyAgglomerativeClusterer::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert AgglomerativeClusterer instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::AgglomerativeClusterer* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__agglomerative__clustering_clifwrap::pyAgglomerativeClusterer::wrapper_Type, NULL, NULL);
  reinterpret_cast<__agglomerative__clustering_clifwrap::pyAgglomerativeClusterer::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::AgglomerativeClusterer>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::AgglomerativeClusterer> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__agglomerative__clustering_clifwrap::pyAgglomerativeClusterer::wrapper_Type, NULL, NULL);
  reinterpret_cast<__agglomerative__clustering_clifwrap::pyAgglomerativeClusterer::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::AgglomerativeClusterer>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::AgglomerativeClusterer> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__agglomerative__clustering_clifwrap::pyAgglomerativeClusterer::wrapper_Type, NULL, NULL);
  reinterpret_cast<__agglomerative__clustering_clifwrap::pyAgglomerativeClusterer::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::AgglomerativeClusterer>(std::move(c));
  return py;
}

// AhcCluster to/from ::kaldi::AhcCluster conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::AhcCluster** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::AhcCluster* cpp = __agglomerative__clustering_clifwrap::pyAhcCluster::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::AhcCluster>* c) {
  assert(c != nullptr);
  ::kaldi::AhcCluster* cpp = __agglomerative__clustering_clifwrap::pyAhcCluster::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__agglomerative__clustering_clifwrap::pyAhcCluster::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::AhcCluster>* c) {
  assert(c != nullptr);
  ::kaldi::AhcCluster* cpp = __agglomerative__clustering_clifwrap::pyAhcCluster::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__agglomerative__clustering_clifwrap::pyAhcCluster::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert AhcCluster instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::AhcCluster* c) {
  assert(c != nullptr);
  ::kaldi::AhcCluster* cpp = __agglomerative__clustering_clifwrap::pyAhcCluster::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::AhcCluster>* c) {
  assert(c != nullptr);
  ::kaldi::AhcCluster* cpp = __agglomerative__clustering_clifwrap::pyAhcCluster::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::AhcCluster* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__agglomerative__clustering_clifwrap::pyAhcCluster::wrapper_Type, NULL, NULL);
  reinterpret_cast<__agglomerative__clustering_clifwrap::pyAhcCluster::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::AhcCluster>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::AhcCluster> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__agglomerative__clustering_clifwrap::pyAhcCluster::wrapper_Type, NULL, NULL);
  reinterpret_cast<__agglomerative__clustering_clifwrap::pyAhcCluster::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::AhcCluster>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::AhcCluster> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__agglomerative__clustering_clifwrap::pyAhcCluster::wrapper_Type, NULL, NULL);
  reinterpret_cast<__agglomerative__clustering_clifwrap::pyAhcCluster::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::AhcCluster>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::AhcCluster& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__agglomerative__clustering_clifwrap::pyAhcCluster::wrapper_Type, NULL, NULL);
  reinterpret_cast<__agglomerative__clustering_clifwrap::pyAhcCluster::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::AhcCluster>(c);
  return py;
}

}  // namespace kaldi
