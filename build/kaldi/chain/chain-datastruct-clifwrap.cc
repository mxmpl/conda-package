//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/chain/chain-datastruct.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "chain-datastruct-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __chain__datastruct_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyDenominatorGraphTransition {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::DenominatorGraphTransition> cpp;
};
static ::DenominatorGraphTransition* ThisPtr(PyObject*);

static PyObject* get_transition_prob(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->transition_prob, {});
}

static int set_transition_prob(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the transition_prob attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->transition_prob)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for transition_prob:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_pdf_id(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->pdf_id, {});
}

static int set_pdf_id(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the pdf_id attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->pdf_id)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for pdf_id:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_hmm_state(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->hmm_state, {});
}

static int set_hmm_state(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the hmm_state attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->hmm_state)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for hmm_state:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("transition_prob"), get_transition_prob, set_transition_prob, C("C++ ::BaseFloat DenominatorGraphTransition.transition_prob")},
  {C("pdf_id"), get_pdf_id, set_pdf_id, C("C++ ::int32_cuda DenominatorGraphTransition.pdf_id")},
  {C("hmm_state"), get_hmm_state, set_hmm_state, C("C++ ::int32_cuda DenominatorGraphTransition.hmm_state")},
  {}
};

// DenominatorGraphTransition __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// DenominatorGraphTransition __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// DenominatorGraphTransition __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_chain_datastruct.DenominatorGraphTransition", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::DenominatorGraphTransition", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  nullptr,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "DenominatorGraphTransition takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::DenominatorGraphTransition>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::DenominatorGraphTransition* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_DenominatorGraphTransition"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::DenominatorGraphTransition"));
      if (!PyErr_Occurred()) {
        ::DenominatorGraphTransition* c = static_cast<::DenominatorGraphTransition*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::DenominatorGraphTransition*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyDenominatorGraphTransition


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyDenominatorGraphTransition::wrapper_Type) < 0) return false;
  Py_INCREF(&pyDenominatorGraphTransition::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_chain_datastruct",  // module name
  "CLIF-generated module for chain/chain-datastruct.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "DenominatorGraphTransition", reinterpret_cast<PyObject*>(&pyDenominatorGraphTransition::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __chain__datastruct_clifwrap

namespace clif {

// DenominatorGraphTransition to/from ::DenominatorGraphTransition conversion

bool Clif_PyObjAs(PyObject* py, ::DenominatorGraphTransition** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::DenominatorGraphTransition* cpp = __chain__datastruct_clifwrap::pyDenominatorGraphTransition::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::DenominatorGraphTransition>* c) {
  assert(c != nullptr);
  ::DenominatorGraphTransition* cpp = __chain__datastruct_clifwrap::pyDenominatorGraphTransition::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__chain__datastruct_clifwrap::pyDenominatorGraphTransition::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::DenominatorGraphTransition>* c) {
  assert(c != nullptr);
  ::DenominatorGraphTransition* cpp = __chain__datastruct_clifwrap::pyDenominatorGraphTransition::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__chain__datastruct_clifwrap::pyDenominatorGraphTransition::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert DenominatorGraphTransition instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::DenominatorGraphTransition* c) {
  assert(c != nullptr);
  ::DenominatorGraphTransition* cpp = __chain__datastruct_clifwrap::pyDenominatorGraphTransition::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::DenominatorGraphTransition>* c) {
  assert(c != nullptr);
  ::DenominatorGraphTransition* cpp = __chain__datastruct_clifwrap::pyDenominatorGraphTransition::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::DenominatorGraphTransition* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__datastruct_clifwrap::pyDenominatorGraphTransition::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__datastruct_clifwrap::pyDenominatorGraphTransition::wrapper*>(py)->cpp = ::clif::Instance<::DenominatorGraphTransition>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::DenominatorGraphTransition> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__datastruct_clifwrap::pyDenominatorGraphTransition::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__datastruct_clifwrap::pyDenominatorGraphTransition::wrapper*>(py)->cpp = ::clif::Instance<::DenominatorGraphTransition>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::DenominatorGraphTransition> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__datastruct_clifwrap::pyDenominatorGraphTransition::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__datastruct_clifwrap::pyDenominatorGraphTransition::wrapper*>(py)->cpp = ::clif::Instance<::DenominatorGraphTransition>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::DenominatorGraphTransition& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__chain__datastruct_clifwrap::pyDenominatorGraphTransition::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__datastruct_clifwrap::pyDenominatorGraphTransition::wrapper*>(py)->cpp = ::clif::MakeShared<::DenominatorGraphTransition>(c);
  return py;
}

}  // namespace clif
