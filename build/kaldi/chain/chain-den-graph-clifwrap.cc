//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/chain/chain-den-graph.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "fstext/lattice-weight-clifwrap.h"
#include "fstext/vector-fst-clifwrap.h"
#include "cudamatrix/cu-matrixdim-clifwrap.h"
#include "cudamatrix/cu-vector-clifwrap.h"
#include "hmm/transition-model-clifwrap.h"
#include "tree/context-dep-clifwrap.h"
#include "chain/chain-datastruct-clifwrap.h"
#include "chain-den-graph-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __chain__den__graph_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyDenominatorGraph {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::chain::DenominatorGraph> cpp;
};
static ::kaldi::chain::DenominatorGraph* ThisPtr(PyObject*);

// num_states() -> int
static PyObject* wrapNumStates_as_num_states(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::chain::DenominatorGraph* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumStates();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_pdfs() -> int
static PyObject* wrapNumPdfs_as_num_pdfs(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::chain::DenominatorGraph* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumPdfs();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_fst(fst:StdVectorFst, num_pdfs:int) -> DenominatorGraph
static PyObject* wrapDenominatorGraph_as_from_fst(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("fst"),
      C("num_pdfs"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:from_fst", names, &a[0], &a[1])) return nullptr;
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_fst", names[0], "::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_fst", names[1], "int", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::chain::DenominatorGraph> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::chain::DenominatorGraph>(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// forward_transitions() -> IntPair
static PyObject* wrapForwardTransitions_as_forward_transitions(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::chain::DenominatorGraph* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  const ::Int32Pair * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->ForwardTransitions();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// backward_transitions() -> IntPair
static PyObject* wrapBackwardTransitions_as_backward_transitions(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::chain::DenominatorGraph* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  const ::Int32Pair * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->BackwardTransitions();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// transitions() -> DenominatorGraphTransition
static PyObject* wrapTransitions_as_transitions(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::chain::DenominatorGraph* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  const ::DenominatorGraphTransition * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Transitions();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// initial_probs() -> CuVector
static PyObject* wrapInitialProbs_as_initial_probs(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::chain::DenominatorGraph* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::CuVector<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->InitialProbs();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_normalization_fst(ifst:StdVectorFst) -> StdVectorFst
static PyObject* wrapGetNormalizationFst_as_get_normalization_fst(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("ifst"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_normalization_fst", names, &a[0])) return nullptr;
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_normalization_fst", names[0], "::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >", a[0]);
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > > ret0{};
  // Call actual C++ method.
  ::kaldi::chain::DenominatorGraph* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetNormalizationFst(*arg1, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// scale_initial_probs(s:float)
static PyObject* wrapScaleInitialProbs_as_scale_initial_probs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("s"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:scale_initial_probs", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("scale_initial_probs", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::chain::DenominatorGraph* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ScaleInitialProbs(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("num_states"), (PyCFunction)wrapNumStates_as_num_states, METH_NOARGS, C("num_states() -> int\n  Calls C++ function\n  int ::kaldi::chain::DenominatorGraph::NumStates()")},
  {C("num_pdfs"), (PyCFunction)wrapNumPdfs_as_num_pdfs, METH_NOARGS, C("num_pdfs() -> int\n  Calls C++ function\n  int ::kaldi::chain::DenominatorGraph::NumPdfs()")},
  {C("from_fst"), (PyCFunction)wrapDenominatorGraph_as_from_fst, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_fst(fst:StdVectorFst, num_pdfs:int) -> DenominatorGraph\n  Calls C++ function\n  std::unique_ptr<::kaldi::chain::DenominatorGraph> ::kaldi::chain::DenominatorGraph::DenominatorGraph(::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >, int)")},
  {C("forward_transitions"), (PyCFunction)wrapForwardTransitions_as_forward_transitions, METH_NOARGS, C("forward_transitions() -> IntPair\n  Calls C++ function\n  const ::Int32Pair * ::kaldi::chain::DenominatorGraph::ForwardTransitions()")},
  {C("backward_transitions"), (PyCFunction)wrapBackwardTransitions_as_backward_transitions, METH_NOARGS, C("backward_transitions() -> IntPair\n  Calls C++ function\n  const ::Int32Pair * ::kaldi::chain::DenominatorGraph::BackwardTransitions()")},
  {C("transitions"), (PyCFunction)wrapTransitions_as_transitions, METH_NOARGS, C("transitions() -> DenominatorGraphTransition\n  Calls C++ function\n  const ::DenominatorGraphTransition * ::kaldi::chain::DenominatorGraph::Transitions()")},
  {C("initial_probs"), (PyCFunction)wrapInitialProbs_as_initial_probs, METH_NOARGS, C("initial_probs() -> CuVector\n  Calls C++ function\n  ::kaldi::CuVector<float> ::kaldi::chain::DenominatorGraph::InitialProbs()")},
  {C("get_normalization_fst"), (PyCFunction)wrapGetNormalizationFst_as_get_normalization_fst, METH_VARARGS | METH_KEYWORDS, C("get_normalization_fst(ifst:StdVectorFst) -> StdVectorFst\n  Calls C++ function\n  void ::kaldi::chain::DenominatorGraph::GetNormalizationFst(::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >, ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >*)")},
  {C("scale_initial_probs"), (PyCFunction)wrapScaleInitialProbs_as_scale_initial_probs, METH_VARARGS | METH_KEYWORDS, C("scale_initial_probs(s:float)\n  Calls C++ function\n  void ::kaldi::chain::DenominatorGraph::ScaleInitialProbs(float)")},
  {}
};

// DenominatorGraph __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// DenominatorGraph __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_chain_den_graph.DenominatorGraph", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::chain::DenominatorGraph", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::chain::DenominatorGraph* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_chain_DenominatorGraph"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::chain::DenominatorGraph"));
      if (!PyErr_Occurred()) {
        ::kaldi::chain::DenominatorGraph* c = static_cast<::kaldi::chain::DenominatorGraph*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::chain::DenominatorGraph*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyDenominatorGraph

// minimize_acceptor_no_push(fst:StdVectorFst)
static PyObject* wrapMinimizeAcceptorNoPush_as_minimize_acceptor_no_push(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("fst"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:minimize_acceptor_no_push", names, &a[0])) return nullptr;
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > > * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("minimize_acceptor_no_push", names[0], "::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > > *", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::chain::MinimizeAcceptorNoPush(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// map_fst_to_pdf_ids_plus_one(trans_model:TransitionModel, fst:StdVectorFst)
static PyObject* wrapMapFstToPdfIdsPlusOne_as_map_fst_to_pdf_ids_plus_one(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("trans_model"),
      C("fst"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:map_fst_to_pdf_ids_plus_one", names, &a[0], &a[1])) return nullptr;
  ::kaldi::TransitionModel* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("map_fst_to_pdf_ids_plus_one", names[0], "::kaldi::TransitionModel", a[0]);
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > > * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("map_fst_to_pdf_ids_plus_one", names[1], "::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > > *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::chain::MapFstToPdfIdsPlusOne(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// create_denominator_fst(ctx_dep:ContextDependency, trans_model:TransitionModel, phone_lm:StdVectorFst) -> StdVectorFst
static PyObject* wrapCreateDenominatorFst_as_create_denominator_fst(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("ctx_dep"),
      C("trans_model"),
      C("phone_lm"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:create_denominator_fst", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::ContextDependency* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("create_denominator_fst", names[0], "::kaldi::ContextDependency", a[0]);
  ::kaldi::TransitionModel* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("create_denominator_fst", names[1], "::kaldi::TransitionModel", a[1]);
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("create_denominator_fst", names[2], "::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >", a[2]);
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > > ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::chain::CreateDenominatorFst(*arg1, *arg2, *arg3, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("minimize_acceptor_no_push"), (PyCFunction)wrapMinimizeAcceptorNoPush_as_minimize_acceptor_no_push, METH_VARARGS | METH_KEYWORDS, C("minimize_acceptor_no_push(fst:StdVectorFst)\n  Calls C++ function\n  void ::kaldi::chain::MinimizeAcceptorNoPush(::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > > *)")},
  {C("map_fst_to_pdf_ids_plus_one"), (PyCFunction)wrapMapFstToPdfIdsPlusOne_as_map_fst_to_pdf_ids_plus_one, METH_VARARGS | METH_KEYWORDS, C("map_fst_to_pdf_ids_plus_one(trans_model:TransitionModel, fst:StdVectorFst)\n  Calls C++ function\n  void ::kaldi::chain::MapFstToPdfIdsPlusOne(::kaldi::TransitionModel, ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > > *)")},
  {C("create_denominator_fst"), (PyCFunction)wrapCreateDenominatorFst_as_create_denominator_fst, METH_VARARGS | METH_KEYWORDS, C("create_denominator_fst(ctx_dep:ContextDependency, trans_model:TransitionModel, phone_lm:StdVectorFst) -> StdVectorFst\n  Calls C++ function\n  void ::kaldi::chain::CreateDenominatorFst(::kaldi::ContextDependency, ::kaldi::TransitionModel, ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >, ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >*)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyDenominatorGraph::wrapper_Type) < 0) return false;
  Py_INCREF(&pyDenominatorGraph::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_chain_den_graph",  // module name
  "CLIF-generated module for chain/chain-den-graph.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_lattice_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_vector_fst")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_cu_matrixdim")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_cu_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_transition_model")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_context_dep")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_chain_datastruct")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "DenominatorGraph", reinterpret_cast<PyObject*>(&pyDenominatorGraph::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __chain__den__graph_clifwrap

namespace kaldi { namespace chain {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// DenominatorGraph to/from ::kaldi::chain::DenominatorGraph conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::chain::DenominatorGraph** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::chain::DenominatorGraph* cpp = __chain__den__graph_clifwrap::pyDenominatorGraph::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::chain::DenominatorGraph>* c) {
  assert(c != nullptr);
  ::kaldi::chain::DenominatorGraph* cpp = __chain__den__graph_clifwrap::pyDenominatorGraph::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__chain__den__graph_clifwrap::pyDenominatorGraph::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::chain::DenominatorGraph>* c) {
  assert(c != nullptr);
  ::kaldi::chain::DenominatorGraph* cpp = __chain__den__graph_clifwrap::pyDenominatorGraph::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__chain__den__graph_clifwrap::pyDenominatorGraph::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert DenominatorGraph instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::chain::DenominatorGraph* c) {
  assert(c != nullptr);
  ::kaldi::chain::DenominatorGraph* cpp = __chain__den__graph_clifwrap::pyDenominatorGraph::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::chain::DenominatorGraph>* c) {
  assert(c != nullptr);
  ::kaldi::chain::DenominatorGraph* cpp = __chain__den__graph_clifwrap::pyDenominatorGraph::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::chain::DenominatorGraph* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__den__graph_clifwrap::pyDenominatorGraph::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__den__graph_clifwrap::pyDenominatorGraph::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::chain::DenominatorGraph>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::chain::DenominatorGraph> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__den__graph_clifwrap::pyDenominatorGraph::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__den__graph_clifwrap::pyDenominatorGraph::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::chain::DenominatorGraph>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::chain::DenominatorGraph> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__den__graph_clifwrap::pyDenominatorGraph::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__den__graph_clifwrap::pyDenominatorGraph::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::chain::DenominatorGraph>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::chain::DenominatorGraph& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__chain__den__graph_clifwrap::pyDenominatorGraph::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__den__graph_clifwrap::pyDenominatorGraph::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::chain::DenominatorGraph>(c);
  return py;
}

} }  // namespace kaldi::chain
