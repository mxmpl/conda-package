//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/chain/chain-supervision.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "fstext/float-weight-clifwrap.h"
#include "fstext/lattice-weight-clifwrap.h"
#include "fstext/arc-clifwrap.h"
#include "fstext/vector-fst-clifwrap.h"
#include "itf/options-itf-clifwrap.h"
#include "base/iostream-clifwrap.h"
#include "hmm/transition-model-clifwrap.h"
#include "itf/context-dep-itf-clifwrap.h"
#include "chain-supervision-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __chain__supervision_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pySupervisionOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::chain::SupervisionOptions> cpp;
};
static ::kaldi::chain::SupervisionOptions* ThisPtr(PyObject*);

static PyObject* get_left_tolerance(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->left_tolerance, {});
}

static int set_left_tolerance(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the left_tolerance attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->left_tolerance)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for left_tolerance:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_right_tolerance(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->right_tolerance, {});
}

static int set_right_tolerance(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the right_tolerance attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->right_tolerance)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for right_tolerance:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_frame_subsampling_factor(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->frame_subsampling_factor, {});
}

static int set_frame_subsampling_factor(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the frame_subsampling_factor attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->frame_subsampling_factor)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for frame_subsampling_factor:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::chain::SupervisionOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// check()
static PyObject* wrapCheck_as_check(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::chain::SupervisionOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Check();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("left_tolerance"), get_left_tolerance, set_left_tolerance, C("C++ ::int32 SupervisionOptions.left_tolerance")},
  {C("right_tolerance"), get_right_tolerance, set_right_tolerance, C("C++ ::int32 SupervisionOptions.right_tolerance")},
  {C("frame_subsampling_factor"), get_frame_subsampling_factor, set_frame_subsampling_factor, C("C++ ::int32 SupervisionOptions.frame_subsampling_factor")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::chain::SupervisionOptions::Register(::kaldi::OptionsItf *)")},
  {C("check"), (PyCFunction)wrapCheck_as_check, METH_NOARGS, C("check()\n  Calls C++ function\n  void ::kaldi::chain::SupervisionOptions::Check()")},
  {}
};

// SupervisionOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// SupervisionOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// SupervisionOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_chain_supervision.SupervisionOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::chain::SupervisionOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "SupervisionOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::chain::SupervisionOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::chain::SupervisionOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_chain_SupervisionOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::chain::SupervisionOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::chain::SupervisionOptions* c = static_cast<::kaldi::chain::SupervisionOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::chain::SupervisionOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pySupervisionOptions

namespace pyProtoSupervision {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::chain::ProtoSupervision> cpp;
};
static ::kaldi::chain::ProtoSupervision* ThisPtr(PyObject*);

static PyObject* get_allowed_phones(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->allowed_phones, {});
}

static int set_allowed_phones(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the allowed_phones attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->allowed_phones)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for allowed_phones:list<list<int>>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_fst(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->fst), {});
}

static int set_fst(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the fst attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->fst)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for fst:StdVectorFst", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::chain::ProtoSupervision* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("allowed_phones"), get_allowed_phones, set_allowed_phones, C("C++ ::std::vector< ::std::vector< ::int32> > ProtoSupervision.allowed_phones")},
  {C("fst"), get_fst, set_fst, C("C++ ::fst::StdVectorFst ProtoSupervision.fst")},
  {}
};

static PyMethodDef Methods[] = {
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::chain::ProtoSupervision::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {}
};

// ProtoSupervision __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ProtoSupervision __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ProtoSupervision __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_chain_supervision.ProtoSupervision", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::chain::ProtoSupervision", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "ProtoSupervision takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::chain::ProtoSupervision>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::chain::ProtoSupervision* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_chain_ProtoSupervision"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::chain::ProtoSupervision"));
      if (!PyErr_Occurred()) {
        ::kaldi::chain::ProtoSupervision* c = static_cast<::kaldi::chain::ProtoSupervision*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::chain::ProtoSupervision*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyProtoSupervision

// alignment_to_proto_supervision(opts:SupervisionOptions, phones:list<int>, durations:list<int>) -> (success:bool, proto_supervision:ProtoSupervision)
static PyObject* wrapAlignmentToProtoSupervision_as_alignment_to_proto_supervision(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("opts"),
      C("phones"),
      C("durations"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:alignment_to_proto_supervision", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::chain::SupervisionOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("alignment_to_proto_supervision", names[0], "::kaldi::chain::SupervisionOptions", a[0]);
  ::std::vector< ::int32> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("alignment_to_proto_supervision", names[1], "::std::vector< ::int32>", a[1]);
  ::std::vector< ::int32> arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("alignment_to_proto_supervision", names[2], "::std::vector< ::int32>", a[2]);
  ::kaldi::chain::ProtoSupervision ret1{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::chain::AlignmentToProtoSupervision(*arg1, std::move(arg2), std::move(arg3), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  PyObject* pyproc = ImportFQName("kaldi.util._value_error_on_false");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// alignment_to_proto_supervision_with_phone_durs(opts:SupervisionOptions, phones_durs:list<tuple<int, int>>) -> (success:bool, proto_supervision:ProtoSupervision)
static PyObject* wrapAlignmentToProtoSupervision_as_alignment_to_proto_supervision_with_phone_durs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("opts"),
      C("phones_durs"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:alignment_to_proto_supervision_with_phone_durs", names, &a[0], &a[1])) return nullptr;
  ::kaldi::chain::SupervisionOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("alignment_to_proto_supervision_with_phone_durs", names[0], "::kaldi::chain::SupervisionOptions", a[0]);
  ::std::vector< ::std::pair< ::int32, ::int32> > arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("alignment_to_proto_supervision_with_phone_durs", names[1], "::std::vector< ::std::pair< ::int32, ::int32> >", a[1]);
  ::kaldi::chain::ProtoSupervision ret1{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::chain::AlignmentToProtoSupervision(*arg1, std::move(arg2), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  PyObject* pyproc = ImportFQName("kaldi.util._value_error_on_false");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// phone_lattice_to_proto_supervision(opts:SupervisionOptions, clat:CompactLatticeVectorFst) -> (success:bool, proto_supervision:ProtoSupervision)
static PyObject* wrapPhoneLatticeToProtoSupervision_as_phone_lattice_to_proto_supervision(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("opts"),
      C("clat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:phone_lattice_to_proto_supervision", names, &a[0], &a[1])) return nullptr;
  ::kaldi::chain::SupervisionOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("phone_lattice_to_proto_supervision", names[0], "::kaldi::chain::SupervisionOptions", a[0]);
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > >* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("phone_lattice_to_proto_supervision", names[1], "::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > >", a[1]);
  ::kaldi::chain::ProtoSupervision ret1{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::chain::PhoneLatticeToProtoSupervision(*arg1, *arg2, &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  PyObject* pyproc = ImportFQName("kaldi.util._value_error_on_false");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

namespace pyTimeEnforcerFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::chain::TimeEnforcerFst> cpp;
};
static ::kaldi::chain::TimeEnforcerFst* ThisPtr(PyObject*);

// __init__(trans_model:TransitionModel, allowed_phones:list<list<int>>)
static PyObject* wrapTimeEnforcerFst_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("trans_model"),
      C("allowed_phones"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::kaldi::TransitionModel* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::TransitionModel", a[0]);
  ::std::vector< ::std::vector< ::int32> > arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::std::vector< ::std::vector< ::int32> >", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::chain::TimeEnforcerFst>(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// start() -> int
static PyObject* wrapStart_as_start(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::chain::TimeEnforcerFst* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Start();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// final(state:int) -> TropicalWeight
static PyObject* wrapFinal_as_final(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:final", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("final", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::chain::TimeEnforcerFst* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::TropicalWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Final(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_arc(s:int, ilabel:int) -> (success:bool, oarc:StdArc)
static PyObject* wrapGetArc_as_get_arc(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("s"),
      C("ilabel"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_arc", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_arc", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_arc", names[1], "int", a[1]);
  ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > ret1{};
  // Call actual C++ method.
  ::kaldi::chain::TimeEnforcerFst* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetArc(std::move(arg1), std::move(arg2), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  PyObject* pyproc = ImportFQName("kaldi.util._value_error_on_false");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// Implicit cast this as ::fst::DeterministicOnDemandFst< ::fst::StdArc>*
static PyObject* as_fst_DeterministicOnDemandFst__fst_StdArc(PyObject* self) {
  ::fst::DeterministicOnDemandFst< ::fst::StdArc>* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::DeterministicOnDemandFst< ::fst::StdArc>"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapTimeEnforcerFst_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(trans_model:TransitionModel, allowed_phones:list<list<int>>)\n  Calls C++ function\n  void ::kaldi::chain::TimeEnforcerFst::TimeEnforcerFst(::kaldi::TransitionModel, ::std::vector< ::std::vector< ::int32> >)")},
  {C("start"), (PyCFunction)wrapStart_as_start, METH_NOARGS, C("start() -> int\n\nReturns the start state index.")},
  {C("final"), (PyCFunction)wrapFinal_as_final, METH_VARARGS | METH_KEYWORDS, C("final(state:int) -> TropicalWeight\n\nReturns the final weight of the given state.")},
  {C("get_arc"), (PyCFunction)wrapGetArc_as_get_arc, METH_VARARGS | METH_KEYWORDS, C("get_arc(s:int, ilabel:int) -> (success:bool, oarc:StdArc)\n\nCreates an on demand arc and returns it.\n\nArgs:\n  s (int): State index.\n  ilabel (int): Arc label.\n\nReturns:\n  The created arc.")},
  {C("as_fst_DeterministicOnDemandFst__fst_StdArc"), (PyCFunction)as_fst_DeterministicOnDemandFst__fst_StdArc, METH_NOARGS, C("Upcast to ::fst::DeterministicOnDemandFst< ::fst::StdArc>*")},
  {}
};

// TimeEnforcerFst __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// TimeEnforcerFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// TimeEnforcerFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_chain_supervision.TimeEnforcerFst", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::chain::TimeEnforcerFst", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapTimeEnforcerFst_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::chain::TimeEnforcerFst* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_chain_TimeEnforcerFst"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::chain::TimeEnforcerFst"));
      if (!PyErr_Occurred()) {
        ::kaldi::chain::TimeEnforcerFst* c = static_cast<::kaldi::chain::TimeEnforcerFst*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::chain::TimeEnforcerFst*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyTimeEnforcerFst

namespace pySupervision {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::chain::Supervision> cpp;
};
static ::kaldi::chain::Supervision* ThisPtr(PyObject*);

static PyObject* get_weight(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->weight, {});
}

static int set_weight(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the weight attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->weight)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for weight:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_num_sequences(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->num_sequences, {});
}

static int set_num_sequences(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the num_sequences attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->num_sequences)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for num_sequences:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_frames_per_sequence(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->frames_per_sequence, {});
}

static int set_frames_per_sequence(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the frames_per_sequence attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->frames_per_sequence)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for frames_per_sequence:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_label_dim(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->label_dim, {});
}

static int set_label_dim(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the label_dim attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->label_dim)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for label_dim:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_fst(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->fst), {});
}

static int set_fst(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the fst attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->fst)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for fst:StdVectorFst", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// @classmethod new_with_other(other:Supervision) -> Supervision
static PyObject* wrapSupervision_as_new_with_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:new_with_other", names, &a[0])) return nullptr;
  ::kaldi::chain::Supervision* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new_with_other", names[0], "::kaldi::chain::Supervision", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::chain::Supervision> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::chain::Supervision>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// swap(other:Supervision)
static PyObject* wrapSwap_as_swap(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:swap", names, &a[0])) return nullptr;
  ::kaldi::chain::Supervision * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("swap", names[0], "::kaldi::chain::Supervision *", a[0]);
  // Call actual C++ method.
  ::kaldi::chain::Supervision* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Swap(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// check(trans_model:TransitionModel)
static PyObject* wrapCheck_as_check(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("trans_model"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:check", names, &a[0])) return nullptr;
  ::kaldi::TransitionModel* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("check", names[0], "::kaldi::TransitionModel", a[0]);
  // Call actual C++ method.
  ::kaldi::chain::Supervision* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Check(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::chain::Supervision* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(is:istream, binary:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::chain::Supervision* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("weight"), get_weight, set_weight, C("C++ ::kaldi::BaseFloat Supervision.weight")},
  {C("num_sequences"), get_num_sequences, set_num_sequences, C("C++ ::int32 Supervision.num_sequences")},
  {C("frames_per_sequence"), get_frames_per_sequence, set_frames_per_sequence, C("C++ ::int32 Supervision.frames_per_sequence")},
  {C("label_dim"), get_label_dim, set_label_dim, C("C++ ::int32 Supervision.label_dim")},
  {C("fst"), get_fst, set_fst, C("C++ ::fst::StdVectorFst Supervision.fst")},
  {}
};

static PyMethodDef Methods[] = {
  {C("new_with_other"), (PyCFunction)wrapSupervision_as_new_with_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new_with_other(other:Supervision) -> Supervision\n  Calls C++ function\n  std::unique_ptr<::kaldi::chain::Supervision> ::kaldi::chain::Supervision::Supervision(::kaldi::chain::Supervision)")},
  {C("swap"), (PyCFunction)wrapSwap_as_swap, METH_VARARGS | METH_KEYWORDS, C("swap(other:Supervision)\n  Calls C++ function\n  void ::kaldi::chain::Supervision::Swap(::kaldi::chain::Supervision *)")},
  {C("check"), (PyCFunction)wrapCheck_as_check, METH_VARARGS | METH_KEYWORDS, C("check(trans_model:TransitionModel)\n\nChecks that this supervision objects satisfies some of the properties expected")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::chain::Supervision::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool)\n  Calls C++ function\n  void ::kaldi::chain::Supervision::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool)")},
  {}
};

// Supervision __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// Supervision __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// Supervision __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_chain_supervision.Supervision",    // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::chain::Supervision", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "Supervision takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::chain::Supervision>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::chain::Supervision* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_chain_Supervision"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::chain::Supervision"));
      if (!PyErr_Occurred()) {
        ::kaldi::chain::Supervision* c = static_cast<::kaldi::chain::Supervision*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::chain::Supervision*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pySupervision

// proto_supervision_to_supervision(ctx_dep:ContextDependencyInterface, trans_model:TransitionModel, proto_supervision:ProtoSupervision) -> (success:bool, supervision:Supervision)
static PyObject* wrapProtoSupervisionToSupervision_as_proto_supervision_to_supervision(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("ctx_dep"),
      C("trans_model"),
      C("proto_supervision"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:proto_supervision_to_supervision", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::ContextDependencyInterface* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("proto_supervision_to_supervision", names[0], "::kaldi::ContextDependencyInterface", a[0]);
  ::kaldi::TransitionModel* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("proto_supervision_to_supervision", names[1], "::kaldi::TransitionModel", a[1]);
  ::kaldi::chain::ProtoSupervision* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("proto_supervision_to_supervision", names[2], "::kaldi::chain::ProtoSupervision", a[2]);
  ::kaldi::chain::Supervision ret1{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::chain::ProtoSupervisionToSupervision(*arg1, *arg2, *arg3, &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  PyObject* pyproc = ImportFQName("kaldi.util._value_error_on_false");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// sort_breadth_first_search(fst:StdVectorFst)
static PyObject* wrapSortBreadthFirstSearch_as_sort_breadth_first_search(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("fst"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:sort_breadth_first_search", names, &a[0])) return nullptr;
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > > * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("sort_breadth_first_search", names[0], "::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > > *", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::chain::SortBreadthFirstSearch(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

namespace pySupervisionSplitter {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::chain::SupervisionSplitter> cpp;
};
static ::kaldi::chain::SupervisionSplitter* ThisPtr(PyObject*);

// __init__(supervision:Supervision)
static PyObject* wrapSupervisionSplitter_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("supervision"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::kaldi::chain::Supervision* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::chain::Supervision", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::chain::SupervisionSplitter>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// get_frame_range(begin_frame:int, frames_per_sequence:int) -> Supervision
static PyObject* wrapGetFrameRange_as_get_frame_range(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("begin_frame"),
      C("frames_per_sequence"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_frame_range", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_frame_range", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_frame_range", names[1], "int", a[1]);
  ::kaldi::chain::Supervision ret0{};
  // Call actual C++ method.
  ::kaldi::chain::SupervisionSplitter* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetFrameRange(std::move(arg1), std::move(arg2), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapSupervisionSplitter_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(supervision:Supervision)\n  Calls C++ function\n  void ::kaldi::chain::SupervisionSplitter::SupervisionSplitter(::kaldi::chain::Supervision)")},
  {C("get_frame_range"), (PyCFunction)wrapGetFrameRange_as_get_frame_range, METH_VARARGS | METH_KEYWORDS, C("get_frame_range(begin_frame:int, frames_per_sequence:int) -> Supervision\n  Calls C++ function\n  void ::kaldi::chain::SupervisionSplitter::GetFrameRange(int, int, ::kaldi::chain::Supervision*)")},
  {}
};

// SupervisionSplitter __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// SupervisionSplitter __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// SupervisionSplitter __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_chain_supervision.SupervisionSplitter", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::chain::SupervisionSplitter", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapSupervisionSplitter_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::chain::SupervisionSplitter* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_chain_SupervisionSplitter"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::chain::SupervisionSplitter"));
      if (!PyErr_Occurred()) {
        ::kaldi::chain::SupervisionSplitter* c = static_cast<::kaldi::chain::SupervisionSplitter*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::chain::SupervisionSplitter*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pySupervisionSplitter

// add_weight_to_supervision_fst(normalization_fst:StdVectorFst) -> (success:bool, supervision:Supervision)
static PyObject* wrapAddWeightToSupervisionFst_as_add_weight_to_supervision_fst(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("normalization_fst"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:add_weight_to_supervision_fst", names, &a[0])) return nullptr;
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add_weight_to_supervision_fst", names[0], "::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >", a[0]);
  ::kaldi::chain::Supervision ret1{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::chain::AddWeightToSupervisionFst(*arg1, &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  PyObject* pyproc = ImportFQName("kaldi.util._value_error_on_false");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// compute_fst_state_times(fst:StdVectorFst) -> (path_length:int, state_times:list<int>)
static PyObject* wrapComputeFstStateTimes_as_compute_fst_state_times(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("fst"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:compute_fst_state_times", names, &a[0])) return nullptr;
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_fst_state_times", names[0], "::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >", a[0]);
  ::std::vector< ::int32> ret1{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::chain::ComputeFstStateTimes(*arg1, &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// split_into_ranges(num_frames:int, frames_per_range:int) -> list<int>
static PyObject* wrapSplitIntoRanges_as_split_into_ranges(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("num_frames"),
      C("frames_per_range"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:split_into_ranges", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("split_into_ranges", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("split_into_ranges", names[1], "int", a[1]);
  ::std::vector< ::int32> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::chain::SplitIntoRanges(std::move(arg1), std::move(arg2), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_weights_for_ranges(range_length:int, range_starts:list<int>) -> list<Vector>
static PyObject* wrapGetWeightsForRanges_as_get_weights_for_ranges(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("range_length"),
      C("range_starts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_weights_for_ranges", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_weights_for_ranges", names[0], "int", a[0]);
  ::std::vector< ::int32> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_weights_for_ranges", names[1], "::std::vector< ::int32>", a[1]);
  ::std::vector< ::kaldi::Vector< ::kaldi::BaseFloat> > ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::chain::GetWeightsForRanges(std::move(arg1), std::move(arg2), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("alignment_to_proto_supervision"), (PyCFunction)wrapAlignmentToProtoSupervision_as_alignment_to_proto_supervision, METH_VARARGS | METH_KEYWORDS, C("alignment_to_proto_supervision(opts:SupervisionOptions, phones:list<int>, durations:list<int>) -> (success:bool, proto_supervision:ProtoSupervision)\n\nCreates a proto supervision from a phone alignment.")},
  {C("alignment_to_proto_supervision_with_phone_durs"), (PyCFunction)wrapAlignmentToProtoSupervision_as_alignment_to_proto_supervision_with_phone_durs, METH_VARARGS | METH_KEYWORDS, C("alignment_to_proto_supervision_with_phone_durs(opts:SupervisionOptions, phones_durs:list<tuple<int, int>>) -> (success:bool, proto_supervision:ProtoSupervision)\n  Calls C++ function\n  bool ::kaldi::chain::AlignmentToProtoSupervision(::kaldi::chain::SupervisionOptions, ::std::vector< ::std::pair< ::int32, ::int32> >, ::kaldi::chain::ProtoSupervision*)")},
  {C("phone_lattice_to_proto_supervision"), (PyCFunction)wrapPhoneLatticeToProtoSupervision_as_phone_lattice_to_proto_supervision, METH_VARARGS | METH_KEYWORDS, C("phone_lattice_to_proto_supervision(opts:SupervisionOptions, clat:CompactLatticeVectorFst) -> (success:bool, proto_supervision:ProtoSupervision)\n  Calls C++ function\n  bool ::kaldi::chain::PhoneLatticeToProtoSupervision(::kaldi::chain::SupervisionOptions, ::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > >, ::kaldi::chain::ProtoSupervision*)")},
  {C("proto_supervision_to_supervision"), (PyCFunction)wrapProtoSupervisionToSupervision_as_proto_supervision_to_supervision, METH_VARARGS | METH_KEYWORDS, C("proto_supervision_to_supervision(ctx_dep:ContextDependencyInterface, trans_model:TransitionModel, proto_supervision:ProtoSupervision) -> (success:bool, supervision:Supervision)\n  Calls C++ function\n  bool ::kaldi::chain::ProtoSupervisionToSupervision(::kaldi::ContextDependencyInterface, ::kaldi::TransitionModel, ::kaldi::chain::ProtoSupervision, ::kaldi::chain::Supervision*)")},
  {C("sort_breadth_first_search"), (PyCFunction)wrapSortBreadthFirstSearch_as_sort_breadth_first_search, METH_VARARGS | METH_KEYWORDS, C("sort_breadth_first_search(fst:StdVectorFst)\n  Calls C++ function\n  void ::kaldi::chain::SortBreadthFirstSearch(::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > > *)")},
  {C("add_weight_to_supervision_fst"), (PyCFunction)wrapAddWeightToSupervisionFst_as_add_weight_to_supervision_fst, METH_VARARGS | METH_KEYWORDS, C("add_weight_to_supervision_fst(normalization_fst:StdVectorFst) -> (success:bool, supervision:Supervision)\n  Calls C++ function\n  bool ::kaldi::chain::AddWeightToSupervisionFst(::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >, ::kaldi::chain::Supervision*)")},
  {C("compute_fst_state_times"), (PyCFunction)wrapComputeFstStateTimes_as_compute_fst_state_times, METH_VARARGS | METH_KEYWORDS, C("compute_fst_state_times(fst:StdVectorFst) -> (path_length:int, state_times:list<int>)\n\nReturns the total number of frames under certain assumptions.\n\nArgs:\n  fst (StdVectorFst): Input fst; epsilon-free; connected; nonempty; should have the property that all paths to a given state should have the same number of arcs; and its states should be sorted on this path length\n\nReturns:\n  path_length (int): the path length\n  state_times (list of int): state times set to a vector with dimension fst.num_states")},
  {C("split_into_ranges"), (PyCFunction)wrapSplitIntoRanges_as_split_into_ranges, METH_VARARGS | METH_KEYWORDS, C("split_into_ranges(num_frames:int, frames_per_range:int) -> list<int>\n\nPseudo-randomly split a sequence of length num_frames into pieces of length exactly frames_per_range")},
  {C("get_weights_for_ranges"), (PyCFunction)wrapGetWeightsForRanges_as_get_weights_for_ranges, METH_VARARGS | METH_KEYWORDS, C("get_weights_for_ranges(range_length:int, range_starts:list<int>) -> list<Vector>\n\nThis function gets the weights for the derivatives.\n\nArgs:\n  range_starts (list of int): obtained from :meth:`split_into_ranges`\n  range_length (int): length in frames (maybe longer that the one supplied in split_into_ranges)\n\nReturns:\n  Output vector weights with the same dimension as range_starts.")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pySupervisionOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pySupervisionOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyProtoSupervision::wrapper_Type) < 0) return false;
  Py_INCREF(&pyProtoSupervision::wrapper_Type);  // For PyModule_AddObject to steal.
  PyObject* base_cls = ImportFQName("kaldi.fstext._deterministic_fst.StdDeterministicOnDemandFst");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._deterministic_fst.StdDeterministicOnDemandFst is not a new style class inheriting from object.");
    return false;
  }
  pyTimeEnforcerFst::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyTimeEnforcerFst::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._deterministic_fst.StdDeterministicOnDemandFst is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyTimeEnforcerFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyTimeEnforcerFst::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pySupervision::wrapper_Type) < 0) return false;
  Py_INCREF(&pySupervision::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pySupervisionSplitter::wrapper_Type) < 0) return false;
  Py_INCREF(&pySupervisionSplitter::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_chain_supervision",  // module name
  "CLIF-generated module for chain/chain-supervision.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_float_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_lattice_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_arc")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_vector_fst")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_transition_model")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_context_dep_itf")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "SupervisionOptions", reinterpret_cast<PyObject*>(&pySupervisionOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "ProtoSupervision", reinterpret_cast<PyObject*>(&pyProtoSupervision::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "TimeEnforcerFst", reinterpret_cast<PyObject*>(&pyTimeEnforcerFst::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "Supervision", reinterpret_cast<PyObject*>(&pySupervision::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "SupervisionSplitter", reinterpret_cast<PyObject*>(&pySupervisionSplitter::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __chain__supervision_clifwrap

namespace kaldi { namespace chain {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// ProtoSupervision to/from ::kaldi::chain::ProtoSupervision conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::chain::ProtoSupervision** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::chain::ProtoSupervision* cpp = __chain__supervision_clifwrap::pyProtoSupervision::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::chain::ProtoSupervision>* c) {
  assert(c != nullptr);
  ::kaldi::chain::ProtoSupervision* cpp = __chain__supervision_clifwrap::pyProtoSupervision::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__chain__supervision_clifwrap::pyProtoSupervision::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::chain::ProtoSupervision>* c) {
  assert(c != nullptr);
  ::kaldi::chain::ProtoSupervision* cpp = __chain__supervision_clifwrap::pyProtoSupervision::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__chain__supervision_clifwrap::pyProtoSupervision::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ProtoSupervision instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::chain::ProtoSupervision* c) {
  assert(c != nullptr);
  ::kaldi::chain::ProtoSupervision* cpp = __chain__supervision_clifwrap::pyProtoSupervision::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::chain::ProtoSupervision>* c) {
  assert(c != nullptr);
  ::kaldi::chain::ProtoSupervision* cpp = __chain__supervision_clifwrap::pyProtoSupervision::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::chain::ProtoSupervision* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__supervision_clifwrap::pyProtoSupervision::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__supervision_clifwrap::pyProtoSupervision::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::chain::ProtoSupervision>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::chain::ProtoSupervision> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__supervision_clifwrap::pyProtoSupervision::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__supervision_clifwrap::pyProtoSupervision::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::chain::ProtoSupervision>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::chain::ProtoSupervision> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__supervision_clifwrap::pyProtoSupervision::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__supervision_clifwrap::pyProtoSupervision::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::chain::ProtoSupervision>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::chain::ProtoSupervision& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__chain__supervision_clifwrap::pyProtoSupervision::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__supervision_clifwrap::pyProtoSupervision::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::chain::ProtoSupervision>(c);
  return py;
}

// Supervision to/from ::kaldi::chain::Supervision conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::chain::Supervision** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::chain::Supervision* cpp = __chain__supervision_clifwrap::pySupervision::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::chain::Supervision>* c) {
  assert(c != nullptr);
  ::kaldi::chain::Supervision* cpp = __chain__supervision_clifwrap::pySupervision::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__chain__supervision_clifwrap::pySupervision::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::chain::Supervision>* c) {
  assert(c != nullptr);
  ::kaldi::chain::Supervision* cpp = __chain__supervision_clifwrap::pySupervision::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__chain__supervision_clifwrap::pySupervision::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert Supervision instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::chain::Supervision* c) {
  assert(c != nullptr);
  ::kaldi::chain::Supervision* cpp = __chain__supervision_clifwrap::pySupervision::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::chain::Supervision>* c) {
  assert(c != nullptr);
  ::kaldi::chain::Supervision* cpp = __chain__supervision_clifwrap::pySupervision::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::chain::Supervision* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__supervision_clifwrap::pySupervision::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__supervision_clifwrap::pySupervision::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::chain::Supervision>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::chain::Supervision> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__supervision_clifwrap::pySupervision::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__supervision_clifwrap::pySupervision::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::chain::Supervision>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::chain::Supervision> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__supervision_clifwrap::pySupervision::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__supervision_clifwrap::pySupervision::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::chain::Supervision>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::chain::Supervision& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__chain__supervision_clifwrap::pySupervision::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__supervision_clifwrap::pySupervision::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::chain::Supervision>(c);
  return py;
}

// SupervisionOptions to/from ::kaldi::chain::SupervisionOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::chain::SupervisionOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::chain::SupervisionOptions* cpp = __chain__supervision_clifwrap::pySupervisionOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::chain::SupervisionOptions>* c) {
  assert(c != nullptr);
  ::kaldi::chain::SupervisionOptions* cpp = __chain__supervision_clifwrap::pySupervisionOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__chain__supervision_clifwrap::pySupervisionOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::chain::SupervisionOptions>* c) {
  assert(c != nullptr);
  ::kaldi::chain::SupervisionOptions* cpp = __chain__supervision_clifwrap::pySupervisionOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__chain__supervision_clifwrap::pySupervisionOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert SupervisionOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::chain::SupervisionOptions* c) {
  assert(c != nullptr);
  ::kaldi::chain::SupervisionOptions* cpp = __chain__supervision_clifwrap::pySupervisionOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::chain::SupervisionOptions>* c) {
  assert(c != nullptr);
  ::kaldi::chain::SupervisionOptions* cpp = __chain__supervision_clifwrap::pySupervisionOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::chain::SupervisionOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__supervision_clifwrap::pySupervisionOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__supervision_clifwrap::pySupervisionOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::chain::SupervisionOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::chain::SupervisionOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__supervision_clifwrap::pySupervisionOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__supervision_clifwrap::pySupervisionOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::chain::SupervisionOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::chain::SupervisionOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__supervision_clifwrap::pySupervisionOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__supervision_clifwrap::pySupervisionOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::chain::SupervisionOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::chain::SupervisionOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__chain__supervision_clifwrap::pySupervisionOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__supervision_clifwrap::pySupervisionOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::chain::SupervisionOptions>(c);
  return py;
}

// SupervisionSplitter to/from ::kaldi::chain::SupervisionSplitter conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::chain::SupervisionSplitter** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::chain::SupervisionSplitter* cpp = __chain__supervision_clifwrap::pySupervisionSplitter::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::chain::SupervisionSplitter>* c) {
  assert(c != nullptr);
  ::kaldi::chain::SupervisionSplitter* cpp = __chain__supervision_clifwrap::pySupervisionSplitter::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__chain__supervision_clifwrap::pySupervisionSplitter::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::chain::SupervisionSplitter>* c) {
  assert(c != nullptr);
  ::kaldi::chain::SupervisionSplitter* cpp = __chain__supervision_clifwrap::pySupervisionSplitter::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__chain__supervision_clifwrap::pySupervisionSplitter::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert SupervisionSplitter instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::chain::SupervisionSplitter* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__supervision_clifwrap::pySupervisionSplitter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__supervision_clifwrap::pySupervisionSplitter::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::chain::SupervisionSplitter>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::chain::SupervisionSplitter> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__supervision_clifwrap::pySupervisionSplitter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__supervision_clifwrap::pySupervisionSplitter::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::chain::SupervisionSplitter>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::chain::SupervisionSplitter> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__supervision_clifwrap::pySupervisionSplitter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__supervision_clifwrap::pySupervisionSplitter::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::chain::SupervisionSplitter>(std::move(c));
  return py;
}

// TimeEnforcerFst to/from ::kaldi::chain::TimeEnforcerFst conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::chain::TimeEnforcerFst** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::chain::TimeEnforcerFst* cpp = __chain__supervision_clifwrap::pyTimeEnforcerFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::chain::TimeEnforcerFst>* c) {
  assert(c != nullptr);
  ::kaldi::chain::TimeEnforcerFst* cpp = __chain__supervision_clifwrap::pyTimeEnforcerFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__chain__supervision_clifwrap::pyTimeEnforcerFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::chain::TimeEnforcerFst>* c) {
  assert(c != nullptr);
  ::kaldi::chain::TimeEnforcerFst* cpp = __chain__supervision_clifwrap::pyTimeEnforcerFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__chain__supervision_clifwrap::pyTimeEnforcerFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert TimeEnforcerFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::chain::TimeEnforcerFst* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__supervision_clifwrap::pyTimeEnforcerFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__supervision_clifwrap::pyTimeEnforcerFst::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::chain::TimeEnforcerFst>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::chain::TimeEnforcerFst> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__supervision_clifwrap::pyTimeEnforcerFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__supervision_clifwrap::pyTimeEnforcerFst::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::chain::TimeEnforcerFst>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::chain::TimeEnforcerFst> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__supervision_clifwrap::pyTimeEnforcerFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__supervision_clifwrap::pyTimeEnforcerFst::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::chain::TimeEnforcerFst>(std::move(c));
  return py;
}

} }  // namespace kaldi::chain
