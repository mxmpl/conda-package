//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/decoder/decodable-sum.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "itf/decodable-itf-clifwrap.h"
#include "decodable-sum-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __decodable__sum_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyDecodableSum {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::DecodableSum> cpp;
};
static ::kaldi::DecodableSum* ThisPtr(PyObject*);

// __init__(d1:DecodableInterface, w1:float, d2:DecodableInterface, w2:float)
static PyObject* wrapDecodableSum_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("d1"),
      C("w1"),
      C("d2"),
      C("w2"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:__init__", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::DecodableInterface * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::DecodableInterface *", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "float", a[1]);
  ::kaldi::DecodableInterface * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::kaldi::DecodableInterface *", a[2]);
  float arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "float", a[3]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::DecodableSum>(arg1, std::move(arg2), arg3, std::move(arg4));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// @classmethod new(decodables:list<tuple<DecodableInterface, float>>) -> DecodableSum
static PyObject* wrapDecodableSum_as_new(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("decodables"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:new", names, &a[0])) return nullptr;
  ::std::vector< ::std::pair< ::kaldi::DecodableInterface *, ::kaldi::BaseFloat> > arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new", names[0], "::std::vector< ::std::pair< ::kaldi::DecodableInterface *, ::kaldi::BaseFloat> >", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::DecodableSum> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::DecodableSum>(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// check_sizes()
static PyObject* wrapCheckSizes_as_check_sizes(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::DecodableSum* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CheckSizes();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// log_likelihood(frame:int, state_index:int) -> float
static PyObject* wrapLogLikelihood_as_log_likelihood(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("state_index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:log_likelihood", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("log_likelihood", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("log_likelihood", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::DecodableSum* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->LogLikelihood(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_indices() -> int
static PyObject* wrapNumIndices_as_num_indices(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::DecodableSum* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumIndices();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_last_frame(frame:int) -> bool
static PyObject* wrapIsLastFrame_as_is_last_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_last_frame", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_last_frame", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::DecodableSum* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsLastFrame(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::kaldi::DecodableInterface*
static PyObject* as_kaldi_DecodableInterface(PyObject* self) {
  ::kaldi::DecodableInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::DecodableInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapDecodableSum_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(d1:DecodableInterface, w1:float, d2:DecodableInterface, w2:float)\n  Calls C++ function\n  void ::kaldi::DecodableSum::DecodableSum(::kaldi::DecodableInterface *, float, ::kaldi::DecodableInterface *, float)")},
  {C("new"), (PyCFunction)wrapDecodableSum_as_new, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new(decodables:list<tuple<DecodableInterface, float>>) -> DecodableSum\n\nCreates a new decodable from given (decodable, weight) pairs.\n\nArgs:\n  decodables (List[Tuple[DecodableInterface,float]]): The list of\n    (decodable, weight) pairs.")},
  {C("check_sizes"), (PyCFunction)wrapCheckSizes_as_check_sizes, METH_NOARGS, C("check_sizes()\n\nChecks the sizes of underlying decodables.")},
  {C("log_likelihood"), (PyCFunction)wrapLogLikelihood_as_log_likelihood, METH_VARARGS | METH_KEYWORDS, C("log_likelihood(frame:int, state_index:int) -> float\n\nReturns the log-likehood of the given index for the given frame.")},
  {C("num_indices"), (PyCFunction)wrapNumIndices_as_num_indices, METH_NOARGS, C("num_indices() -> int\n\nReturns number of indices.")},
  {C("is_last_frame"), (PyCFunction)wrapIsLastFrame_as_is_last_frame, METH_VARARGS | METH_KEYWORDS, C("is_last_frame(frame:int) -> bool\n\nChecks if given frame is the last frame.")},
  {C("as_kaldi_DecodableInterface"), (PyCFunction)as_kaldi_DecodableInterface, METH_NOARGS, C("Upcast to ::kaldi::DecodableInterface*")},
  {}
};

// DecodableSum __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// DecodableSum __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// DecodableSum __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_decodable_sum.DecodableSum",       // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "DecodableSum(d1, w1, d2, w2)\n\nDecodable for summing scores of other decodable objects.\n\nArgs:\n  d1 (DecodableInterface): The first decodable object.\n  w1 (float): The weight for the scores obtained from :attr:`d1`.\n  d2 (DecodableInterface): The second decodable object.\n  w2 (float): The weight for the scores obtained from :attr:`d2`.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapDecodableSum_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::DecodableSum* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_DecodableSum"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::DecodableSum"));
      if (!PyErr_Occurred()) {
        ::kaldi::DecodableSum* c = static_cast<::kaldi::DecodableSum*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::DecodableSum*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyDecodableSum

namespace pyDecodableSumScaled {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::DecodableSumScaled> cpp;
};
static ::kaldi::DecodableSumScaled* ThisPtr(PyObject*);

// __init__(d1:DecodableInterface, w1:float, d2:DecodableInterface, w2:float, scale:float)
static PyObject* wrapDecodableSumScaled_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[5];
  char* names[] = {
      C("d1"),
      C("w1"),
      C("d2"),
      C("w2"),
      C("scale"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOO:__init__", names, &a[0], &a[1], &a[2], &a[3], &a[4])) return nullptr;
  ::kaldi::DecodableInterface * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::DecodableInterface *", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "float", a[1]);
  ::kaldi::DecodableInterface * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::kaldi::DecodableInterface *", a[2]);
  float arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "float", a[3]);
  float arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("__init__", names[4], "float", a[4]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::DecodableSumScaled>(arg1, std::move(arg2), arg3, std::move(arg4), std::move(arg5));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// @classmethod new(decodables:list<tuple<DecodableInterface, float>>, scale:float) -> DecodableSumScaled
static PyObject* wrapDecodableSumScaled_as_new(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("decodables"),
      C("scale"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:new", names, &a[0], &a[1])) return nullptr;
  ::std::vector< ::std::pair< ::kaldi::DecodableInterface *, ::kaldi::BaseFloat> > arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new", names[0], "::std::vector< ::std::pair< ::kaldi::DecodableInterface *, ::kaldi::BaseFloat> >", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("new", names[1], "float", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::DecodableSumScaled> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::DecodableSumScaled>(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// log_likelihood(frame:int, state_index:int) -> float
static PyObject* wrapLogLikelihood_as_log_likelihood(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("state_index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:log_likelihood", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("log_likelihood", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("log_likelihood", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::DecodableSumScaled* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->LogLikelihood(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::kaldi::DecodableSum*
static PyObject* as_kaldi_DecodableSum(PyObject* self) {
  ::kaldi::DecodableSum* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::DecodableSum"), nullptr);
}

// Implicit cast this as ::kaldi::DecodableInterface*
static PyObject* as_kaldi_DecodableInterface(PyObject* self) {
  ::kaldi::DecodableInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::DecodableInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapDecodableSumScaled_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(d1:DecodableInterface, w1:float, d2:DecodableInterface, w2:float, scale:float)\n  Calls C++ function\n  void ::kaldi::DecodableSumScaled::DecodableSumScaled(::kaldi::DecodableInterface *, float, ::kaldi::DecodableInterface *, float, float)")},
  {C("new"), (PyCFunction)wrapDecodableSumScaled_as_new, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new(decodables:list<tuple<DecodableInterface, float>>, scale:float) -> DecodableSumScaled\n\nCreates a new decodable from given (decodable, weight) pairs.\n\nArgs:\n  decodables (List[Tuple[DecodableInterface,float]]): The list of\n    (decodable, weight) pairs.\n  scale (float): The scalar multiplier for the sum.")},
  {C("log_likelihood"), (PyCFunction)wrapLogLikelihood_as_log_likelihood, METH_VARARGS | METH_KEYWORDS, C("log_likelihood(frame:int, state_index:int) -> float\n\nReturns the log-likehood of the given index for the given frame.")},
  {C("as_kaldi_DecodableSum"), (PyCFunction)as_kaldi_DecodableSum, METH_NOARGS, C("Upcast to ::kaldi::DecodableSum*")},
  {C("as_kaldi_DecodableInterface"), (PyCFunction)as_kaldi_DecodableInterface, METH_NOARGS, C("Upcast to ::kaldi::DecodableInterface*")},
  {}
};

// DecodableSumScaled __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// DecodableSumScaled __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// DecodableSumScaled __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_decodable_sum.DecodableSumScaled", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "DecodableSumScaled(d1, w1, d2, w2, scale)\n\nDecodable for summing and scaling scores of other decodable objects.\n\nArgs:\n  d1 (DecodableInterface): The first decodable object.\n  w1 (float): The weight for the scores obtained from :attr:`d1`.\n  d2 (DecodableInterface): The second decodable object.\n  w2 (float): The weight for the scores obtained from :attr:`d2`.\n  scale (float): The scalar multiplier for the sum.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapDecodableSumScaled_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::DecodableSumScaled* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_DecodableSumScaled"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::DecodableSumScaled"));
      if (!PyErr_Occurred()) {
        ::kaldi::DecodableSumScaled* c = static_cast<::kaldi::DecodableSumScaled*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::DecodableSumScaled*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyDecodableSumScaled


// Initialize module

bool Ready() {
  PyObject* base_cls = ImportFQName("kaldi.itf._decodable_itf.DecodableInterface");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._decodable_itf.DecodableInterface is not a new style class inheriting from object.");
    return false;
  }
  pyDecodableSum::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyDecodableSum::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._decodable_itf.DecodableInterface is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyDecodableSum::wrapper_Type) < 0) return false;
  Py_INCREF(&pyDecodableSum::wrapper_Type);  // For PyModule_AddObject to steal.
  pyDecodableSumScaled::wrapper_Type.tp_base = &pyDecodableSum::wrapper_Type;
  if (PyType_Ready(&pyDecodableSumScaled::wrapper_Type) < 0) return false;
  Py_INCREF(&pyDecodableSumScaled::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_decodable_sum",  // module name
  "CLIF-generated module for decoder/decodable-sum.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_decodable_itf")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "DecodableSum", reinterpret_cast<PyObject*>(&pyDecodableSum::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "DecodableSumScaled", reinterpret_cast<PyObject*>(&pyDecodableSumScaled::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __decodable__sum_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// DecodableSum to/from ::kaldi::DecodableSum conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::DecodableSum** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::DecodableSum* cpp = __decodable__sum_clifwrap::pyDecodableSum::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::DecodableSum>* c) {
  assert(c != nullptr);
  ::kaldi::DecodableSum* cpp = __decodable__sum_clifwrap::pyDecodableSum::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__decodable__sum_clifwrap::pyDecodableSum::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::DecodableSum>* c) {
  assert(c != nullptr);
  ::kaldi::DecodableSum* cpp = __decodable__sum_clifwrap::pyDecodableSum::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__decodable__sum_clifwrap::pyDecodableSum::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert DecodableSum instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::DecodableSum* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__sum_clifwrap::pyDecodableSum::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__sum_clifwrap::pyDecodableSum::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableSum>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::DecodableSum> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__sum_clifwrap::pyDecodableSum::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__sum_clifwrap::pyDecodableSum::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableSum>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::DecodableSum> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__sum_clifwrap::pyDecodableSum::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__sum_clifwrap::pyDecodableSum::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableSum>(std::move(c));
  return py;
}

// DecodableSumScaled to/from ::kaldi::DecodableSumScaled conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::DecodableSumScaled** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::DecodableSumScaled* cpp = __decodable__sum_clifwrap::pyDecodableSumScaled::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::DecodableSumScaled>* c) {
  assert(c != nullptr);
  ::kaldi::DecodableSumScaled* cpp = __decodable__sum_clifwrap::pyDecodableSumScaled::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__decodable__sum_clifwrap::pyDecodableSumScaled::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::DecodableSumScaled>* c) {
  assert(c != nullptr);
  ::kaldi::DecodableSumScaled* cpp = __decodable__sum_clifwrap::pyDecodableSumScaled::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__decodable__sum_clifwrap::pyDecodableSumScaled::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert DecodableSumScaled instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::DecodableSumScaled* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__sum_clifwrap::pyDecodableSumScaled::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__sum_clifwrap::pyDecodableSumScaled::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableSumScaled>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::DecodableSumScaled> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__sum_clifwrap::pyDecodableSumScaled::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__sum_clifwrap::pyDecodableSumScaled::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableSumScaled>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::DecodableSumScaled> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__sum_clifwrap::pyDecodableSumScaled::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__sum_clifwrap::pyDecodableSumScaled::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableSumScaled>(std::move(c));
  return py;
}

}  // namespace kaldi
