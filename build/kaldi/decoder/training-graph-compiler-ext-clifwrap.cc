//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/decoder/training-graph-compiler-ext.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "decoder/training-graph-compiler-clifwrap.h"
#include "fstext/lattice-weight-clifwrap.h"
#include "fstext/vector-fst-clifwrap.h"
#include "hmm/transition-model-clifwrap.h"
#include "tree/context-dep-clifwrap.h"
#include "training-graph-compiler-ext-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __training__graph__compiler__ext_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyTrainingGraphCompiler {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::_TrainingGraphCompiler> cpp;
};
static ::kaldi::_TrainingGraphCompiler* ThisPtr(PyObject*);

// __init__(trans_model:TransitionModel, ctx_dep:ContextDependency, lex_fst:StdVectorFst, disambig_syms:list<int>, opts:TrainingGraphCompilerOptions)
static PyObject* wrap_TrainingGraphCompiler_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[5];
  char* names[] = {
      C("trans_model"),
      C("ctx_dep"),
      C("lex_fst"),
      C("disambig_syms"),
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOO:__init__", names, &a[0], &a[1], &a[2], &a[3], &a[4])) return nullptr;
  ::kaldi::TransitionModel* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::TransitionModel", a[0]);
  ::kaldi::ContextDependency* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::ContextDependency", a[1]);
  ::std::unique_ptr<::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >> arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::std::unique_ptr<::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >>", a[2]);
  ::std::vector< ::int32> arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "::std::vector< ::int32>", a[3]);
  ::kaldi::TrainingGraphCompilerOptions* arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("__init__", names[4], "::kaldi::TrainingGraphCompilerOptions", a[4]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::_TrainingGraphCompiler>(*arg1, *arg2, std::move(arg3), std::move(arg4), *arg5);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// compile_graph(word_fst:StdVectorFst) -> (success:bool, out_fst:StdVectorFst)
static PyObject* wrapCompileGraph_as_compile_graph(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("word_fst"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:compile_graph", names, &a[0])) return nullptr;
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compile_graph", names[0], "::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >", a[0]);
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > > ret1{};
  // Call actual C++ method.
  ::kaldi::_TrainingGraphCompiler* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->CompileGraph(*arg1, &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  PyObject* pyproc = ImportFQName("kaldi.util._value_error_on_false");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// compile_graphs(word_fsts:list<StdVectorFst>) -> (success:bool, out_fsts:list<StdVectorFst>)
static PyObject* wrap_CompileGraphs_as_compile_graphs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("word_fsts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:compile_graphs", names, &a[0])) return nullptr;
  ::std::vector< ::fst::VectorFst< ::fst::StdArc> *> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compile_graphs", names[0], "::std::vector< ::fst::VectorFst< ::fst::StdArc> *>", a[0]);
  ::std::vector< ::fst::VectorFst< ::fst::StdArc> *> ret1{};
  // Call actual C++ method.
  ::kaldi::_TrainingGraphCompiler* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->_CompileGraphs(std::move(arg1), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  PyObject* pyproc = ImportFQName("kaldi.util._value_error_on_false");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// compile_graph_from_text(transcript:list<int>) -> (success:bool, out_fst:StdVectorFst)
static PyObject* wrapCompileGraphFromText_as_compile_graph_from_text(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("transcript"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:compile_graph_from_text", names, &a[0])) return nullptr;
  ::std::vector< ::int32> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compile_graph_from_text", names[0], "::std::vector< ::int32>", a[0]);
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > > ret1{};
  // Call actual C++ method.
  ::kaldi::_TrainingGraphCompiler* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->CompileGraphFromText(std::move(arg1), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  PyObject* pyproc = ImportFQName("kaldi.util._value_error_on_false");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// compile_graphs_from_text(transcripts:list<list<int>>) -> (success:bool, out_fsts:list<StdVectorFst>)
static PyObject* wrapCompileGraphsFromText_as_compile_graphs_from_text(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("transcripts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:compile_graphs_from_text", names, &a[0])) return nullptr;
  ::std::vector< ::std::vector< ::int32> > arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compile_graphs_from_text", names[0], "::std::vector< ::std::vector< ::int32> >", a[0]);
  ::std::vector< ::fst::VectorFst< ::fst::StdArc> *> ret1{};
  // Call actual C++ method.
  ::kaldi::_TrainingGraphCompiler* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->CompileGraphsFromText(std::move(arg1), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  PyObject* pyproc = ImportFQName("kaldi.util._value_error_on_false");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// Implicit cast this as ::kaldi::TrainingGraphCompiler*
static PyObject* as_kaldi_TrainingGraphCompiler(PyObject* self) {
  ::kaldi::TrainingGraphCompiler* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::TrainingGraphCompiler"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrap_TrainingGraphCompiler_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(trans_model:TransitionModel, ctx_dep:ContextDependency, lex_fst:StdVectorFst, disambig_syms:list<int>, opts:TrainingGraphCompilerOptions)\n  Calls C++ function\n  void ::kaldi::_TrainingGraphCompiler::_TrainingGraphCompiler(::kaldi::TransitionModel, ::kaldi::ContextDependency, ::std::unique_ptr<::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >>, ::std::vector< ::int32>, ::kaldi::TrainingGraphCompilerOptions)")},
  {C("compile_graph"), (PyCFunction)wrapCompileGraph_as_compile_graph, METH_VARARGS | METH_KEYWORDS, C("compile_graph(word_fst:StdVectorFst) -> (success:bool, out_fst:StdVectorFst)\n  Calls C++ function\n  bool ::kaldi::TrainingGraphCompiler::CompileGraph(::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >, ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >*)")},
  {C("compile_graphs"), (PyCFunction)wrap_CompileGraphs_as_compile_graphs, METH_VARARGS | METH_KEYWORDS, C("compile_graphs(word_fsts:list<StdVectorFst>) -> (success:bool, out_fsts:list<StdVectorFst>)\n  Calls C++ function\n  bool ::kaldi::_TrainingGraphCompiler::_CompileGraphs(::std::vector< ::fst::VectorFst< ::fst::StdArc> *>, ::std::vector< ::fst::VectorFst< ::fst::StdArc> *>*)")},
  {C("compile_graph_from_text"), (PyCFunction)wrapCompileGraphFromText_as_compile_graph_from_text, METH_VARARGS | METH_KEYWORDS, C("compile_graph_from_text(transcript:list<int>) -> (success:bool, out_fst:StdVectorFst)\n  Calls C++ function\n  bool ::kaldi::TrainingGraphCompiler::CompileGraphFromText(::std::vector< ::int32>, ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >*)")},
  {C("compile_graphs_from_text"), (PyCFunction)wrapCompileGraphsFromText_as_compile_graphs_from_text, METH_VARARGS | METH_KEYWORDS, C("compile_graphs_from_text(transcripts:list<list<int>>) -> (success:bool, out_fsts:list<StdVectorFst>)\n  Calls C++ function\n  bool ::kaldi::TrainingGraphCompiler::CompileGraphsFromText(::std::vector< ::std::vector< ::int32> >, ::std::vector< ::fst::VectorFst< ::fst::StdArc> *>*)")},
  {C("as_kaldi_TrainingGraphCompiler"), (PyCFunction)as_kaldi_TrainingGraphCompiler, METH_NOARGS, C("Upcast to ::kaldi::TrainingGraphCompiler*")},
  {}
};

// TrainingGraphCompiler __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// TrainingGraphCompiler __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// TrainingGraphCompiler __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_training_graph_compiler_ext.TrainingGraphCompiler", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::_TrainingGraphCompiler", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrap_TrainingGraphCompiler_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::_TrainingGraphCompiler* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi__TrainingGraphCompiler"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::_TrainingGraphCompiler"));
      if (!PyErr_Occurred()) {
        ::kaldi::_TrainingGraphCompiler* c = static_cast<::kaldi::_TrainingGraphCompiler*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::_TrainingGraphCompiler*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyTrainingGraphCompiler


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyTrainingGraphCompiler::wrapper_Type) < 0) return false;
  Py_INCREF(&pyTrainingGraphCompiler::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_training_graph_compiler_ext",  // module name
  "CLIF-generated module for decoder/training-graph-compiler-ext.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_training_graph_compiler")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_lattice_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_vector_fst")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_transition_model")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_context_dep")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "TrainingGraphCompiler", reinterpret_cast<PyObject*>(&pyTrainingGraphCompiler::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __training__graph__compiler__ext_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// TrainingGraphCompiler to/from ::kaldi::_TrainingGraphCompiler conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::_TrainingGraphCompiler** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::_TrainingGraphCompiler* cpp = __training__graph__compiler__ext_clifwrap::pyTrainingGraphCompiler::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::_TrainingGraphCompiler>* c) {
  assert(c != nullptr);
  ::kaldi::_TrainingGraphCompiler* cpp = __training__graph__compiler__ext_clifwrap::pyTrainingGraphCompiler::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__training__graph__compiler__ext_clifwrap::pyTrainingGraphCompiler::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::_TrainingGraphCompiler>* c) {
  assert(c != nullptr);
  ::kaldi::_TrainingGraphCompiler* cpp = __training__graph__compiler__ext_clifwrap::pyTrainingGraphCompiler::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__training__graph__compiler__ext_clifwrap::pyTrainingGraphCompiler::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert TrainingGraphCompiler instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::_TrainingGraphCompiler* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__training__graph__compiler__ext_clifwrap::pyTrainingGraphCompiler::wrapper_Type, NULL, NULL);
  reinterpret_cast<__training__graph__compiler__ext_clifwrap::pyTrainingGraphCompiler::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::_TrainingGraphCompiler>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::_TrainingGraphCompiler> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__training__graph__compiler__ext_clifwrap::pyTrainingGraphCompiler::wrapper_Type, NULL, NULL);
  reinterpret_cast<__training__graph__compiler__ext_clifwrap::pyTrainingGraphCompiler::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::_TrainingGraphCompiler>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::_TrainingGraphCompiler> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__training__graph__compiler__ext_clifwrap::pyTrainingGraphCompiler::wrapper_Type, NULL, NULL);
  reinterpret_cast<__training__graph__compiler__ext_clifwrap::pyTrainingGraphCompiler::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::_TrainingGraphCompiler>(std::move(c));
  return py;
}

}  // namespace kaldi
