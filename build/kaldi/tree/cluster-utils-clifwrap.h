//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/tree/cluster-utils.clif

#include <memory>
#include "clif/python/optional.h"
#include "tree/cluster-utils.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::ClusterKMeansOptions` as ClusterKMeansOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::ClusterKMeansOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::ClusterKMeansOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::ClusterKMeansOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::ClusterKMeansOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::ClusterKMeansOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::ClusterKMeansOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::ClusterKMeansOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::ClusterKMeansOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::ClusterKMeansOptions&, py::PostConv);
// CLIF use `::kaldi::RefineClustersOptions` as RefineClustersOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::RefineClustersOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RefineClustersOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RefineClustersOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::RefineClustersOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::RefineClustersOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::RefineClustersOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RefineClustersOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RefineClustersOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RefineClustersOptions&, py::PostConv);
// CLIF use `::kaldi::TreeClusterOptions` as TreeClusterOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::TreeClusterOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TreeClusterOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TreeClusterOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::TreeClusterOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::TreeClusterOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::TreeClusterOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TreeClusterOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TreeClusterOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TreeClusterOptions&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_cluster_utils")) Py_DECREF(m);
// CLIF init_module else goto err;
