//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/tree/event-map.clif

#include <memory>
#include "clif/python/optional.h"
#include "tree/event-map.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::ConstantEventMap` as ConstantEventMap
bool Clif_PyObjAs(PyObject* input, ::kaldi::ConstantEventMap** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::ConstantEventMap>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::ConstantEventMap>* output);
PyObject* Clif_PyObjFrom(::kaldi::ConstantEventMap*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::ConstantEventMap>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::ConstantEventMap>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::ConstantEventMap*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::ConstantEventMap&, py::PostConv) = delete;
// CLIF use `::kaldi::EventMap` as EventMap
bool Clif_PyObjAs(PyObject* input, ::kaldi::EventMap** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::EventMap>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::EventMap>* output);
PyObject* Clif_PyObjFrom(::kaldi::EventMap*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::EventMap>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::EventMap>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::EventMap*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::EventMap&, py::PostConv) = delete;
// CLIF use `::kaldi::SplitEventMap` as SplitEventMap
bool Clif_PyObjAs(PyObject* input, ::kaldi::SplitEventMap** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SplitEventMap>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SplitEventMap>* output);
PyObject* Clif_PyObjFrom(::kaldi::SplitEventMap*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SplitEventMap>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SplitEventMap>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SplitEventMap*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::SplitEventMap&, py::PostConv) = delete;
// CLIF use `::kaldi::TableEventMap` as TableEventMap
bool Clif_PyObjAs(PyObject* input, ::kaldi::TableEventMap** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TableEventMap>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TableEventMap>* output);
PyObject* Clif_PyObjFrom(::kaldi::TableEventMap*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableEventMap>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableEventMap>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TableEventMap*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::TableEventMap&, py::PostConv) = delete;

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_event_map")) Py_DECREF(m);
// CLIF init_module else goto err;
