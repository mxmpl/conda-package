//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/tree/context-dep.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "itf/context-dep-itf-clifwrap.h"
#include "tree/event-map-clifwrap.h"
#include "context-dep-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __context__dep_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyContextDependency {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::ContextDependency> cpp;
};
static ::kaldi::ContextDependency* ThisPtr(PyObject*);

// read(is:istream, binary:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::ContextDependency* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// @classmethod from_event_map(N:int, P:int, to_pdf:EventMap) -> ContextDependency
static PyObject* wrapContextDependency_as_from_event_map(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("N"),
      C("P"),
      C("to_pdf"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:from_event_map", names, &a[0], &a[1], &a[2])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_event_map", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_event_map", names[1], "int", a[1]);
  ::kaldi::EventMap * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("from_event_map", names[2], "::kaldi::EventMap *", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::ContextDependency> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::ContextDependency>(std::move(arg1), std::move(arg2), arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::ContextDependency* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// to_pdf_map() -> EventMap
static PyObject* wrapToPdfMapPtr_as_to_pdf_map(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::ContextDependency* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::EventMap * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->ToPdfMapPtr();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// context_width() -> int
static PyObject* wrapContextWidth_as_context_width(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::ContextDependency* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->ContextWidth();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// central_position() -> int
static PyObject* wrapCentralPosition_as_central_position(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::ContextDependency* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->CentralPosition();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// compute(phoneseq:list<int>, pdf_class:int) -> (success:bool, pdf_id:int)
static PyObject* wrapCompute_as_compute(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("phoneseq"),
      C("pdf_class"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:compute", names, &a[0], &a[1])) return nullptr;
  ::std::vector< ::int32> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute", names[0], "::std::vector< ::int32>", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute", names[1], "int", a[1]);
  int ret1{};
  // Call actual C++ method.
  ::kaldi::ContextDependency* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Compute(std::move(arg1), std::move(arg2), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  PyObject* pyproc = ImportFQName("kaldi.util._value_error_on_false");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// get_pdf_info(phones:list<int>, num_pdf_classes:list<int>) -> list<list<tuple<int, int>>>
static PyObject* wrapGetPdfInfo_as_get_pdf_info(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("phones"),
      C("num_pdf_classes"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_pdf_info", names, &a[0], &a[1])) return nullptr;
  ::std::vector< ::int32> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_pdf_info", names[0], "::std::vector< ::int32>", a[0]);
  ::std::vector< ::int32> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_pdf_info", names[1], "::std::vector< ::int32>", a[1]);
  ::std::vector< ::std::vector< ::std::pair< ::int32, ::int32> > > ret0{};
  // Call actual C++ method.
  ::kaldi::ContextDependency* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetPdfInfo(std::move(arg1), std::move(arg2), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_pdf_pair_info(phones:list<int>, pdf_class_pairs:list<list<tuple<int, int>>>) -> list<list<list<tuple<int, int>>>>
static PyObject* wrapGetPdfInfo_as_get_pdf_pair_info(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("phones"),
      C("pdf_class_pairs"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_pdf_pair_info", names, &a[0], &a[1])) return nullptr;
  ::std::vector< ::int32> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_pdf_pair_info", names[0], "::std::vector< ::int32>", a[0]);
  ::std::vector< ::std::vector< ::std::pair< ::int32, ::int32> > > arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_pdf_pair_info", names[1], "::std::vector< ::std::vector< ::std::pair< ::int32, ::int32> > >", a[1]);
  ::std::vector< ::std::vector< ::std::vector< ::std::pair< ::int32, ::int32> > > > ret0{};
  // Call actual C++ method.
  ::kaldi::ContextDependency* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetPdfInfo(std::move(arg1), std::move(arg2), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_pdfs() -> int
static PyObject* wrapNumPdfs_as_num_pdfs(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::ContextDependency* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumPdfs();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// copy() -> ContextDependencyInterface
static PyObject* wrapCopy_as_copy(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::ContextDependency* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::ContextDependencyInterface * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Copy();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::kaldi::ContextDependencyInterface*
static PyObject* as_kaldi_ContextDependencyInterface(PyObject* self) {
  ::kaldi::ContextDependencyInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::ContextDependencyInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool)\n  Calls C++ function\n  void ::kaldi::ContextDependency::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool)")},
  {C("from_event_map"), (PyCFunction)wrapContextDependency_as_from_event_map, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_event_map(N:int, P:int, to_pdf:EventMap) -> ContextDependency\n  Calls C++ function\n  std::unique_ptr<::kaldi::ContextDependency> ::kaldi::ContextDependency::ContextDependency(int, int, ::kaldi::EventMap *)")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::ContextDependency::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("to_pdf_map"), (PyCFunction)wrapToPdfMapPtr_as_to_pdf_map, METH_NOARGS, C("to_pdf_map() -> EventMap\n  Calls C++ function\n  ::kaldi::EventMap * ::kaldi::ContextDependency::ToPdfMapPtr()")},
  {C("context_width"), (PyCFunction)wrapContextWidth_as_context_width, METH_NOARGS, C("context_width() -> int\n  Calls C++ function\n  int ::kaldi::ContextDependency::ContextWidth()")},
  {C("central_position"), (PyCFunction)wrapCentralPosition_as_central_position, METH_NOARGS, C("central_position() -> int\n  Calls C++ function\n  int ::kaldi::ContextDependency::CentralPosition()")},
  {C("compute"), (PyCFunction)wrapCompute_as_compute, METH_VARARGS | METH_KEYWORDS, C("compute(phoneseq:list<int>, pdf_class:int) -> (success:bool, pdf_id:int)\n  Calls C++ function\n  bool ::kaldi::ContextDependency::Compute(::std::vector< ::int32>, int, int*)")},
  {C("get_pdf_info"), (PyCFunction)wrapGetPdfInfo_as_get_pdf_info, METH_VARARGS | METH_KEYWORDS, C("get_pdf_info(phones:list<int>, num_pdf_classes:list<int>) -> list<list<tuple<int, int>>>\n  Calls C++ function\n  void ::kaldi::ContextDependency::GetPdfInfo(::std::vector< ::int32>, ::std::vector< ::int32>, ::std::vector< ::std::vector< ::std::pair< ::int32, ::int32> > >*)")},
  {C("get_pdf_pair_info"), (PyCFunction)wrapGetPdfInfo_as_get_pdf_pair_info, METH_VARARGS | METH_KEYWORDS, C("get_pdf_pair_info(phones:list<int>, pdf_class_pairs:list<list<tuple<int, int>>>) -> list<list<list<tuple<int, int>>>>\n  Calls C++ function\n  void ::kaldi::ContextDependency::GetPdfInfo(::std::vector< ::int32>, ::std::vector< ::std::vector< ::std::pair< ::int32, ::int32> > >, ::std::vector< ::std::vector< ::std::vector< ::std::pair< ::int32, ::int32> > > >*)")},
  {C("num_pdfs"), (PyCFunction)wrapNumPdfs_as_num_pdfs, METH_NOARGS, C("num_pdfs() -> int\n  Calls C++ function\n  int ::kaldi::ContextDependency::NumPdfs()")},
  {C("copy"), (PyCFunction)wrapCopy_as_copy, METH_NOARGS, C("copy() -> ContextDependencyInterface\n  Calls C++ function\n  ::kaldi::ContextDependencyInterface * ::kaldi::ContextDependency::Copy()")},
  {C("as_kaldi_ContextDependencyInterface"), (PyCFunction)as_kaldi_ContextDependencyInterface, METH_NOARGS, C("Upcast to ::kaldi::ContextDependencyInterface*")},
  {}
};

// ContextDependency __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ContextDependency __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ContextDependency __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_context_dep.ContextDependency",    // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::ContextDependency", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "ContextDependency takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::ContextDependency>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::ContextDependency* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_ContextDependency"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::ContextDependency"));
      if (!PyErr_Occurred()) {
        ::kaldi::ContextDependency* c = static_cast<::kaldi::ContextDependency*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::ContextDependency*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyContextDependency

// _gen_rand_context_dependency(phones:list<int>, ensure_all_covered:bool) -> (ctx_dep:ContextDependency, num_pdf_classes:list<int>)
static PyObject* wrapGenRandContextDependency_as__gen_rand_context_dependency(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("phones"),
      C("ensure_all_covered"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_gen_rand_context_dependency", names, &a[0], &a[1])) return nullptr;
  ::std::vector< ::int32> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_gen_rand_context_dependency", names[0], "::std::vector< ::int32>", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_gen_rand_context_dependency", names[1], "bool", a[1]);
  ::std::vector< ::int32> ret1{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::ContextDependency * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::GenRandContextDependency(std::move(arg1), std::move(arg2), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// _gen_rand_context_dependency_large(phones:list<int>, N:int, P:int, ensure_all_covered:bool) -> (ctx_dep:ContextDependency, num_pdf_classes:list<int>)
static PyObject* wrapGenRandContextDependencyLarge_as__gen_rand_context_dependency_large(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("phones"),
      C("N"),
      C("P"),
      C("ensure_all_covered"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:_gen_rand_context_dependency_large", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::std::vector< ::int32> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_gen_rand_context_dependency_large", names[0], "::std::vector< ::int32>", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_gen_rand_context_dependency_large", names[1], "int", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("_gen_rand_context_dependency_large", names[2], "int", a[2]);
  bool arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("_gen_rand_context_dependency_large", names[3], "bool", a[3]);
  ::std::vector< ::int32> ret1{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::ContextDependency * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::GenRandContextDependencyLarge(std::move(arg1), std::move(arg2), std::move(arg3), std::move(arg4), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// monophone_context_dependency(phones:list<int>, phone2num_pdf_classes:list<int>) -> ContextDependency
static PyObject* wrapMonophoneContextDependency_as_monophone_context_dependency(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("phones"),
      C("phone2num_pdf_classes"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:monophone_context_dependency", names, &a[0], &a[1])) return nullptr;
  ::std::vector< ::int32> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("monophone_context_dependency", names[0], "::std::vector< ::int32>", a[0]);
  ::std::vector< ::int32> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("monophone_context_dependency", names[1], "::std::vector< ::int32>", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::ContextDependency * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::MonophoneContextDependency(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// monophone_context_dependency_shared(phone_classes:list<list<int>>, phone2num_pdf_classes:list<int>) -> ContextDependency
static PyObject* wrapMonophoneContextDependencyShared_as_monophone_context_dependency_shared(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("phone_classes"),
      C("phone2num_pdf_classes"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:monophone_context_dependency_shared", names, &a[0], &a[1])) return nullptr;
  ::std::vector< ::std::vector< ::int32> > arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("monophone_context_dependency_shared", names[0], "::std::vector< ::std::vector< ::int32> >", a[0]);
  ::std::vector< ::int32> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("monophone_context_dependency_shared", names[1], "::std::vector< ::int32>", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::ContextDependency * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::MonophoneContextDependencyShared(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("_gen_rand_context_dependency"), (PyCFunction)wrapGenRandContextDependency_as__gen_rand_context_dependency, METH_VARARGS | METH_KEYWORDS, C("_gen_rand_context_dependency(phones:list<int>, ensure_all_covered:bool) -> (ctx_dep:ContextDependency, num_pdf_classes:list<int>)\n  Calls C++ function\n  ::kaldi::ContextDependency * ::kaldi::GenRandContextDependency(::std::vector< ::int32>, bool, ::std::vector< ::int32>*)")},
  {C("_gen_rand_context_dependency_large"), (PyCFunction)wrapGenRandContextDependencyLarge_as__gen_rand_context_dependency_large, METH_VARARGS | METH_KEYWORDS, C("_gen_rand_context_dependency_large(phones:list<int>, N:int, P:int, ensure_all_covered:bool) -> (ctx_dep:ContextDependency, num_pdf_classes:list<int>)\n  Calls C++ function\n  ::kaldi::ContextDependency * ::kaldi::GenRandContextDependencyLarge(::std::vector< ::int32>, int, int, bool, ::std::vector< ::int32>*)")},
  {C("monophone_context_dependency"), (PyCFunction)wrapMonophoneContextDependency_as_monophone_context_dependency, METH_VARARGS | METH_KEYWORDS, C("monophone_context_dependency(phones:list<int>, phone2num_pdf_classes:list<int>) -> ContextDependency\n  Calls C++ function\n  ::kaldi::ContextDependency * ::kaldi::MonophoneContextDependency(::std::vector< ::int32>, ::std::vector< ::int32>)")},
  {C("monophone_context_dependency_shared"), (PyCFunction)wrapMonophoneContextDependencyShared_as_monophone_context_dependency_shared, METH_VARARGS | METH_KEYWORDS, C("monophone_context_dependency_shared(phone_classes:list<list<int>>, phone2num_pdf_classes:list<int>) -> ContextDependency\n  Calls C++ function\n  ::kaldi::ContextDependency * ::kaldi::MonophoneContextDependencyShared(::std::vector< ::std::vector< ::int32> >, ::std::vector< ::int32>)")},
  {}
};

bool Ready() {
  PyObject* base_cls = ImportFQName("kaldi.itf._context_dep_itf.ContextDependencyInterface");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._context_dep_itf.ContextDependencyInterface is not a new style class inheriting from object.");
    return false;
  }
  pyContextDependency::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyContextDependency::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._context_dep_itf.ContextDependencyInterface is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyContextDependency::wrapper_Type) < 0) return false;
  Py_INCREF(&pyContextDependency::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_context_dep",  // module name
  "CLIF-generated module for tree/context-dep.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_context_dep_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_event_map")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "PDF_CLASS", Clif_PyObjFrom(static_cast<::kaldi::EventKeyType>(::kaldi::kPdfClass), {})) < 0) goto err;
  if (PyModule_AddObject(module, "ContextDependency", reinterpret_cast<PyObject*>(&pyContextDependency::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __context__dep_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// ContextDependency to/from ::kaldi::ContextDependency conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::ContextDependency** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::ContextDependency* cpp = __context__dep_clifwrap::pyContextDependency::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::ContextDependency>* c) {
  assert(c != nullptr);
  ::kaldi::ContextDependency* cpp = __context__dep_clifwrap::pyContextDependency::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__context__dep_clifwrap::pyContextDependency::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::ContextDependency>* c) {
  assert(c != nullptr);
  ::kaldi::ContextDependency* cpp = __context__dep_clifwrap::pyContextDependency::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__context__dep_clifwrap::pyContextDependency::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ContextDependency instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::ContextDependency* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__context__dep_clifwrap::pyContextDependency::wrapper_Type, NULL, NULL);
  reinterpret_cast<__context__dep_clifwrap::pyContextDependency::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ContextDependency>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::ContextDependency> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__context__dep_clifwrap::pyContextDependency::wrapper_Type, NULL, NULL);
  reinterpret_cast<__context__dep_clifwrap::pyContextDependency::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ContextDependency>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::ContextDependency> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__context__dep_clifwrap::pyContextDependency::wrapper_Type, NULL, NULL);
  reinterpret_cast<__context__dep_clifwrap::pyContextDependency::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ContextDependency>(std::move(c));
  return py;
}

}  // namespace kaldi
