//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/nnet-computation-graph-ext.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "nnet3/nnet-common-clifwrap.h"
#include "nnet-computation-graph-ext-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __nnet__computation__graph__ext_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyComputationGraph {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::ComputationGraph> cpp;
};
static ::kaldi::nnet3::ComputationGraph* ThisPtr(PyObject*);

static PyObject* get_cindexes(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->cindexes, {});
}

static int set_cindexes(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the cindexes attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->cindexes)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for cindexes:list<tuple<int, Index>>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_is_input(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->is_input, {});
}

static int set_is_input(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the is_input attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->is_input)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for is_input:list<bool>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_dependencies(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->dependencies, {});
}

static int set_dependencies(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the dependencies attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->dependencies)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for dependencies:list<list<int>>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_segment_ends(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->segment_ends, {});
}

static int set_segment_ends(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the segment_ends attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->segment_ends)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for segment_ends:list<int>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// get_cindex_id_or_add(cindex:tuple<int, Index>, is_input:bool) -> (id:int, is_new:bool)
static PyObject* wrapGetCindexId_as_get_cindex_id_or_add(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("cindex"),
      C("is_input"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_cindex_id_or_add", names, &a[0], &a[1])) return nullptr;
  ::kaldi::nnet3::Cindex arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_cindex_id_or_add", names[0], "::kaldi::nnet3::Cindex", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_cindex_id_or_add", names[1], "bool", a[1]);
  bool ret1{};
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationGraph* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetCindexId(std::move(arg1), std::move(arg2), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// get_cindex_id(cindex:tuple<int, Index>) -> int
static PyObject* wrapGetCindexId_as_get_cindex_id(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("cindex"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_cindex_id", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Cindex arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_cindex_id", names[0], "::kaldi::nnet3::Cindex", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationGraph* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetCindexId(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// renumber(start_cindex_id:int, keep:list<bool>)
static PyObject* wrapRenumber_as_renumber(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("start_cindex_id"),
      C("keep"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:renumber", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("renumber", names[0], "int", a[0]);
  ::std::vector<bool> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("renumber", names[1], "::std::vector<bool>", a[1]);
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationGraph* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Renumber(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// print_graph(os:ostream, node_names:list<str>)
static PyObject* wrapPrint_as_print_graph(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("node_names"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:print_graph", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("print_graph", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  ::std::vector< ::std::string> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("print_graph", names[1], "::std::vector< ::std::string>", a[1]);
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationGraph* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Print(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("cindexes"), get_cindexes, set_cindexes, C("C++ ::std::vector< ::kaldi::nnet3::Cindex> ComputationGraph.cindexes")},
  {C("is_input"), get_is_input, set_is_input, C("C++ ::std::vector<bool> ComputationGraph.is_input")},
  {C("dependencies"), get_dependencies, set_dependencies, C("C++ ::std::vector< ::std::vector< ::int32> > ComputationGraph.dependencies")},
  {C("segment_ends"), get_segment_ends, set_segment_ends, C("C++ ::std::vector< ::int32> ComputationGraph.segment_ends")},
  {}
};

static PyMethodDef Methods[] = {
  {C("get_cindex_id_or_add"), (PyCFunction)wrapGetCindexId_as_get_cindex_id_or_add, METH_VARARGS | METH_KEYWORDS, C("get_cindex_id_or_add(cindex:tuple<int, Index>, is_input:bool) -> (id:int, is_new:bool)\n  Calls C++ function\n  int ::kaldi::nnet3::ComputationGraph::GetCindexId(::kaldi::nnet3::Cindex, bool, bool*)")},
  {C("get_cindex_id"), (PyCFunction)wrapGetCindexId_as_get_cindex_id, METH_VARARGS | METH_KEYWORDS, C("get_cindex_id(cindex:tuple<int, Index>) -> int\n  Calls C++ function\n  int ::kaldi::nnet3::ComputationGraph::GetCindexId(::kaldi::nnet3::Cindex)")},
  {C("renumber"), (PyCFunction)wrapRenumber_as_renumber, METH_VARARGS | METH_KEYWORDS, C("renumber(start_cindex_id:int, keep:list<bool>)\n  Calls C++ function\n  void ::kaldi::nnet3::ComputationGraph::Renumber(int, ::std::vector<bool>)")},
  {C("print_graph"), (PyCFunction)wrapPrint_as_print_graph, METH_VARARGS | METH_KEYWORDS, C("print_graph(os:ostream, node_names:list<str>)\n  Calls C++ function\n  void ::kaldi::nnet3::ComputationGraph::Print(::std::basic_ostream<char, ::std::char_traits<char> >, ::std::vector< ::std::string>)")},
  {}
};

// ComputationGraph __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ComputationGraph __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ComputationGraph __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_computation_graph_ext.ComputationGraph", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::ComputationGraph", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "ComputationGraph takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::ComputationGraph>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::ComputationGraph* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_ComputationGraph"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::ComputationGraph"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::ComputationGraph* c = static_cast<::kaldi::nnet3::ComputationGraph*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::ComputationGraph*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyComputationGraph

namespace pyCindexSet {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::CindexSet> cpp;
};
static ::kaldi::nnet3::CindexSet* ThisPtr(PyObject*);

// __contains__(cindex:tuple<int, Index>) -> bool
static PyObject* wrap__contains__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("cindex"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__contains__", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Cindex arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__contains__", names[0], "::kaldi::nnet3::Cindex", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::CindexSet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->operator()(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __init__(graph:ComputationGraph)
static PyObject* wrapCindexSet_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("graph"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::kaldi::nnet3::ComputationGraph* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::nnet3::ComputationGraph", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::CindexSet>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// @classmethod from_computable(graph:ComputationGraph, is_computable:list<int>, treat_unknown_as_computable:bool) -> CindexSet
static PyObject* wrapCindexSet_as_from_computable(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("graph"),
      C("is_computable"),
      C("treat_unknown_as_computable"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:from_computable", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::nnet3::ComputationGraph* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_computable", names[0], "::kaldi::nnet3::ComputationGraph", a[0]);
  ::std::vector<char> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_computable", names[1], "::std::vector<char>", a[1]);
  bool arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("from_computable", names[2], "bool", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::nnet3::CindexSet> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::nnet3::CindexSet>(*arg1, std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

PySequenceMethods AsSequence = {
  nullptr,                             // sq_length
  nullptr,                             // sq_concat
  nullptr,                             // sq_repeat
  nullptr,                             // sq_item
  nullptr,                             // was_sq_slice
  nullptr,                             // sq_ass_item
  nullptr,                             // was_sq_ass_slice
  slot::adapter<int, slot::as_bool, wrap__contains__, PyObject*>, // sq_contains
  nullptr,                             // sq_inplace_concat
  nullptr,                             // sq_inplace_repeat
};

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapCindexSet_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(graph:ComputationGraph)\n  Calls C++ function\n  void ::kaldi::nnet3::CindexSet::CindexSet(::kaldi::nnet3::ComputationGraph)")},
  {C("from_computable"), (PyCFunction)wrapCindexSet_as_from_computable, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_computable(graph:ComputationGraph, is_computable:list<int>, treat_unknown_as_computable:bool) -> CindexSet\n  Calls C++ function\n  std::unique_ptr<::kaldi::nnet3::CindexSet> ::kaldi::nnet3::CindexSet::CindexSet(::kaldi::nnet3::ComputationGraph, ::std::vector<char>, bool)")},
  {}
};

// CindexSet __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// CindexSet __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// CindexSet __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_computation_graph_ext.CindexSet", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  &AsSequence,                         // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::CindexSet", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapCindexSet_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::CindexSet* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_CindexSet"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::CindexSet"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::CindexSet* c = static_cast<::kaldi::nnet3::CindexSet*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::CindexSet*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyCindexSet

namespace pyIndexSet {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::IndexSet> cpp;
};
static ::kaldi::nnet3::IndexSet* ThisPtr(PyObject*);

// __contains__(index:Index) -> bool
static PyObject* wrap__contains__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__contains__", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Index* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__contains__", names[0], "::kaldi::nnet3::Index", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::IndexSet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->operator()(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __init__(graph:ComputationGraph, computable_info:list<int>, node_id:int, treat_unknown_as_computable:bool)
static PyObject* wrapIndexSet_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("graph"),
      C("computable_info"),
      C("node_id"),
      C("treat_unknown_as_computable"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:__init__", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::nnet3::ComputationGraph* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::nnet3::ComputationGraph", a[0]);
  ::std::vector<char> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::std::vector<char>", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "int", a[2]);
  bool arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "bool", a[3]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::IndexSet>(*arg1, std::move(arg2), std::move(arg3), std::move(arg4));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

PySequenceMethods AsSequence = {
  nullptr,                             // sq_length
  nullptr,                             // sq_concat
  nullptr,                             // sq_repeat
  nullptr,                             // sq_item
  nullptr,                             // was_sq_slice
  nullptr,                             // sq_ass_item
  nullptr,                             // was_sq_ass_slice
  slot::adapter<int, slot::as_bool, wrap__contains__, PyObject*>, // sq_contains
  nullptr,                             // sq_inplace_concat
  nullptr,                             // sq_inplace_repeat
};

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapIndexSet_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(graph:ComputationGraph, computable_info:list<int>, node_id:int, treat_unknown_as_computable:bool)\n  Calls C++ function\n  void ::kaldi::nnet3::IndexSet::IndexSet(::kaldi::nnet3::ComputationGraph, ::std::vector<char>, int, bool)")},
  {}
};

// IndexSet __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// IndexSet __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// IndexSet __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_computation_graph_ext.IndexSet", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  &AsSequence,                         // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::IndexSet", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapIndexSet_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::IndexSet* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_IndexSet"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::IndexSet"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::IndexSet* c = static_cast<::kaldi::nnet3::IndexSet*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::IndexSet*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyIndexSet


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyComputationGraph::wrapper_Type) < 0) return false;
  Py_INCREF(&pyComputationGraph::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyCindexSet::wrapper_Type) < 0) return false;
  Py_INCREF(&pyCindexSet::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyIndexSet::wrapper_Type) < 0) return false;
  Py_INCREF(&pyIndexSet::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_nnet_computation_graph_ext",  // module name
  "CLIF-generated module for nnet3/nnet-computation-graph.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_common")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "ComputationGraph", reinterpret_cast<PyObject*>(&pyComputationGraph::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "CindexSet", reinterpret_cast<PyObject*>(&pyCindexSet::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "IndexSet", reinterpret_cast<PyObject*>(&pyIndexSet::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __nnet__computation__graph__ext_clifwrap

namespace kaldi { namespace nnet3 {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// CindexSet to/from ::kaldi::nnet3::CindexSet conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::CindexSet** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::CindexSet* cpp = __nnet__computation__graph__ext_clifwrap::pyCindexSet::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::CindexSet>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::CindexSet* cpp = __nnet__computation__graph__ext_clifwrap::pyCindexSet::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__computation__graph__ext_clifwrap::pyCindexSet::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::CindexSet>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::CindexSet* cpp = __nnet__computation__graph__ext_clifwrap::pyCindexSet::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__computation__graph__ext_clifwrap::pyCindexSet::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert CindexSet instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::CindexSet* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__computation__graph__ext_clifwrap::pyCindexSet::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__computation__graph__ext_clifwrap::pyCindexSet::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::CindexSet>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::CindexSet> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__computation__graph__ext_clifwrap::pyCindexSet::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__computation__graph__ext_clifwrap::pyCindexSet::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::CindexSet>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::CindexSet> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__computation__graph__ext_clifwrap::pyCindexSet::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__computation__graph__ext_clifwrap::pyCindexSet::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::CindexSet>(std::move(c));
  return py;
}

// ComputationGraph to/from ::kaldi::nnet3::ComputationGraph conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ComputationGraph** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::ComputationGraph* cpp = __nnet__computation__graph__ext_clifwrap::pyComputationGraph::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::ComputationGraph>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ComputationGraph* cpp = __nnet__computation__graph__ext_clifwrap::pyComputationGraph::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__computation__graph__ext_clifwrap::pyComputationGraph::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::ComputationGraph>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ComputationGraph* cpp = __nnet__computation__graph__ext_clifwrap::pyComputationGraph::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__computation__graph__ext_clifwrap::pyComputationGraph::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ComputationGraph instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ComputationGraph* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ComputationGraph* cpp = __nnet__computation__graph__ext_clifwrap::pyComputationGraph::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::ComputationGraph>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ComputationGraph* cpp = __nnet__computation__graph__ext_clifwrap::pyComputationGraph::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::ComputationGraph* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__computation__graph__ext_clifwrap::pyComputationGraph::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__computation__graph__ext_clifwrap::pyComputationGraph::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ComputationGraph>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ComputationGraph> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__computation__graph__ext_clifwrap::pyComputationGraph::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__computation__graph__ext_clifwrap::pyComputationGraph::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ComputationGraph>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ComputationGraph> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__computation__graph__ext_clifwrap::pyComputationGraph::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__computation__graph__ext_clifwrap::pyComputationGraph::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ComputationGraph>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ComputationGraph& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__computation__graph__ext_clifwrap::pyComputationGraph::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__computation__graph__ext_clifwrap::pyComputationGraph::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::ComputationGraph>(c);
  return py;
}

// IndexSet to/from ::kaldi::nnet3::IndexSet conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::IndexSet** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::IndexSet* cpp = __nnet__computation__graph__ext_clifwrap::pyIndexSet::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::IndexSet>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::IndexSet* cpp = __nnet__computation__graph__ext_clifwrap::pyIndexSet::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__computation__graph__ext_clifwrap::pyIndexSet::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::IndexSet>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::IndexSet* cpp = __nnet__computation__graph__ext_clifwrap::pyIndexSet::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__computation__graph__ext_clifwrap::pyIndexSet::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert IndexSet instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::IndexSet* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__computation__graph__ext_clifwrap::pyIndexSet::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__computation__graph__ext_clifwrap::pyIndexSet::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::IndexSet>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::IndexSet> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__computation__graph__ext_clifwrap::pyIndexSet::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__computation__graph__ext_clifwrap::pyIndexSet::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::IndexSet>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::IndexSet> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__computation__graph__ext_clifwrap::pyIndexSet::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__computation__graph__ext_clifwrap::pyIndexSet::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::IndexSet>(std::move(c));
  return py;
}

} }  // namespace kaldi::nnet3
