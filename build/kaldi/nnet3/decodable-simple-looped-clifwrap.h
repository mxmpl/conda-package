//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/decodable-simple-looped.clif

#include <memory>
#include "clif/python/optional.h"
#include "nnet3/decodable-simple-looped.h"
#include "clif/python/postconv.h"

namespace kaldi { namespace nnet3 {
using namespace ::clif;

// CLIF use `::kaldi::nnet3::DecodableAmNnetSimpleLooped` as DecodableAmNnetSimpleLooped
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::DecodableAmNnetSimpleLooped** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::DecodableAmNnetSimpleLooped>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::DecodableAmNnetSimpleLooped>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::DecodableAmNnetSimpleLooped*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::DecodableAmNnetSimpleLooped>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::DecodableAmNnetSimpleLooped>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::DecodableAmNnetSimpleLooped*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::DecodableAmNnetSimpleLooped&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::DecodableNnetSimpleLooped` as DecodableNnetSimpleLooped
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::DecodableNnetSimpleLooped** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::DecodableNnetSimpleLooped>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::DecodableNnetSimpleLooped>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::DecodableNnetSimpleLooped*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::DecodableNnetSimpleLooped>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::DecodableNnetSimpleLooped>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::DecodableNnetSimpleLooped*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::DecodableNnetSimpleLooped&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::DecodableNnetSimpleLoopedInfo` as DecodableNnetSimpleLoopedInfo
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::DecodableNnetSimpleLoopedInfo** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::DecodableNnetSimpleLoopedInfo>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::DecodableNnetSimpleLoopedInfo>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::DecodableNnetSimpleLoopedInfo*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::DecodableNnetSimpleLoopedInfo>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::DecodableNnetSimpleLoopedInfo>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::DecodableNnetSimpleLoopedInfo*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::DecodableNnetSimpleLoopedInfo&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::NnetSimpleLoopedComputationOptions` as NnetSimpleLoopedComputationOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::NnetSimpleLoopedComputationOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::NnetSimpleLoopedComputationOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::NnetSimpleLoopedComputationOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::NnetSimpleLoopedComputationOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::nnet3::NnetSimpleLoopedComputationOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::NnetSimpleLoopedComputationOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::NnetSimpleLoopedComputationOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::NnetSimpleLoopedComputationOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::NnetSimpleLoopedComputationOptions&, py::PostConv);

} }  // namespace kaldi::nnet3

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_decodable_simple_looped")) Py_DECREF(m);
// CLIF init_module else goto err;
