//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/nnet-analyze.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "nnet3/nnet-computation-clifwrap.h"
#include "nnet3/nnet-nnet-clifwrap.h"
#include "nnet-analyze-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __nnet__analyze_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes

static PyObject *_Enum{}, *_IntEnum{};  // set below in Init()


namespace pyCommandAttributes {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::CommandAttributes> cpp;
};
static ::kaldi::nnet3::CommandAttributes* ThisPtr(PyObject*);

static PyObject* get_variables_read(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->variables_read, {});
}

static int set_variables_read(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the variables_read attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->variables_read)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for variables_read:list<int>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_variables_written(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->variables_written, {});
}

static int set_variables_written(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the variables_written attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->variables_written)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for variables_written:list<int>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_submatrices_read(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->submatrices_read, {});
}

static int set_submatrices_read(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the submatrices_read attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->submatrices_read)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for submatrices_read:list<int>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_submatrices_written(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->submatrices_written, {});
}

static int set_submatrices_written(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the submatrices_written attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->submatrices_written)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for submatrices_written:list<int>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_matrices_read(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->matrices_read, {});
}

static int set_matrices_read(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the matrices_read attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->matrices_read)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for matrices_read:list<int>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_matrices_written(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->matrices_written, {});
}

static int set_matrices_written(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the matrices_written attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->matrices_written)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for matrices_written:list<int>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_has_side_effects(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->has_side_effects, {});
}

static int set_has_side_effects(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the has_side_effects attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->has_side_effects)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for has_side_effects:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("variables_read"), get_variables_read, set_variables_read, C("C++ ::std::vector< ::int32> CommandAttributes.variables_read")},
  {C("variables_written"), get_variables_written, set_variables_written, C("C++ ::std::vector< ::int32> CommandAttributes.variables_written")},
  {C("submatrices_read"), get_submatrices_read, set_submatrices_read, C("C++ ::std::vector< ::int32> CommandAttributes.submatrices_read")},
  {C("submatrices_written"), get_submatrices_written, set_submatrices_written, C("C++ ::std::vector< ::int32> CommandAttributes.submatrices_written")},
  {C("matrices_read"), get_matrices_read, set_matrices_read, C("C++ ::std::vector< ::int32> CommandAttributes.matrices_read")},
  {C("matrices_written"), get_matrices_written, set_matrices_written, C("C++ ::std::vector< ::int32> CommandAttributes.matrices_written")},
  {C("has_side_effects"), get_has_side_effects, set_has_side_effects, C("C++ bool CommandAttributes.has_side_effects")},
  {}
};

// CommandAttributes __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// CommandAttributes __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// CommandAttributes __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_analyze.CommandAttributes",   // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::CommandAttributes", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  nullptr,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "CommandAttributes takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::CommandAttributes>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::CommandAttributes* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_CommandAttributes"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::CommandAttributes"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::CommandAttributes* c = static_cast<::kaldi::nnet3::CommandAttributes*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::CommandAttributes*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyCommandAttributes

// print_command_attributes(os:ostream, attributes:list<CommandAttributes>)
static PyObject* wrapPrintCommandAttributes_as_print_command_attributes(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("attributes"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:print_command_attributes", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("print_command_attributes", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  ::std::vector< ::kaldi::nnet3::CommandAttributes> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("print_command_attributes", names[1], "::std::vector< ::kaldi::nnet3::CommandAttributes>", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::PrintCommandAttributes(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Create Python Enum object (cached in _AccessType) for ::kaldi::nnet3::AccessType
static PyObject* wrapAccessType() {
  PyObject *py, *py_enum_class{}, *names = PyTuple_New(3);
  if (names == nullptr) return nullptr;
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("READ_ACCESS"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::AccessType>::type>(::kaldi::nnet3::AccessType::kReadAccess)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 0, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("WRITE_ACCESS"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::AccessType>::type>(::kaldi::nnet3::AccessType::kWriteAccess)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 1, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("READ_WRITE_ACCESS"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::AccessType>::type>(::kaldi::nnet3::AccessType::kReadWriteAccess)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 2, py);
  py = PyUnicode_FromString("AccessType");
  py_enum_class = PyObject_CallFunctionObjArgs(_IntEnum, py, names, nullptr);
  Py_DECREF(py);
err:
  Py_DECREF(names);
  return py_enum_class;
}
static PyObject* _AccessType{};  // set by above func in Init()

namespace pyComputationVariables {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::ComputationVariables> cpp;
};
static ::kaldi::nnet3::ComputationVariables* ThisPtr(PyObject*);

// init(computation:NnetComputation)
static PyObject* wrapInit_as_init(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("computation"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:init", names, &a[0])) return nullptr;
  ::kaldi::nnet3::NnetComputation* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("init", names[0], "::kaldi::nnet3::NnetComputation", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationVariables* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Init(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// record_access_for_submatrix(submatrix_index:int, access_type:AccessType, ca:CommandAttributes)
static PyObject* wrapRecordAccessForSubmatrix_as_record_access_for_submatrix(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("submatrix_index"),
      C("access_type"),
      C("ca"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:record_access_for_submatrix", names, &a[0], &a[1], &a[2])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("record_access_for_submatrix", names[0], "int", a[0]);
  ::kaldi::nnet3::AccessType arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("record_access_for_submatrix", names[1], "::kaldi::nnet3::AccessType", a[1]);
  ::kaldi::nnet3::CommandAttributes * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("record_access_for_submatrix", names[2], "::kaldi::nnet3::CommandAttributes *", a[2]);
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationVariables* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->RecordAccessForSubmatrix(std::move(arg1), std::move(arg2), arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// append_variables_for_matrix(matrix_index:int) -> list<int>
static PyObject* wrapAppendVariablesForMatrix_as_append_variables_for_matrix(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("matrix_index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:append_variables_for_matrix", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("append_variables_for_matrix", names[0], "int", a[0]);
  ::std::vector< ::int32> ret0{};
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationVariables* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AppendVariablesForMatrix(std::move(arg1), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// append_variables_for_submatrix(submatrix_index:int) -> list<int>
static PyObject* wrapAppendVariablesForSubmatrix_as_append_variables_for_submatrix(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("submatrix_index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:append_variables_for_submatrix", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("append_variables_for_submatrix", names[0], "int", a[0]);
  ::std::vector< ::int32> ret0{};
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationVariables* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AppendVariablesForSubmatrix(std::move(arg1), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_variables() -> int
static PyObject* wrapNumVariables_as_num_variables(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationVariables* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumVariables();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_matrix_for_variable(variable:int) -> int
static PyObject* wrapGetMatrixForVariable_as_get_matrix_for_variable(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("variable"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_matrix_for_variable", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_matrix_for_variable", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationVariables* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetMatrixForVariable(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// describe_variable(variable:int) -> str
static PyObject* wrapDescribeVariable_as_describe_variable(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("variable"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:describe_variable", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("describe_variable", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationVariables* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->DescribeVariable(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// variable_info(variable:int) -> NnetComputation.SubMatrixInfo
static PyObject* wrapVariableInfo_as_variable_info(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("variable"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:variable_info", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("variable_info", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationVariables* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::nnet3::NnetComputation::SubMatrixInfo ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->VariableInfo(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("init"), (PyCFunction)wrapInit_as_init, METH_VARARGS | METH_KEYWORDS, C("init(computation:NnetComputation)\n  Calls C++ function\n  void ::kaldi::nnet3::ComputationVariables::Init(::kaldi::nnet3::NnetComputation)")},
  {C("record_access_for_submatrix"), (PyCFunction)wrapRecordAccessForSubmatrix_as_record_access_for_submatrix, METH_VARARGS | METH_KEYWORDS, C("record_access_for_submatrix(submatrix_index:int, access_type:AccessType, ca:CommandAttributes)\n  Calls C++ function\n  void ::kaldi::nnet3::ComputationVariables::RecordAccessForSubmatrix(int, ::kaldi::nnet3::AccessType, ::kaldi::nnet3::CommandAttributes *)")},
  {C("append_variables_for_matrix"), (PyCFunction)wrapAppendVariablesForMatrix_as_append_variables_for_matrix, METH_VARARGS | METH_KEYWORDS, C("append_variables_for_matrix(matrix_index:int) -> list<int>\n  Calls C++ function\n  void ::kaldi::nnet3::ComputationVariables::AppendVariablesForMatrix(int, ::std::vector< ::int32>*)")},
  {C("append_variables_for_submatrix"), (PyCFunction)wrapAppendVariablesForSubmatrix_as_append_variables_for_submatrix, METH_VARARGS | METH_KEYWORDS, C("append_variables_for_submatrix(submatrix_index:int) -> list<int>\n  Calls C++ function\n  void ::kaldi::nnet3::ComputationVariables::AppendVariablesForSubmatrix(int, ::std::vector< ::int32>*)")},
  {C("num_variables"), (PyCFunction)wrapNumVariables_as_num_variables, METH_NOARGS, C("num_variables() -> int\n  Calls C++ function\n  int ::kaldi::nnet3::ComputationVariables::NumVariables()")},
  {C("get_matrix_for_variable"), (PyCFunction)wrapGetMatrixForVariable_as_get_matrix_for_variable, METH_VARARGS | METH_KEYWORDS, C("get_matrix_for_variable(variable:int) -> int\n  Calls C++ function\n  int ::kaldi::nnet3::ComputationVariables::GetMatrixForVariable(int)")},
  {C("describe_variable"), (PyCFunction)wrapDescribeVariable_as_describe_variable, METH_VARARGS | METH_KEYWORDS, C("describe_variable(variable:int) -> str\n  Calls C++ function\n  ::std::string ::kaldi::nnet3::ComputationVariables::DescribeVariable(int)")},
  {C("variable_info"), (PyCFunction)wrapVariableInfo_as_variable_info, METH_VARARGS | METH_KEYWORDS, C("variable_info(variable:int) -> NnetComputation.SubMatrixInfo\n  Calls C++ function\n  ::kaldi::nnet3::NnetComputation::SubMatrixInfo ::kaldi::nnet3::ComputationVariables::VariableInfo(int)")},
  {}
};

// ComputationVariables __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ComputationVariables __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ComputationVariables __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_analyze.ComputationVariables", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::ComputationVariables", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "ComputationVariables takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::ComputationVariables>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::ComputationVariables* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_ComputationVariables"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::ComputationVariables"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::ComputationVariables* c = static_cast<::kaldi::nnet3::ComputationVariables*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::ComputationVariables*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyComputationVariables

namespace pyAccess {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::Access> cpp;
};
static ::kaldi::nnet3::Access* ThisPtr(PyObject*);

static PyObject* get_command_index(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->command_index, {});
}

static int set_command_index(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the command_index attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->command_index)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for command_index:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_access_type(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->access_type, {});
}

static int set_access_type(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the access_type attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->access_type)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for access_type:AccessType", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// @classmethod new(command_index:int, access_type:AccessType) -> Access
static PyObject* wrapAccess_as_new(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("command_index"),
      C("access_type"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:new", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new", names[0], "int", a[0]);
  ::kaldi::nnet3::AccessType arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("new", names[1], "::kaldi::nnet3::AccessType", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::nnet3::Access> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::nnet3::Access>(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __lt__(other:Access) -> bool
static PyObject* wrap__lt__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__lt__", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Access* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__lt__", names[0], "::kaldi::nnet3::Access", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Access* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->operator<(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyGetSetDef Properties[] = {
  {C("command_index"), get_command_index, set_command_index, C("C++ ::int32 Access.command_index")},
  {C("access_type"), get_access_type, set_access_type, C("C++ ::kaldi::nnet3::AccessType Access.access_type")},
  {}
};

PyObject* slot_richcmp(PyObject* self, PyObject* other, int op) {
  switch (op) {
    case Py_LT: return slot::adapter<wrap__lt__>(self, other);
    default: Py_RETURN_NOTIMPLEMENTED;
  }
}

static PyMethodDef Methods[] = {
  {C("new"), (PyCFunction)wrapAccess_as_new, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new(command_index:int, access_type:AccessType) -> Access\n  Calls C++ function\n  std::unique_ptr<::kaldi::nnet3::Access> ::kaldi::nnet3::Access::Access(int, ::kaldi::nnet3::AccessType)")},
  {}
};

// Access __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// Access __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// Access __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_analyze.Access",              // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::Access", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  slot_richcmp,                        // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "Access takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::Access>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::Access* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_Access"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::Access"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::Access* c = static_cast<::kaldi::nnet3::Access*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::Access*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyAccess

// compute_variable_accesses(variables:ComputationVariables, command_attributes:list<CommandAttributes>) -> list<list<Access>>
static PyObject* wrapComputeVariableAccesses_as_compute_variable_accesses(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("variables"),
      C("command_attributes"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:compute_variable_accesses", names, &a[0], &a[1])) return nullptr;
  ::kaldi::nnet3::ComputationVariables* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_variable_accesses", names[0], "::kaldi::nnet3::ComputationVariables", a[0]);
  ::std::vector< ::kaldi::nnet3::CommandAttributes> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute_variable_accesses", names[1], "::std::vector< ::kaldi::nnet3::CommandAttributes>", a[1]);
  ::std::vector< ::std::vector< ::kaldi::nnet3::Access> > ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ComputeVariableAccesses(*arg1, std::move(arg2), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

namespace pyMatrixAccesses {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::MatrixAccesses> cpp;
};
static ::kaldi::nnet3::MatrixAccesses* ThisPtr(PyObject*);

static PyObject* get_allocate_command(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->allocate_command, {});
}

static int set_allocate_command(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the allocate_command attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->allocate_command)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for allocate_command:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_deallocate_command(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->deallocate_command, {});
}

static int set_deallocate_command(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the deallocate_command attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->deallocate_command)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for deallocate_command:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_accesses(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->accesses, {});
}

static int set_accesses(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the accesses attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->accesses)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for accesses:list<Access>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_is_input(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->is_input, {});
}

static int set_is_input(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the is_input attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->is_input)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for is_input:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_is_output(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->is_output, {});
}

static int set_is_output(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the is_output attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->is_output)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for is_output:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("allocate_command"), get_allocate_command, set_allocate_command, C("C++ ::int32 MatrixAccesses.allocate_command")},
  {C("deallocate_command"), get_deallocate_command, set_deallocate_command, C("C++ ::int32 MatrixAccesses.deallocate_command")},
  {C("accesses"), get_accesses, set_accesses, C("C++ ::std::vector< ::kaldi::nnet3::Access> MatrixAccesses.accesses")},
  {C("is_input"), get_is_input, set_is_input, C("C++ bool MatrixAccesses.is_input")},
  {C("is_output"), get_is_output, set_is_output, C("C++ bool MatrixAccesses.is_output")},
  {}
};

// MatrixAccesses __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// MatrixAccesses __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// MatrixAccesses __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_analyze.MatrixAccesses",      // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::MatrixAccesses", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  nullptr,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "MatrixAccesses takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::MatrixAccesses>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::MatrixAccesses* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_MatrixAccesses"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::MatrixAccesses"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::MatrixAccesses* c = static_cast<::kaldi::nnet3::MatrixAccesses*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::MatrixAccesses*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyMatrixAccesses

// compute_matrix_accesses(nnet:Nnet, computation:NnetComputation, variables:ComputationVariables, command_attributes:list<CommandAttributes>) -> list<MatrixAccesses>
static PyObject* wrapComputeMatrixAccesses_as_compute_matrix_accesses(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("nnet"),
      C("computation"),
      C("variables"),
      C("command_attributes"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:compute_matrix_accesses", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_matrix_accesses", names[0], "::kaldi::nnet3::Nnet", a[0]);
  ::kaldi::nnet3::NnetComputation* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute_matrix_accesses", names[1], "::kaldi::nnet3::NnetComputation", a[1]);
  ::kaldi::nnet3::ComputationVariables* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("compute_matrix_accesses", names[2], "::kaldi::nnet3::ComputationVariables", a[2]);
  ::std::vector< ::kaldi::nnet3::CommandAttributes> arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("compute_matrix_accesses", names[3], "::std::vector< ::kaldi::nnet3::CommandAttributes>", a[3]);
  ::std::vector< ::kaldi::nnet3::MatrixAccesses> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ComputeMatrixAccesses(*arg1, *arg2, *arg3, std::move(arg4), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// print_matrix_accesses(os:ostream, matrix_accesses:list<MatrixAccesses>)
static PyObject* wrapPrintMatrixAccesses_as_print_matrix_accesses(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("matrix_accesses"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:print_matrix_accesses", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("print_matrix_accesses", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  ::std::vector< ::kaldi::nnet3::MatrixAccesses> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("print_matrix_accesses", names[1], "::std::vector< ::kaldi::nnet3::MatrixAccesses>", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::PrintMatrixAccesses(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

namespace pyAnalyzer {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::Analyzer> cpp;
};
static ::kaldi::nnet3::Analyzer* ThisPtr(PyObject*);

static PyObject* get_variables(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->variables), {});
}

static int set_variables(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the variables attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->variables)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for variables:ComputationVariables", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_command_attributes(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->command_attributes, {});
}

static int set_command_attributes(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the command_attributes attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->command_attributes)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for command_attributes:list<CommandAttributes>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_variable_accesses(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->variable_accesses, {});
}

static int set_variable_accesses(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the variable_accesses attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->variable_accesses)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for variable_accesses:list<list<Access>>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_matrix_accesses(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->matrix_accesses, {});
}

static int set_matrix_accesses(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the matrix_accesses attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->matrix_accesses)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for matrix_accesses:list<MatrixAccesses>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// init(nnet:Nnet, computation:NnetComputation)
static PyObject* wrapInit_as_init(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("nnet"),
      C("computation"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:init", names, &a[0], &a[1])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("init", names[0], "::kaldi::nnet3::Nnet", a[0]);
  ::kaldi::nnet3::NnetComputation* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("init", names[1], "::kaldi::nnet3::NnetComputation", a[1]);
  // Call actual C++ method.
  ::kaldi::nnet3::Analyzer* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Init(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("variables"), get_variables, set_variables, C("C++ ::kaldi::nnet3::ComputationVariables Analyzer.variables")},
  {C("command_attributes"), get_command_attributes, set_command_attributes, C("C++ ::std::vector< ::kaldi::nnet3::CommandAttributes> Analyzer.command_attributes")},
  {C("variable_accesses"), get_variable_accesses, set_variable_accesses, C("C++ ::std::vector< ::std::vector< ::kaldi::nnet3::Access> > Analyzer.variable_accesses")},
  {C("matrix_accesses"), get_matrix_accesses, set_matrix_accesses, C("C++ ::std::vector< ::kaldi::nnet3::MatrixAccesses> Analyzer.matrix_accesses")},
  {}
};

static PyMethodDef Methods[] = {
  {C("init"), (PyCFunction)wrapInit_as_init, METH_VARARGS | METH_KEYWORDS, C("init(nnet:Nnet, computation:NnetComputation)\n  Calls C++ function\n  void ::kaldi::nnet3::Analyzer::Init(::kaldi::nnet3::Nnet, ::kaldi::nnet3::NnetComputation)")},
  {}
};

// Analyzer __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// Analyzer __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// Analyzer __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_analyze.Analyzer",            // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::Analyzer", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "Analyzer takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::Analyzer>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::Analyzer* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_Analyzer"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::Analyzer"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::Analyzer* c = static_cast<::kaldi::nnet3::Analyzer*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::Analyzer*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyAnalyzer

namespace pyComputationAnalysis {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::ComputationAnalysis> cpp;
};
static ::kaldi::nnet3::ComputationAnalysis* ThisPtr(PyObject*);

// __init__(computation:NnetComputation, analyzer:Analyzer)
static PyObject* wrapComputationAnalysis_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("computation"),
      C("analyzer"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::kaldi::nnet3::NnetComputation* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::nnet3::NnetComputation", a[0]);
  ::kaldi::nnet3::Analyzer* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::nnet3::Analyzer", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::ComputationAnalysis>(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// first_nontrivial_access(s:int) -> int
static PyObject* wrapFirstNontrivialAccess_as_first_nontrivial_access(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("s"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:first_nontrivial_access", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("first_nontrivial_access", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationAnalysis* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FirstNontrivialAccess(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// first_access(s:int) -> int
static PyObject* wrapFirstAccess_as_first_access(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("s"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:first_access", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("first_access", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationAnalysis* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FirstAccess(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// last_access(s:int) -> int
static PyObject* wrapLastAccess_as_last_access(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("s"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:last_access", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("last_access", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationAnalysis* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->LastAccess(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// last_write_access(s:int) -> int
static PyObject* wrapLastWriteAccess_as_last_write_access(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("s"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:last_write_access", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("last_write_access", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationAnalysis* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->LastWriteAccess(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// data_invalidated_command(c:int, s:int) -> int
static PyObject* wrapDataInvalidatedCommand_as_data_invalidated_command(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("c"),
      C("s"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:data_invalidated_command", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("data_invalidated_command", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("data_invalidated_command", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationAnalysis* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->DataInvalidatedCommand(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// first_nontrivial_matrix_access(m:int) -> int
static PyObject* wrapFirstNontrivialMatrixAccess_as_first_nontrivial_matrix_access(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("m"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:first_nontrivial_matrix_access", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("first_nontrivial_matrix_access", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationAnalysis* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FirstNontrivialMatrixAccess(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// last_matrix_access(m:int) -> int
static PyObject* wrapLastMatrixAccess_as_last_matrix_access(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("m"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:last_matrix_access", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("last_matrix_access", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationAnalysis* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->LastMatrixAccess(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapComputationAnalysis_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(computation:NnetComputation, analyzer:Analyzer)\n  Calls C++ function\n  void ::kaldi::nnet3::ComputationAnalysis::ComputationAnalysis(::kaldi::nnet3::NnetComputation, ::kaldi::nnet3::Analyzer)")},
  {C("first_nontrivial_access"), (PyCFunction)wrapFirstNontrivialAccess_as_first_nontrivial_access, METH_VARARGS | METH_KEYWORDS, C("first_nontrivial_access(s:int) -> int\n  Calls C++ function\n  int ::kaldi::nnet3::ComputationAnalysis::FirstNontrivialAccess(int)")},
  {C("first_access"), (PyCFunction)wrapFirstAccess_as_first_access, METH_VARARGS | METH_KEYWORDS, C("first_access(s:int) -> int\n  Calls C++ function\n  int ::kaldi::nnet3::ComputationAnalysis::FirstAccess(int)")},
  {C("last_access"), (PyCFunction)wrapLastAccess_as_last_access, METH_VARARGS | METH_KEYWORDS, C("last_access(s:int) -> int\n  Calls C++ function\n  int ::kaldi::nnet3::ComputationAnalysis::LastAccess(int)")},
  {C("last_write_access"), (PyCFunction)wrapLastWriteAccess_as_last_write_access, METH_VARARGS | METH_KEYWORDS, C("last_write_access(s:int) -> int\n  Calls C++ function\n  int ::kaldi::nnet3::ComputationAnalysis::LastWriteAccess(int)")},
  {C("data_invalidated_command"), (PyCFunction)wrapDataInvalidatedCommand_as_data_invalidated_command, METH_VARARGS | METH_KEYWORDS, C("data_invalidated_command(c:int, s:int) -> int\n  Calls C++ function\n  int ::kaldi::nnet3::ComputationAnalysis::DataInvalidatedCommand(int, int)")},
  {C("first_nontrivial_matrix_access"), (PyCFunction)wrapFirstNontrivialMatrixAccess_as_first_nontrivial_matrix_access, METH_VARARGS | METH_KEYWORDS, C("first_nontrivial_matrix_access(m:int) -> int\n  Calls C++ function\n  int ::kaldi::nnet3::ComputationAnalysis::FirstNontrivialMatrixAccess(int)")},
  {C("last_matrix_access"), (PyCFunction)wrapLastMatrixAccess_as_last_matrix_access, METH_VARARGS | METH_KEYWORDS, C("last_matrix_access(m:int) -> int\n  Calls C++ function\n  int ::kaldi::nnet3::ComputationAnalysis::LastMatrixAccess(int)")},
  {}
};

// ComputationAnalysis __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ComputationAnalysis __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ComputationAnalysis __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_analyze.ComputationAnalysis", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::ComputationAnalysis", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapComputationAnalysis_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::ComputationAnalysis* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_ComputationAnalysis"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::ComputationAnalysis"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::ComputationAnalysis* c = static_cast<::kaldi::nnet3::ComputationAnalysis*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::ComputationAnalysis*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyComputationAnalysis

// compute_matrix_to_submatrix(computation:NnetComputation) -> list<list<int>>
static PyObject* wrapComputeMatrixToSubmatrix_as_compute_matrix_to_submatrix(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("computation"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:compute_matrix_to_submatrix", names, &a[0])) return nullptr;
  ::kaldi::nnet3::NnetComputation* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_matrix_to_submatrix", names[0], "::kaldi::nnet3::NnetComputation", a[0]);
  ::std::vector< ::std::vector< ::int32> > ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ComputeMatrixToSubmatrix(*arg1, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// compute_command_attributes(nnet:Nnet, computation:NnetComputation, variables:ComputationVariables) -> list<CommandAttributes>
static PyObject* wrapComputeCommandAttributes_as_compute_command_attributes(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("nnet"),
      C("computation"),
      C("variables"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:compute_command_attributes", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_command_attributes", names[0], "::kaldi::nnet3::Nnet", a[0]);
  ::kaldi::nnet3::NnetComputation* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute_command_attributes", names[1], "::kaldi::nnet3::NnetComputation", a[1]);
  ::kaldi::nnet3::ComputationVariables* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("compute_command_attributes", names[2], "::kaldi::nnet3::ComputationVariables", a[2]);
  ::std::vector< ::kaldi::nnet3::CommandAttributes> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ComputeCommandAttributes(*arg1, *arg2, *arg3, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

namespace pyCheckComputationOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::CheckComputationOptions> cpp;
};
static ::kaldi::nnet3::CheckComputationOptions* ThisPtr(PyObject*);

static PyObject* get_check_rewrite(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->check_rewrite, {});
}

static int set_check_rewrite(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the check_rewrite attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->check_rewrite)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for check_rewrite:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_check_unused_variables(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->check_unused_variables, {});
}

static int set_check_unused_variables(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the check_unused_variables attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->check_unused_variables)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for check_unused_variables:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("check_rewrite"), get_check_rewrite, set_check_rewrite, C("C++ bool CheckComputationOptions.check_rewrite")},
  {C("check_unused_variables"), get_check_unused_variables, set_check_unused_variables, C("C++ bool CheckComputationOptions.check_unused_variables")},
  {}
};

// CheckComputationOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// CheckComputationOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// CheckComputationOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_analyze.CheckComputationOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::CheckComputationOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  nullptr,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "CheckComputationOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::CheckComputationOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::CheckComputationOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_CheckComputationOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::CheckComputationOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::CheckComputationOptions* c = static_cast<::kaldi::nnet3::CheckComputationOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::CheckComputationOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyCheckComputationOptions

namespace pyComputationChecker {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::ComputationChecker> cpp;
};
static ::kaldi::nnet3::ComputationChecker* ThisPtr(PyObject*);

// __init__(config:CheckComputationOptions, nnet:Nnet, computation:NnetComputation)
static PyObject* wrapComputationChecker_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("config"),
      C("nnet"),
      C("computation"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:__init__", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::nnet3::CheckComputationOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::nnet3::CheckComputationOptions", a[0]);
  ::kaldi::nnet3::Nnet* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::nnet3::Nnet", a[1]);
  ::kaldi::nnet3::NnetComputation* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::kaldi::nnet3::NnetComputation", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::ComputationChecker>(*arg1, *arg2, *arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// check()
static PyObject* wrapCheck_as_check(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationChecker* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Check();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapComputationChecker_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(config:CheckComputationOptions, nnet:Nnet, computation:NnetComputation)\n  Calls C++ function\n  void ::kaldi::nnet3::ComputationChecker::ComputationChecker(::kaldi::nnet3::CheckComputationOptions, ::kaldi::nnet3::Nnet, ::kaldi::nnet3::NnetComputation)")},
  {C("check"), (PyCFunction)wrapCheck_as_check, METH_NOARGS, C("check()\n  Calls C++ function\n  void ::kaldi::nnet3::ComputationChecker::Check()")},
  {}
};

// ComputationChecker __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ComputationChecker __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ComputationChecker __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_analyze.ComputationChecker",  // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::ComputationChecker", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapComputationChecker_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::ComputationChecker* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_ComputationChecker"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::ComputationChecker"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::ComputationChecker* c = static_cast<::kaldi::nnet3::ComputationChecker*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::ComputationChecker*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyComputationChecker

// get_commands_of_type(computation:NnetComputation, t:CommandType) -> list<int>
static PyObject* wrapGetCommandsOfType_as_get_commands_of_type(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("computation"),
      C("t"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_commands_of_type", names, &a[0], &a[1])) return nullptr;
  ::kaldi::nnet3::NnetComputation* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_commands_of_type", names[0], "::kaldi::nnet3::NnetComputation", a[0]);
  ::kaldi::nnet3::CommandType arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_commands_of_type", names[1], "::kaldi::nnet3::CommandType", a[1]);
  ::std::vector< ::int32> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::GetCommandsOfType(*arg1, std::move(arg2), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// check_computation(nnet:Nnet, computation:NnetComputation, check_rewrite:bool=default)
static PyObject* wrapCheckComputation_as_check_computation(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("nnet"),
      C("computation"),
      C("check_rewrite"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:check_computation", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("check_computation", names[0], "::kaldi::nnet3::Nnet", a[0]);
  ::kaldi::nnet3::NnetComputation* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("check_computation", names[1], "::kaldi::nnet3::NnetComputation", a[1]);
  bool arg3;
  if (nargs > 2) {
    if (!a[2]) arg3 = (bool)false;
    else if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("check_computation", names[2], "bool", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ::kaldi::nnet3::CheckComputation(*arg1, *arg2); break;
  case 3:
    ::kaldi::nnet3::CheckComputation(*arg1, *arg2, std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// get_max_memory_use(computation:NnetComputation) -> int
static PyObject* wrapGetMaxMemoryUse_as_get_max_memory_use(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("computation"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_max_memory_use", names, &a[0])) return nullptr;
  ::kaldi::nnet3::NnetComputation* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_max_memory_use", names[0], "::kaldi::nnet3::NnetComputation", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::GetMaxMemoryUse(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("print_command_attributes"), (PyCFunction)wrapPrintCommandAttributes_as_print_command_attributes, METH_VARARGS | METH_KEYWORDS, C("print_command_attributes(os:ostream, attributes:list<CommandAttributes>)\n  Calls C++ function\n  void ::kaldi::nnet3::PrintCommandAttributes(::std::basic_ostream<char, ::std::char_traits<char> >, ::std::vector< ::kaldi::nnet3::CommandAttributes>)")},
  {C("compute_variable_accesses"), (PyCFunction)wrapComputeVariableAccesses_as_compute_variable_accesses, METH_VARARGS | METH_KEYWORDS, C("compute_variable_accesses(variables:ComputationVariables, command_attributes:list<CommandAttributes>) -> list<list<Access>>\n  Calls C++ function\n  void ::kaldi::nnet3::ComputeVariableAccesses(::kaldi::nnet3::ComputationVariables, ::std::vector< ::kaldi::nnet3::CommandAttributes>, ::std::vector< ::std::vector< ::kaldi::nnet3::Access> >*)")},
  {C("compute_matrix_accesses"), (PyCFunction)wrapComputeMatrixAccesses_as_compute_matrix_accesses, METH_VARARGS | METH_KEYWORDS, C("compute_matrix_accesses(nnet:Nnet, computation:NnetComputation, variables:ComputationVariables, command_attributes:list<CommandAttributes>) -> list<MatrixAccesses>\n  Calls C++ function\n  void ::kaldi::nnet3::ComputeMatrixAccesses(::kaldi::nnet3::Nnet, ::kaldi::nnet3::NnetComputation, ::kaldi::nnet3::ComputationVariables, ::std::vector< ::kaldi::nnet3::CommandAttributes>, ::std::vector< ::kaldi::nnet3::MatrixAccesses>*)")},
  {C("print_matrix_accesses"), (PyCFunction)wrapPrintMatrixAccesses_as_print_matrix_accesses, METH_VARARGS | METH_KEYWORDS, C("print_matrix_accesses(os:ostream, matrix_accesses:list<MatrixAccesses>)\n  Calls C++ function\n  void ::kaldi::nnet3::PrintMatrixAccesses(::std::basic_ostream<char, ::std::char_traits<char> >, ::std::vector< ::kaldi::nnet3::MatrixAccesses>)")},
  {C("compute_matrix_to_submatrix"), (PyCFunction)wrapComputeMatrixToSubmatrix_as_compute_matrix_to_submatrix, METH_VARARGS | METH_KEYWORDS, C("compute_matrix_to_submatrix(computation:NnetComputation) -> list<list<int>>\n  Calls C++ function\n  void ::kaldi::nnet3::ComputeMatrixToSubmatrix(::kaldi::nnet3::NnetComputation, ::std::vector< ::std::vector< ::int32> >*)")},
  {C("compute_command_attributes"), (PyCFunction)wrapComputeCommandAttributes_as_compute_command_attributes, METH_VARARGS | METH_KEYWORDS, C("compute_command_attributes(nnet:Nnet, computation:NnetComputation, variables:ComputationVariables) -> list<CommandAttributes>\n  Calls C++ function\n  void ::kaldi::nnet3::ComputeCommandAttributes(::kaldi::nnet3::Nnet, ::kaldi::nnet3::NnetComputation, ::kaldi::nnet3::ComputationVariables, ::std::vector< ::kaldi::nnet3::CommandAttributes>*)")},
  {C("get_commands_of_type"), (PyCFunction)wrapGetCommandsOfType_as_get_commands_of_type, METH_VARARGS | METH_KEYWORDS, C("get_commands_of_type(computation:NnetComputation, t:CommandType) -> list<int>\n  Calls C++ function\n  void ::kaldi::nnet3::GetCommandsOfType(::kaldi::nnet3::NnetComputation, ::kaldi::nnet3::CommandType, ::std::vector< ::int32>*)")},
  {C("check_computation"), (PyCFunction)wrapCheckComputation_as_check_computation, METH_VARARGS | METH_KEYWORDS, C("check_computation(nnet:Nnet, computation:NnetComputation, check_rewrite:bool=default)\n  Calls C++ function\n  void ::kaldi::nnet3::CheckComputation(::kaldi::nnet3::Nnet, ::kaldi::nnet3::NnetComputation, bool)")},
  {C("get_max_memory_use"), (PyCFunction)wrapGetMaxMemoryUse_as_get_max_memory_use, METH_VARARGS | METH_KEYWORDS, C("get_max_memory_use(computation:NnetComputation) -> int\n  Calls C++ function\n  long ::kaldi::nnet3::GetMaxMemoryUse(::kaldi::nnet3::NnetComputation)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyCommandAttributes::wrapper_Type) < 0) return false;
  Py_INCREF(&pyCommandAttributes::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyComputationVariables::wrapper_Type) < 0) return false;
  Py_INCREF(&pyComputationVariables::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyAccess::wrapper_Type) < 0) return false;
  Py_INCREF(&pyAccess::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyMatrixAccesses::wrapper_Type) < 0) return false;
  Py_INCREF(&pyMatrixAccesses::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyAnalyzer::wrapper_Type) < 0) return false;
  Py_INCREF(&pyAnalyzer::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyComputationAnalysis::wrapper_Type) < 0) return false;
  Py_INCREF(&pyComputationAnalysis::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyCheckComputationOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyCheckComputationOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyComputationChecker::wrapper_Type) < 0) return false;
  Py_INCREF(&pyComputationChecker::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_nnet_analyze",  // module name
  "CLIF-generated module for nnet3/nnet-analyze.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_computation")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_nnet")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  {PyObject* em = PyImport_ImportModule("enum");
   if (em == nullptr) goto err;
   _Enum = PyObject_GetAttrString(em, "Enum");
   _IntEnum = PyObject_GetAttrString(em, "IntEnum");
   Py_DECREF(em);}
  if (!_Enum || !_IntEnum) {
    Py_XDECREF(_Enum);
    Py_XDECREF(_IntEnum);
    goto err;
  }
  if (PyModule_AddObject(module, "CommandAttributes", reinterpret_cast<PyObject*>(&pyCommandAttributes::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "AccessType", (_AccessType=wrapAccessType())) < 0) goto err;
  if (PyModule_AddObject(module, "ComputationVariables", reinterpret_cast<PyObject*>(&pyComputationVariables::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "Access", reinterpret_cast<PyObject*>(&pyAccess::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "MatrixAccesses", reinterpret_cast<PyObject*>(&pyMatrixAccesses::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "Analyzer", reinterpret_cast<PyObject*>(&pyAnalyzer::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "ComputationAnalysis", reinterpret_cast<PyObject*>(&pyComputationAnalysis::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "CheckComputationOptions", reinterpret_cast<PyObject*>(&pyCheckComputationOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "ComputationChecker", reinterpret_cast<PyObject*>(&pyComputationChecker::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __nnet__analyze_clifwrap

namespace kaldi { namespace nnet3 {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// Access to/from ::kaldi::nnet3::Access conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::Access** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::Access* cpp = __nnet__analyze_clifwrap::pyAccess::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::Access>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::Access* cpp = __nnet__analyze_clifwrap::pyAccess::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__analyze_clifwrap::pyAccess::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::Access>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::Access* cpp = __nnet__analyze_clifwrap::pyAccess::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__analyze_clifwrap::pyAccess::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert Access instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::Access* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::Access* cpp = __nnet__analyze_clifwrap::pyAccess::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::Access>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::Access* cpp = __nnet__analyze_clifwrap::pyAccess::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::Access* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyAccess::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyAccess::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::Access>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::Access> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyAccess::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyAccess::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::Access>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::Access> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyAccess::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyAccess::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::Access>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::Access& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyAccess::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyAccess::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::Access>(c);
  return py;
}

// AccessType:IntEnum to/from enum ::kaldi::nnet3::AccessType conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::AccessType* c) {
  assert(c != nullptr);
  if (!PyObject_IsInstance(py, __nnet__analyze_clifwrap::_AccessType)) {
    PyErr_Format(PyExc_TypeError, "expecting enum AccessType, got %s %s", ClassName(py), ClassType(py));
    return false;
  }
  typename std::underlying_type<::kaldi::nnet3::AccessType>::type v;
  PyObject* value = PyObject_GetAttrString(py, "value");
  if (value == nullptr || !Clif_PyObjAs(value, &v)) return false;
  Py_DECREF(value);
  *c = static_cast<::kaldi::nnet3::AccessType>(v);
  return true;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::AccessType& c, py::PostConv) {
  return PyObject_CallFunctionObjArgs(__nnet__analyze_clifwrap::_AccessType, PyInt_FromLong(
      static_cast<typename std::underlying_type<::kaldi::nnet3::AccessType>::type>(c)), nullptr);
}

// Analyzer to/from ::kaldi::nnet3::Analyzer conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::Analyzer** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::Analyzer* cpp = __nnet__analyze_clifwrap::pyAnalyzer::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::Analyzer>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::Analyzer* cpp = __nnet__analyze_clifwrap::pyAnalyzer::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__analyze_clifwrap::pyAnalyzer::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::Analyzer>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::Analyzer* cpp = __nnet__analyze_clifwrap::pyAnalyzer::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__analyze_clifwrap::pyAnalyzer::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert Analyzer instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::Analyzer* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::Analyzer* cpp = __nnet__analyze_clifwrap::pyAnalyzer::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::Analyzer>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::Analyzer* cpp = __nnet__analyze_clifwrap::pyAnalyzer::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::Analyzer* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyAnalyzer::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyAnalyzer::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::Analyzer>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::Analyzer> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyAnalyzer::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyAnalyzer::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::Analyzer>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::Analyzer> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyAnalyzer::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyAnalyzer::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::Analyzer>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::Analyzer& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyAnalyzer::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyAnalyzer::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::Analyzer>(c);
  return py;
}

// CheckComputationOptions to/from ::kaldi::nnet3::CheckComputationOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::CheckComputationOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::CheckComputationOptions* cpp = __nnet__analyze_clifwrap::pyCheckComputationOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::CheckComputationOptions>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::CheckComputationOptions* cpp = __nnet__analyze_clifwrap::pyCheckComputationOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__analyze_clifwrap::pyCheckComputationOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::CheckComputationOptions>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::CheckComputationOptions* cpp = __nnet__analyze_clifwrap::pyCheckComputationOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__analyze_clifwrap::pyCheckComputationOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert CheckComputationOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::CheckComputationOptions* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::CheckComputationOptions* cpp = __nnet__analyze_clifwrap::pyCheckComputationOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::CheckComputationOptions>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::CheckComputationOptions* cpp = __nnet__analyze_clifwrap::pyCheckComputationOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::CheckComputationOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyCheckComputationOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyCheckComputationOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::CheckComputationOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::CheckComputationOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyCheckComputationOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyCheckComputationOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::CheckComputationOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::CheckComputationOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyCheckComputationOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyCheckComputationOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::CheckComputationOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::CheckComputationOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyCheckComputationOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyCheckComputationOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::CheckComputationOptions>(c);
  return py;
}

// CommandAttributes to/from ::kaldi::nnet3::CommandAttributes conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::CommandAttributes** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::CommandAttributes* cpp = __nnet__analyze_clifwrap::pyCommandAttributes::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::CommandAttributes>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::CommandAttributes* cpp = __nnet__analyze_clifwrap::pyCommandAttributes::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__analyze_clifwrap::pyCommandAttributes::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::CommandAttributes>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::CommandAttributes* cpp = __nnet__analyze_clifwrap::pyCommandAttributes::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__analyze_clifwrap::pyCommandAttributes::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert CommandAttributes instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::CommandAttributes* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::CommandAttributes* cpp = __nnet__analyze_clifwrap::pyCommandAttributes::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::CommandAttributes>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::CommandAttributes* cpp = __nnet__analyze_clifwrap::pyCommandAttributes::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::CommandAttributes* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyCommandAttributes::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyCommandAttributes::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::CommandAttributes>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::CommandAttributes> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyCommandAttributes::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyCommandAttributes::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::CommandAttributes>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::CommandAttributes> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyCommandAttributes::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyCommandAttributes::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::CommandAttributes>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::CommandAttributes& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyCommandAttributes::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyCommandAttributes::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::CommandAttributes>(c);
  return py;
}

// ComputationAnalysis to/from ::kaldi::nnet3::ComputationAnalysis conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ComputationAnalysis** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::ComputationAnalysis* cpp = __nnet__analyze_clifwrap::pyComputationAnalysis::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::ComputationAnalysis>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ComputationAnalysis* cpp = __nnet__analyze_clifwrap::pyComputationAnalysis::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__analyze_clifwrap::pyComputationAnalysis::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::ComputationAnalysis>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ComputationAnalysis* cpp = __nnet__analyze_clifwrap::pyComputationAnalysis::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__analyze_clifwrap::pyComputationAnalysis::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ComputationAnalysis instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::ComputationAnalysis* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyComputationAnalysis::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyComputationAnalysis::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ComputationAnalysis>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ComputationAnalysis> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyComputationAnalysis::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyComputationAnalysis::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ComputationAnalysis>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ComputationAnalysis> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyComputationAnalysis::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyComputationAnalysis::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ComputationAnalysis>(std::move(c));
  return py;
}

// ComputationChecker to/from ::kaldi::nnet3::ComputationChecker conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ComputationChecker** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::ComputationChecker* cpp = __nnet__analyze_clifwrap::pyComputationChecker::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::ComputationChecker>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ComputationChecker* cpp = __nnet__analyze_clifwrap::pyComputationChecker::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__analyze_clifwrap::pyComputationChecker::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::ComputationChecker>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ComputationChecker* cpp = __nnet__analyze_clifwrap::pyComputationChecker::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__analyze_clifwrap::pyComputationChecker::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ComputationChecker instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::ComputationChecker* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyComputationChecker::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyComputationChecker::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ComputationChecker>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ComputationChecker> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyComputationChecker::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyComputationChecker::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ComputationChecker>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ComputationChecker> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyComputationChecker::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyComputationChecker::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ComputationChecker>(std::move(c));
  return py;
}

// ComputationVariables to/from ::kaldi::nnet3::ComputationVariables conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ComputationVariables** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::ComputationVariables* cpp = __nnet__analyze_clifwrap::pyComputationVariables::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::ComputationVariables>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ComputationVariables* cpp = __nnet__analyze_clifwrap::pyComputationVariables::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__analyze_clifwrap::pyComputationVariables::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::ComputationVariables>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ComputationVariables* cpp = __nnet__analyze_clifwrap::pyComputationVariables::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__analyze_clifwrap::pyComputationVariables::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ComputationVariables instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ComputationVariables* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ComputationVariables* cpp = __nnet__analyze_clifwrap::pyComputationVariables::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::ComputationVariables>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ComputationVariables* cpp = __nnet__analyze_clifwrap::pyComputationVariables::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::ComputationVariables* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyComputationVariables::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyComputationVariables::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ComputationVariables>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ComputationVariables> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyComputationVariables::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyComputationVariables::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ComputationVariables>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ComputationVariables> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyComputationVariables::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyComputationVariables::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ComputationVariables>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ComputationVariables& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyComputationVariables::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyComputationVariables::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::ComputationVariables>(c);
  return py;
}

// MatrixAccesses to/from ::kaldi::nnet3::MatrixAccesses conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::MatrixAccesses** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::MatrixAccesses* cpp = __nnet__analyze_clifwrap::pyMatrixAccesses::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::MatrixAccesses>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::MatrixAccesses* cpp = __nnet__analyze_clifwrap::pyMatrixAccesses::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__analyze_clifwrap::pyMatrixAccesses::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::MatrixAccesses>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::MatrixAccesses* cpp = __nnet__analyze_clifwrap::pyMatrixAccesses::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__analyze_clifwrap::pyMatrixAccesses::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert MatrixAccesses instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::MatrixAccesses* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::MatrixAccesses* cpp = __nnet__analyze_clifwrap::pyMatrixAccesses::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::MatrixAccesses>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::MatrixAccesses* cpp = __nnet__analyze_clifwrap::pyMatrixAccesses::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::MatrixAccesses* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyMatrixAccesses::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyMatrixAccesses::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::MatrixAccesses>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::MatrixAccesses> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyMatrixAccesses::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyMatrixAccesses::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::MatrixAccesses>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::MatrixAccesses> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyMatrixAccesses::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyMatrixAccesses::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::MatrixAccesses>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::MatrixAccesses& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__analyze_clifwrap::pyMatrixAccesses::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__analyze_clifwrap::pyMatrixAccesses::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::MatrixAccesses>(c);
  return py;
}

} }  // namespace kaldi::nnet3
