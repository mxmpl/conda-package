//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/nnet-convolutional-component.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "cudamatrix/cu-matrix-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "nnet3/nnet-common-clifwrap.h"
#include "nnet3/nnet-parse-clifwrap.h"
#include "nnet3/nnet-computation-graph-ext-clifwrap.h"
#include "nnet3/nnet-misc-computation-info-clifwrap.h"
#include "nnet3/nnet-component-itf-clifwrap.h"
#include "nnet-convolutional-component-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __nnet__convolutional__component_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyTimeHeightConvolutionComponent {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::TimeHeightConvolutionComponent> cpp;
};
static ::kaldi::nnet3::TimeHeightConvolutionComponent* ThisPtr(PyObject*);

// @classmethod from_other(other:TimeHeightConvolutionComponent) -> TimeHeightConvolutionComponent
static PyObject* wrapTimeHeightConvolutionComponent_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::kaldi::nnet3::TimeHeightConvolutionComponent* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::kaldi::nnet3::TimeHeightConvolutionComponent", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::nnet3::TimeHeightConvolutionComponent> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::nnet3::TimeHeightConvolutionComponent>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// input_dim() -> int
static PyObject* wrapInputDim_as_input_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::TimeHeightConvolutionComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->InputDim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// output_dim() -> int
static PyObject* wrapOutputDim_as_output_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::TimeHeightConvolutionComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->OutputDim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// init_from_config(cfl:ConfigLine)
static PyObject* wrapInitFromConfig_as_init_from_config(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("cfl"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:init_from_config", names, &a[0])) return nullptr;
  ::kaldi::nnet3::ConfigLine * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("init_from_config", names[0], "::kaldi::nnet3::ConfigLine *", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::TimeHeightConvolutionComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->InitFromConfig(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// type() -> str
static PyObject* wrapType_as_type(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::TimeHeightConvolutionComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Type();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// properties() -> int
static PyObject* wrapProperties_as_properties(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::TimeHeightConvolutionComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Properties();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// propagate(indexes:ComponentPrecomputedIndexes, in:CuMatrixBase, out:CuMatrixBase) -> Memo
static PyObject* wrapPropagate_as_propagate(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("indexes"),
      C("in"),
      C("out"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:propagate", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::nnet3::ComponentPrecomputedIndexes * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("propagate", names[0], "::kaldi::nnet3::ComponentPrecomputedIndexes *", a[0]);
  ::kaldi::CuMatrixBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("propagate", names[1], "::kaldi::CuMatrixBase<float>", a[1]);
  ::kaldi::CuMatrixBase<float> * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("propagate", names[2], "::kaldi::CuMatrixBase<float> *", a[2]);
  // Call actual C++ method.
  ::kaldi::nnet3::TimeHeightConvolutionComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  void * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Propagate(arg1, *arg2, arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// backprop(debug_info:str, indexes:ComponentPrecomputedIndexes, in_value:CuMatrixBase, out_value:CuMatrixBase, out_deriv:CuMatrixBase, memo:Memo, to_update:Component, in_deriv:CuMatrixBase)
static PyObject* wrapBackprop_as_backprop(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[8];
  char* names[] = {
      C("debug_info"),
      C("indexes"),
      C("in_value"),
      C("out_value"),
      C("out_deriv"),
      C("memo"),
      C("to_update"),
      C("in_deriv"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOOOOO:backprop", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5], &a[6], &a[7])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("backprop", names[0], "::std::string", a[0]);
  ::kaldi::nnet3::ComponentPrecomputedIndexes * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("backprop", names[1], "::kaldi::nnet3::ComponentPrecomputedIndexes *", a[1]);
  ::kaldi::CuMatrixBase<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("backprop", names[2], "::kaldi::CuMatrixBase<float>", a[2]);
  ::kaldi::CuMatrixBase<float>* arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("backprop", names[3], "::kaldi::CuMatrixBase<float>", a[3]);
  ::kaldi::CuMatrixBase<float>* arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("backprop", names[4], "::kaldi::CuMatrixBase<float>", a[4]);
  void * arg6;
  if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("backprop", names[5], "void *", a[5]);
  ::kaldi::nnet3::Component * arg7;
  if (!Clif_PyObjAs(a[6], &arg7)) return ArgError("backprop", names[6], "::kaldi::nnet3::Component *", a[6]);
  ::kaldi::CuMatrixBase<float> * arg8;
  if (!Clif_PyObjAs(a[7], &arg8)) return ArgError("backprop", names[7], "::kaldi::CuMatrixBase<float> *", a[7]);
  // Call actual C++ method.
  ::kaldi::nnet3::TimeHeightConvolutionComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Backprop(std::move(arg1), arg2, *arg3, *arg4, *arg5, arg6, arg7, arg8);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(is:istream, binary:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::nnet3::TimeHeightConvolutionComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::nnet3::TimeHeightConvolutionComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// copy() -> Component
static PyObject* wrapCopy_as_copy(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::TimeHeightConvolutionComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::nnet3::Component * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Copy();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_input_indexes(misc_info:MiscComputationInfo, output_index:Index) -> list<Index>
static PyObject* wrapGetInputIndexes_as_get_input_indexes(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("misc_info"),
      C("output_index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_input_indexes", names, &a[0], &a[1])) return nullptr;
  ::kaldi::nnet3::MiscComputationInfo* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_input_indexes", names[0], "::kaldi::nnet3::MiscComputationInfo", a[0]);
  ::kaldi::nnet3::Index* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_input_indexes", names[1], "::kaldi::nnet3::Index", a[1]);
  ::std::vector< ::kaldi::nnet3::Index> ret0{};
  // Call actual C++ method.
  ::kaldi::nnet3::TimeHeightConvolutionComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetInputIndexes(*arg1, *arg2, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_computable(misc_info:MiscComputationInfo, output_index:Index, input_index_set:IndexSet) -> (ret:bool, used_inputs:list<Index>)
static PyObject* wrapIsComputable_as_is_computable(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("misc_info"),
      C("output_index"),
      C("input_index_set"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:is_computable", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::nnet3::MiscComputationInfo* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_computable", names[0], "::kaldi::nnet3::MiscComputationInfo", a[0]);
  ::kaldi::nnet3::Index* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("is_computable", names[1], "::kaldi::nnet3::Index", a[1]);
  ::kaldi::nnet3::IndexSet* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("is_computable", names[2], "::kaldi::nnet3::IndexSet", a[2]);
  ::std::vector< ::kaldi::nnet3::Index> ret1{};
  // Call actual C++ method.
  ::kaldi::nnet3::TimeHeightConvolutionComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsComputable(*arg1, *arg2, *arg3, &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// precompute_indexes(misc_info:MiscComputationInfo, input_indexes:list<Index>, output_indexes:list<Index>, need_backprop:bool) -> ComponentPrecomputedIndexes
static PyObject* wrapPrecomputeIndexes_as_precompute_indexes(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("misc_info"),
      C("input_indexes"),
      C("output_indexes"),
      C("need_backprop"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:precompute_indexes", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::nnet3::MiscComputationInfo* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("precompute_indexes", names[0], "::kaldi::nnet3::MiscComputationInfo", a[0]);
  ::std::vector< ::kaldi::nnet3::Index> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("precompute_indexes", names[1], "::std::vector< ::kaldi::nnet3::Index>", a[1]);
  ::std::vector< ::kaldi::nnet3::Index> arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("precompute_indexes", names[2], "::std::vector< ::kaldi::nnet3::Index>", a[2]);
  bool arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("precompute_indexes", names[3], "bool", a[3]);
  // Call actual C++ method.
  ::kaldi::nnet3::TimeHeightConvolutionComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::nnet3::ComponentPrecomputedIndexes * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->PrecomputeIndexes(*arg1, std::move(arg2), std::move(arg3), std::move(arg4));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// scale(scale:float)
static PyObject* wrapScale_as_scale(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("scale"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:scale", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("scale", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::TimeHeightConvolutionComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Scale(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// add(alpha:float, other:Component)
static PyObject* wrapAdd_as_add(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("alpha"),
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:add", names, &a[0], &a[1])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add", names[0], "float", a[0]);
  ::kaldi::nnet3::Component* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("add", names[1], "::kaldi::nnet3::Component", a[1]);
  // Call actual C++ method.
  ::kaldi::nnet3::TimeHeightConvolutionComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Add(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// perturb_params(stddev:float)
static PyObject* wrapPerturbParams_as_perturb_params(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("stddev"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:perturb_params", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("perturb_params", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::TimeHeightConvolutionComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->PerturbParams(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// dot_product(other:UpdatableComponent) -> float
static PyObject* wrapDotProduct_as_dot_product(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:dot_product", names, &a[0])) return nullptr;
  ::kaldi::nnet3::UpdatableComponent* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("dot_product", names[0], "::kaldi::nnet3::UpdatableComponent", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::TimeHeightConvolutionComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->DotProduct(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_parameters() -> int
static PyObject* wrapNumParameters_as_num_parameters(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::TimeHeightConvolutionComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumParameters();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// vectorize(params:VectorBase)
static PyObject* wrapVectorize_as_vectorize(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("params"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:vectorize", names, &a[0])) return nullptr;
  ::kaldi::VectorBase<float> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("vectorize", names[0], "::kaldi::VectorBase<float> *", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::TimeHeightConvolutionComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Vectorize(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// unvectorize(params:VectorBase)
static PyObject* wrapUnVectorize_as_unvectorize(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("params"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:unvectorize", names, &a[0])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("unvectorize", names[0], "::kaldi::VectorBase<float>", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::TimeHeightConvolutionComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->UnVectorize(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// freeze_natural_gradient(freeze:bool)
static PyObject* wrapFreezeNaturalGradient_as_freeze_natural_gradient(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("freeze"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:freeze_natural_gradient", names, &a[0])) return nullptr;
  bool arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("freeze_natural_gradient", names[0], "bool", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::TimeHeightConvolutionComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->FreezeNaturalGradient(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// scale_linear_params(alpha:float)
static PyObject* wrapScaleLinearParams_as_scale_linear_params(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("alpha"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:scale_linear_params", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("scale_linear_params", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::TimeHeightConvolutionComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ScaleLinearParams(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::kaldi::nnet3::UpdatableComponent*
static PyObject* as_kaldi_nnet3_UpdatableComponent(PyObject* self) {
  ::kaldi::nnet3::UpdatableComponent* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::nnet3::UpdatableComponent"), nullptr);
}

// Implicit cast this as ::kaldi::nnet3::Component*
static PyObject* as_kaldi_nnet3_Component(PyObject* self) {
  ::kaldi::nnet3::Component* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::nnet3::Component"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("from_other"), (PyCFunction)wrapTimeHeightConvolutionComponent_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(other:TimeHeightConvolutionComponent) -> TimeHeightConvolutionComponent\n  Calls C++ function\n  std::unique_ptr<::kaldi::nnet3::TimeHeightConvolutionComponent> ::kaldi::nnet3::TimeHeightConvolutionComponent::TimeHeightConvolutionComponent(::kaldi::nnet3::TimeHeightConvolutionComponent)")},
  {C("input_dim"), (PyCFunction)wrapInputDim_as_input_dim, METH_NOARGS, C("input_dim() -> int\n  Calls C++ function\n  int ::kaldi::nnet3::TimeHeightConvolutionComponent::InputDim()")},
  {C("output_dim"), (PyCFunction)wrapOutputDim_as_output_dim, METH_NOARGS, C("output_dim() -> int\n  Calls C++ function\n  int ::kaldi::nnet3::TimeHeightConvolutionComponent::OutputDim()")},
  {C("init_from_config"), (PyCFunction)wrapInitFromConfig_as_init_from_config, METH_VARARGS | METH_KEYWORDS, C("init_from_config(cfl:ConfigLine)\n  Calls C++ function\n  void ::kaldi::nnet3::TimeHeightConvolutionComponent::InitFromConfig(::kaldi::nnet3::ConfigLine *)")},
  {C("type"), (PyCFunction)wrapType_as_type, METH_NOARGS, C("type() -> str\n  Calls C++ function\n  ::std::string ::kaldi::nnet3::TimeHeightConvolutionComponent::Type()")},
  {C("properties"), (PyCFunction)wrapProperties_as_properties, METH_NOARGS, C("properties() -> int\n  Calls C++ function\n  int ::kaldi::nnet3::TimeHeightConvolutionComponent::Properties()")},
  {C("propagate"), (PyCFunction)wrapPropagate_as_propagate, METH_VARARGS | METH_KEYWORDS, C("propagate(indexes:ComponentPrecomputedIndexes, in:CuMatrixBase, out:CuMatrixBase) -> Memo\n  Calls C++ function\n  void * ::kaldi::nnet3::TimeHeightConvolutionComponent::Propagate(::kaldi::nnet3::ComponentPrecomputedIndexes *, ::kaldi::CuMatrixBase<float>, ::kaldi::CuMatrixBase<float> *)")},
  {C("backprop"), (PyCFunction)wrapBackprop_as_backprop, METH_VARARGS | METH_KEYWORDS, C("backprop(debug_info:str, indexes:ComponentPrecomputedIndexes, in_value:CuMatrixBase, out_value:CuMatrixBase, out_deriv:CuMatrixBase, memo:Memo, to_update:Component, in_deriv:CuMatrixBase)\n  Calls C++ function\n  void ::kaldi::nnet3::TimeHeightConvolutionComponent::Backprop(::std::string, ::kaldi::nnet3::ComponentPrecomputedIndexes *, ::kaldi::CuMatrixBase<float>, ::kaldi::CuMatrixBase<float>, ::kaldi::CuMatrixBase<float>, void *, ::kaldi::nnet3::Component *, ::kaldi::CuMatrixBase<float> *)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool)\n  Calls C++ function\n  void ::kaldi::nnet3::TimeHeightConvolutionComponent::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool)")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::nnet3::TimeHeightConvolutionComponent::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("copy"), (PyCFunction)wrapCopy_as_copy, METH_NOARGS, C("copy() -> Component\n  Calls C++ function\n  ::kaldi::nnet3::Component * ::kaldi::nnet3::TimeHeightConvolutionComponent::Copy()")},
  {C("get_input_indexes"), (PyCFunction)wrapGetInputIndexes_as_get_input_indexes, METH_VARARGS | METH_KEYWORDS, C("get_input_indexes(misc_info:MiscComputationInfo, output_index:Index) -> list<Index>\n  Calls C++ function\n  void ::kaldi::nnet3::TimeHeightConvolutionComponent::GetInputIndexes(::kaldi::nnet3::MiscComputationInfo, ::kaldi::nnet3::Index, ::std::vector< ::kaldi::nnet3::Index>*)")},
  {C("is_computable"), (PyCFunction)wrapIsComputable_as_is_computable, METH_VARARGS | METH_KEYWORDS, C("is_computable(misc_info:MiscComputationInfo, output_index:Index, input_index_set:IndexSet) -> (ret:bool, used_inputs:list<Index>)\n  Calls C++ function\n  bool ::kaldi::nnet3::TimeHeightConvolutionComponent::IsComputable(::kaldi::nnet3::MiscComputationInfo, ::kaldi::nnet3::Index, ::kaldi::nnet3::IndexSet, ::std::vector< ::kaldi::nnet3::Index>*)")},
  {C("precompute_indexes"), (PyCFunction)wrapPrecomputeIndexes_as_precompute_indexes, METH_VARARGS | METH_KEYWORDS, C("precompute_indexes(misc_info:MiscComputationInfo, input_indexes:list<Index>, output_indexes:list<Index>, need_backprop:bool) -> ComponentPrecomputedIndexes\n  Calls C++ function\n  ::kaldi::nnet3::ComponentPrecomputedIndexes * ::kaldi::nnet3::TimeHeightConvolutionComponent::PrecomputeIndexes(::kaldi::nnet3::MiscComputationInfo, ::std::vector< ::kaldi::nnet3::Index>, ::std::vector< ::kaldi::nnet3::Index>, bool)")},
  {C("scale"), (PyCFunction)wrapScale_as_scale, METH_VARARGS | METH_KEYWORDS, C("scale(scale:float)\n  Calls C++ function\n  void ::kaldi::nnet3::TimeHeightConvolutionComponent::Scale(float)")},
  {C("add"), (PyCFunction)wrapAdd_as_add, METH_VARARGS | METH_KEYWORDS, C("add(alpha:float, other:Component)\n  Calls C++ function\n  void ::kaldi::nnet3::TimeHeightConvolutionComponent::Add(float, ::kaldi::nnet3::Component)")},
  {C("perturb_params"), (PyCFunction)wrapPerturbParams_as_perturb_params, METH_VARARGS | METH_KEYWORDS, C("perturb_params(stddev:float)\n  Calls C++ function\n  void ::kaldi::nnet3::TimeHeightConvolutionComponent::PerturbParams(float)")},
  {C("dot_product"), (PyCFunction)wrapDotProduct_as_dot_product, METH_VARARGS | METH_KEYWORDS, C("dot_product(other:UpdatableComponent) -> float\n  Calls C++ function\n  float ::kaldi::nnet3::TimeHeightConvolutionComponent::DotProduct(::kaldi::nnet3::UpdatableComponent)")},
  {C("num_parameters"), (PyCFunction)wrapNumParameters_as_num_parameters, METH_NOARGS, C("num_parameters() -> int\n  Calls C++ function\n  int ::kaldi::nnet3::TimeHeightConvolutionComponent::NumParameters()")},
  {C("vectorize"), (PyCFunction)wrapVectorize_as_vectorize, METH_VARARGS | METH_KEYWORDS, C("vectorize(params:VectorBase)\n  Calls C++ function\n  void ::kaldi::nnet3::TimeHeightConvolutionComponent::Vectorize(::kaldi::VectorBase<float> *)")},
  {C("unvectorize"), (PyCFunction)wrapUnVectorize_as_unvectorize, METH_VARARGS | METH_KEYWORDS, C("unvectorize(params:VectorBase)\n  Calls C++ function\n  void ::kaldi::nnet3::TimeHeightConvolutionComponent::UnVectorize(::kaldi::VectorBase<float>)")},
  {C("freeze_natural_gradient"), (PyCFunction)wrapFreezeNaturalGradient_as_freeze_natural_gradient, METH_VARARGS | METH_KEYWORDS, C("freeze_natural_gradient(freeze:bool)\n  Calls C++ function\n  void ::kaldi::nnet3::TimeHeightConvolutionComponent::FreezeNaturalGradient(bool)")},
  {C("scale_linear_params"), (PyCFunction)wrapScaleLinearParams_as_scale_linear_params, METH_VARARGS | METH_KEYWORDS, C("scale_linear_params(alpha:float)\n  Calls C++ function\n  void ::kaldi::nnet3::TimeHeightConvolutionComponent::ScaleLinearParams(float)")},
  {C("as_kaldi_nnet3_UpdatableComponent"), (PyCFunction)as_kaldi_nnet3_UpdatableComponent, METH_NOARGS, C("Upcast to ::kaldi::nnet3::UpdatableComponent*")},
  {C("as_kaldi_nnet3_Component"), (PyCFunction)as_kaldi_nnet3_Component, METH_NOARGS, C("Upcast to ::kaldi::nnet3::Component*")},
  {}
};

// TimeHeightConvolutionComponent __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// TimeHeightConvolutionComponent __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// TimeHeightConvolutionComponent __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_convolutional_component.TimeHeightConvolutionComponent", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::TimeHeightConvolutionComponent", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "TimeHeightConvolutionComponent takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::TimeHeightConvolutionComponent>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::TimeHeightConvolutionComponent* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_TimeHeightConvolutionComponent"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::TimeHeightConvolutionComponent"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::TimeHeightConvolutionComponent* c = static_cast<::kaldi::nnet3::TimeHeightConvolutionComponent*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::TimeHeightConvolutionComponent*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyTimeHeightConvolutionComponent


// Initialize module

bool Ready() {
  PyObject* base_cls = ImportFQName("kaldi.nnet3._nnet_component_itf.UpdatableComponent");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.nnet3._nnet_component_itf.UpdatableComponent is not a new style class inheriting from object.");
    return false;
  }
  pyTimeHeightConvolutionComponent::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyTimeHeightConvolutionComponent::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.nnet3._nnet_component_itf.UpdatableComponent is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyTimeHeightConvolutionComponent::wrapper_Type) < 0) return false;
  Py_INCREF(&pyTimeHeightConvolutionComponent::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_nnet_convolutional_component",  // module name
  "CLIF-generated module for nnet3/nnet-convolutional-component.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_cu_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_common")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_parse")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_computation_graph_ext")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_misc_computation_info")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_component_itf")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "TimeHeightConvolutionComponent", reinterpret_cast<PyObject*>(&pyTimeHeightConvolutionComponent::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __nnet__convolutional__component_clifwrap

namespace kaldi { namespace nnet3 {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// TimeHeightConvolutionComponent to/from ::kaldi::nnet3::TimeHeightConvolutionComponent conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::TimeHeightConvolutionComponent** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::TimeHeightConvolutionComponent* cpp = __nnet__convolutional__component_clifwrap::pyTimeHeightConvolutionComponent::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::TimeHeightConvolutionComponent>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::TimeHeightConvolutionComponent* cpp = __nnet__convolutional__component_clifwrap::pyTimeHeightConvolutionComponent::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__convolutional__component_clifwrap::pyTimeHeightConvolutionComponent::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::TimeHeightConvolutionComponent>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::TimeHeightConvolutionComponent* cpp = __nnet__convolutional__component_clifwrap::pyTimeHeightConvolutionComponent::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__convolutional__component_clifwrap::pyTimeHeightConvolutionComponent::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert TimeHeightConvolutionComponent instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::TimeHeightConvolutionComponent* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__convolutional__component_clifwrap::pyTimeHeightConvolutionComponent::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__convolutional__component_clifwrap::pyTimeHeightConvolutionComponent::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::TimeHeightConvolutionComponent>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::TimeHeightConvolutionComponent> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__convolutional__component_clifwrap::pyTimeHeightConvolutionComponent::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__convolutional__component_clifwrap::pyTimeHeightConvolutionComponent::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::TimeHeightConvolutionComponent>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::TimeHeightConvolutionComponent> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__convolutional__component_clifwrap::pyTimeHeightConvolutionComponent::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__convolutional__component_clifwrap::pyTimeHeightConvolutionComponent::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::TimeHeightConvolutionComponent>(std::move(c));
  return py;
}

} }  // namespace kaldi::nnet3
