//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/nnet-nnet.clif

#include <memory>
#include "clif/python/optional.h"
#include "nnet3/nnet-nnet.h"
#include "clif/python/postconv.h"

namespace kaldi { namespace nnet3 {
using namespace ::clif;

// CLIF use `::kaldi::nnet3::NetworkNode` as NetworkNode
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::NetworkNode** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::NetworkNode>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::NetworkNode>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::NetworkNode* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::nnet3::NetworkNode>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::NetworkNode*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::NetworkNode>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::NetworkNode>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::NetworkNode&, py::PostConv);
// CLIF use `::kaldi::nnet3::Nnet` as Nnet
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::Nnet** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::Nnet>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::Nnet>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::Nnet* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::nnet3::Nnet>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::Nnet*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::Nnet>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::Nnet>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::Nnet&, py::PostConv);
// CLIF use `::kaldi::nnet3::NodeType` as NodeType
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::NodeType* output);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::NodeType&, py::PostConv);
// CLIF use `::kaldi::nnet3::ObjectiveType` as ObjectiveType
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ObjectiveType* output);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ObjectiveType&, py::PostConv);

} }  // namespace kaldi::nnet3

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_nnet_nnet")) Py_DECREF(m);
// CLIF init_module else goto err;
