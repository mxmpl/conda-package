//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/nnet-utils.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "nnet3/nnet-example-clifwrap.h"
#include "nnet3/nnet-computation-clifwrap.h"
#include "nnet3/nnet-nnet-clifwrap.h"
#include "nnet-utils-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __nnet__utils_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


// evaluate_computation_request(nnet:Nnet, request:ComputationRequest) -> list<list<bool>>
static PyObject* wrapEvaluateComputationRequest_as_evaluate_computation_request(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("nnet"),
      C("request"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:evaluate_computation_request", names, &a[0], &a[1])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("evaluate_computation_request", names[0], "::kaldi::nnet3::Nnet", a[0]);
  ::kaldi::nnet3::ComputationRequest* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("evaluate_computation_request", names[1], "::kaldi::nnet3::ComputationRequest", a[1]);
  ::std::vector< ::std::vector<bool> > ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::EvaluateComputationRequest(*arg1, *arg2, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_output_nodes(nnet:Nnet) -> int
static PyObject* wrapNumOutputNodes_as_num_output_nodes(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:num_output_nodes", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("num_output_nodes", names[0], "::kaldi::nnet3::Nnet", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::NumOutputNodes(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_input_nodes(nnet:Nnet) -> int
static PyObject* wrapNumInputNodes_as_num_input_nodes(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:num_input_nodes", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("num_input_nodes", names[0], "::kaldi::nnet3::Nnet", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::NumInputNodes(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// perturb_params(stddev:float, nnet:Nnet)
static PyObject* wrapPerturbParams_as_perturb_params(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("stddev"),
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:perturb_params", names, &a[0], &a[1])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("perturb_params", names[0], "float", a[0]);
  ::kaldi::nnet3::Nnet * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("perturb_params", names[1], "::kaldi::nnet3::Nnet *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::PerturbParams(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// dot_product(nnet1:Nnet, nnet2:Nnet) -> float
static PyObject* wrapDotProduct_as_dot_product(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("nnet1"),
      C("nnet2"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:dot_product", names, &a[0], &a[1])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("dot_product", names[0], "::kaldi::nnet3::Nnet", a[0]);
  ::kaldi::nnet3::Nnet* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("dot_product", names[1], "::kaldi::nnet3::Nnet", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::DotProduct(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// component_dot_products(nnet1:Nnet, nnet2:Nnet, dot_prod:VectorBase)
static PyObject* wrapComponentDotProducts_as_component_dot_products(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("nnet1"),
      C("nnet2"),
      C("dot_prod"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:component_dot_products", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("component_dot_products", names[0], "::kaldi::nnet3::Nnet", a[0]);
  ::kaldi::nnet3::Nnet* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("component_dot_products", names[1], "::kaldi::nnet3::Nnet", a[1]);
  ::kaldi::VectorBase<float> * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("component_dot_products", names[2], "::kaldi::VectorBase<float> *", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ComponentDotProducts(*arg1, *arg2, arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// print_vector_per_updatable_component(nnet:Nnet, vec:VectorBase) -> str
static PyObject* wrapPrintVectorPerUpdatableComponent_as_print_vector_per_updatable_component(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("nnet"),
      C("vec"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:print_vector_per_updatable_component", names, &a[0], &a[1])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("print_vector_per_updatable_component", names[0], "::kaldi::nnet3::Nnet", a[0]);
  ::kaldi::VectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("print_vector_per_updatable_component", names[1], "::kaldi::VectorBase<float>", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::PrintVectorPerUpdatableComponent(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// is_simple_nnet(nnet:Nnet) -> bool
static PyObject* wrapIsSimpleNnet_as_is_simple_nnet(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_simple_nnet", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_simple_nnet", names[0], "::kaldi::nnet3::Nnet", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::IsSimpleNnet(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// zero_component_stats(nnet:Nnet)
static PyObject* wrapZeroComponentStats_as_zero_component_stats(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:zero_component_stats", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Nnet * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("zero_component_stats", names[0], "::kaldi::nnet3::Nnet *", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ZeroComponentStats(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// compute_simple_nnet_context(nnet:Nnet) -> (left_context:int, right_context:int)
static PyObject* wrapComputeSimpleNnetContext_as_compute_simple_nnet_context(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:compute_simple_nnet_context", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_simple_nnet_context", names[0], "::kaldi::nnet3::Nnet", a[0]);
  int ret0{};
  int ret1{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ComputeSimpleNnetContext(*arg1, &ret0, &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// set_learning_rate(learning_rate:float, nnet:Nnet)
static PyObject* wrapSetLearningRate_as_set_learning_rate(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("learning_rate"),
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:set_learning_rate", names, &a[0], &a[1])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_learning_rate", names[0], "float", a[0]);
  ::kaldi::nnet3::Nnet * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("set_learning_rate", names[1], "::kaldi::nnet3::Nnet *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::SetLearningRate(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// scale_nnet(scale:float, nnet:Nnet)
static PyObject* wrapScaleNnet_as_scale_nnet(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("scale"),
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:scale_nnet", names, &a[0], &a[1])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("scale_nnet", names[0], "float", a[0]);
  ::kaldi::nnet3::Nnet * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("scale_nnet", names[1], "::kaldi::nnet3::Nnet *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ScaleNnet(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_nnet_as_gradient(nnet:Nnet)
static PyObject* wrapSetNnetAsGradient_as_set_nnet_as_gradient(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_nnet_as_gradient", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Nnet * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_nnet_as_gradient", names[0], "::kaldi::nnet3::Nnet *", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::SetNnetAsGradient(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// add_nnet(src:Nnet, alpha:float, dest:Nnet)
static PyObject* wrapAddNnet_as_add_nnet(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("src"),
      C("alpha"),
      C("dest"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:add_nnet", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add_nnet", names[0], "::kaldi::nnet3::Nnet", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("add_nnet", names[1], "float", a[1]);
  ::kaldi::nnet3::Nnet * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("add_nnet", names[2], "::kaldi::nnet3::Nnet *", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::AddNnet(*arg1, std::move(arg2), arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// add_nnet_components(src:Nnet, alphas:Vector, scale:float, dest:Nnet)
static PyObject* wrapAddNnetComponents_as_add_nnet_components(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("src"),
      C("alphas"),
      C("scale"),
      C("dest"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:add_nnet_components", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add_nnet_components", names[0], "::kaldi::nnet3::Nnet", a[0]);
  ::kaldi::Vector<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("add_nnet_components", names[1], "::kaldi::Vector<float>", a[1]);
  float arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("add_nnet_components", names[2], "float", a[2]);
  ::kaldi::nnet3::Nnet * arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("add_nnet_components", names[3], "::kaldi::nnet3::Nnet *", a[3]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::AddNnetComponents(*arg1, *arg2, std::move(arg3), arg4);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// nnet_is_recurrent(nnet:Nnet) -> bool
static PyObject* wrapNnetIsRecurrent_as_nnet_is_recurrent(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:nnet_is_recurrent", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("nnet_is_recurrent", names[0], "::kaldi::nnet3::Nnet", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::NnetIsRecurrent(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_parameters(src:Nnet) -> int
static PyObject* wrapNumParameters_as_num_parameters(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("src"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:num_parameters", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("num_parameters", names[0], "::kaldi::nnet3::Nnet", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::NumParameters(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// vectorize_nnet(src:Nnet, params:VectorBase)
static PyObject* wrapVectorizeNnet_as_vectorize_nnet(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("src"),
      C("params"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:vectorize_nnet", names, &a[0], &a[1])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("vectorize_nnet", names[0], "::kaldi::nnet3::Nnet", a[0]);
  ::kaldi::VectorBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("vectorize_nnet", names[1], "::kaldi::VectorBase<float> *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::VectorizeNnet(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// un_vectorize_nnet(params:VectorBase, dest:Nnet)
static PyObject* wrapUnVectorizeNnet_as_un_vectorize_nnet(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("params"),
      C("dest"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:un_vectorize_nnet", names, &a[0], &a[1])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("un_vectorize_nnet", names[0], "::kaldi::VectorBase<float>", a[0]);
  ::kaldi::nnet3::Nnet * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("un_vectorize_nnet", names[1], "::kaldi::nnet3::Nnet *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::UnVectorizeNnet(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// num_updatable_components(dest:Nnet) -> int
static PyObject* wrapNumUpdatableComponents_as_num_updatable_components(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("dest"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:num_updatable_components", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("num_updatable_components", names[0], "::kaldi::nnet3::Nnet", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::NumUpdatableComponents(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// freeze_natural_gradient(freeze:bool, nnet:Nnet)
static PyObject* wrapFreezeNaturalGradient_as_freeze_natural_gradient(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("freeze"),
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:freeze_natural_gradient", names, &a[0], &a[1])) return nullptr;
  bool arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("freeze_natural_gradient", names[0], "bool", a[0]);
  ::kaldi::nnet3::Nnet * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("freeze_natural_gradient", names[1], "::kaldi::nnet3::Nnet *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::FreezeNaturalGradient(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// convert_repeated_to_block_affine(nnet:Nnet)
static PyObject* wrapConvertRepeatedToBlockAffine_as_convert_repeated_to_block_affine(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:convert_repeated_to_block_affine", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Nnet * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("convert_repeated_to_block_affine", names[0], "::kaldi::nnet3::Nnet *", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ConvertRepeatedToBlockAffine(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// nnet_info(nnet:Nnet) -> str
static PyObject* wrapNnetInfo_as_nnet_info(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:nnet_info", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("nnet_info", names[0], "::kaldi::nnet3::Nnet", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::NnetInfo(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// set_dropout_proportion(dropout_proportion:float, nnet:Nnet)
static PyObject* wrapSetDropoutProportion_as_set_dropout_proportion(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("dropout_proportion"),
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:set_dropout_proportion", names, &a[0], &a[1])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_dropout_proportion", names[0], "float", a[0]);
  ::kaldi::nnet3::Nnet * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("set_dropout_proportion", names[1], "::kaldi::nnet3::Nnet *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::SetDropoutProportion(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// has_batchnorm(nnet:Nnet) -> bool
static PyObject* wrapHasBatchnorm_as_has_batchnorm(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:has_batchnorm", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("has_batchnorm", names[0], "::kaldi::nnet3::Nnet", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::HasBatchnorm(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// set_batchnorm_test_mode(test_mode:bool, nnet:Nnet)
static PyObject* wrapSetBatchnormTestMode_as_set_batchnorm_test_mode(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("test_mode"),
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:set_batchnorm_test_mode", names, &a[0], &a[1])) return nullptr;
  bool arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_batchnorm_test_mode", names[0], "bool", a[0]);
  ::kaldi::nnet3::Nnet * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("set_batchnorm_test_mode", names[1], "::kaldi::nnet3::Nnet *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::SetBatchnormTestMode(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// recompute_stats(egs:list<NnetExample>, nnet:Nnet)
static PyObject* wrapRecomputeStats_as_recompute_stats(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("egs"),
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:recompute_stats", names, &a[0], &a[1])) return nullptr;
  ::std::vector< ::kaldi::nnet3::NnetExample> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("recompute_stats", names[0], "::std::vector< ::kaldi::nnet3::NnetExample>", a[0]);
  ::kaldi::nnet3::Nnet * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("recompute_stats", names[1], "::kaldi::nnet3::Nnet *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::RecomputeStats(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_dropout_test_mode(test_mode:bool, nnet:Nnet)
static PyObject* wrapSetDropoutTestMode_as_set_dropout_test_mode(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("test_mode"),
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:set_dropout_test_mode", names, &a[0], &a[1])) return nullptr;
  bool arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_dropout_test_mode", names[0], "bool", a[0]);
  ::kaldi::nnet3::Nnet * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("set_dropout_test_mode", names[1], "::kaldi::nnet3::Nnet *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::SetDropoutTestMode(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// reset_generators(nnet:Nnet)
static PyObject* wrapResetGenerators_as_reset_generators(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:reset_generators", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Nnet * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("reset_generators", names[0], "::kaldi::nnet3::Nnet *", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ResetGenerators(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// find_orphan_components(nnet:Nnet) -> list<int>
static PyObject* wrapFindOrphanComponents_as_find_orphan_components(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:find_orphan_components", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("find_orphan_components", names[0], "::kaldi::nnet3::Nnet", a[0]);
  ::std::vector< ::int32> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::FindOrphanComponents(*arg1, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// find_orphan_nodes(nnet:Nnet) -> list<int>
static PyObject* wrapFindOrphanNodes_as_find_orphan_nodes(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:find_orphan_nodes", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("find_orphan_nodes", names[0], "::kaldi::nnet3::Nnet", a[0]);
  ::std::vector< ::int32> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::FindOrphanNodes(*arg1, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

namespace pyCollapseModelConfig {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::CollapseModelConfig> cpp;
};
static ::kaldi::nnet3::CollapseModelConfig* ThisPtr(PyObject*);

static PyObject* get_collapse_dropout(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->collapse_dropout, {});
}

static int set_collapse_dropout(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the collapse_dropout attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->collapse_dropout)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for collapse_dropout:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_collapse_batchnorm(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->collapse_batchnorm, {});
}

static int set_collapse_batchnorm(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the collapse_batchnorm attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->collapse_batchnorm)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for collapse_batchnorm:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_collapse_affine(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->collapse_affine, {});
}

static int set_collapse_affine(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the collapse_affine attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->collapse_affine)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for collapse_affine:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_collapse_scale(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->collapse_scale, {});
}

static int set_collapse_scale(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the collapse_scale attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->collapse_scale)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for collapse_scale:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("collapse_dropout"), get_collapse_dropout, set_collapse_dropout, C("C++ bool CollapseModelConfig.collapse_dropout")},
  {C("collapse_batchnorm"), get_collapse_batchnorm, set_collapse_batchnorm, C("C++ bool CollapseModelConfig.collapse_batchnorm")},
  {C("collapse_affine"), get_collapse_affine, set_collapse_affine, C("C++ bool CollapseModelConfig.collapse_affine")},
  {C("collapse_scale"), get_collapse_scale, set_collapse_scale, C("C++ bool CollapseModelConfig.collapse_scale")},
  {}
};

// CollapseModelConfig __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// CollapseModelConfig __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// CollapseModelConfig __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_utils.CollapseModelConfig",   // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::CollapseModelConfig", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  nullptr,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "CollapseModelConfig takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::CollapseModelConfig>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::CollapseModelConfig* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_CollapseModelConfig"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::CollapseModelConfig"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::CollapseModelConfig* c = static_cast<::kaldi::nnet3::CollapseModelConfig*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::CollapseModelConfig*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyCollapseModelConfig

// collapse_model(config:CollapseModelConfig, nnet:Nnet)
static PyObject* wrapCollapseModel_as_collapse_model(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("config"),
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:collapse_model", names, &a[0], &a[1])) return nullptr;
  ::kaldi::nnet3::CollapseModelConfig* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("collapse_model", names[0], "::kaldi::nnet3::CollapseModelConfig", a[0]);
  ::kaldi::nnet3::Nnet * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("collapse_model", names[1], "::kaldi::nnet3::Nnet *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::CollapseModel(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read_edit_config(config_file:istream, nnet:Nnet)
static PyObject* wrapReadEditConfig_as_read_edit_config(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("config_file"),
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read_edit_config", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read_edit_config", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  ::kaldi::nnet3::Nnet * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read_edit_config", names[1], "::kaldi::nnet3::Nnet *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ReadEditConfig(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// update_nnet_with_max_change(delta_nnet:Nnet, max_param_change:float, max_change_scale:float, scale:float, nnet:Nnet) -> (suc:bool, num_max_change_per_component_applied:list<int>, num_max_change_global_applied:int)
static PyObject* wrapUpdateNnetWithMaxChange_as_update_nnet_with_max_change(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[5];
  char* names[] = {
      C("delta_nnet"),
      C("max_param_change"),
      C("max_change_scale"),
      C("scale"),
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOO:update_nnet_with_max_change", names, &a[0], &a[1], &a[2], &a[3], &a[4])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("update_nnet_with_max_change", names[0], "::kaldi::nnet3::Nnet", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("update_nnet_with_max_change", names[1], "float", a[1]);
  float arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("update_nnet_with_max_change", names[2], "float", a[2]);
  float arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("update_nnet_with_max_change", names[3], "float", a[3]);
  ::kaldi::nnet3::Nnet * arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("update_nnet_with_max_change", names[4], "::kaldi::nnet3::Nnet *", a[4]);
  ::std::vector< ::int32> ret1{};
  int ret2{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::UpdateNnetWithMaxChange(*arg1, std::move(arg2), std::move(arg3), std::move(arg4), arg5, &ret1, &ret2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(3);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  if ((p=Clif_PyObjFrom(std::move(ret2), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 2, p);
  return result_tuple;
}

// apply_l2_regularization(nnet:Nnet, l2_regularize_scale:float, delta_nnet:Nnet)
static PyObject* wrapApplyL2Regularization_as_apply_l2_regularization(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("nnet"),
      C("l2_regularize_scale"),
      C("delta_nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:apply_l2_regularization", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("apply_l2_regularization", names[0], "::kaldi::nnet3::Nnet", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("apply_l2_regularization", names[1], "float", a[1]);
  ::kaldi::nnet3::Nnet * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("apply_l2_regularization", names[2], "::kaldi::nnet3::Nnet *", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ApplyL2Regularization(*arg1, std::move(arg2), arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// scale_batchnorm_stats(batchnorm_stats_scale:float, nnet:Nnet)
static PyObject* wrapScaleBatchnormStats_as_scale_batchnorm_stats(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("batchnorm_stats_scale"),
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:scale_batchnorm_stats", names, &a[0], &a[1])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("scale_batchnorm_stats", names[0], "float", a[0]);
  ::kaldi::nnet3::Nnet * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("scale_batchnorm_stats", names[1], "::kaldi::nnet3::Nnet *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ScaleBatchnormStats(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// constrain_orthonormal(nnet:Nnet)
static PyObject* wrapConstrainOrthonormal_as_constrain_orthonormal(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:constrain_orthonormal", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Nnet * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("constrain_orthonormal", names[0], "::kaldi::nnet3::Nnet *", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ConstrainOrthonormal(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// get_num_n_values(io_vec:list<NnetIo>, exhaustive:bool) -> int
static PyObject* wrapGetNumNvalues_as_get_num_n_values(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("io_vec"),
      C("exhaustive"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_num_n_values", names, &a[0], &a[1])) return nullptr;
  ::std::vector< ::kaldi::nnet3::NnetIo> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_num_n_values", names[0], "::std::vector< ::kaldi::nnet3::NnetIo>", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_num_n_values", names[1], "bool", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::GetNumNvalues(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("evaluate_computation_request"), (PyCFunction)wrapEvaluateComputationRequest_as_evaluate_computation_request, METH_VARARGS | METH_KEYWORDS, C("evaluate_computation_request(nnet:Nnet, request:ComputationRequest) -> list<list<bool>>\n  Calls C++ function\n  void ::kaldi::nnet3::EvaluateComputationRequest(::kaldi::nnet3::Nnet, ::kaldi::nnet3::ComputationRequest, ::std::vector< ::std::vector<bool> >*)")},
  {C("num_output_nodes"), (PyCFunction)wrapNumOutputNodes_as_num_output_nodes, METH_VARARGS | METH_KEYWORDS, C("num_output_nodes(nnet:Nnet) -> int\n  Calls C++ function\n  int ::kaldi::nnet3::NumOutputNodes(::kaldi::nnet3::Nnet)")},
  {C("num_input_nodes"), (PyCFunction)wrapNumInputNodes_as_num_input_nodes, METH_VARARGS | METH_KEYWORDS, C("num_input_nodes(nnet:Nnet) -> int\n  Calls C++ function\n  int ::kaldi::nnet3::NumInputNodes(::kaldi::nnet3::Nnet)")},
  {C("perturb_params"), (PyCFunction)wrapPerturbParams_as_perturb_params, METH_VARARGS | METH_KEYWORDS, C("perturb_params(stddev:float, nnet:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::PerturbParams(float, ::kaldi::nnet3::Nnet *)")},
  {C("dot_product"), (PyCFunction)wrapDotProduct_as_dot_product, METH_VARARGS | METH_KEYWORDS, C("dot_product(nnet1:Nnet, nnet2:Nnet) -> float\n  Calls C++ function\n  float ::kaldi::nnet3::DotProduct(::kaldi::nnet3::Nnet, ::kaldi::nnet3::Nnet)")},
  {C("component_dot_products"), (PyCFunction)wrapComponentDotProducts_as_component_dot_products, METH_VARARGS | METH_KEYWORDS, C("component_dot_products(nnet1:Nnet, nnet2:Nnet, dot_prod:VectorBase)\n  Calls C++ function\n  void ::kaldi::nnet3::ComponentDotProducts(::kaldi::nnet3::Nnet, ::kaldi::nnet3::Nnet, ::kaldi::VectorBase<float> *)")},
  {C("print_vector_per_updatable_component"), (PyCFunction)wrapPrintVectorPerUpdatableComponent_as_print_vector_per_updatable_component, METH_VARARGS | METH_KEYWORDS, C("print_vector_per_updatable_component(nnet:Nnet, vec:VectorBase) -> str\n  Calls C++ function\n  ::std::string ::kaldi::nnet3::PrintVectorPerUpdatableComponent(::kaldi::nnet3::Nnet, ::kaldi::VectorBase<float>)")},
  {C("is_simple_nnet"), (PyCFunction)wrapIsSimpleNnet_as_is_simple_nnet, METH_VARARGS | METH_KEYWORDS, C("is_simple_nnet(nnet:Nnet) -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::IsSimpleNnet(::kaldi::nnet3::Nnet)")},
  {C("zero_component_stats"), (PyCFunction)wrapZeroComponentStats_as_zero_component_stats, METH_VARARGS | METH_KEYWORDS, C("zero_component_stats(nnet:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::ZeroComponentStats(::kaldi::nnet3::Nnet *)")},
  {C("compute_simple_nnet_context"), (PyCFunction)wrapComputeSimpleNnetContext_as_compute_simple_nnet_context, METH_VARARGS | METH_KEYWORDS, C("compute_simple_nnet_context(nnet:Nnet) -> (left_context:int, right_context:int)\n  Calls C++ function\n  void ::kaldi::nnet3::ComputeSimpleNnetContext(::kaldi::nnet3::Nnet, int*, int*)")},
  {C("set_learning_rate"), (PyCFunction)wrapSetLearningRate_as_set_learning_rate, METH_VARARGS | METH_KEYWORDS, C("set_learning_rate(learning_rate:float, nnet:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::SetLearningRate(float, ::kaldi::nnet3::Nnet *)")},
  {C("scale_nnet"), (PyCFunction)wrapScaleNnet_as_scale_nnet, METH_VARARGS | METH_KEYWORDS, C("scale_nnet(scale:float, nnet:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::ScaleNnet(float, ::kaldi::nnet3::Nnet *)")},
  {C("set_nnet_as_gradient"), (PyCFunction)wrapSetNnetAsGradient_as_set_nnet_as_gradient, METH_VARARGS | METH_KEYWORDS, C("set_nnet_as_gradient(nnet:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::SetNnetAsGradient(::kaldi::nnet3::Nnet *)")},
  {C("add_nnet"), (PyCFunction)wrapAddNnet_as_add_nnet, METH_VARARGS | METH_KEYWORDS, C("add_nnet(src:Nnet, alpha:float, dest:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::AddNnet(::kaldi::nnet3::Nnet, float, ::kaldi::nnet3::Nnet *)")},
  {C("add_nnet_components"), (PyCFunction)wrapAddNnetComponents_as_add_nnet_components, METH_VARARGS | METH_KEYWORDS, C("add_nnet_components(src:Nnet, alphas:Vector, scale:float, dest:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::AddNnetComponents(::kaldi::nnet3::Nnet, ::kaldi::Vector<float>, float, ::kaldi::nnet3::Nnet *)")},
  {C("nnet_is_recurrent"), (PyCFunction)wrapNnetIsRecurrent_as_nnet_is_recurrent, METH_VARARGS | METH_KEYWORDS, C("nnet_is_recurrent(nnet:Nnet) -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::NnetIsRecurrent(::kaldi::nnet3::Nnet)")},
  {C("num_parameters"), (PyCFunction)wrapNumParameters_as_num_parameters, METH_VARARGS | METH_KEYWORDS, C("num_parameters(src:Nnet) -> int\n  Calls C++ function\n  int ::kaldi::nnet3::NumParameters(::kaldi::nnet3::Nnet)")},
  {C("vectorize_nnet"), (PyCFunction)wrapVectorizeNnet_as_vectorize_nnet, METH_VARARGS | METH_KEYWORDS, C("vectorize_nnet(src:Nnet, params:VectorBase)\n  Calls C++ function\n  void ::kaldi::nnet3::VectorizeNnet(::kaldi::nnet3::Nnet, ::kaldi::VectorBase<float> *)")},
  {C("un_vectorize_nnet"), (PyCFunction)wrapUnVectorizeNnet_as_un_vectorize_nnet, METH_VARARGS | METH_KEYWORDS, C("un_vectorize_nnet(params:VectorBase, dest:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::UnVectorizeNnet(::kaldi::VectorBase<float>, ::kaldi::nnet3::Nnet *)")},
  {C("num_updatable_components"), (PyCFunction)wrapNumUpdatableComponents_as_num_updatable_components, METH_VARARGS | METH_KEYWORDS, C("num_updatable_components(dest:Nnet) -> int\n  Calls C++ function\n  int ::kaldi::nnet3::NumUpdatableComponents(::kaldi::nnet3::Nnet)")},
  {C("freeze_natural_gradient"), (PyCFunction)wrapFreezeNaturalGradient_as_freeze_natural_gradient, METH_VARARGS | METH_KEYWORDS, C("freeze_natural_gradient(freeze:bool, nnet:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::FreezeNaturalGradient(bool, ::kaldi::nnet3::Nnet *)")},
  {C("convert_repeated_to_block_affine"), (PyCFunction)wrapConvertRepeatedToBlockAffine_as_convert_repeated_to_block_affine, METH_VARARGS | METH_KEYWORDS, C("convert_repeated_to_block_affine(nnet:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::ConvertRepeatedToBlockAffine(::kaldi::nnet3::Nnet *)")},
  {C("nnet_info"), (PyCFunction)wrapNnetInfo_as_nnet_info, METH_VARARGS | METH_KEYWORDS, C("nnet_info(nnet:Nnet) -> str\n  Calls C++ function\n  ::std::string ::kaldi::nnet3::NnetInfo(::kaldi::nnet3::Nnet)")},
  {C("set_dropout_proportion"), (PyCFunction)wrapSetDropoutProportion_as_set_dropout_proportion, METH_VARARGS | METH_KEYWORDS, C("set_dropout_proportion(dropout_proportion:float, nnet:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::SetDropoutProportion(float, ::kaldi::nnet3::Nnet *)")},
  {C("has_batchnorm"), (PyCFunction)wrapHasBatchnorm_as_has_batchnorm, METH_VARARGS | METH_KEYWORDS, C("has_batchnorm(nnet:Nnet) -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::HasBatchnorm(::kaldi::nnet3::Nnet)")},
  {C("set_batchnorm_test_mode"), (PyCFunction)wrapSetBatchnormTestMode_as_set_batchnorm_test_mode, METH_VARARGS | METH_KEYWORDS, C("set_batchnorm_test_mode(test_mode:bool, nnet:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::SetBatchnormTestMode(bool, ::kaldi::nnet3::Nnet *)")},
  {C("recompute_stats"), (PyCFunction)wrapRecomputeStats_as_recompute_stats, METH_VARARGS | METH_KEYWORDS, C("recompute_stats(egs:list<NnetExample>, nnet:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::RecomputeStats(::std::vector< ::kaldi::nnet3::NnetExample>, ::kaldi::nnet3::Nnet *)")},
  {C("set_dropout_test_mode"), (PyCFunction)wrapSetDropoutTestMode_as_set_dropout_test_mode, METH_VARARGS | METH_KEYWORDS, C("set_dropout_test_mode(test_mode:bool, nnet:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::SetDropoutTestMode(bool, ::kaldi::nnet3::Nnet *)")},
  {C("reset_generators"), (PyCFunction)wrapResetGenerators_as_reset_generators, METH_VARARGS | METH_KEYWORDS, C("reset_generators(nnet:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::ResetGenerators(::kaldi::nnet3::Nnet *)")},
  {C("find_orphan_components"), (PyCFunction)wrapFindOrphanComponents_as_find_orphan_components, METH_VARARGS | METH_KEYWORDS, C("find_orphan_components(nnet:Nnet) -> list<int>\n  Calls C++ function\n  void ::kaldi::nnet3::FindOrphanComponents(::kaldi::nnet3::Nnet, ::std::vector< ::int32>*)")},
  {C("find_orphan_nodes"), (PyCFunction)wrapFindOrphanNodes_as_find_orphan_nodes, METH_VARARGS | METH_KEYWORDS, C("find_orphan_nodes(nnet:Nnet) -> list<int>\n  Calls C++ function\n  void ::kaldi::nnet3::FindOrphanNodes(::kaldi::nnet3::Nnet, ::std::vector< ::int32>*)")},
  {C("collapse_model"), (PyCFunction)wrapCollapseModel_as_collapse_model, METH_VARARGS | METH_KEYWORDS, C("collapse_model(config:CollapseModelConfig, nnet:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::CollapseModel(::kaldi::nnet3::CollapseModelConfig, ::kaldi::nnet3::Nnet *)")},
  {C("read_edit_config"), (PyCFunction)wrapReadEditConfig_as_read_edit_config, METH_VARARGS | METH_KEYWORDS, C("read_edit_config(config_file:istream, nnet:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::ReadEditConfig(::std::basic_istream<char, ::std::char_traits<char> >, ::kaldi::nnet3::Nnet *)")},
  {C("update_nnet_with_max_change"), (PyCFunction)wrapUpdateNnetWithMaxChange_as_update_nnet_with_max_change, METH_VARARGS | METH_KEYWORDS, C("update_nnet_with_max_change(delta_nnet:Nnet, max_param_change:float, max_change_scale:float, scale:float, nnet:Nnet) -> (suc:bool, num_max_change_per_component_applied:list<int>, num_max_change_global_applied:int)\n  Calls C++ function\n  bool ::kaldi::nnet3::UpdateNnetWithMaxChange(::kaldi::nnet3::Nnet, float, float, float, ::kaldi::nnet3::Nnet *, ::std::vector< ::int32>*, int*)")},
  {C("apply_l2_regularization"), (PyCFunction)wrapApplyL2Regularization_as_apply_l2_regularization, METH_VARARGS | METH_KEYWORDS, C("apply_l2_regularization(nnet:Nnet, l2_regularize_scale:float, delta_nnet:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::ApplyL2Regularization(::kaldi::nnet3::Nnet, float, ::kaldi::nnet3::Nnet *)")},
  {C("scale_batchnorm_stats"), (PyCFunction)wrapScaleBatchnormStats_as_scale_batchnorm_stats, METH_VARARGS | METH_KEYWORDS, C("scale_batchnorm_stats(batchnorm_stats_scale:float, nnet:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::ScaleBatchnormStats(float, ::kaldi::nnet3::Nnet *)")},
  {C("constrain_orthonormal"), (PyCFunction)wrapConstrainOrthonormal_as_constrain_orthonormal, METH_VARARGS | METH_KEYWORDS, C("constrain_orthonormal(nnet:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::ConstrainOrthonormal(::kaldi::nnet3::Nnet *)")},
  {C("get_num_n_values"), (PyCFunction)wrapGetNumNvalues_as_get_num_n_values, METH_VARARGS | METH_KEYWORDS, C("get_num_n_values(io_vec:list<NnetIo>, exhaustive:bool) -> int\n  Calls C++ function\n  int ::kaldi::nnet3::GetNumNvalues(::std::vector< ::kaldi::nnet3::NnetIo>, bool)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyCollapseModelConfig::wrapper_Type) < 0) return false;
  Py_INCREF(&pyCollapseModelConfig::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_nnet_utils",  // module name
  "CLIF-generated module for nnet3/nnet-utils.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_example")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_computation")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_nnet")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "CollapseModelConfig", reinterpret_cast<PyObject*>(&pyCollapseModelConfig::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __nnet__utils_clifwrap

namespace kaldi { namespace nnet3 {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// CollapseModelConfig to/from ::kaldi::nnet3::CollapseModelConfig conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::CollapseModelConfig** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::CollapseModelConfig* cpp = __nnet__utils_clifwrap::pyCollapseModelConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::CollapseModelConfig>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::CollapseModelConfig* cpp = __nnet__utils_clifwrap::pyCollapseModelConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__utils_clifwrap::pyCollapseModelConfig::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::CollapseModelConfig>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::CollapseModelConfig* cpp = __nnet__utils_clifwrap::pyCollapseModelConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__utils_clifwrap::pyCollapseModelConfig::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert CollapseModelConfig instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::CollapseModelConfig* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::CollapseModelConfig* cpp = __nnet__utils_clifwrap::pyCollapseModelConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::CollapseModelConfig>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::CollapseModelConfig* cpp = __nnet__utils_clifwrap::pyCollapseModelConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::CollapseModelConfig* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__utils_clifwrap::pyCollapseModelConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__utils_clifwrap::pyCollapseModelConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::CollapseModelConfig>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::CollapseModelConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__utils_clifwrap::pyCollapseModelConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__utils_clifwrap::pyCollapseModelConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::CollapseModelConfig>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::CollapseModelConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__utils_clifwrap::pyCollapseModelConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__utils_clifwrap::pyCollapseModelConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::CollapseModelConfig>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::CollapseModelConfig& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__utils_clifwrap::pyCollapseModelConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__utils_clifwrap::pyCollapseModelConfig::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::CollapseModelConfig>(c);
  return py;
}

} }  // namespace kaldi::nnet3
