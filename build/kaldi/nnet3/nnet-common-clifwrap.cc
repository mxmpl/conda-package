//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/nnet-common.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "nnet-common-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __nnet__common_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyIndex {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::Index> cpp;
};
static ::kaldi::nnet3::Index* ThisPtr(PyObject*);

static PyObject* get_n(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->n, {});
}

static int set_n(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the n attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->n)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for n:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_t(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->t, {});
}

static int set_t(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the t attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->t)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for t:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_x(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->x, {});
}

static int set_x(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the x attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->x)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for x:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// @classmethod new(n:int, t:int, x:int=default) -> Index
static PyObject* wrapIndex_as_new(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("n"),
      C("t"),
      C("x"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:new", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("new", names[1], "int", a[1]);
  int arg3;
  if (nargs > 2) {
    if (!a[2]) arg3 = (int)0;
    else if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("new", names[2], "int", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::nnet3::Index> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ret0 = ::gtl::MakeUnique<::kaldi::nnet3::Index>(std::move(arg1), std::move(arg2)); break;
  case 3:
    ret0 = ::gtl::MakeUnique<::kaldi::nnet3::Index>(std::move(arg1), std::move(arg2), std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __eq__(other:Index) -> bool
static PyObject* wrap__eq__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__eq__", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Index* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__eq__", names[0], "::kaldi::nnet3::Index", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Index* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->operator==(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __ne__(other:Index) -> bool
static PyObject* wrap__ne__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__ne__", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Index* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__ne__", names[0], "::kaldi::nnet3::Index", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Index* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->operator!=(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __lt__(other:Index) -> bool
static PyObject* wrap__lt__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__lt__", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Index* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__lt__", names[0], "::kaldi::nnet3::Index", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Index* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->operator<(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __add__(other:Index) -> Index
static PyObject* wrap__add__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__add__", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Index* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__add__", names[0], "::kaldi::nnet3::Index", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Index* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::nnet3::Index ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->operator+(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __iadd__(other:Index)
static PyObject* wrap__iadd__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__iadd__", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Index* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__iadd__", names[0], "::kaldi::nnet3::Index", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Index* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->operator+=(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::nnet3::Index* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(is:istream, binary:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::nnet3::Index* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("n"), get_n, set_n, C("C++ ::int32 Index.n")},
  {C("t"), get_t, set_t, C("C++ ::int32 Index.t")},
  {C("x"), get_x, set_x, C("C++ ::int32 Index.x")},
  {}
};

PyObject* slot_richcmp(PyObject* self, PyObject* other, int op) {
  switch (op) {
    case Py_NE: return slot::adapter<wrap__ne__>(self, other);
    case Py_EQ: return slot::adapter<wrap__eq__>(self, other);
    case Py_LT: return slot::adapter<wrap__lt__>(self, other);
    default: Py_RETURN_NOTIMPLEMENTED;
  }
}

PyNumberMethods AsNumber = {
  slot::adapter<wrap__add__, PyObject*>, // nb_add
  nullptr,                             // nb_subtract
  nullptr,                             // nb_multiply
  nullptr,                             // nb_remainder
  nullptr,                             // nb_divmod
  nullptr,                             // nb_power
  nullptr,                             // nb_negative
  nullptr,                             // nb_positive
  nullptr,                             // nb_absolute
  nullptr,                             // nb_bool
  nullptr,                             // nb_invert
  nullptr,                             // nb_lshift
  nullptr,                             // nb_rshift
  nullptr,                             // nb_and
  nullptr,                             // nb_xor
  nullptr,                             // nb_or
  nullptr,                             // nb_int
  nullptr,                             // nb_reserved
  nullptr,                             // nb_float
  slot::adapter<wrap__iadd__, PyObject*>, // nb_inplace_add
  nullptr,                             // nb_inplace_subtract
  nullptr,                             // nb_inplace_multiply
  nullptr,                             // nb_inplace_remainder
  nullptr,                             // nb_inplace_power
  nullptr,                             // nb_inplace_lshift
  nullptr,                             // nb_inplace_rshift
  nullptr,                             // nb_inplace_and
  nullptr,                             // nb_inplace_xor
  nullptr,                             // nb_inplace_or
  nullptr,                             // nb_floor_divide
  nullptr,                             // nb_true_divide
  nullptr,                             // nb_inplace_floor_divide
  nullptr,                             // nb_inplace_true_divide
  nullptr,                             // nb_index
  nullptr,                             // nb_matrix_multiply
  nullptr,                             // nb_inplace_matrix_multiply
};

PySequenceMethods AsSequence = {
  nullptr,                             // sq_length
  slot::adapter<wrap__add__, PyObject*>, // sq_concat
  nullptr,                             // sq_repeat
  nullptr,                             // sq_item
  nullptr,                             // was_sq_slice
  nullptr,                             // sq_ass_item
  nullptr,                             // was_sq_ass_slice
  nullptr,                             // sq_contains
  slot::adapter<wrap__iadd__, PyObject*>, // sq_inplace_concat
  nullptr,                             // sq_inplace_repeat
};

static PyMethodDef Methods[] = {
  {C("new"), (PyCFunction)wrapIndex_as_new, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new(n:int, t:int, x:int=default) -> Index\n  Calls C++ function\n  std::unique_ptr<::kaldi::nnet3::Index> ::kaldi::nnet3::Index::Index(int, int, int)")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::nnet3::Index::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool)\n  Calls C++ function\n  void ::kaldi::nnet3::Index::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool)")},
  {}
};

// Index __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// Index __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// Index __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_common.Index",                // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  &AsNumber,                           // tp_as_number
  &AsSequence,                         // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::Index", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  slot_richcmp,                        // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "Index takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::Index>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::Index* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_Index"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::Index"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::Index* c = static_cast<::kaldi::nnet3::Index*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::Index*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyIndex

// write_index_vector(os:ostream, binary:bool, vec:list<Index>)
static PyObject* wrapWriteIndexVector_as_write_index_vector(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("os"),
      C("binary"),
      C("vec"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:write_index_vector", names, &a[0], &a[1], &a[2])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write_index_vector", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write_index_vector", names[1], "bool", a[1]);
  ::std::vector< ::kaldi::nnet3::Index> arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("write_index_vector", names[2], "::std::vector< ::kaldi::nnet3::Index>", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::WriteIndexVector(*arg1, std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read_index_vector(is:istream, binary:bool) -> list<Index>
static PyObject* wrapReadIndexVector_as_read_index_vector(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read_index_vector", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read_index_vector", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read_index_vector", names[1], "bool", a[1]);
  ::std::vector< ::kaldi::nnet3::Index> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ReadIndexVector(*arg1, std::move(arg2), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// print_cindex(os:ostream, cindex:tuple<int, Index>, node_names:list<str>)
static PyObject* wrapPrintCindex_as_print_cindex(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("os"),
      C("cindex"),
      C("node_names"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:print_cindex", names, &a[0], &a[1], &a[2])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("print_cindex", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  ::kaldi::nnet3::Cindex arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("print_cindex", names[1], "::kaldi::nnet3::Cindex", a[1]);
  ::std::vector< ::std::string> arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("print_cindex", names[2], "::std::vector< ::std::string>", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::PrintCindex(*arg1, std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// print_indexes(os:ostream, indexes:list<Index>)
static PyObject* wrapPrintIndexes_as_print_indexes(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("indexes"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:print_indexes", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("print_indexes", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  ::std::vector< ::kaldi::nnet3::Index> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("print_indexes", names[1], "::std::vector< ::kaldi::nnet3::Index>", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::PrintIndexes(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// print_cindexes(os:ostream, cindexes:list<tuple<int, Index>>, node_names:list<str>)
static PyObject* wrapPrintCindexes_as_print_cindexes(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("os"),
      C("cindexes"),
      C("node_names"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:print_cindexes", names, &a[0], &a[1], &a[2])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("print_cindexes", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  ::std::vector< ::kaldi::nnet3::Cindex> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("print_cindexes", names[1], "::std::vector< ::kaldi::nnet3::Cindex>", a[1]);
  ::std::vector< ::std::string> arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("print_cindexes", names[2], "::std::vector< ::std::string>", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::PrintCindexes(*arg1, std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// append_cindexes(node:int, indexes:list<Index>) -> list<tuple<int, Index>>
static PyObject* wrapAppendCindexes_as_append_cindexes(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("node"),
      C("indexes"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:append_cindexes", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("append_cindexes", names[0], "int", a[0]);
  ::std::vector< ::kaldi::nnet3::Index> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("append_cindexes", names[1], "::std::vector< ::kaldi::nnet3::Index>", a[1]);
  ::std::vector< ::kaldi::nnet3::Cindex> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::AppendCindexes(std::move(arg1), std::move(arg2), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// write_cindex_vector(os:ostream, binary:bool, vec:list<tuple<int, Index>>)
static PyObject* wrapWriteCindexVector_as_write_cindex_vector(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("os"),
      C("binary"),
      C("vec"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:write_cindex_vector", names, &a[0], &a[1], &a[2])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write_cindex_vector", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write_cindex_vector", names[1], "bool", a[1]);
  ::std::vector< ::kaldi::nnet3::Cindex> arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("write_cindex_vector", names[2], "::std::vector< ::kaldi::nnet3::Cindex>", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::WriteCindexVector(*arg1, std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read_cindex_vector(is:istream, binary:bool) -> list<tuple<int, Index>>
static PyObject* wrapReadCindexVector_as_read_cindex_vector(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read_cindex_vector", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read_cindex_vector", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read_cindex_vector", names[1], "bool", a[1]);
  ::std::vector< ::kaldi::nnet3::Cindex> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ReadCindexVector(*arg1, std::move(arg2), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// print_integer_vector(os:ostream, ints:list<int>)
static PyObject* wrapPrintIntegerVector_as_print_integer_vector(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("ints"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:print_integer_vector", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("print_integer_vector", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  ::std::vector< ::int32> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("print_integer_vector", names[1], "::std::vector< ::int32>", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::PrintIntegerVector(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("write_index_vector"), (PyCFunction)wrapWriteIndexVector_as_write_index_vector, METH_VARARGS | METH_KEYWORDS, C("write_index_vector(os:ostream, binary:bool, vec:list<Index>)\n  Calls C++ function\n  void ::kaldi::nnet3::WriteIndexVector(::std::basic_ostream<char, ::std::char_traits<char> >, bool, ::std::vector< ::kaldi::nnet3::Index>)")},
  {C("read_index_vector"), (PyCFunction)wrapReadIndexVector_as_read_index_vector, METH_VARARGS | METH_KEYWORDS, C("read_index_vector(is:istream, binary:bool) -> list<Index>\n  Calls C++ function\n  void ::kaldi::nnet3::ReadIndexVector(::std::basic_istream<char, ::std::char_traits<char> >, bool, ::std::vector< ::kaldi::nnet3::Index>*)")},
  {C("print_cindex"), (PyCFunction)wrapPrintCindex_as_print_cindex, METH_VARARGS | METH_KEYWORDS, C("print_cindex(os:ostream, cindex:tuple<int, Index>, node_names:list<str>)\n  Calls C++ function\n  void ::kaldi::nnet3::PrintCindex(::std::basic_ostream<char, ::std::char_traits<char> >, ::kaldi::nnet3::Cindex, ::std::vector< ::std::string>)")},
  {C("print_indexes"), (PyCFunction)wrapPrintIndexes_as_print_indexes, METH_VARARGS | METH_KEYWORDS, C("print_indexes(os:ostream, indexes:list<Index>)\n  Calls C++ function\n  void ::kaldi::nnet3::PrintIndexes(::std::basic_ostream<char, ::std::char_traits<char> >, ::std::vector< ::kaldi::nnet3::Index>)")},
  {C("print_cindexes"), (PyCFunction)wrapPrintCindexes_as_print_cindexes, METH_VARARGS | METH_KEYWORDS, C("print_cindexes(os:ostream, cindexes:list<tuple<int, Index>>, node_names:list<str>)\n  Calls C++ function\n  void ::kaldi::nnet3::PrintCindexes(::std::basic_ostream<char, ::std::char_traits<char> >, ::std::vector< ::kaldi::nnet3::Cindex>, ::std::vector< ::std::string>)")},
  {C("append_cindexes"), (PyCFunction)wrapAppendCindexes_as_append_cindexes, METH_VARARGS | METH_KEYWORDS, C("append_cindexes(node:int, indexes:list<Index>) -> list<tuple<int, Index>>\n  Calls C++ function\n  void ::kaldi::nnet3::AppendCindexes(int, ::std::vector< ::kaldi::nnet3::Index>, ::std::vector< ::kaldi::nnet3::Cindex>*)")},
  {C("write_cindex_vector"), (PyCFunction)wrapWriteCindexVector_as_write_cindex_vector, METH_VARARGS | METH_KEYWORDS, C("write_cindex_vector(os:ostream, binary:bool, vec:list<tuple<int, Index>>)\n  Calls C++ function\n  void ::kaldi::nnet3::WriteCindexVector(::std::basic_ostream<char, ::std::char_traits<char> >, bool, ::std::vector< ::kaldi::nnet3::Cindex>)")},
  {C("read_cindex_vector"), (PyCFunction)wrapReadCindexVector_as_read_cindex_vector, METH_VARARGS | METH_KEYWORDS, C("read_cindex_vector(is:istream, binary:bool) -> list<tuple<int, Index>>\n  Calls C++ function\n  void ::kaldi::nnet3::ReadCindexVector(::std::basic_istream<char, ::std::char_traits<char> >, bool, ::std::vector< ::kaldi::nnet3::Cindex>*)")},
  {C("print_integer_vector"), (PyCFunction)wrapPrintIntegerVector_as_print_integer_vector, METH_VARARGS | METH_KEYWORDS, C("print_integer_vector(os:ostream, ints:list<int>)\n  Calls C++ function\n  void ::kaldi::nnet3::PrintIntegerVector(::std::basic_ostream<char, ::std::char_traits<char> >, ::std::vector< ::int32>)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyIndex::wrapper_Type) < 0) return false;
  Py_INCREF(&pyIndex::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_nnet_common",  // module name
  "CLIF-generated module for nnet3/nnet-common.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "Index", reinterpret_cast<PyObject*>(&pyIndex::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "NO_TIME", Clif_PyObjFrom(static_cast<int>(::kaldi::nnet3::kNoTime), {})) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __nnet__common_clifwrap

namespace kaldi { namespace nnet3 {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// Index to/from ::kaldi::nnet3::Index conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::Index** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::Index* cpp = __nnet__common_clifwrap::pyIndex::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::Index>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::Index* cpp = __nnet__common_clifwrap::pyIndex::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__common_clifwrap::pyIndex::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::Index>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::Index* cpp = __nnet__common_clifwrap::pyIndex::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__common_clifwrap::pyIndex::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert Index instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::Index* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::Index* cpp = __nnet__common_clifwrap::pyIndex::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::Index>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::Index* cpp = __nnet__common_clifwrap::pyIndex::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::Index* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__common_clifwrap::pyIndex::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__common_clifwrap::pyIndex::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::Index>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::Index> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__common_clifwrap::pyIndex::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__common_clifwrap::pyIndex::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::Index>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::Index> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__common_clifwrap::pyIndex::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__common_clifwrap::pyIndex::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::Index>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::Index& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__common_clifwrap::pyIndex::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__common_clifwrap::pyIndex::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::Index>(c);
  return py;
}

} }  // namespace kaldi::nnet3
