//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/nnet-descriptor.clif

#include <memory>
#include "clif/python/optional.h"
#include "nnet3/nnet-descriptor.h"
#include "clif/python/postconv.h"

namespace kaldi { namespace nnet3 {
using namespace ::clif;

// CLIF use `::kaldi::nnet3::BinarySumDescriptor` as BinarySumDescriptor
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::BinarySumDescriptor** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::BinarySumDescriptor>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::BinarySumDescriptor>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::BinarySumDescriptor* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::nnet3::BinarySumDescriptor>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::BinarySumDescriptor*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::BinarySumDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::BinarySumDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::BinarySumDescriptor&, py::PostConv);
// CLIF use `::kaldi::nnet3::BinarySumDescriptor::Operation` as BinarySumDescriptor.Operation
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::BinarySumDescriptor::Operation* output);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::BinarySumDescriptor::Operation&, py::PostConv);
// CLIF use `::kaldi::nnet3::ConstantSumDescriptor` as ConstantSumDescriptor
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ConstantSumDescriptor** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::ConstantSumDescriptor>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::ConstantSumDescriptor>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ConstantSumDescriptor* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::nnet3::ConstantSumDescriptor>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::ConstantSumDescriptor*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ConstantSumDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ConstantSumDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ConstantSumDescriptor&, py::PostConv);
// CLIF use `::kaldi::nnet3::Descriptor` as Descriptor
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::Descriptor** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::Descriptor>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::Descriptor>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::Descriptor* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::nnet3::Descriptor>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::Descriptor*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::Descriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::Descriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::Descriptor&, py::PostConv);
// CLIF use `::kaldi::nnet3::ForwardingDescriptor` as ForwardingDescriptor
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ForwardingDescriptor** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::ForwardingDescriptor>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::ForwardingDescriptor>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::ForwardingDescriptor*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ForwardingDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ForwardingDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ForwardingDescriptor*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ForwardingDescriptor&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::GeneralDescriptor` as GeneralDescriptor
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::GeneralDescriptor** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::GeneralDescriptor>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::GeneralDescriptor>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::GeneralDescriptor*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::GeneralDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::GeneralDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::GeneralDescriptor*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::GeneralDescriptor&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::GeneralDescriptor::DescriptorType` as GeneralDescriptor.DescriptorType
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::GeneralDescriptor::DescriptorType* output);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::GeneralDescriptor::DescriptorType&, py::PostConv);
// CLIF use `::kaldi::nnet3::OffsetForwardingDescriptor` as OffsetForwardingDescriptor
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::OffsetForwardingDescriptor** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::OffsetForwardingDescriptor>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::OffsetForwardingDescriptor>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::OffsetForwardingDescriptor*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::OffsetForwardingDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::OffsetForwardingDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::OffsetForwardingDescriptor*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::OffsetForwardingDescriptor&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::OptionalSumDescriptor` as OptionalSumDescriptor
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::OptionalSumDescriptor** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::OptionalSumDescriptor>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::OptionalSumDescriptor>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::OptionalSumDescriptor* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::nnet3::OptionalSumDescriptor>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::OptionalSumDescriptor*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::OptionalSumDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::OptionalSumDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::OptionalSumDescriptor&, py::PostConv);
// CLIF use `::kaldi::nnet3::ReplaceIndexForwardingDescriptor` as ReplaceIndexForwardingDescriptor
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ReplaceIndexForwardingDescriptor** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::ReplaceIndexForwardingDescriptor>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::ReplaceIndexForwardingDescriptor>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::ReplaceIndexForwardingDescriptor*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ReplaceIndexForwardingDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ReplaceIndexForwardingDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ReplaceIndexForwardingDescriptor*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ReplaceIndexForwardingDescriptor&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::ReplaceIndexForwardingDescriptor::VariableName` as ReplaceIndexForwardingDescriptor.VariableName
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ReplaceIndexForwardingDescriptor::VariableName* output);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ReplaceIndexForwardingDescriptor::VariableName&, py::PostConv);
// CLIF use `::kaldi::nnet3::RoundingForwardingDescriptor` as RoundingForwardingDescriptor
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::RoundingForwardingDescriptor** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::RoundingForwardingDescriptor>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::RoundingForwardingDescriptor>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::RoundingForwardingDescriptor*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::RoundingForwardingDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::RoundingForwardingDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::RoundingForwardingDescriptor*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::RoundingForwardingDescriptor&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::SimpleForwardingDescriptor` as SimpleForwardingDescriptor
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::SimpleForwardingDescriptor** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::SimpleForwardingDescriptor>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::SimpleForwardingDescriptor>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::SimpleForwardingDescriptor*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::SimpleForwardingDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::SimpleForwardingDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::SimpleForwardingDescriptor*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::SimpleForwardingDescriptor&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::SimpleSumDescriptor` as SimpleSumDescriptor
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::SimpleSumDescriptor** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::SimpleSumDescriptor>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::SimpleSumDescriptor>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::SimpleSumDescriptor* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::nnet3::SimpleSumDescriptor>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::SimpleSumDescriptor*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::SimpleSumDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::SimpleSumDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::SimpleSumDescriptor&, py::PostConv);
// CLIF use `::kaldi::nnet3::SumDescriptor` as SumDescriptor
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::SumDescriptor** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::SumDescriptor>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::SumDescriptor>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::SumDescriptor*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::SumDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::SumDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::SumDescriptor*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::SumDescriptor&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::SwitchingForwardingDescriptor` as SwitchingForwardingDescriptor
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::SwitchingForwardingDescriptor** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::SwitchingForwardingDescriptor>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::SwitchingForwardingDescriptor>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::SwitchingForwardingDescriptor*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::SwitchingForwardingDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::SwitchingForwardingDescriptor>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::SwitchingForwardingDescriptor*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::SwitchingForwardingDescriptor&, py::PostConv) = delete;

} }  // namespace kaldi::nnet3

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_nnet_descriptor")) Py_DECREF(m);
// CLIF init_module else goto err;
