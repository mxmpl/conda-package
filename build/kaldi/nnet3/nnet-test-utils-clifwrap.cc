//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/nnet-test-utils.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "nnet3/nnet-computation-clifwrap.h"
#include "nnet3/nnet-example-clifwrap.h"
#include "nnet3/nnet-component-itf-clifwrap.h"
#include "nnet3/nnet-nnet-clifwrap.h"
#include "nnet-test-utils-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __nnet__test__utils_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyNnetGenerationOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::NnetGenerationOptions> cpp;
};
static ::kaldi::nnet3::NnetGenerationOptions* ThisPtr(PyObject*);

static PyObject* get_allow_context(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->allow_context, {});
}

static int set_allow_context(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the allow_context attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->allow_context)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for allow_context:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_allow_nonlinearity(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->allow_nonlinearity, {});
}

static int set_allow_nonlinearity(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the allow_nonlinearity attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->allow_nonlinearity)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for allow_nonlinearity:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_allow_recursion(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->allow_recursion, {});
}

static int set_allow_recursion(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the allow_recursion attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->allow_recursion)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for allow_recursion:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_allow_clockwork(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->allow_clockwork, {});
}

static int set_allow_clockwork(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the allow_clockwork attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->allow_clockwork)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for allow_clockwork:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_allow_multiple_inputs(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->allow_multiple_inputs, {});
}

static int set_allow_multiple_inputs(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the allow_multiple_inputs attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->allow_multiple_inputs)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for allow_multiple_inputs:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_allow_multiple_outputs(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->allow_multiple_outputs, {});
}

static int set_allow_multiple_outputs(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the allow_multiple_outputs attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->allow_multiple_outputs)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for allow_multiple_outputs:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_allow_final_nonlinearity(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->allow_final_nonlinearity, {});
}

static int set_allow_final_nonlinearity(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the allow_final_nonlinearity attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->allow_final_nonlinearity)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for allow_final_nonlinearity:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_allow_use_of_x_dim(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->allow_use_of_x_dim, {});
}

static int set_allow_use_of_x_dim(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the allow_use_of_x_dim attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->allow_use_of_x_dim)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for allow_use_of_x_dim:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_allow_ivector(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->allow_ivector, {});
}

static int set_allow_ivector(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the allow_ivector attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->allow_ivector)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for allow_ivector:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_allow_statistics_pooling(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->allow_statistics_pooling, {});
}

static int set_allow_statistics_pooling(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the allow_statistics_pooling attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->allow_statistics_pooling)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for allow_statistics_pooling:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_output_dim(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->output_dim, {});
}

static int set_output_dim(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the output_dim attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->output_dim)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for output_dim:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("allow_context"), get_allow_context, set_allow_context, C("C++ bool NnetGenerationOptions.allow_context")},
  {C("allow_nonlinearity"), get_allow_nonlinearity, set_allow_nonlinearity, C("C++ bool NnetGenerationOptions.allow_nonlinearity")},
  {C("allow_recursion"), get_allow_recursion, set_allow_recursion, C("C++ bool NnetGenerationOptions.allow_recursion")},
  {C("allow_clockwork"), get_allow_clockwork, set_allow_clockwork, C("C++ bool NnetGenerationOptions.allow_clockwork")},
  {C("allow_multiple_inputs"), get_allow_multiple_inputs, set_allow_multiple_inputs, C("C++ bool NnetGenerationOptions.allow_multiple_inputs")},
  {C("allow_multiple_outputs"), get_allow_multiple_outputs, set_allow_multiple_outputs, C("C++ bool NnetGenerationOptions.allow_multiple_outputs")},
  {C("allow_final_nonlinearity"), get_allow_final_nonlinearity, set_allow_final_nonlinearity, C("C++ bool NnetGenerationOptions.allow_final_nonlinearity")},
  {C("allow_use_of_x_dim"), get_allow_use_of_x_dim, set_allow_use_of_x_dim, C("C++ bool NnetGenerationOptions.allow_use_of_x_dim")},
  {C("allow_ivector"), get_allow_ivector, set_allow_ivector, C("C++ bool NnetGenerationOptions.allow_ivector")},
  {C("allow_statistics_pooling"), get_allow_statistics_pooling, set_allow_statistics_pooling, C("C++ bool NnetGenerationOptions.allow_statistics_pooling")},
  {C("output_dim"), get_output_dim, set_output_dim, C("C++ ::int32 NnetGenerationOptions.output_dim")},
  {}
};

// NnetGenerationOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// NnetGenerationOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// NnetGenerationOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_test_utils.NnetGenerationOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::NnetGenerationOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  nullptr,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "NnetGenerationOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::NnetGenerationOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::NnetGenerationOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_NnetGenerationOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::NnetGenerationOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::NnetGenerationOptions* c = static_cast<::kaldi::nnet3::NnetGenerationOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::NnetGenerationOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyNnetGenerationOptions

// generate_config_sequence(opts:NnetGenerationOptions) -> list<str>
static PyObject* wrapGenerateConfigSequence_as_generate_config_sequence(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:generate_config_sequence", names, &a[0])) return nullptr;
  ::kaldi::nnet3::NnetGenerationOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("generate_config_sequence", names[0], "::kaldi::nnet3::NnetGenerationOptions", a[0]);
  ::std::vector< ::std::string> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::GenerateConfigSequence(*arg1, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {_1});
}

// generate_config_sequence_composite_block(opts:NnetGenerationOptions) -> list<str>
static PyObject* wrapGenerateConfigSequenceCompositeBlock_as_generate_config_sequence_composite_block(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:generate_config_sequence_composite_block", names, &a[0])) return nullptr;
  ::kaldi::nnet3::NnetGenerationOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("generate_config_sequence_composite_block", names[0], "::kaldi::nnet3::NnetGenerationOptions", a[0]);
  ::std::vector< ::std::string> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::GenerateConfigSequenceCompositeBlock(*arg1, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {_1});
}

// compute_example_computation_request_simple(nnet:Nnet, request:ComputationRequest) -> list<Matrix>
static PyObject* wrapComputeExampleComputationRequestSimple_as_compute_example_computation_request_simple(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("nnet"),
      C("request"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:compute_example_computation_request_simple", names, &a[0], &a[1])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_example_computation_request_simple", names[0], "::kaldi::nnet3::Nnet", a[0]);
  ::kaldi::nnet3::ComputationRequest * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute_example_computation_request_simple", names[1], "::kaldi::nnet3::ComputationRequest *", a[1]);
  ::std::vector< ::kaldi::Matrix< ::kaldi::BaseFloat> > ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ComputeExampleComputationRequestSimple(*arg1, arg2, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// generate_random_simple_component() -> Component
static PyObject* wrapGenerateRandomSimpleComponent_as_generate_random_simple_component(PyObject* self) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::nnet3::Component * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::GenerateRandomSimpleComponent();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// nnet_parameters_are_identical(nnet1:Nnet, nnet2:Nnet, threshold:float) -> bool
static PyObject* wrapNnetParametersAreIdentical_as_nnet_parameters_are_identical(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("nnet1"),
      C("nnet2"),
      C("threshold"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:nnet_parameters_are_identical", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("nnet_parameters_are_identical", names[0], "::kaldi::nnet3::Nnet", a[0]);
  ::kaldi::nnet3::Nnet* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("nnet_parameters_are_identical", names[1], "::kaldi::nnet3::Nnet", a[1]);
  float arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("nnet_parameters_are_identical", names[2], "float", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::NnetParametersAreIdentical(*arg1, *arg2, std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// generate_simple_nnet_training_example(num_supervised_frames:int, left_context:int, right_context:int, input_dim:int, output_dim:int, ivector_dim:int) -> NnetExample
static PyObject* wrapGenerateSimpleNnetTrainingExample_as_generate_simple_nnet_training_example(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[6];
  char* names[] = {
      C("num_supervised_frames"),
      C("left_context"),
      C("right_context"),
      C("input_dim"),
      C("output_dim"),
      C("ivector_dim"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOOO:generate_simple_nnet_training_example", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("generate_simple_nnet_training_example", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("generate_simple_nnet_training_example", names[1], "int", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("generate_simple_nnet_training_example", names[2], "int", a[2]);
  int arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("generate_simple_nnet_training_example", names[3], "int", a[3]);
  int arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("generate_simple_nnet_training_example", names[4], "int", a[4]);
  int arg6;
  if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("generate_simple_nnet_training_example", names[5], "int", a[5]);
  ::kaldi::nnet3::NnetExample ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::GenerateSimpleNnetTrainingExample(std::move(arg1), std::move(arg2), std::move(arg3), std::move(arg4), std::move(arg5), std::move(arg6), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// example_approx_equal(eg1:NnetExample, eg2:NnetExample, delta:float) -> bool
static PyObject* wrapExampleApproxEqual_as_example_approx_equal(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("eg1"),
      C("eg2"),
      C("delta"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:example_approx_equal", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::nnet3::NnetExample* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("example_approx_equal", names[0], "::kaldi::nnet3::NnetExample", a[0]);
  ::kaldi::nnet3::NnetExample* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("example_approx_equal", names[1], "::kaldi::nnet3::NnetExample", a[1]);
  float arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("example_approx_equal", names[2], "float", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::ExampleApproxEqual(*arg1, *arg2, std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("generate_config_sequence"), (PyCFunction)wrapGenerateConfigSequence_as_generate_config_sequence, METH_VARARGS | METH_KEYWORDS, C("generate_config_sequence(opts:NnetGenerationOptions) -> list<str>\n  Calls C++ function\n  void ::kaldi::nnet3::GenerateConfigSequence(::kaldi::nnet3::NnetGenerationOptions, ::std::vector< ::std::string>*)")},
  {C("generate_config_sequence_composite_block"), (PyCFunction)wrapGenerateConfigSequenceCompositeBlock_as_generate_config_sequence_composite_block, METH_VARARGS | METH_KEYWORDS, C("generate_config_sequence_composite_block(opts:NnetGenerationOptions) -> list<str>\n  Calls C++ function\n  void ::kaldi::nnet3::GenerateConfigSequenceCompositeBlock(::kaldi::nnet3::NnetGenerationOptions, ::std::vector< ::std::string>*)")},
  {C("compute_example_computation_request_simple"), (PyCFunction)wrapComputeExampleComputationRequestSimple_as_compute_example_computation_request_simple, METH_VARARGS | METH_KEYWORDS, C("compute_example_computation_request_simple(nnet:Nnet, request:ComputationRequest) -> list<Matrix>\n  Calls C++ function\n  void ::kaldi::nnet3::ComputeExampleComputationRequestSimple(::kaldi::nnet3::Nnet, ::kaldi::nnet3::ComputationRequest *, ::std::vector< ::kaldi::Matrix< ::kaldi::BaseFloat> >*)")},
  {C("generate_random_simple_component"), (PyCFunction)wrapGenerateRandomSimpleComponent_as_generate_random_simple_component, METH_NOARGS, C("generate_random_simple_component() -> Component\n  Calls C++ function\n  ::kaldi::nnet3::Component * ::kaldi::nnet3::GenerateRandomSimpleComponent()")},
  {C("nnet_parameters_are_identical"), (PyCFunction)wrapNnetParametersAreIdentical_as_nnet_parameters_are_identical, METH_VARARGS | METH_KEYWORDS, C("nnet_parameters_are_identical(nnet1:Nnet, nnet2:Nnet, threshold:float) -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::NnetParametersAreIdentical(::kaldi::nnet3::Nnet, ::kaldi::nnet3::Nnet, float)")},
  {C("generate_simple_nnet_training_example"), (PyCFunction)wrapGenerateSimpleNnetTrainingExample_as_generate_simple_nnet_training_example, METH_VARARGS | METH_KEYWORDS, C("generate_simple_nnet_training_example(num_supervised_frames:int, left_context:int, right_context:int, input_dim:int, output_dim:int, ivector_dim:int) -> NnetExample\n  Calls C++ function\n  void ::kaldi::nnet3::GenerateSimpleNnetTrainingExample(int, int, int, int, int, int, ::kaldi::nnet3::NnetExample*)")},
  {C("example_approx_equal"), (PyCFunction)wrapExampleApproxEqual_as_example_approx_equal, METH_VARARGS | METH_KEYWORDS, C("example_approx_equal(eg1:NnetExample, eg2:NnetExample, delta:float) -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::ExampleApproxEqual(::kaldi::nnet3::NnetExample, ::kaldi::nnet3::NnetExample, float)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyNnetGenerationOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyNnetGenerationOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_nnet_test_utils",  // module name
  "CLIF-generated module for nnet3/nnet-test-utils.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_computation")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_example")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_component_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_nnet")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "NnetGenerationOptions", reinterpret_cast<PyObject*>(&pyNnetGenerationOptions::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __nnet__test__utils_clifwrap

namespace kaldi { namespace nnet3 {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// NnetGenerationOptions to/from ::kaldi::nnet3::NnetGenerationOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::NnetGenerationOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::NnetGenerationOptions* cpp = __nnet__test__utils_clifwrap::pyNnetGenerationOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::NnetGenerationOptions>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NnetGenerationOptions* cpp = __nnet__test__utils_clifwrap::pyNnetGenerationOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__test__utils_clifwrap::pyNnetGenerationOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::NnetGenerationOptions>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NnetGenerationOptions* cpp = __nnet__test__utils_clifwrap::pyNnetGenerationOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__test__utils_clifwrap::pyNnetGenerationOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert NnetGenerationOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::NnetGenerationOptions* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NnetGenerationOptions* cpp = __nnet__test__utils_clifwrap::pyNnetGenerationOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::NnetGenerationOptions>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NnetGenerationOptions* cpp = __nnet__test__utils_clifwrap::pyNnetGenerationOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::NnetGenerationOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__test__utils_clifwrap::pyNnetGenerationOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__test__utils_clifwrap::pyNnetGenerationOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NnetGenerationOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::NnetGenerationOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__test__utils_clifwrap::pyNnetGenerationOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__test__utils_clifwrap::pyNnetGenerationOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NnetGenerationOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::NnetGenerationOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__test__utils_clifwrap::pyNnetGenerationOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__test__utils_clifwrap::pyNnetGenerationOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NnetGenerationOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::NnetGenerationOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__test__utils_clifwrap::pyNnetGenerationOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__test__utils_clifwrap::pyNnetGenerationOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::NnetGenerationOptions>(c);
  return py;
}

} }  // namespace kaldi::nnet3
