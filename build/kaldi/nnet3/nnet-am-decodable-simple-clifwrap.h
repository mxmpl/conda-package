//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/nnet-am-decodable-simple.clif

#include <memory>
#include "clif/python/optional.h"
#include "nnet3/nnet-am-decodable-simple.h"
#include "clif/python/postconv.h"

namespace kaldi { namespace nnet3 {
using namespace ::clif;

// CLIF use `::kaldi::nnet3::DecodableAmNnetSimple` as DecodableAmNnetSimple
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::DecodableAmNnetSimple** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::DecodableAmNnetSimple>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::DecodableAmNnetSimple>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::DecodableAmNnetSimple*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::DecodableAmNnetSimple>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::DecodableAmNnetSimple>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::DecodableAmNnetSimple*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::DecodableAmNnetSimple&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::DecodableAmNnetSimpleParallel` as DecodableAmNnetSimpleParallel
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::DecodableAmNnetSimpleParallel** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::DecodableAmNnetSimpleParallel>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::DecodableAmNnetSimpleParallel>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::DecodableAmNnetSimpleParallel*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::DecodableAmNnetSimpleParallel>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::DecodableAmNnetSimpleParallel>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::DecodableAmNnetSimpleParallel*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::DecodableAmNnetSimpleParallel&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::DecodableNnetSimple` as DecodableNnetSimple
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::DecodableNnetSimple** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::DecodableNnetSimple>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::DecodableNnetSimple>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::DecodableNnetSimple*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::DecodableNnetSimple>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::DecodableNnetSimple>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::DecodableNnetSimple*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::DecodableNnetSimple&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::NnetSimpleComputationOptions` as NnetSimpleComputationOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::NnetSimpleComputationOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::NnetSimpleComputationOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::NnetSimpleComputationOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::NnetSimpleComputationOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::nnet3::NnetSimpleComputationOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::NnetSimpleComputationOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::NnetSimpleComputationOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::NnetSimpleComputationOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::NnetSimpleComputationOptions&, py::PostConv);

} }  // namespace kaldi::nnet3

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_nnet_am_decodable_simple")) Py_DECREF(m);
// CLIF init_module else goto err;
