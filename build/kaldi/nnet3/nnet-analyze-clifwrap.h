//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/nnet-analyze.clif

#include <memory>
#include "clif/python/optional.h"
#include "nnet3/nnet-analyze.h"
#include "clif/python/postconv.h"

namespace kaldi { namespace nnet3 {
using namespace ::clif;

// CLIF use `::kaldi::nnet3::Access` as Access
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::Access** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::Access>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::Access>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::Access* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::nnet3::Access>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::Access*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::Access>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::Access>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::Access&, py::PostConv);
// CLIF use `::kaldi::nnet3::AccessType` as AccessType
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::AccessType* output);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::AccessType&, py::PostConv);
// CLIF use `::kaldi::nnet3::Analyzer` as Analyzer
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::Analyzer** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::Analyzer>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::Analyzer>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::Analyzer* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::nnet3::Analyzer>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::Analyzer*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::Analyzer>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::Analyzer>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::Analyzer&, py::PostConv);
// CLIF use `::kaldi::nnet3::CheckComputationOptions` as CheckComputationOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::CheckComputationOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::CheckComputationOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::CheckComputationOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::CheckComputationOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::nnet3::CheckComputationOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::CheckComputationOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::CheckComputationOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::CheckComputationOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::CheckComputationOptions&, py::PostConv);
// CLIF use `::kaldi::nnet3::CommandAttributes` as CommandAttributes
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::CommandAttributes** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::CommandAttributes>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::CommandAttributes>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::CommandAttributes* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::nnet3::CommandAttributes>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::CommandAttributes*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::CommandAttributes>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::CommandAttributes>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::CommandAttributes&, py::PostConv);
// CLIF use `::kaldi::nnet3::ComputationAnalysis` as ComputationAnalysis
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ComputationAnalysis** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::ComputationAnalysis>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::ComputationAnalysis>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::ComputationAnalysis*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ComputationAnalysis>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ComputationAnalysis>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ComputationAnalysis*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ComputationAnalysis&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::ComputationChecker` as ComputationChecker
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ComputationChecker** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::ComputationChecker>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::ComputationChecker>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::ComputationChecker*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ComputationChecker>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ComputationChecker>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ComputationChecker*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ComputationChecker&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::ComputationVariables` as ComputationVariables
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ComputationVariables** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::ComputationVariables>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::ComputationVariables>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ComputationVariables* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::nnet3::ComputationVariables>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::ComputationVariables*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ComputationVariables>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ComputationVariables>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ComputationVariables&, py::PostConv);
// CLIF use `::kaldi::nnet3::MatrixAccesses` as MatrixAccesses
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::MatrixAccesses** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::MatrixAccesses>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::MatrixAccesses>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::MatrixAccesses* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::nnet3::MatrixAccesses>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::MatrixAccesses*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::MatrixAccesses>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::MatrixAccesses>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::MatrixAccesses&, py::PostConv);

} }  // namespace kaldi::nnet3

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_nnet_analyze")) Py_DECREF(m);
// CLIF init_module else goto err;
