//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/nnet-computation-graph.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "nnet3/nnet-common-clifwrap.h"
#include "nnet3/nnet-computation-graph-ext-clifwrap.h"
#include "nnet3/nnet-computation-clifwrap.h"
#include "nnet3/nnet-component-itf-clifwrap.h"
#include "nnet3/nnet-nnet-clifwrap.h"
#include "nnet-computation-graph-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __nnet__computation__graph_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes

static PyObject *_Enum{}, *_IntEnum{};  // set below in Init()


namespace pyComputationGraphBuilder {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::ComputationGraphBuilder> cpp;
};
static ::kaldi::nnet3::ComputationGraphBuilder* ThisPtr(PyObject*);

// __init__(nnet:Nnet, graph:ComputationGraph)
static PyObject* wrapComputationGraphBuilder_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("nnet"),
      C("graph"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::nnet3::Nnet", a[0]);
  ::kaldi::nnet3::ComputationGraph * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::nnet3::ComputationGraph *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::ComputationGraphBuilder>(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// compute(request:ComputationRequest)
static PyObject* wrapCompute_as_compute(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("request"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:compute", names, &a[0])) return nullptr;
  ::kaldi::nnet3::ComputationRequest* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute", names[0], "::kaldi::nnet3::ComputationRequest", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationGraphBuilder* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Compute(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// all_outputs_are_computable() -> bool
static PyObject* wrapAllOutputsAreComputable_as_all_outputs_are_computable(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationGraphBuilder* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->AllOutputsAreComputable();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// explain_why_all_outputs_not_computable()
static PyObject* wrapExplainWhyAllOutputsNotComputable_as_explain_why_all_outputs_not_computable(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationGraphBuilder* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ExplainWhyAllOutputsNotComputable();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// get_computable_info() -> list<list<bool>>
static PyObject* wrapGetComputableInfo_as_get_computable_info(PyObject* self) {
  ::std::vector< ::std::vector<bool> > ret0{};
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationGraphBuilder* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetComputableInfo(&ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// prune()
static PyObject* wrapPrune_as_prune(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::ComputationGraphBuilder* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Prune();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Create Python Enum object (cached in _ComputableInfo) for ::kaldi::nnet3::ComputationGraphBuilder::ComputableInfo
static PyObject* wrapComputableInfo() {
  PyObject *py, *py_enum_class{}, *names = PyTuple_New(4);
  if (names == nullptr) return nullptr;
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("UNKNOWN"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::ComputationGraphBuilder::ComputableInfo>::type>(::kaldi::nnet3::ComputationGraphBuilder::ComputableInfo::kUnknown)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 0, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("COMPUTABLE"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::ComputationGraphBuilder::ComputableInfo>::type>(::kaldi::nnet3::ComputationGraphBuilder::ComputableInfo::kComputable)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 1, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("NOT_COMPUTABLE"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::ComputationGraphBuilder::ComputableInfo>::type>(::kaldi::nnet3::ComputationGraphBuilder::ComputableInfo::kNotComputable)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 2, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("WILL_NOT_COMPUTE"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::ComputationGraphBuilder::ComputableInfo>::type>(::kaldi::nnet3::ComputationGraphBuilder::ComputableInfo::kWillNotCompute)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 3, py);
  py = PyUnicode_FromString("ComputationGraphBuilder.ComputableInfo");
  py_enum_class = PyObject_CallFunctionObjArgs(_IntEnum, py, names, nullptr);
  Py_DECREF(py);
err:
  Py_DECREF(names);
  return py_enum_class;
}
static PyObject* _ComputableInfo{};  // set by above func in Init()

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapComputationGraphBuilder_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(nnet:Nnet, graph:ComputationGraph)\n  Calls C++ function\n  void ::kaldi::nnet3::ComputationGraphBuilder::ComputationGraphBuilder(::kaldi::nnet3::Nnet, ::kaldi::nnet3::ComputationGraph *)")},
  {C("compute"), (PyCFunction)wrapCompute_as_compute, METH_VARARGS | METH_KEYWORDS, C("compute(request:ComputationRequest)\n  Calls C++ function\n  void ::kaldi::nnet3::ComputationGraphBuilder::Compute(::kaldi::nnet3::ComputationRequest)")},
  {C("all_outputs_are_computable"), (PyCFunction)wrapAllOutputsAreComputable_as_all_outputs_are_computable, METH_NOARGS, C("all_outputs_are_computable() -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::ComputationGraphBuilder::AllOutputsAreComputable()")},
  {C("explain_why_all_outputs_not_computable"), (PyCFunction)wrapExplainWhyAllOutputsNotComputable_as_explain_why_all_outputs_not_computable, METH_NOARGS, C("explain_why_all_outputs_not_computable()\n  Calls C++ function\n  void ::kaldi::nnet3::ComputationGraphBuilder::ExplainWhyAllOutputsNotComputable()")},
  {C("get_computable_info"), (PyCFunction)wrapGetComputableInfo_as_get_computable_info, METH_NOARGS, C("get_computable_info() -> list<list<bool>>\n  Calls C++ function\n  void ::kaldi::nnet3::ComputationGraphBuilder::GetComputableInfo(::std::vector< ::std::vector<bool> >*)")},
  {C("prune"), (PyCFunction)wrapPrune_as_prune, METH_NOARGS, C("prune()\n  Calls C++ function\n  void ::kaldi::nnet3::ComputationGraphBuilder::Prune()")},
  {}
};

// ComputationGraphBuilder __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ComputationGraphBuilder __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ComputationGraphBuilder __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_computation_graph.ComputationGraphBuilder", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::ComputationGraphBuilder", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapComputationGraphBuilder_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::ComputationGraphBuilder* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_ComputationGraphBuilder"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::ComputationGraphBuilder"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::ComputationGraphBuilder* c = static_cast<::kaldi::nnet3::ComputationGraphBuilder*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::ComputationGraphBuilder*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyComputationGraphBuilder

// compute_computation_phases(nnet:Nnet, graph:ComputationGraph) -> list<list<list<int>>>
static PyObject* wrapComputeComputationPhases_as_compute_computation_phases(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("nnet"),
      C("graph"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:compute_computation_phases", names, &a[0], &a[1])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_computation_phases", names[0], "::kaldi::nnet3::Nnet", a[0]);
  ::kaldi::nnet3::ComputationGraph* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute_computation_phases", names[1], "::kaldi::nnet3::ComputationGraph", a[1]);
  ::std::vector< ::std::vector< ::std::vector< ::int32> > > ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ComputeComputationPhases(*arg1, *arg2, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("compute_computation_phases"), (PyCFunction)wrapComputeComputationPhases_as_compute_computation_phases, METH_VARARGS | METH_KEYWORDS, C("compute_computation_phases(nnet:Nnet, graph:ComputationGraph) -> list<list<list<int>>>\n  Calls C++ function\n  void ::kaldi::nnet3::ComputeComputationPhases(::kaldi::nnet3::Nnet, ::kaldi::nnet3::ComputationGraph, ::std::vector< ::std::vector< ::std::vector< ::int32> > >*)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyComputationGraphBuilder::wrapper_Type) < 0) return false;
  Py_INCREF(&pyComputationGraphBuilder::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_nnet_computation_graph",  // module name
  "CLIF-generated module for nnet3/nnet-computation-graph.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_common")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_computation_graph_ext")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_computation")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_component_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_nnet")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  {PyObject* em = PyImport_ImportModule("enum");
   if (em == nullptr) goto err;
   _Enum = PyObject_GetAttrString(em, "Enum");
   _IntEnum = PyObject_GetAttrString(em, "IntEnum");
   Py_DECREF(em);}
  if (!_Enum || !_IntEnum) {
    Py_XDECREF(_Enum);
    Py_XDECREF(_IntEnum);
    goto err;
  }
  if (PyDict_SetItemString(pyComputationGraphBuilder::wrapper_Type.tp_dict, "ComputableInfo", (pyComputationGraphBuilder::_ComputableInfo=pyComputationGraphBuilder::wrapComputableInfo())) < 0) goto err;
  if (PyModule_AddObject(module, "ComputationGraphBuilder", reinterpret_cast<PyObject*>(&pyComputationGraphBuilder::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __nnet__computation__graph_clifwrap

namespace kaldi { namespace nnet3 {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// ComputationGraphBuilder to/from ::kaldi::nnet3::ComputationGraphBuilder conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ComputationGraphBuilder** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::ComputationGraphBuilder* cpp = __nnet__computation__graph_clifwrap::pyComputationGraphBuilder::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::ComputationGraphBuilder>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ComputationGraphBuilder* cpp = __nnet__computation__graph_clifwrap::pyComputationGraphBuilder::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__computation__graph_clifwrap::pyComputationGraphBuilder::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::ComputationGraphBuilder>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ComputationGraphBuilder* cpp = __nnet__computation__graph_clifwrap::pyComputationGraphBuilder::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__computation__graph_clifwrap::pyComputationGraphBuilder::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ComputationGraphBuilder instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::ComputationGraphBuilder* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__computation__graph_clifwrap::pyComputationGraphBuilder::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__computation__graph_clifwrap::pyComputationGraphBuilder::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ComputationGraphBuilder>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ComputationGraphBuilder> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__computation__graph_clifwrap::pyComputationGraphBuilder::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__computation__graph_clifwrap::pyComputationGraphBuilder::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ComputationGraphBuilder>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ComputationGraphBuilder> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__computation__graph_clifwrap::pyComputationGraphBuilder::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__computation__graph_clifwrap::pyComputationGraphBuilder::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ComputationGraphBuilder>(std::move(c));
  return py;
}

// ComputationGraphBuilder.ComputableInfo:IntEnum to/from enum ::kaldi::nnet3::ComputationGraphBuilder::ComputableInfo conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ComputationGraphBuilder::ComputableInfo* c) {
  assert(c != nullptr);
  if (!PyObject_IsInstance(py, __nnet__computation__graph_clifwrap::pyComputationGraphBuilder::_ComputableInfo)) {
    PyErr_Format(PyExc_TypeError, "expecting enum ComputationGraphBuilder.ComputableInfo, got %s %s", ClassName(py), ClassType(py));
    return false;
  }
  typename std::underlying_type<::kaldi::nnet3::ComputationGraphBuilder::ComputableInfo>::type v;
  PyObject* value = PyObject_GetAttrString(py, "value");
  if (value == nullptr || !Clif_PyObjAs(value, &v)) return false;
  Py_DECREF(value);
  *c = static_cast<::kaldi::nnet3::ComputationGraphBuilder::ComputableInfo>(v);
  return true;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ComputationGraphBuilder::ComputableInfo& c, py::PostConv) {
  return PyObject_CallFunctionObjArgs(__nnet__computation__graph_clifwrap::pyComputationGraphBuilder::_ComputableInfo, PyInt_FromLong(
      static_cast<typename std::underlying_type<::kaldi::nnet3::ComputationGraphBuilder::ComputableInfo>::type>(c)), nullptr);
}

} }  // namespace kaldi::nnet3
