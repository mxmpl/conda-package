//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/nnet-example-utils.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "itf/options-itf-clifwrap.h"
#include "base/iostream-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "nnet3/nnet-example-clifwrap.h"
#include "nnet3/nnet-computation-clifwrap.h"
#include "nnet3/nnet-nnet-clifwrap.h"
#include "feat/wave-reader-clifwrap.h"
#include "lat/kaldi-lattice.h"
#include "rnnlm/rnnlm-example-clifwrap.h"
#include "util/kaldi-table-clifwrap.h"
#include "nnet-example-utils-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __nnet__example__utils_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


// merge_examples(src:list<NnetExample>, compress:bool) -> NnetExample
static PyObject* wrapMergeExamples_as_merge_examples(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("src"),
      C("compress"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:merge_examples", names, &a[0], &a[1])) return nullptr;
  ::std::vector< ::kaldi::nnet3::NnetExample> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("merge_examples", names[0], "::std::vector< ::kaldi::nnet3::NnetExample>", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("merge_examples", names[1], "bool", a[1]);
  ::kaldi::nnet3::NnetExample ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::MergeExamples(std::move(arg1), std::move(arg2), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_computation_request(nnet:Nnet, eg:NnetExample, need_model_derivative:bool, store_component_stats:bool) -> ComputationRequest
static PyObject* wrapGetComputationRequest_as_get_computation_request(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("nnet"),
      C("eg"),
      C("need_model_derivative"),
      C("store_component_stats"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:get_computation_request", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_computation_request", names[0], "::kaldi::nnet3::Nnet", a[0]);
  ::kaldi::nnet3::NnetExample* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_computation_request", names[1], "::kaldi::nnet3::NnetExample", a[1]);
  bool arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("get_computation_request", names[2], "bool", a[2]);
  bool arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("get_computation_request", names[3], "bool", a[3]);
  ::kaldi::nnet3::ComputationRequest ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::GetComputationRequest(*arg1, *arg2, std::move(arg3), std::move(arg4), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// write_vector_as_char(os:ostream, binary:bool, vec:VectorBase)
static PyObject* wrapWriteVectorAsChar_as_write_vector_as_char(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("os"),
      C("binary"),
      C("vec"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:write_vector_as_char", names, &a[0], &a[1], &a[2])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write_vector_as_char", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write_vector_as_char", names[1], "bool", a[1]);
  ::kaldi::VectorBase<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("write_vector_as_char", names[2], "::kaldi::VectorBase<float>", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::WriteVectorAsChar(*arg1, std::move(arg2), *arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read_vector_as_char(is:istream, binary:bool) -> Vector
static PyObject* wrapReadVectorAsChar_as_read_vector_as_char(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read_vector_as_char", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read_vector_as_char", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read_vector_as_char", names[1], "bool", a[1]);
  ::kaldi::Vector<float> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ReadVectorAsChar(*arg1, std::move(arg2), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

namespace pyExampleGenerationConfig {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::ExampleGenerationConfig> cpp;
};
static ::kaldi::nnet3::ExampleGenerationConfig* ThisPtr(PyObject*);

static PyObject* get_left_context(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->left_context, {});
}

static int set_left_context(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the left_context attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->left_context)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for left_context:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_right_context(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->right_context, {});
}

static int set_right_context(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the right_context attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->right_context)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for right_context:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_left_context_initial(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->left_context_initial, {});
}

static int set_left_context_initial(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the left_context_initial attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->left_context_initial)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for left_context_initial:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_right_context_final(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->right_context_final, {});
}

static int set_right_context_final(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the right_context_final attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->right_context_final)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for right_context_final:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_num_frames_overlap(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->num_frames_overlap, {});
}

static int set_num_frames_overlap(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the num_frames_overlap attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->num_frames_overlap)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for num_frames_overlap:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_frame_subsampling_factor(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->frame_subsampling_factor, {});
}

static int set_frame_subsampling_factor(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the frame_subsampling_factor attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->frame_subsampling_factor)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for frame_subsampling_factor:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_num_frames_str(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->num_frames_str, _1);
}

static int set_num_frames_str(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the num_frames_str attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->num_frames_str)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for num_frames_str:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_num_frames(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->num_frames, {});
}

static int set_num_frames(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the num_frames attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->num_frames)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for num_frames:list<int>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// compute_derived()
static PyObject* wrapComputeDerived_as_compute_derived(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::ExampleGenerationConfig* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ComputeDerived();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::ExampleGenerationConfig* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("left_context"), get_left_context, set_left_context, C("C++ ::int32 ExampleGenerationConfig.left_context")},
  {C("right_context"), get_right_context, set_right_context, C("C++ ::int32 ExampleGenerationConfig.right_context")},
  {C("left_context_initial"), get_left_context_initial, set_left_context_initial, C("C++ ::int32 ExampleGenerationConfig.left_context_initial")},
  {C("right_context_final"), get_right_context_final, set_right_context_final, C("C++ ::int32 ExampleGenerationConfig.right_context_final")},
  {C("num_frames_overlap"), get_num_frames_overlap, set_num_frames_overlap, C("C++ ::int32 ExampleGenerationConfig.num_frames_overlap")},
  {C("frame_subsampling_factor"), get_frame_subsampling_factor, set_frame_subsampling_factor, C("C++ ::int32 ExampleGenerationConfig.frame_subsampling_factor")},
  {C("num_frames_str"), get_num_frames_str, set_num_frames_str, C("C++ ::std::string ExampleGenerationConfig.num_frames_str")},
  {C("num_frames"), get_num_frames, set_num_frames, C("C++ ::std::vector< ::int32> ExampleGenerationConfig.num_frames")},
  {}
};

static PyMethodDef Methods[] = {
  {C("compute_derived"), (PyCFunction)wrapComputeDerived_as_compute_derived, METH_NOARGS, C("compute_derived()\n  Calls C++ function\n  void ::kaldi::nnet3::ExampleGenerationConfig::ComputeDerived()")},
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::nnet3::ExampleGenerationConfig::Register(::kaldi::OptionsItf *)")},
  {}
};

// ExampleGenerationConfig __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ExampleGenerationConfig __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ExampleGenerationConfig __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_example_utils.ExampleGenerationConfig", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::ExampleGenerationConfig", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "ExampleGenerationConfig takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::ExampleGenerationConfig>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::ExampleGenerationConfig* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_ExampleGenerationConfig"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::ExampleGenerationConfig"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::ExampleGenerationConfig* c = static_cast<::kaldi::nnet3::ExampleGenerationConfig*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::ExampleGenerationConfig*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyExampleGenerationConfig

namespace pyChunkTimeInfo {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::ChunkTimeInfo> cpp;
};
static ::kaldi::nnet3::ChunkTimeInfo* ThisPtr(PyObject*);

static PyObject* get_first_frame(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->first_frame, {});
}

static int set_first_frame(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the first_frame attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->first_frame)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for first_frame:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_num_frames(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->num_frames, {});
}

static int set_num_frames(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the num_frames attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->num_frames)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for num_frames:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_left_context(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->left_context, {});
}

static int set_left_context(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the left_context attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->left_context)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for left_context:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_right_context(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->right_context, {});
}

static int set_right_context(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the right_context attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->right_context)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for right_context:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_output_weights(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->output_weights, {});
}

static int set_output_weights(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the output_weights attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->output_weights)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for output_weights:list<float>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("first_frame"), get_first_frame, set_first_frame, C("C++ ::int32 ChunkTimeInfo.first_frame")},
  {C("num_frames"), get_num_frames, set_num_frames, C("C++ ::int32 ChunkTimeInfo.num_frames")},
  {C("left_context"), get_left_context, set_left_context, C("C++ ::int32 ChunkTimeInfo.left_context")},
  {C("right_context"), get_right_context, set_right_context, C("C++ ::int32 ChunkTimeInfo.right_context")},
  {C("output_weights"), get_output_weights, set_output_weights, C("C++ ::std::vector< ::kaldi::BaseFloat> ChunkTimeInfo.output_weights")},
  {}
};

// ChunkTimeInfo __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ChunkTimeInfo __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ChunkTimeInfo __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_example_utils.ChunkTimeInfo", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::ChunkTimeInfo", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  nullptr,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "ChunkTimeInfo takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::ChunkTimeInfo>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::ChunkTimeInfo* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_ChunkTimeInfo"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::ChunkTimeInfo"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::ChunkTimeInfo* c = static_cast<::kaldi::nnet3::ChunkTimeInfo*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::ChunkTimeInfo*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyChunkTimeInfo

namespace pyUtteranceSplitter {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::UtteranceSplitter> cpp;
};
static ::kaldi::nnet3::UtteranceSplitter* ThisPtr(PyObject*);

// __init__(config:ExampleGenerationConfig)
static PyObject* wrapUtteranceSplitter_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("config"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::kaldi::nnet3::ExampleGenerationConfig* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::nnet3::ExampleGenerationConfig", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::UtteranceSplitter>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// config() -> ExampleGenerationConfig
static PyObject* wrapConfig_as_config(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::UtteranceSplitter* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::nnet3::ExampleGenerationConfig ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Config();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_chunks_for_utterance(utterance_length:int) -> list<ChunkTimeInfo>
static PyObject* wrapGetChunksForUtterance_as_get_chunks_for_utterance(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("utterance_length"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_chunks_for_utterance", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_chunks_for_utterance", names[0], "int", a[0]);
  ::std::vector< ::kaldi::nnet3::ChunkTimeInfo> ret0{};
  // Call actual C++ method.
  ::kaldi::nnet3::UtteranceSplitter* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetChunksForUtterance(std::move(arg1), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// lengths_match(utt:str, utterance_length:int, supervision_length:int, length_tolerance:int=default) -> bool
static PyObject* wrapLengthsMatch_as_lengths_match(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4]{};
  char* names[] = {
      C("utt"),
      C("utterance_length"),
      C("supervision_length"),
      C("length_tolerance"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO|O:lengths_match", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 4; nargs > 3; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("lengths_match", names[0], "::std::string", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("lengths_match", names[1], "int", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("lengths_match", names[2], "int", a[2]);
  int arg4;
  if (nargs > 3) {
    if (!a[3]) arg4 = (int)0;
    else if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("lengths_match", names[3], "int", a[3]);
  }
  // Call actual C++ method.
  ::kaldi::nnet3::UtteranceSplitter* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 3:
    ret0 = c->LengthsMatch(std::move(arg1), std::move(arg2), std::move(arg3)); break;
  case 4:
    ret0 = c->LengthsMatch(std::move(arg1), std::move(arg2), std::move(arg3), std::move(arg4)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// exit_status() -> int
static PyObject* wrapExitStatus_as_exit_status(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::UtteranceSplitter* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->ExitStatus();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapUtteranceSplitter_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(config:ExampleGenerationConfig)\n  Calls C++ function\n  void ::kaldi::nnet3::UtteranceSplitter::UtteranceSplitter(::kaldi::nnet3::ExampleGenerationConfig)")},
  {C("config"), (PyCFunction)wrapConfig_as_config, METH_NOARGS, C("config() -> ExampleGenerationConfig\n  Calls C++ function\n  ::kaldi::nnet3::ExampleGenerationConfig ::kaldi::nnet3::UtteranceSplitter::Config()")},
  {C("get_chunks_for_utterance"), (PyCFunction)wrapGetChunksForUtterance_as_get_chunks_for_utterance, METH_VARARGS | METH_KEYWORDS, C("get_chunks_for_utterance(utterance_length:int) -> list<ChunkTimeInfo>\n  Calls C++ function\n  void ::kaldi::nnet3::UtteranceSplitter::GetChunksForUtterance(int, ::std::vector< ::kaldi::nnet3::ChunkTimeInfo>*)")},
  {C("lengths_match"), (PyCFunction)wrapLengthsMatch_as_lengths_match, METH_VARARGS | METH_KEYWORDS, C("lengths_match(utt:str, utterance_length:int, supervision_length:int, length_tolerance:int=default) -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::UtteranceSplitter::LengthsMatch(::std::string, int, int, int)")},
  {C("exit_status"), (PyCFunction)wrapExitStatus_as_exit_status, METH_NOARGS, C("exit_status() -> int\n  Calls C++ function\n  int ::kaldi::nnet3::UtteranceSplitter::ExitStatus()")},
  {}
};

// UtteranceSplitter __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// UtteranceSplitter __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// UtteranceSplitter __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_example_utils.UtteranceSplitter", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::UtteranceSplitter", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapUtteranceSplitter_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::UtteranceSplitter* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_UtteranceSplitter"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::UtteranceSplitter"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::UtteranceSplitter* c = static_cast<::kaldi::nnet3::UtteranceSplitter*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::UtteranceSplitter*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyUtteranceSplitter

namespace pyExampleMergingConfig {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::ExampleMergingConfig> cpp;
};
static ::kaldi::nnet3::ExampleMergingConfig* ThisPtr(PyObject*);

static PyObject* get_compress(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->compress, {});
}

static int set_compress(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the compress attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->compress)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for compress:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_measure_output_frames(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->measure_output_frames, _1);
}

static int set_measure_output_frames(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the measure_output_frames attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->measure_output_frames)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for measure_output_frames:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_minibatch_size(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->minibatch_size, _1);
}

static int set_minibatch_size(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the minibatch_size attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->minibatch_size)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for minibatch_size:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_discard_partial_minibatches(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->discard_partial_minibatches, _1);
}

static int set_discard_partial_minibatches(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the discard_partial_minibatches attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->discard_partial_minibatches)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for discard_partial_minibatches:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::ExampleMergingConfig* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// compute_derived()
static PyObject* wrapComputeDerived_as_compute_derived(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::ExampleMergingConfig* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ComputeDerived();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// get_minibatch_size(size_of_eg:int, num_available_egs:int, input_ended:bool) -> int
static PyObject* wrapMinibatchSize_as_get_minibatch_size(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("size_of_eg"),
      C("num_available_egs"),
      C("input_ended"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:get_minibatch_size", names, &a[0], &a[1], &a[2])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_minibatch_size", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_minibatch_size", names[1], "int", a[1]);
  bool arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("get_minibatch_size", names[2], "bool", a[2]);
  // Call actual C++ method.
  ::kaldi::nnet3::ExampleMergingConfig* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->MinibatchSize(std::move(arg1), std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyGetSetDef Properties[] = {
  {C("compress"), get_compress, set_compress, C("C++ bool ExampleMergingConfig.compress")},
  {C("measure_output_frames"), get_measure_output_frames, set_measure_output_frames, C("C++ ::std::string ExampleMergingConfig.measure_output_frames")},
  {C("minibatch_size"), get_minibatch_size, set_minibatch_size, C("C++ ::std::string ExampleMergingConfig.minibatch_size")},
  {C("discard_partial_minibatches"), get_discard_partial_minibatches, set_discard_partial_minibatches, C("C++ ::std::string ExampleMergingConfig.discard_partial_minibatches")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::nnet3::ExampleMergingConfig::Register(::kaldi::OptionsItf *)")},
  {C("compute_derived"), (PyCFunction)wrapComputeDerived_as_compute_derived, METH_NOARGS, C("compute_derived()\n  Calls C++ function\n  void ::kaldi::nnet3::ExampleMergingConfig::ComputeDerived()")},
  {C("get_minibatch_size"), (PyCFunction)wrapMinibatchSize_as_get_minibatch_size, METH_VARARGS | METH_KEYWORDS, C("get_minibatch_size(size_of_eg:int, num_available_egs:int, input_ended:bool) -> int\n\nThis function tells you what minibatch size should be used for this eg.\n\nArgs:\n  size_of_eg (int): The size of the eg, as obtained by :meth:`GetNnetExampleSize`\n  num_available_egs (int): The number of egs of this size that are currently available\n  input_ended (bool): True if the input has ended. False otherwise\n\nReturns:\n  Minibatch Size to use in this situation")},
  {}
};

// ExampleMergingConfig __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ExampleMergingConfig __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ExampleMergingConfig __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_example_utils.ExampleMergingConfig", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::ExampleMergingConfig", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "ExampleMergingConfig takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::ExampleMergingConfig>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::ExampleMergingConfig* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_ExampleMergingConfig"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::ExampleMergingConfig"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::ExampleMergingConfig* c = static_cast<::kaldi::nnet3::ExampleMergingConfig*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::ExampleMergingConfig*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyExampleMergingConfig

// get_nnet_example_size(a:NnetExample) -> int
static PyObject* wrapGetNnetExampleSize_as_get_nnet_example_size(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("a"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_nnet_example_size", names, &a[0])) return nullptr;
  ::kaldi::nnet3::NnetExample* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_nnet_example_size", names[0], "::kaldi::nnet3::NnetExample", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::GetNnetExampleSize(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

namespace pyExampleMergingStats {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::ExampleMergingStats> cpp;
};
static ::kaldi::nnet3::ExampleMergingStats* ThisPtr(PyObject*);

// wrote_example(example_size:int, structure_hash:int, minibatch_size:int)
static PyObject* wrapWroteExample_as_wrote_example(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("example_size"),
      C("structure_hash"),
      C("minibatch_size"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:wrote_example", names, &a[0], &a[1], &a[2])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("wrote_example", names[0], "int", a[0]);
  unsigned long arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("wrote_example", names[1], "unsigned long", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("wrote_example", names[2], "int", a[2]);
  // Call actual C++ method.
  ::kaldi::nnet3::ExampleMergingStats* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->WroteExample(std::move(arg1), std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// discarded_examples(example_size:int, structure_hash:int, num_discarded:int)
static PyObject* wrapDiscardedExamples_as_discarded_examples(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("example_size"),
      C("structure_hash"),
      C("num_discarded"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:discarded_examples", names, &a[0], &a[1], &a[2])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("discarded_examples", names[0], "int", a[0]);
  unsigned long arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("discarded_examples", names[1], "unsigned long", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("discarded_examples", names[2], "int", a[2]);
  // Call actual C++ method.
  ::kaldi::nnet3::ExampleMergingStats* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DiscardedExamples(std::move(arg1), std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// print_stats()
static PyObject* wrapPrintStats_as_print_stats(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::ExampleMergingStats* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->PrintStats();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("wrote_example"), (PyCFunction)wrapWroteExample_as_wrote_example, METH_VARARGS | METH_KEYWORDS, C("wrote_example(example_size:int, structure_hash:int, minibatch_size:int)\n  Calls C++ function\n  void ::kaldi::nnet3::ExampleMergingStats::WroteExample(int, unsigned long, int)")},
  {C("discarded_examples"), (PyCFunction)wrapDiscardedExamples_as_discarded_examples, METH_VARARGS | METH_KEYWORDS, C("discarded_examples(example_size:int, structure_hash:int, num_discarded:int)\n  Calls C++ function\n  void ::kaldi::nnet3::ExampleMergingStats::DiscardedExamples(int, unsigned long, int)")},
  {C("print_stats"), (PyCFunction)wrapPrintStats_as_print_stats, METH_NOARGS, C("print_stats()\n  Calls C++ function\n  void ::kaldi::nnet3::ExampleMergingStats::PrintStats()")},
  {}
};

// ExampleMergingStats __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ExampleMergingStats __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ExampleMergingStats __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_example_utils.ExampleMergingStats", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::ExampleMergingStats", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "ExampleMergingStats takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::ExampleMergingStats>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::ExampleMergingStats* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_ExampleMergingStats"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::ExampleMergingStats"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::ExampleMergingStats* c = static_cast<::kaldi::nnet3::ExampleMergingStats*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::ExampleMergingStats*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyExampleMergingStats

namespace pyExampleMerger {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::ExampleMerger> cpp;
};
static ::kaldi::nnet3::ExampleMerger* ThisPtr(PyObject*);

// __init__(config:ExampleMergingConfig, writer:NnetExampleWriter)
static PyObject* wrapExampleMerger_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("config"),
      C("writer"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::kaldi::nnet3::ExampleMergingConfig* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::nnet3::ExampleMergingConfig", a[0]);
  ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> > * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> > *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::ExampleMerger>(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// accept_example(a:NnetExample)
static PyObject* wrapAcceptExample_as_accept_example(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("a"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:accept_example", names, &a[0])) return nullptr;
  ::kaldi::nnet3::NnetExample * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accept_example", names[0], "::kaldi::nnet3::NnetExample *", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::ExampleMerger* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AcceptExample(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// finish()
static PyObject* wrapFinish_as_finish(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::ExampleMerger* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Finish();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// exit_status() -> int
static PyObject* wrapExitStatus_as_exit_status(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::ExampleMerger* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->ExitStatus();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapExampleMerger_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(config:ExampleMergingConfig, writer:NnetExampleWriter)\n  Calls C++ function\n  void ::kaldi::nnet3::ExampleMerger::ExampleMerger(::kaldi::nnet3::ExampleMergingConfig, ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> > *)")},
  {C("accept_example"), (PyCFunction)wrapAcceptExample_as_accept_example, METH_VARARGS | METH_KEYWORDS, C("accept_example(a:NnetExample)\n  Calls C++ function\n  void ::kaldi::nnet3::ExampleMerger::AcceptExample(::kaldi::nnet3::NnetExample *)")},
  {C("finish"), (PyCFunction)wrapFinish_as_finish, METH_NOARGS, C("finish()\n  Calls C++ function\n  void ::kaldi::nnet3::ExampleMerger::Finish()")},
  {C("exit_status"), (PyCFunction)wrapExitStatus_as_exit_status, METH_NOARGS, C("exit_status() -> int\n  Calls C++ function\n  int ::kaldi::nnet3::ExampleMerger::ExitStatus()")},
  {}
};

// ExampleMerger __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ExampleMerger __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ExampleMerger __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_example_utils.ExampleMerger", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::ExampleMerger", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapExampleMerger_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::ExampleMerger* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_ExampleMerger"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::ExampleMerger"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::ExampleMerger* c = static_cast<::kaldi::nnet3::ExampleMerger*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::ExampleMerger*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyExampleMerger


// Initialize module

static PyMethodDef Methods[] = {
  {C("merge_examples"), (PyCFunction)wrapMergeExamples_as_merge_examples, METH_VARARGS | METH_KEYWORDS, C("merge_examples(src:list<NnetExample>, compress:bool) -> NnetExample\n  Calls C++ function\n  void ::kaldi::nnet3::MergeExamples(::std::vector< ::kaldi::nnet3::NnetExample>, bool, ::kaldi::nnet3::NnetExample*)")},
  {C("get_computation_request"), (PyCFunction)wrapGetComputationRequest_as_get_computation_request, METH_VARARGS | METH_KEYWORDS, C("get_computation_request(nnet:Nnet, eg:NnetExample, need_model_derivative:bool, store_component_stats:bool) -> ComputationRequest\n  Calls C++ function\n  void ::kaldi::nnet3::GetComputationRequest(::kaldi::nnet3::Nnet, ::kaldi::nnet3::NnetExample, bool, bool, ::kaldi::nnet3::ComputationRequest*)")},
  {C("write_vector_as_char"), (PyCFunction)wrapWriteVectorAsChar_as_write_vector_as_char, METH_VARARGS | METH_KEYWORDS, C("write_vector_as_char(os:ostream, binary:bool, vec:VectorBase)\n  Calls C++ function\n  void ::kaldi::nnet3::WriteVectorAsChar(::std::basic_ostream<char, ::std::char_traits<char> >, bool, ::kaldi::VectorBase<float>)")},
  {C("read_vector_as_char"), (PyCFunction)wrapReadVectorAsChar_as_read_vector_as_char, METH_VARARGS | METH_KEYWORDS, C("read_vector_as_char(is:istream, binary:bool) -> Vector\n  Calls C++ function\n  void ::kaldi::nnet3::ReadVectorAsChar(::std::basic_istream<char, ::std::char_traits<char> >, bool, ::kaldi::Vector<float>*)")},
  {C("get_nnet_example_size"), (PyCFunction)wrapGetNnetExampleSize_as_get_nnet_example_size, METH_VARARGS | METH_KEYWORDS, C("get_nnet_example_size(a:NnetExample) -> int\n  Calls C++ function\n  int ::kaldi::nnet3::GetNnetExampleSize(::kaldi::nnet3::NnetExample)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyExampleGenerationConfig::wrapper_Type) < 0) return false;
  Py_INCREF(&pyExampleGenerationConfig::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyChunkTimeInfo::wrapper_Type) < 0) return false;
  Py_INCREF(&pyChunkTimeInfo::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyUtteranceSplitter::wrapper_Type) < 0) return false;
  Py_INCREF(&pyUtteranceSplitter::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyExampleMergingConfig::wrapper_Type) < 0) return false;
  Py_INCREF(&pyExampleMergingConfig::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyExampleMergingStats::wrapper_Type) < 0) return false;
  Py_INCREF(&pyExampleMergingStats::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyExampleMerger::wrapper_Type) < 0) return false;
  Py_INCREF(&pyExampleMerger::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_nnet_example_utils",  // module name
  "CLIF-generated module for nnet3/nnet-example-utils.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_example")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_computation")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_nnet")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_wave_reader")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_rnnlm_example")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_table")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "ExampleGenerationConfig", reinterpret_cast<PyObject*>(&pyExampleGenerationConfig::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "ChunkTimeInfo", reinterpret_cast<PyObject*>(&pyChunkTimeInfo::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "UtteranceSplitter", reinterpret_cast<PyObject*>(&pyUtteranceSplitter::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "ExampleMergingConfig", reinterpret_cast<PyObject*>(&pyExampleMergingConfig::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "ExampleMergingStats", reinterpret_cast<PyObject*>(&pyExampleMergingStats::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "ExampleMerger", reinterpret_cast<PyObject*>(&pyExampleMerger::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __nnet__example__utils_clifwrap

namespace kaldi { namespace nnet3 {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// ChunkTimeInfo to/from ::kaldi::nnet3::ChunkTimeInfo conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ChunkTimeInfo** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::ChunkTimeInfo* cpp = __nnet__example__utils_clifwrap::pyChunkTimeInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::ChunkTimeInfo>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ChunkTimeInfo* cpp = __nnet__example__utils_clifwrap::pyChunkTimeInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__example__utils_clifwrap::pyChunkTimeInfo::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::ChunkTimeInfo>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ChunkTimeInfo* cpp = __nnet__example__utils_clifwrap::pyChunkTimeInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__example__utils_clifwrap::pyChunkTimeInfo::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ChunkTimeInfo instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ChunkTimeInfo* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ChunkTimeInfo* cpp = __nnet__example__utils_clifwrap::pyChunkTimeInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::ChunkTimeInfo>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ChunkTimeInfo* cpp = __nnet__example__utils_clifwrap::pyChunkTimeInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::ChunkTimeInfo* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__example__utils_clifwrap::pyChunkTimeInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__example__utils_clifwrap::pyChunkTimeInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ChunkTimeInfo>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ChunkTimeInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__example__utils_clifwrap::pyChunkTimeInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__example__utils_clifwrap::pyChunkTimeInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ChunkTimeInfo>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ChunkTimeInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__example__utils_clifwrap::pyChunkTimeInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__example__utils_clifwrap::pyChunkTimeInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ChunkTimeInfo>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ChunkTimeInfo& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__example__utils_clifwrap::pyChunkTimeInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__example__utils_clifwrap::pyChunkTimeInfo::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::ChunkTimeInfo>(c);
  return py;
}

// ExampleGenerationConfig to/from ::kaldi::nnet3::ExampleGenerationConfig conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ExampleGenerationConfig** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::ExampleGenerationConfig* cpp = __nnet__example__utils_clifwrap::pyExampleGenerationConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::ExampleGenerationConfig>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ExampleGenerationConfig* cpp = __nnet__example__utils_clifwrap::pyExampleGenerationConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleGenerationConfig::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::ExampleGenerationConfig>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ExampleGenerationConfig* cpp = __nnet__example__utils_clifwrap::pyExampleGenerationConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleGenerationConfig::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ExampleGenerationConfig instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ExampleGenerationConfig* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ExampleGenerationConfig* cpp = __nnet__example__utils_clifwrap::pyExampleGenerationConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::ExampleGenerationConfig>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ExampleGenerationConfig* cpp = __nnet__example__utils_clifwrap::pyExampleGenerationConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::ExampleGenerationConfig* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__example__utils_clifwrap::pyExampleGenerationConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleGenerationConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ExampleGenerationConfig>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ExampleGenerationConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__example__utils_clifwrap::pyExampleGenerationConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleGenerationConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ExampleGenerationConfig>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ExampleGenerationConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__example__utils_clifwrap::pyExampleGenerationConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleGenerationConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ExampleGenerationConfig>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ExampleGenerationConfig& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__example__utils_clifwrap::pyExampleGenerationConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleGenerationConfig::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::ExampleGenerationConfig>(c);
  return py;
}

// ExampleMerger to/from ::kaldi::nnet3::ExampleMerger conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ExampleMerger** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::ExampleMerger* cpp = __nnet__example__utils_clifwrap::pyExampleMerger::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::ExampleMerger>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ExampleMerger* cpp = __nnet__example__utils_clifwrap::pyExampleMerger::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleMerger::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::ExampleMerger>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ExampleMerger* cpp = __nnet__example__utils_clifwrap::pyExampleMerger::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleMerger::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ExampleMerger instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::ExampleMerger* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__example__utils_clifwrap::pyExampleMerger::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleMerger::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ExampleMerger>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ExampleMerger> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__example__utils_clifwrap::pyExampleMerger::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleMerger::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ExampleMerger>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ExampleMerger> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__example__utils_clifwrap::pyExampleMerger::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleMerger::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ExampleMerger>(std::move(c));
  return py;
}

// ExampleMergingConfig to/from ::kaldi::nnet3::ExampleMergingConfig conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ExampleMergingConfig** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::ExampleMergingConfig* cpp = __nnet__example__utils_clifwrap::pyExampleMergingConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::ExampleMergingConfig>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ExampleMergingConfig* cpp = __nnet__example__utils_clifwrap::pyExampleMergingConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleMergingConfig::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::ExampleMergingConfig>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ExampleMergingConfig* cpp = __nnet__example__utils_clifwrap::pyExampleMergingConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleMergingConfig::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ExampleMergingConfig instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ExampleMergingConfig* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ExampleMergingConfig* cpp = __nnet__example__utils_clifwrap::pyExampleMergingConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::ExampleMergingConfig>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ExampleMergingConfig* cpp = __nnet__example__utils_clifwrap::pyExampleMergingConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::ExampleMergingConfig* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__example__utils_clifwrap::pyExampleMergingConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleMergingConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ExampleMergingConfig>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ExampleMergingConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__example__utils_clifwrap::pyExampleMergingConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleMergingConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ExampleMergingConfig>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ExampleMergingConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__example__utils_clifwrap::pyExampleMergingConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleMergingConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ExampleMergingConfig>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ExampleMergingConfig& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__example__utils_clifwrap::pyExampleMergingConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleMergingConfig::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::ExampleMergingConfig>(c);
  return py;
}

// ExampleMergingStats to/from ::kaldi::nnet3::ExampleMergingStats conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ExampleMergingStats** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::ExampleMergingStats* cpp = __nnet__example__utils_clifwrap::pyExampleMergingStats::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::ExampleMergingStats>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ExampleMergingStats* cpp = __nnet__example__utils_clifwrap::pyExampleMergingStats::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleMergingStats::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::ExampleMergingStats>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ExampleMergingStats* cpp = __nnet__example__utils_clifwrap::pyExampleMergingStats::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleMergingStats::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ExampleMergingStats instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ExampleMergingStats* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ExampleMergingStats* cpp = __nnet__example__utils_clifwrap::pyExampleMergingStats::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::ExampleMergingStats>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ExampleMergingStats* cpp = __nnet__example__utils_clifwrap::pyExampleMergingStats::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::ExampleMergingStats* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__example__utils_clifwrap::pyExampleMergingStats::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleMergingStats::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ExampleMergingStats>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ExampleMergingStats> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__example__utils_clifwrap::pyExampleMergingStats::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleMergingStats::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ExampleMergingStats>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ExampleMergingStats> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__example__utils_clifwrap::pyExampleMergingStats::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleMergingStats::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ExampleMergingStats>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ExampleMergingStats& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__example__utils_clifwrap::pyExampleMergingStats::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__example__utils_clifwrap::pyExampleMergingStats::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::ExampleMergingStats>(c);
  return py;
}

// UtteranceSplitter to/from ::kaldi::nnet3::UtteranceSplitter conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::UtteranceSplitter** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::UtteranceSplitter* cpp = __nnet__example__utils_clifwrap::pyUtteranceSplitter::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::UtteranceSplitter>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::UtteranceSplitter* cpp = __nnet__example__utils_clifwrap::pyUtteranceSplitter::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__example__utils_clifwrap::pyUtteranceSplitter::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::UtteranceSplitter>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::UtteranceSplitter* cpp = __nnet__example__utils_clifwrap::pyUtteranceSplitter::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__example__utils_clifwrap::pyUtteranceSplitter::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert UtteranceSplitter instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::UtteranceSplitter* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__example__utils_clifwrap::pyUtteranceSplitter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__example__utils_clifwrap::pyUtteranceSplitter::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::UtteranceSplitter>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::UtteranceSplitter> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__example__utils_clifwrap::pyUtteranceSplitter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__example__utils_clifwrap::pyUtteranceSplitter::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::UtteranceSplitter>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::UtteranceSplitter> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__example__utils_clifwrap::pyUtteranceSplitter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__example__utils_clifwrap::pyUtteranceSplitter::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::UtteranceSplitter>(std::move(c));
  return py;
}

} }  // namespace kaldi::nnet3
