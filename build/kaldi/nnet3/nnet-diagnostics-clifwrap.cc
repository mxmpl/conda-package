//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/nnet-diagnostics.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "itf/options-itf-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "matrix/sparse-matrix-clifwrap.h"
#include "cudamatrix/cu-matrix-clifwrap.h"
#include "nnet3/nnet-example-clifwrap.h"
#include "nnet3/nnet-nnet-clifwrap.h"
#include "nnet3/nnet-compute-clifwrap.h"
#include "nnet3/nnet-optimize-clifwrap.h"
#include "nnet-diagnostics-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __nnet__diagnostics_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pySimpleObjectiveInfo {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::SimpleObjectiveInfo> cpp;
};
static ::kaldi::nnet3::SimpleObjectiveInfo* ThisPtr(PyObject*);

static PyObject* get_tot_weight(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->tot_weight, {});
}

static int set_tot_weight(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the tot_weight attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->tot_weight)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for tot_weight:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_tot_objective(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->tot_objective, {});
}

static int set_tot_objective(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the tot_objective attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->tot_objective)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for tot_objective:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("tot_weight"), get_tot_weight, set_tot_weight, C("C++ double SimpleObjectiveInfo.tot_weight")},
  {C("tot_objective"), get_tot_objective, set_tot_objective, C("C++ double SimpleObjectiveInfo.tot_objective")},
  {}
};

// SimpleObjectiveInfo __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// SimpleObjectiveInfo __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// SimpleObjectiveInfo __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_diagnostics.SimpleObjectiveInfo", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::SimpleObjectiveInfo", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  nullptr,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "SimpleObjectiveInfo takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::SimpleObjectiveInfo>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::SimpleObjectiveInfo* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_SimpleObjectiveInfo"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::SimpleObjectiveInfo"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::SimpleObjectiveInfo* c = static_cast<::kaldi::nnet3::SimpleObjectiveInfo*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::SimpleObjectiveInfo*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pySimpleObjectiveInfo

namespace pyPerDimObjectiveInfo {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::PerDimObjectiveInfo> cpp;
};
static ::kaldi::nnet3::PerDimObjectiveInfo* ThisPtr(PyObject*);

static PyObject* get_tot_weight_vec(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->tot_weight_vec), {});
}

static int set_tot_weight_vec(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the tot_weight_vec attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->tot_weight_vec)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for tot_weight_vec:Vector", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_tot_objective_vec(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->tot_objective_vec), {});
}

static int set_tot_objective_vec(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the tot_objective_vec attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->tot_objective_vec)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for tot_objective_vec:Vector", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("tot_weight_vec"), get_tot_weight_vec, set_tot_weight_vec, C("C++ ::kaldi::Vector< ::kaldi::BaseFloat> PerDimObjectiveInfo.tot_weight_vec")},
  {C("tot_objective_vec"), get_tot_objective_vec, set_tot_objective_vec, C("C++ ::kaldi::Vector< ::kaldi::BaseFloat> PerDimObjectiveInfo.tot_objective_vec")},
  {}
};

// Implicit cast this as ::kaldi::nnet3::SimpleObjectiveInfo*
static PyObject* as_kaldi_nnet3_SimpleObjectiveInfo(PyObject* self) {
  ::kaldi::nnet3::SimpleObjectiveInfo* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::nnet3::SimpleObjectiveInfo"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("as_kaldi_nnet3_SimpleObjectiveInfo"), (PyCFunction)as_kaldi_nnet3_SimpleObjectiveInfo, METH_NOARGS, C("Upcast to ::kaldi::nnet3::SimpleObjectiveInfo*")},
  {}
};

// PerDimObjectiveInfo __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// PerDimObjectiveInfo __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// PerDimObjectiveInfo __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_diagnostics.PerDimObjectiveInfo", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::PerDimObjectiveInfo", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "PerDimObjectiveInfo takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::PerDimObjectiveInfo>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::PerDimObjectiveInfo* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_PerDimObjectiveInfo"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::PerDimObjectiveInfo"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::PerDimObjectiveInfo* c = static_cast<::kaldi::nnet3::PerDimObjectiveInfo*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::PerDimObjectiveInfo*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyPerDimObjectiveInfo

namespace pyNnetComputeProbOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::NnetComputeProbOptions> cpp;
};
static ::kaldi::nnet3::NnetComputeProbOptions* ThisPtr(PyObject*);

static PyObject* get_debug_computation(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->debug_computation, {});
}

static int set_debug_computation(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the debug_computation attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->debug_computation)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for debug_computation:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_compute_deriv(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->compute_deriv, {});
}

static int set_compute_deriv(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the compute_deriv attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->compute_deriv)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for compute_deriv:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_compute_accuracy(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->compute_accuracy, {});
}

static int set_compute_accuracy(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the compute_accuracy attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->compute_accuracy)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for compute_accuracy:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_store_component_stats(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->store_component_stats, {});
}

static int set_store_component_stats(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the store_component_stats attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->store_component_stats)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for store_component_stats:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_compute_per_dim_accuracy(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->compute_per_dim_accuracy, {});
}

static int set_compute_per_dim_accuracy(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the compute_per_dim_accuracy attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->compute_per_dim_accuracy)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for compute_per_dim_accuracy:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_optimize_config(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->optimize_config), {});
}

static int set_optimize_config(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the optimize_config attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->optimize_config)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for optimize_config:NnetOptimizeOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_compute_config(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->compute_config), {});
}

static int set_compute_config(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the compute_config attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->compute_config)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for compute_config:NnetComputeOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_compiler_config(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->compiler_config), {});
}

static int set_compiler_config(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the compiler_config attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->compiler_config)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for compiler_config:CachingOptimizingCompilerOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::NnetComputeProbOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("debug_computation"), get_debug_computation, set_debug_computation, C("C++ bool NnetComputeProbOptions.debug_computation")},
  {C("compute_deriv"), get_compute_deriv, set_compute_deriv, C("C++ bool NnetComputeProbOptions.compute_deriv")},
  {C("compute_accuracy"), get_compute_accuracy, set_compute_accuracy, C("C++ bool NnetComputeProbOptions.compute_accuracy")},
  {C("store_component_stats"), get_store_component_stats, set_store_component_stats, C("C++ bool NnetComputeProbOptions.store_component_stats")},
  {C("compute_per_dim_accuracy"), get_compute_per_dim_accuracy, set_compute_per_dim_accuracy, C("C++ bool NnetComputeProbOptions.compute_per_dim_accuracy")},
  {C("optimize_config"), get_optimize_config, set_optimize_config, C("C++ ::kaldi::nnet3::NnetOptimizeOptions NnetComputeProbOptions.optimize_config")},
  {C("compute_config"), get_compute_config, set_compute_config, C("C++ ::kaldi::nnet3::NnetComputeOptions NnetComputeProbOptions.compute_config")},
  {C("compiler_config"), get_compiler_config, set_compiler_config, C("C++ ::kaldi::nnet3::CachingOptimizingCompilerOptions NnetComputeProbOptions.compiler_config")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::nnet3::NnetComputeProbOptions::Register(::kaldi::OptionsItf *)")},
  {}
};

// NnetComputeProbOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// NnetComputeProbOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// NnetComputeProbOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_diagnostics.NnetComputeProbOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::NnetComputeProbOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "NnetComputeProbOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::NnetComputeProbOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::NnetComputeProbOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_NnetComputeProbOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::NnetComputeProbOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::NnetComputeProbOptions* c = static_cast<::kaldi::nnet3::NnetComputeProbOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::NnetComputeProbOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyNnetComputeProbOptions

namespace pyNnetComputeProb {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::NnetComputeProb> cpp;
};
static ::kaldi::nnet3::NnetComputeProb* ThisPtr(PyObject*);

// __init__(config:NnetComputeProbOptions, nnet:Nnet)
static PyObject* wrapNnetComputeProb_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("config"),
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::kaldi::nnet3::NnetComputeProbOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::nnet3::NnetComputeProbOptions", a[0]);
  ::kaldi::nnet3::Nnet* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::nnet3::Nnet", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::NnetComputeProb>(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// reset()
static PyObject* wrapReset_as_reset(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::NnetComputeProb* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Reset();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// compute(eg:NnetExample)
static PyObject* wrapCompute_as_compute(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("eg"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:compute", names, &a[0])) return nullptr;
  ::kaldi::nnet3::NnetExample* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute", names[0], "::kaldi::nnet3::NnetExample", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::NnetComputeProb* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Compute(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// print_total_stats() -> bool
static PyObject* wrapPrintTotalStats_as_print_total_stats(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::NnetComputeProb* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->PrintTotalStats();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_objective(output_name:str) -> SimpleObjectiveInfo
static PyObject* wrapGetObjective_as_get_objective(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("output_name"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_objective", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_objective", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::NnetComputeProb* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  const ::kaldi::nnet3::SimpleObjectiveInfo * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetObjective(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_total_objective() -> (tot_objective:float, tot_weight:float)
static PyObject* wrapGetTotalObjective_as_get_total_objective(PyObject* self) {
  double ret1{};
  // Call actual C++ method.
  ::kaldi::nnet3::NnetComputeProb* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  double ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetTotalObjective(&ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// get_deriv() -> Nnet
static PyObject* wrapGetDeriv_as_get_deriv(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::NnetComputeProb* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::nnet3::Nnet ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetDeriv();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapNnetComputeProb_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(config:NnetComputeProbOptions, nnet:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::NnetComputeProb::NnetComputeProb(::kaldi::nnet3::NnetComputeProbOptions, ::kaldi::nnet3::Nnet)")},
  {C("reset"), (PyCFunction)wrapReset_as_reset, METH_NOARGS, C("reset()\n  Calls C++ function\n  void ::kaldi::nnet3::NnetComputeProb::Reset()")},
  {C("compute"), (PyCFunction)wrapCompute_as_compute, METH_VARARGS | METH_KEYWORDS, C("compute(eg:NnetExample)\n  Calls C++ function\n  void ::kaldi::nnet3::NnetComputeProb::Compute(::kaldi::nnet3::NnetExample)")},
  {C("print_total_stats"), (PyCFunction)wrapPrintTotalStats_as_print_total_stats, METH_NOARGS, C("print_total_stats() -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::NnetComputeProb::PrintTotalStats()")},
  {C("get_objective"), (PyCFunction)wrapGetObjective_as_get_objective, METH_VARARGS | METH_KEYWORDS, C("get_objective(output_name:str) -> SimpleObjectiveInfo\n  Calls C++ function\n  const ::kaldi::nnet3::SimpleObjectiveInfo * ::kaldi::nnet3::NnetComputeProb::GetObjective(::std::string)")},
  {C("get_total_objective"), (PyCFunction)wrapGetTotalObjective_as_get_total_objective, METH_NOARGS, C("get_total_objective() -> (tot_objective:float, tot_weight:float)\n  Calls C++ function\n  double ::kaldi::nnet3::NnetComputeProb::GetTotalObjective(double*)")},
  {C("get_deriv"), (PyCFunction)wrapGetDeriv_as_get_deriv, METH_NOARGS, C("get_deriv() -> Nnet\n  Calls C++ function\n  ::kaldi::nnet3::Nnet ::kaldi::nnet3::NnetComputeProb::GetDeriv()")},
  {}
};

// NnetComputeProb __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// NnetComputeProb __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// NnetComputeProb __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_diagnostics.NnetComputeProb", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::NnetComputeProb", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapNnetComputeProb_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::NnetComputeProb* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_NnetComputeProb"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::NnetComputeProb"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::NnetComputeProb* c = static_cast<::kaldi::nnet3::NnetComputeProb*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::NnetComputeProb*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyNnetComputeProb


// Initialize module

bool Ready() {
  if (PyType_Ready(&pySimpleObjectiveInfo::wrapper_Type) < 0) return false;
  Py_INCREF(&pySimpleObjectiveInfo::wrapper_Type);  // For PyModule_AddObject to steal.
  pyPerDimObjectiveInfo::wrapper_Type.tp_base = &pySimpleObjectiveInfo::wrapper_Type;
  if (PyType_Ready(&pyPerDimObjectiveInfo::wrapper_Type) < 0) return false;
  Py_INCREF(&pyPerDimObjectiveInfo::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyNnetComputeProbOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyNnetComputeProbOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyNnetComputeProb::wrapper_Type) < 0) return false;
  Py_INCREF(&pyNnetComputeProb::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_nnet_diagnostics",  // module name
  "CLIF-generated module for nnet3/nnet-diagnostics.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_sparse_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_cu_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_example")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_nnet")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_compute")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_optimize")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "SimpleObjectiveInfo", reinterpret_cast<PyObject*>(&pySimpleObjectiveInfo::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "PerDimObjectiveInfo", reinterpret_cast<PyObject*>(&pyPerDimObjectiveInfo::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "NnetComputeProbOptions", reinterpret_cast<PyObject*>(&pyNnetComputeProbOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "NnetComputeProb", reinterpret_cast<PyObject*>(&pyNnetComputeProb::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __nnet__diagnostics_clifwrap

namespace kaldi { namespace nnet3 {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// NnetComputeProb to/from ::kaldi::nnet3::NnetComputeProb conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::NnetComputeProb** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::NnetComputeProb* cpp = __nnet__diagnostics_clifwrap::pyNnetComputeProb::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::NnetComputeProb>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NnetComputeProb* cpp = __nnet__diagnostics_clifwrap::pyNnetComputeProb::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__diagnostics_clifwrap::pyNnetComputeProb::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::NnetComputeProb>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NnetComputeProb* cpp = __nnet__diagnostics_clifwrap::pyNnetComputeProb::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__diagnostics_clifwrap::pyNnetComputeProb::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert NnetComputeProb instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::NnetComputeProb* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__diagnostics_clifwrap::pyNnetComputeProb::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__diagnostics_clifwrap::pyNnetComputeProb::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NnetComputeProb>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::NnetComputeProb> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__diagnostics_clifwrap::pyNnetComputeProb::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__diagnostics_clifwrap::pyNnetComputeProb::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NnetComputeProb>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::NnetComputeProb> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__diagnostics_clifwrap::pyNnetComputeProb::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__diagnostics_clifwrap::pyNnetComputeProb::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NnetComputeProb>(std::move(c));
  return py;
}

// NnetComputeProbOptions to/from ::kaldi::nnet3::NnetComputeProbOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::NnetComputeProbOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::NnetComputeProbOptions* cpp = __nnet__diagnostics_clifwrap::pyNnetComputeProbOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::NnetComputeProbOptions>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NnetComputeProbOptions* cpp = __nnet__diagnostics_clifwrap::pyNnetComputeProbOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__diagnostics_clifwrap::pyNnetComputeProbOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::NnetComputeProbOptions>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NnetComputeProbOptions* cpp = __nnet__diagnostics_clifwrap::pyNnetComputeProbOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__diagnostics_clifwrap::pyNnetComputeProbOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert NnetComputeProbOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::NnetComputeProbOptions* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NnetComputeProbOptions* cpp = __nnet__diagnostics_clifwrap::pyNnetComputeProbOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::NnetComputeProbOptions>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NnetComputeProbOptions* cpp = __nnet__diagnostics_clifwrap::pyNnetComputeProbOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::NnetComputeProbOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__diagnostics_clifwrap::pyNnetComputeProbOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__diagnostics_clifwrap::pyNnetComputeProbOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NnetComputeProbOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::NnetComputeProbOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__diagnostics_clifwrap::pyNnetComputeProbOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__diagnostics_clifwrap::pyNnetComputeProbOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NnetComputeProbOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::NnetComputeProbOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__diagnostics_clifwrap::pyNnetComputeProbOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__diagnostics_clifwrap::pyNnetComputeProbOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NnetComputeProbOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::NnetComputeProbOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__diagnostics_clifwrap::pyNnetComputeProbOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__diagnostics_clifwrap::pyNnetComputeProbOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::NnetComputeProbOptions>(c);
  return py;
}

// PerDimObjectiveInfo to/from ::kaldi::nnet3::PerDimObjectiveInfo conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::PerDimObjectiveInfo** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::PerDimObjectiveInfo* cpp = __nnet__diagnostics_clifwrap::pyPerDimObjectiveInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::PerDimObjectiveInfo>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::PerDimObjectiveInfo* cpp = __nnet__diagnostics_clifwrap::pyPerDimObjectiveInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__diagnostics_clifwrap::pyPerDimObjectiveInfo::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::PerDimObjectiveInfo>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::PerDimObjectiveInfo* cpp = __nnet__diagnostics_clifwrap::pyPerDimObjectiveInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__diagnostics_clifwrap::pyPerDimObjectiveInfo::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert PerDimObjectiveInfo instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::PerDimObjectiveInfo* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::PerDimObjectiveInfo* cpp = __nnet__diagnostics_clifwrap::pyPerDimObjectiveInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::PerDimObjectiveInfo>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::PerDimObjectiveInfo* cpp = __nnet__diagnostics_clifwrap::pyPerDimObjectiveInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::PerDimObjectiveInfo* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__diagnostics_clifwrap::pyPerDimObjectiveInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__diagnostics_clifwrap::pyPerDimObjectiveInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::PerDimObjectiveInfo>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::PerDimObjectiveInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__diagnostics_clifwrap::pyPerDimObjectiveInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__diagnostics_clifwrap::pyPerDimObjectiveInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::PerDimObjectiveInfo>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::PerDimObjectiveInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__diagnostics_clifwrap::pyPerDimObjectiveInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__diagnostics_clifwrap::pyPerDimObjectiveInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::PerDimObjectiveInfo>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::PerDimObjectiveInfo& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__diagnostics_clifwrap::pyPerDimObjectiveInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__diagnostics_clifwrap::pyPerDimObjectiveInfo::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::PerDimObjectiveInfo>(c);
  return py;
}

// SimpleObjectiveInfo to/from ::kaldi::nnet3::SimpleObjectiveInfo conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::SimpleObjectiveInfo** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::SimpleObjectiveInfo* cpp = __nnet__diagnostics_clifwrap::pySimpleObjectiveInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::SimpleObjectiveInfo>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::SimpleObjectiveInfo* cpp = __nnet__diagnostics_clifwrap::pySimpleObjectiveInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__diagnostics_clifwrap::pySimpleObjectiveInfo::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::SimpleObjectiveInfo>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::SimpleObjectiveInfo* cpp = __nnet__diagnostics_clifwrap::pySimpleObjectiveInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__diagnostics_clifwrap::pySimpleObjectiveInfo::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert SimpleObjectiveInfo instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::SimpleObjectiveInfo* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::SimpleObjectiveInfo* cpp = __nnet__diagnostics_clifwrap::pySimpleObjectiveInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::SimpleObjectiveInfo>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::SimpleObjectiveInfo* cpp = __nnet__diagnostics_clifwrap::pySimpleObjectiveInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::SimpleObjectiveInfo* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__diagnostics_clifwrap::pySimpleObjectiveInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__diagnostics_clifwrap::pySimpleObjectiveInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::SimpleObjectiveInfo>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::SimpleObjectiveInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__diagnostics_clifwrap::pySimpleObjectiveInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__diagnostics_clifwrap::pySimpleObjectiveInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::SimpleObjectiveInfo>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::SimpleObjectiveInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__diagnostics_clifwrap::pySimpleObjectiveInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__diagnostics_clifwrap::pySimpleObjectiveInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::SimpleObjectiveInfo>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::SimpleObjectiveInfo& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__diagnostics_clifwrap::pySimpleObjectiveInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__diagnostics_clifwrap::pySimpleObjectiveInfo::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::SimpleObjectiveInfo>(c);
  return py;
}

} }  // namespace kaldi::nnet3
