//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/nnet-simple-component.clif

#include <memory>
#include "clif/python/optional.h"
#include "nnet3/nnet-simple-component.h"
#include "clif/python/postconv.h"

namespace kaldi { namespace nnet3 {
using namespace ::clif;

// CLIF use `::kaldi::nnet3::AffineComponent` as AffineComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::AffineComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::AffineComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::AffineComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::AffineComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::AffineComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::AffineComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::AffineComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::AffineComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::BlockAffineComponent` as BlockAffineComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::BlockAffineComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::BlockAffineComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::BlockAffineComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::BlockAffineComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::BlockAffineComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::BlockAffineComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::BlockAffineComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::BlockAffineComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::ClipGradientComponent` as ClipGradientComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ClipGradientComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::ClipGradientComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::ClipGradientComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::ClipGradientComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ClipGradientComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ClipGradientComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ClipGradientComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ClipGradientComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::CompositeComponent` as CompositeComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::CompositeComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::CompositeComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::CompositeComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::CompositeComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::CompositeComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::CompositeComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::CompositeComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::CompositeComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::ConstantFunctionComponent` as ConstantFunctionComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ConstantFunctionComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::ConstantFunctionComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::ConstantFunctionComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::ConstantFunctionComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ConstantFunctionComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ConstantFunctionComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ConstantFunctionComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ConstantFunctionComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::DropoutComponent` as DropoutComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::DropoutComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::DropoutComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::DropoutComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::DropoutComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::DropoutComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::DropoutComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::DropoutComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::DropoutComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::ElementwiseProductComponent` as ElementwiseProductComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ElementwiseProductComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::ElementwiseProductComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::ElementwiseProductComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::ElementwiseProductComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ElementwiseProductComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ElementwiseProductComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ElementwiseProductComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ElementwiseProductComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::FixedAffineComponent` as FixedAffineComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::FixedAffineComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::FixedAffineComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::FixedAffineComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::FixedAffineComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::FixedAffineComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::FixedAffineComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::FixedAffineComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::FixedAffineComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::FixedBiasComponent` as FixedBiasComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::FixedBiasComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::FixedBiasComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::FixedBiasComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::FixedBiasComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::FixedBiasComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::FixedBiasComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::FixedBiasComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::FixedBiasComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::FixedScaleComponent` as FixedScaleComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::FixedScaleComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::FixedScaleComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::FixedScaleComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::FixedScaleComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::FixedScaleComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::FixedScaleComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::FixedScaleComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::FixedScaleComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::LinearComponent` as LinearComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::LinearComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::LinearComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::LinearComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::LinearComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::LinearComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::LinearComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::LinearComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::LinearComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::LogSoftmaxComponent` as LogSoftmaxComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::LogSoftmaxComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::LogSoftmaxComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::LogSoftmaxComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::LogSoftmaxComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::LogSoftmaxComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::LogSoftmaxComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::LogSoftmaxComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::LogSoftmaxComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::LstmNonlinearityComponent` as LstmNonlinearityComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::LstmNonlinearityComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::LstmNonlinearityComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::LstmNonlinearityComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::LstmNonlinearityComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::LstmNonlinearityComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::LstmNonlinearityComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::LstmNonlinearityComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::LstmNonlinearityComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::NaturalGradientAffineComponent` as NaturalGradientAffineComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::NaturalGradientAffineComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::NaturalGradientAffineComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::NaturalGradientAffineComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::NaturalGradientAffineComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::NaturalGradientAffineComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::NaturalGradientAffineComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::NaturalGradientAffineComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::NaturalGradientAffineComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::NaturalGradientPerElementScaleComponent` as NaturalGradientPerElementScaleComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::NaturalGradientPerElementScaleComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::NaturalGradientPerElementScaleComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::NaturalGradientPerElementScaleComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::NaturalGradientPerElementScaleComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::NaturalGradientPerElementScaleComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::NaturalGradientPerElementScaleComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::NaturalGradientPerElementScaleComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::NaturalGradientPerElementScaleComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::NaturalGradientRepeatedAffineComponent` as NaturalGradientRepeatedAffineComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::NaturalGradientRepeatedAffineComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::NaturalGradientRepeatedAffineComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::NaturalGradientRepeatedAffineComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::NaturalGradientRepeatedAffineComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::NaturalGradientRepeatedAffineComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::NaturalGradientRepeatedAffineComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::NaturalGradientRepeatedAffineComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::NaturalGradientRepeatedAffineComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::NoOpComponent` as NoOpComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::NoOpComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::NoOpComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::NoOpComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::NoOpComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::NoOpComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::NoOpComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::NoOpComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::NoOpComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::PerElementOffsetComponent` as PerElementOffsetComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::PerElementOffsetComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::PerElementOffsetComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::PerElementOffsetComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::PerElementOffsetComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::PerElementOffsetComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::PerElementOffsetComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::PerElementOffsetComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::PerElementOffsetComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::PerElementScaleComponent` as PerElementScaleComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::PerElementScaleComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::PerElementScaleComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::PerElementScaleComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::PerElementScaleComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::PerElementScaleComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::PerElementScaleComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::PerElementScaleComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::PerElementScaleComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::PermuteComponent` as PermuteComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::PermuteComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::PermuteComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::PermuteComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::PermuteComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::PermuteComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::PermuteComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::PermuteComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::PermuteComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::PnormComponent` as PnormComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::PnormComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::PnormComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::PnormComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::PnormComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::PnormComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::PnormComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::PnormComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::PnormComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::RectifiedLinearComponent` as RectifiedLinearComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::RectifiedLinearComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::RectifiedLinearComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::RectifiedLinearComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::RectifiedLinearComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::RectifiedLinearComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::RectifiedLinearComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::RectifiedLinearComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::RectifiedLinearComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::RepeatedAffineComponent` as RepeatedAffineComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::RepeatedAffineComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::RepeatedAffineComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::RepeatedAffineComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::RepeatedAffineComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::RepeatedAffineComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::RepeatedAffineComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::RepeatedAffineComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::RepeatedAffineComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::ScaleAndOffsetComponent` as ScaleAndOffsetComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ScaleAndOffsetComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::ScaleAndOffsetComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::ScaleAndOffsetComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::ScaleAndOffsetComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ScaleAndOffsetComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ScaleAndOffsetComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ScaleAndOffsetComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ScaleAndOffsetComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::SigmoidComponent` as SigmoidComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::SigmoidComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::SigmoidComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::SigmoidComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::SigmoidComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::SigmoidComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::SigmoidComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::SigmoidComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::SigmoidComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::SoftmaxComponent` as SoftmaxComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::SoftmaxComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::SoftmaxComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::SoftmaxComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::SoftmaxComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::SoftmaxComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::SoftmaxComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::SoftmaxComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::SoftmaxComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::SumBlockComponent` as SumBlockComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::SumBlockComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::SumBlockComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::SumBlockComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::SumBlockComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::SumBlockComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::SumBlockComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::SumBlockComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::SumBlockComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::SumGroupComponent` as SumGroupComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::SumGroupComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::SumGroupComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::SumGroupComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::SumGroupComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::SumGroupComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::SumGroupComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::SumGroupComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::SumGroupComponent&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::TanhComponent` as TanhComponent
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::TanhComponent** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::TanhComponent>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::TanhComponent>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::TanhComponent*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::TanhComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::TanhComponent>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::TanhComponent*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::TanhComponent&, py::PostConv) = delete;

} }  // namespace kaldi::nnet3

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_nnet_simple_component")) Py_DECREF(m);
// CLIF init_module else goto err;
