//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/sgmm2/estimate-am-sgmm2.clif

#include <memory>
#include "clif/python/optional.h"
#include "sgmm2/estimate-am-sgmm2.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::MleAmSgmm2Accs` as MleAmSgmm2Accs
bool Clif_PyObjAs(PyObject* input, ::kaldi::MleAmSgmm2Accs** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::MleAmSgmm2Accs>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::MleAmSgmm2Accs>* output);
PyObject* Clif_PyObjFrom(::kaldi::MleAmSgmm2Accs*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::MleAmSgmm2Accs>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::MleAmSgmm2Accs>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::MleAmSgmm2Accs*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::MleAmSgmm2Accs&, py::PostConv) = delete;
// CLIF use `::kaldi::MleAmSgmm2Options` as MleAmSgmm2Options
bool Clif_PyObjAs(PyObject* input, ::kaldi::MleAmSgmm2Options** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::MleAmSgmm2Options>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::MleAmSgmm2Options>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::MleAmSgmm2Options* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::MleAmSgmm2Options>* output);
PyObject* Clif_PyObjFrom(::kaldi::MleAmSgmm2Options*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::MleAmSgmm2Options>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::MleAmSgmm2Options>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::MleAmSgmm2Options&, py::PostConv);
// CLIF use `::kaldi::MleAmSgmm2Updater` as MleAmSgmm2Updater
bool Clif_PyObjAs(PyObject* input, ::kaldi::MleAmSgmm2Updater** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::MleAmSgmm2Updater>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::MleAmSgmm2Updater>* output);
PyObject* Clif_PyObjFrom(::kaldi::MleAmSgmm2Updater*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::MleAmSgmm2Updater>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::MleAmSgmm2Updater>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::MleAmSgmm2Updater*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::MleAmSgmm2Updater&, py::PostConv) = delete;
// CLIF use `::kaldi::MleSgmm2SpeakerAccs` as MleSgmm2SpeakerAccs
bool Clif_PyObjAs(PyObject* input, ::kaldi::MleSgmm2SpeakerAccs** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::MleSgmm2SpeakerAccs>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::MleSgmm2SpeakerAccs>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::MleSgmm2SpeakerAccs* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::MleSgmm2SpeakerAccs>* output);
PyObject* Clif_PyObjFrom(::kaldi::MleSgmm2SpeakerAccs*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::MleSgmm2SpeakerAccs>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::MleSgmm2SpeakerAccs>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::MleSgmm2SpeakerAccs&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_estimate_am_sgmm2")) Py_DECREF(m);
// CLIF init_module else goto err;
