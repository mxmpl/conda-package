//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/sgmm2/am-sgmm2.clif

#include <memory>
#include "clif/python/optional.h"
#include "sgmm2/am-sgmm2.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::AmSgmm2` as AmSgmm2
bool Clif_PyObjAs(PyObject* input, ::kaldi::AmSgmm2** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::AmSgmm2>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::AmSgmm2>* output);
PyObject* Clif_PyObjFrom(::kaldi::AmSgmm2*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::AmSgmm2>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::AmSgmm2>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::AmSgmm2*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::AmSgmm2&, py::PostConv) = delete;
// CLIF use `::kaldi::Sgmm2GauPostElement` as Sgmm2GauPostElement
bool Clif_PyObjAs(PyObject* input, ::kaldi::Sgmm2GauPostElement** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::Sgmm2GauPostElement>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::Sgmm2GauPostElement>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::Sgmm2GauPostElement* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::Sgmm2GauPostElement>* output);
PyObject* Clif_PyObjFrom(::kaldi::Sgmm2GauPostElement*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::Sgmm2GauPostElement>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::Sgmm2GauPostElement>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::Sgmm2GauPostElement&, py::PostConv);
// CLIF use `::kaldi::Sgmm2GselectConfig` as Sgmm2GselectConfig
bool Clif_PyObjAs(PyObject* input, ::kaldi::Sgmm2GselectConfig** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::Sgmm2GselectConfig>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::Sgmm2GselectConfig>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::Sgmm2GselectConfig* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::Sgmm2GselectConfig>* output);
PyObject* Clif_PyObjFrom(::kaldi::Sgmm2GselectConfig*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::Sgmm2GselectConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::Sgmm2GselectConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::Sgmm2GselectConfig&, py::PostConv);
// CLIF use `::kaldi::Sgmm2LikelihoodCache` as Sgmm2LikelihoodCache
bool Clif_PyObjAs(PyObject* input, ::kaldi::Sgmm2LikelihoodCache** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::Sgmm2LikelihoodCache>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::Sgmm2LikelihoodCache>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::Sgmm2LikelihoodCache* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::Sgmm2LikelihoodCache>* output);
PyObject* Clif_PyObjFrom(::kaldi::Sgmm2LikelihoodCache*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::Sgmm2LikelihoodCache>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::Sgmm2LikelihoodCache>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::Sgmm2LikelihoodCache&, py::PostConv);
// CLIF use `::kaldi::Sgmm2LikelihoodCache::PdfCacheElement` as Sgmm2LikelihoodCache.PdfCacheElement
bool Clif_PyObjAs(PyObject* input, ::kaldi::Sgmm2LikelihoodCache::PdfCacheElement** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::Sgmm2LikelihoodCache::PdfCacheElement>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::Sgmm2LikelihoodCache::PdfCacheElement>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::Sgmm2LikelihoodCache::PdfCacheElement* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::Sgmm2LikelihoodCache::PdfCacheElement>* output);
PyObject* Clif_PyObjFrom(::kaldi::Sgmm2LikelihoodCache::PdfCacheElement*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::Sgmm2LikelihoodCache::PdfCacheElement>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::Sgmm2LikelihoodCache::PdfCacheElement>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::Sgmm2LikelihoodCache::PdfCacheElement&, py::PostConv);
// CLIF use `::kaldi::Sgmm2LikelihoodCache::SubstateCacheElement` as Sgmm2LikelihoodCache.SubstateCacheElement
bool Clif_PyObjAs(PyObject* input, ::kaldi::Sgmm2LikelihoodCache::SubstateCacheElement** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::Sgmm2LikelihoodCache::SubstateCacheElement>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::Sgmm2LikelihoodCache::SubstateCacheElement>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::Sgmm2LikelihoodCache::SubstateCacheElement* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::Sgmm2LikelihoodCache::SubstateCacheElement>* output);
PyObject* Clif_PyObjFrom(::kaldi::Sgmm2LikelihoodCache::SubstateCacheElement*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::Sgmm2LikelihoodCache::SubstateCacheElement>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::Sgmm2LikelihoodCache::SubstateCacheElement>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::Sgmm2LikelihoodCache::SubstateCacheElement&, py::PostConv);
// CLIF use `::kaldi::Sgmm2PerFrameDerivedVars` as Sgmm2PerFrameDerivedVars
bool Clif_PyObjAs(PyObject* input, ::kaldi::Sgmm2PerFrameDerivedVars** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::Sgmm2PerFrameDerivedVars>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::Sgmm2PerFrameDerivedVars>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::Sgmm2PerFrameDerivedVars* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::Sgmm2PerFrameDerivedVars>* output);
PyObject* Clif_PyObjFrom(::kaldi::Sgmm2PerFrameDerivedVars*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::Sgmm2PerFrameDerivedVars>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::Sgmm2PerFrameDerivedVars>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::Sgmm2PerFrameDerivedVars&, py::PostConv);
// CLIF use `::kaldi::Sgmm2PerSpkDerivedVars` as Sgmm2PerSpkDerivedVars
bool Clif_PyObjAs(PyObject* input, ::kaldi::Sgmm2PerSpkDerivedVars** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::Sgmm2PerSpkDerivedVars>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::Sgmm2PerSpkDerivedVars>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::Sgmm2PerSpkDerivedVars* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::Sgmm2PerSpkDerivedVars>* output);
PyObject* Clif_PyObjFrom(::kaldi::Sgmm2PerSpkDerivedVars*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::Sgmm2PerSpkDerivedVars>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::Sgmm2PerSpkDerivedVars>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::Sgmm2PerSpkDerivedVars&, py::PostConv);
// CLIF use `::kaldi::Sgmm2SplitSubstatesConfig` as Sgmm2SplitSubstatesConfig
bool Clif_PyObjAs(PyObject* input, ::kaldi::Sgmm2SplitSubstatesConfig** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::Sgmm2SplitSubstatesConfig>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::Sgmm2SplitSubstatesConfig>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::Sgmm2SplitSubstatesConfig* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::Sgmm2SplitSubstatesConfig>* output);
PyObject* Clif_PyObjFrom(::kaldi::Sgmm2SplitSubstatesConfig*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::Sgmm2SplitSubstatesConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::Sgmm2SplitSubstatesConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::Sgmm2SplitSubstatesConfig&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_am_sgmm2")) Py_DECREF(m);
// CLIF init_module else goto err;
