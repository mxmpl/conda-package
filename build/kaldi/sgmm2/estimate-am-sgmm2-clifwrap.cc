//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/sgmm2/estimate-am-sgmm2.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "itf/options-itf-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "sgmm2/am-sgmm2-clifwrap.h"
#include "base/iostream-clifwrap.h"
#include "estimate-am-sgmm2-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __estimate__am__sgmm2_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyMleAmSgmm2Options {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::MleAmSgmm2Options> cpp;
};
static ::kaldi::MleAmSgmm2Options* ThisPtr(PyObject*);

static PyObject* get_tau_c(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->tau_c, {});
}

static int set_tau_c(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the tau_c attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->tau_c)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for tau_c:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_cov_floor(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->cov_floor, {});
}

static int set_cov_floor(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the cov_floor attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->cov_floor)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for cov_floor:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_cov_diag_ratio(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->cov_diag_ratio, {});
}

static int set_cov_diag_ratio(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the cov_diag_ratio attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->cov_diag_ratio)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for cov_diag_ratio:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_max_cond(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->max_cond, {});
}

static int set_max_cond(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the max_cond attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->max_cond)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for max_cond:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_renormalize_V(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->renormalize_V, {});
}

static int set_renormalize_V(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the renormalize_V attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->renormalize_V)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for renormalize_V:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_renormalize_N(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->renormalize_N, {});
}

static int set_renormalize_N(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the renormalize_N attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->renormalize_N)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for renormalize_N:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_weight_projections_iters(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->weight_projections_iters, {});
}

static int set_weight_projections_iters(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the weight_projections_iters attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->weight_projections_iters)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for weight_projections_iters:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_epsilon(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->epsilon, {});
}

static int set_epsilon(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the epsilon attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->epsilon)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for epsilon:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_max_impr_u(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->max_impr_u, {});
}

static int set_max_impr_u(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the max_impr_u attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->max_impr_u)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for max_impr_u:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_tau_map_M(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->tau_map_M, {});
}

static int set_tau_map_M(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the tau_map_M attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->tau_map_M)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for tau_map_M:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_map_M_prior_iters(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->map_M_prior_iters, {});
}

static int set_map_M_prior_iters(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the map_M_prior_iters attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->map_M_prior_iters)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for map_M_prior_iters:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_full_row_cov(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->full_row_cov, {});
}

static int set_full_row_cov(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the full_row_cov attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->full_row_cov)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for full_row_cov:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::MleAmSgmm2Options* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("tau_c"), get_tau_c, set_tau_c, C("C++ ::kaldi::BaseFloat MleAmSgmm2Options.tau_c")},
  {C("cov_floor"), get_cov_floor, set_cov_floor, C("C++ ::kaldi::BaseFloat MleAmSgmm2Options.cov_floor")},
  {C("cov_diag_ratio"), get_cov_diag_ratio, set_cov_diag_ratio, C("C++ ::kaldi::BaseFloat MleAmSgmm2Options.cov_diag_ratio")},
  {C("max_cond"), get_max_cond, set_max_cond, C("C++ ::kaldi::BaseFloat MleAmSgmm2Options.max_cond")},
  {C("renormalize_V"), get_renormalize_V, set_renormalize_V, C("C++ bool MleAmSgmm2Options.renormalize_V")},
  {C("renormalize_N"), get_renormalize_N, set_renormalize_N, C("C++ bool MleAmSgmm2Options.renormalize_N")},
  {C("weight_projections_iters"), get_weight_projections_iters, set_weight_projections_iters, C("C++ int MleAmSgmm2Options.weight_projections_iters")},
  {C("epsilon"), get_epsilon, set_epsilon, C("C++ ::kaldi::BaseFloat MleAmSgmm2Options.epsilon")},
  {C("max_impr_u"), get_max_impr_u, set_max_impr_u, C("C++ ::kaldi::BaseFloat MleAmSgmm2Options.max_impr_u")},
  {C("tau_map_M"), get_tau_map_M, set_tau_map_M, C("C++ ::kaldi::BaseFloat MleAmSgmm2Options.tau_map_M")},
  {C("map_M_prior_iters"), get_map_M_prior_iters, set_map_M_prior_iters, C("C++ int MleAmSgmm2Options.map_M_prior_iters")},
  {C("full_row_cov"), get_full_row_cov, set_full_row_cov, C("C++ bool MleAmSgmm2Options.full_row_cov")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::MleAmSgmm2Options::Register(::kaldi::OptionsItf *)")},
  {}
};

// MleAmSgmm2Options __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// MleAmSgmm2Options __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// MleAmSgmm2Options __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_estimate_am_sgmm2.MleAmSgmm2Options", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::MleAmSgmm2Options", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "MleAmSgmm2Options takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::MleAmSgmm2Options>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::MleAmSgmm2Options* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_MleAmSgmm2Options"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::MleAmSgmm2Options"));
      if (!PyErr_Occurred()) {
        ::kaldi::MleAmSgmm2Options* c = static_cast<::kaldi::MleAmSgmm2Options*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::MleAmSgmm2Options*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyMleAmSgmm2Options

namespace pyMleAmSgmm2Accs {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::MleAmSgmm2Accs> cpp;
};
static ::kaldi::MleAmSgmm2Accs* ThisPtr(PyObject*);

// __init__(rand_prune:float=default)
static PyObject* wrapMleAmSgmm2Accs_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("rand_prune"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:__init__", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  float arg1;
  if (nargs > 0) {
    if (!a[0]) arg1 = (float)1.000000e-05;
    else if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "float", a[0]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::MleAmSgmm2Accs>(); break;
  case 1:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::MleAmSgmm2Accs>(std::move(arg1)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// @classmethod new_with_params(model:AmSgmm2, flags:int, have_spk_vecs:bool, rand_prune:float=default) -> MleAmSgmm2Accs
static PyObject* wrapMleAmSgmm2Accs_as_new_with_params(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[4]{};
  char* names[] = {
      C("model"),
      C("flags"),
      C("have_spk_vecs"),
      C("rand_prune"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO|O:new_with_params", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 4; nargs > 3; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::AmSgmm2* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new_with_params", names[0], "::kaldi::AmSgmm2", a[0]);
  unsigned short arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("new_with_params", names[1], "unsigned short", a[1]);
  bool arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("new_with_params", names[2], "bool", a[2]);
  float arg4;
  if (nargs > 3) {
    if (!a[3]) arg4 = (float)1.000000e-05;
    else if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("new_with_params", names[3], "float", a[3]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::MleAmSgmm2Accs> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 3:
    ret0 = ::gtl::MakeUnique<::kaldi::MleAmSgmm2Accs>(*arg1, std::move(arg2), std::move(arg3)); break;
  case 4:
    ret0 = ::gtl::MakeUnique<::kaldi::MleAmSgmm2Accs>(*arg1, std::move(arg2), std::move(arg3), std::move(arg4)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// read(in_stream:istream, binary:bool, add:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("in_stream"),
      C("binary"),
      C("add"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:read", names, &a[0], &a[1], &a[2])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  bool arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("read", names[2], "bool", a[2]);
  // Call actual C++ method.
  ::kaldi::MleAmSgmm2Accs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// write(out_stream:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("out_stream"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::MleAmSgmm2Accs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// check(model:AmSgmm2, show_properties:bool=default)
static PyObject* wrapCheck_as_check(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("model"),
      C("show_properties"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:check", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::AmSgmm2* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("check", names[0], "::kaldi::AmSgmm2", a[0]);
  bool arg2;
  if (nargs > 1) {
    if (!a[1]) arg2 = (bool)true;
    else if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("check", names[1], "bool", a[1]);
  }
  // Call actual C++ method.
  ::kaldi::MleAmSgmm2Accs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    c->Check(*arg1); break;
  case 2:
    c->Check(*arg1, std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// resize_accumulators(model:AmSgmm2, flags:int, have_spk_vecs:bool)
static PyObject* wrapResizeAccumulators_as_resize_accumulators(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("model"),
      C("flags"),
      C("have_spk_vecs"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:resize_accumulators", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::AmSgmm2* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("resize_accumulators", names[0], "::kaldi::AmSgmm2", a[0]);
  unsigned short arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("resize_accumulators", names[1], "unsigned short", a[1]);
  bool arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("resize_accumulators", names[2], "bool", a[2]);
  // Call actual C++ method.
  ::kaldi::MleAmSgmm2Accs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ResizeAccumulators(*arg1, std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// accumulate(model:AmSgmm2, frame_vars:Sgmm2PerFrameDerivedVars, pdf_index:int, weight:float, spk_vars:Sgmm2PerSpkDerivedVars) -> float
static PyObject* wrapAccumulate_as_accumulate(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[5];
  char* names[] = {
      C("model"),
      C("frame_vars"),
      C("pdf_index"),
      C("weight"),
      C("spk_vars"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOO:accumulate", names, &a[0], &a[1], &a[2], &a[3], &a[4])) return nullptr;
  ::kaldi::AmSgmm2* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate", names[0], "::kaldi::AmSgmm2", a[0]);
  ::kaldi::Sgmm2PerFrameDerivedVars* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate", names[1], "::kaldi::Sgmm2PerFrameDerivedVars", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate", names[2], "int", a[2]);
  float arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("accumulate", names[3], "float", a[3]);
  ::kaldi::Sgmm2PerSpkDerivedVars * arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("accumulate", names[4], "::kaldi::Sgmm2PerSpkDerivedVars *", a[4]);
  // Call actual C++ method.
  ::kaldi::MleAmSgmm2Accs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Accumulate(*arg1, *arg2, std::move(arg3), std::move(arg4), arg5);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// accumulate_from_posteriors(model:AmSgmm2, frame_vars:Sgmm2PerFrameDerivedVars, posteriors:Matrix, pdf_index:int, spk_vars:Sgmm2PerSpkDerivedVars) -> float
static PyObject* wrapAccumulateFromPosteriors_as_accumulate_from_posteriors(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[5];
  char* names[] = {
      C("model"),
      C("frame_vars"),
      C("posteriors"),
      C("pdf_index"),
      C("spk_vars"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOO:accumulate_from_posteriors", names, &a[0], &a[1], &a[2], &a[3], &a[4])) return nullptr;
  ::kaldi::AmSgmm2* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_from_posteriors", names[0], "::kaldi::AmSgmm2", a[0]);
  ::kaldi::Sgmm2PerFrameDerivedVars* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_from_posteriors", names[1], "::kaldi::Sgmm2PerFrameDerivedVars", a[1]);
  ::kaldi::Matrix<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate_from_posteriors", names[2], "::kaldi::Matrix<float>", a[2]);
  int arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("accumulate_from_posteriors", names[3], "int", a[3]);
  ::kaldi::Sgmm2PerSpkDerivedVars * arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("accumulate_from_posteriors", names[4], "::kaldi::Sgmm2PerSpkDerivedVars *", a[4]);
  // Call actual C++ method.
  ::kaldi::MleAmSgmm2Accs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->AccumulateFromPosteriors(*arg1, *arg2, *arg3, std::move(arg4), arg5);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// commit_stats_for_spk(model:AmSgmm2, spk_vars:Sgmm2PerSpkDerivedVars)
static PyObject* wrapCommitStatsForSpk_as_commit_stats_for_spk(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("model"),
      C("spk_vars"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:commit_stats_for_spk", names, &a[0], &a[1])) return nullptr;
  ::kaldi::AmSgmm2* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("commit_stats_for_spk", names[0], "::kaldi::AmSgmm2", a[0]);
  ::kaldi::Sgmm2PerSpkDerivedVars* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("commit_stats_for_spk", names[1], "::kaldi::Sgmm2PerSpkDerivedVars", a[1]);
  // Call actual C++ method.
  ::kaldi::MleAmSgmm2Accs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CommitStatsForSpk(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// get_state_occupancies() -> Vector
static PyObject* wrapGetStateOccupancies_as_get_state_occupancies(PyObject* self) {
  ::kaldi::Vector<float> ret0{};
  // Call actual C++ method.
  ::kaldi::MleAmSgmm2Accs* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetStateOccupancies(&ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// feature_dim() -> int
static PyObject* wrapFeatureDim_as_feature_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::MleAmSgmm2Accs* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FeatureDim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// phone_space_dim() -> int
static PyObject* wrapPhoneSpaceDim_as_phone_space_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::MleAmSgmm2Accs* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->PhoneSpaceDim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_pdfs() -> int
static PyObject* wrapNumPdfs_as_num_pdfs(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::MleAmSgmm2Accs* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumPdfs();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_groups() -> int
static PyObject* wrapNumGroups_as_num_groups(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::MleAmSgmm2Accs* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumGroups();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_gauss() -> int
static PyObject* wrapNumGauss_as_num_gauss(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::MleAmSgmm2Accs* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumGauss();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapMleAmSgmm2Accs_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(rand_prune:float=default)\n  Calls C++ function\n  void ::kaldi::MleAmSgmm2Accs::MleAmSgmm2Accs(float)")},
  {C("new_with_params"), (PyCFunction)wrapMleAmSgmm2Accs_as_new_with_params, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new_with_params(model:AmSgmm2, flags:int, have_spk_vecs:bool, rand_prune:float=default) -> MleAmSgmm2Accs\n  Calls C++ function\n  std::unique_ptr<::kaldi::MleAmSgmm2Accs> ::kaldi::MleAmSgmm2Accs::MleAmSgmm2Accs(::kaldi::AmSgmm2, unsigned short, bool, float)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(in_stream:istream, binary:bool, add:bool)\n  Calls C++ function\n  void ::kaldi::MleAmSgmm2Accs::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool, bool)")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(out_stream:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::MleAmSgmm2Accs::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("check"), (PyCFunction)wrapCheck_as_check, METH_VARARGS | METH_KEYWORDS, C("check(model:AmSgmm2, show_properties:bool=default)\n\nChecks the various accumulators for correct sizes given a model. With wrong sizes, assertion failure occurs. When the show_properties argument is set to true, dimensions and presence/absence of the various accumulators is printed")},
  {C("resize_accumulators"), (PyCFunction)wrapResizeAccumulators_as_resize_accumulators, METH_VARARGS | METH_KEYWORDS, C("resize_accumulators(model:AmSgmm2, flags:int, have_spk_vecs:bool)\n\nResizes the accumulators to the correct sizes given the model. The flags argument controls which accumulators to resize")},
  {C("accumulate"), (PyCFunction)wrapAccumulate_as_accumulate, METH_VARARGS | METH_KEYWORDS, C("accumulate(model:AmSgmm2, frame_vars:Sgmm2PerFrameDerivedVars, pdf_index:int, weight:float, spk_vars:Sgmm2PerSpkDerivedVars) -> float\n\nReturns\n  Likelihood")},
  {C("accumulate_from_posteriors"), (PyCFunction)wrapAccumulateFromPosteriors_as_accumulate_from_posteriors, METH_VARARGS | METH_KEYWORDS, C("accumulate_from_posteriors(model:AmSgmm2, frame_vars:Sgmm2PerFrameDerivedVars, posteriors:Matrix, pdf_index:int, spk_vars:Sgmm2PerSpkDerivedVars) -> float\n\nReturns count accumulated")},
  {C("commit_stats_for_spk"), (PyCFunction)wrapCommitStatsForSpk_as_commit_stats_for_spk, METH_VARARGS | METH_KEYWORDS, C("commit_stats_for_spk(model:AmSgmm2, spk_vars:Sgmm2PerSpkDerivedVars)\n  Calls C++ function\n  void ::kaldi::MleAmSgmm2Accs::CommitStatsForSpk(::kaldi::AmSgmm2, ::kaldi::Sgmm2PerSpkDerivedVars)")},
  {C("get_state_occupancies"), (PyCFunction)wrapGetStateOccupancies_as_get_state_occupancies, METH_NOARGS, C("get_state_occupancies() -> Vector\n  Calls C++ function\n  void ::kaldi::MleAmSgmm2Accs::GetStateOccupancies(::kaldi::Vector<float>*)")},
  {C("feature_dim"), (PyCFunction)wrapFeatureDim_as_feature_dim, METH_NOARGS, C("feature_dim() -> int\n  Calls C++ function\n  int ::kaldi::MleAmSgmm2Accs::FeatureDim()")},
  {C("phone_space_dim"), (PyCFunction)wrapPhoneSpaceDim_as_phone_space_dim, METH_NOARGS, C("phone_space_dim() -> int\n  Calls C++ function\n  int ::kaldi::MleAmSgmm2Accs::PhoneSpaceDim()")},
  {C("num_pdfs"), (PyCFunction)wrapNumPdfs_as_num_pdfs, METH_NOARGS, C("num_pdfs() -> int\n  Calls C++ function\n  int ::kaldi::MleAmSgmm2Accs::NumPdfs()")},
  {C("num_groups"), (PyCFunction)wrapNumGroups_as_num_groups, METH_NOARGS, C("num_groups() -> int\n  Calls C++ function\n  int ::kaldi::MleAmSgmm2Accs::NumGroups()")},
  {C("num_gauss"), (PyCFunction)wrapNumGauss_as_num_gauss, METH_NOARGS, C("num_gauss() -> int\n  Calls C++ function\n  int ::kaldi::MleAmSgmm2Accs::NumGauss()")},
  {}
};

// MleAmSgmm2Accs __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// MleAmSgmm2Accs __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// MleAmSgmm2Accs __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_estimate_am_sgmm2.MleAmSgmm2Accs", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::MleAmSgmm2Accs", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapMleAmSgmm2Accs_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::MleAmSgmm2Accs* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_MleAmSgmm2Accs"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::MleAmSgmm2Accs"));
      if (!PyErr_Occurred()) {
        ::kaldi::MleAmSgmm2Accs* c = static_cast<::kaldi::MleAmSgmm2Accs*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::MleAmSgmm2Accs*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyMleAmSgmm2Accs

namespace pyMleAmSgmm2Updater {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::MleAmSgmm2Updater> cpp;
};
static ::kaldi::MleAmSgmm2Updater* ThisPtr(PyObject*);

// __init__(options:MleAmSgmm2Options)
static PyObject* wrapMleAmSgmm2Updater_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("options"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::kaldi::MleAmSgmm2Options* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::MleAmSgmm2Options", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::MleAmSgmm2Updater>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// reconfigure(options:MleAmSgmm2Options)
static PyObject* wrapReconfigure_as_reconfigure(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("options"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:reconfigure", names, &a[0])) return nullptr;
  ::kaldi::MleAmSgmm2Options* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("reconfigure", names[0], "::kaldi::MleAmSgmm2Options", a[0]);
  // Call actual C++ method.
  ::kaldi::MleAmSgmm2Updater* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Reconfigure(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// update(accs:MleAmSgmm2Accs, model:AmSgmm2, flags:int)
static PyObject* wrapUpdate_as_update(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("accs"),
      C("model"),
      C("flags"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:update", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::MleAmSgmm2Accs* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("update", names[0], "::kaldi::MleAmSgmm2Accs", a[0]);
  ::kaldi::AmSgmm2 * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("update", names[1], "::kaldi::AmSgmm2 *", a[1]);
  unsigned short arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("update", names[2], "unsigned short", a[2]);
  // Call actual C++ method.
  ::kaldi::MleAmSgmm2Updater* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Update(*arg1, arg2, std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapMleAmSgmm2Updater_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(options:MleAmSgmm2Options)\n  Calls C++ function\n  void ::kaldi::MleAmSgmm2Updater::MleAmSgmm2Updater(::kaldi::MleAmSgmm2Options)")},
  {C("reconfigure"), (PyCFunction)wrapReconfigure_as_reconfigure, METH_VARARGS | METH_KEYWORDS, C("reconfigure(options:MleAmSgmm2Options)\n  Calls C++ function\n  void ::kaldi::MleAmSgmm2Updater::Reconfigure(::kaldi::MleAmSgmm2Options)")},
  {C("update"), (PyCFunction)wrapUpdate_as_update, METH_VARARGS | METH_KEYWORDS, C("update(accs:MleAmSgmm2Accs, model:AmSgmm2, flags:int)\n  Calls C++ function\n  void ::kaldi::MleAmSgmm2Updater::Update(::kaldi::MleAmSgmm2Accs, ::kaldi::AmSgmm2 *, unsigned short)")},
  {}
};

// MleAmSgmm2Updater __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// MleAmSgmm2Updater __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// MleAmSgmm2Updater __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_estimate_am_sgmm2.MleAmSgmm2Updater", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::MleAmSgmm2Updater", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapMleAmSgmm2Updater_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::MleAmSgmm2Updater* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_MleAmSgmm2Updater"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::MleAmSgmm2Updater"));
      if (!PyErr_Occurred()) {
        ::kaldi::MleAmSgmm2Updater* c = static_cast<::kaldi::MleAmSgmm2Updater*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::MleAmSgmm2Updater*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyMleAmSgmm2Updater

namespace pyMleSgmm2SpeakerAccs {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::MleSgmm2SpeakerAccs> cpp;
};
static ::kaldi::MleSgmm2SpeakerAccs* ThisPtr(PyObject*);

// __init__(model:AmSgmm2, rand_prune:float=default)
static PyObject* wrapMleSgmm2SpeakerAccs_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("model"),
      C("rand_prune"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:__init__", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::AmSgmm2* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::AmSgmm2", a[0]);
  float arg2;
  if (nargs > 1) {
    if (!a[1]) arg2 = (float)1.000000e-05;
    else if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "float", a[1]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::MleSgmm2SpeakerAccs>(*arg1); break;
  case 2:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::MleSgmm2SpeakerAccs>(*arg1, std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// clear()
static PyObject* wrapClear_as_clear(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::MleSgmm2SpeakerAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Clear();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// accumulate(model:AmSgmm2, frame_vars:Sgmm2PerFrameDerivedVars, pdf_index:int, weight:float, spk_vars:Sgmm2PerSpkDerivedVars) -> float
static PyObject* wrapAccumulate_as_accumulate(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[5];
  char* names[] = {
      C("model"),
      C("frame_vars"),
      C("pdf_index"),
      C("weight"),
      C("spk_vars"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOO:accumulate", names, &a[0], &a[1], &a[2], &a[3], &a[4])) return nullptr;
  ::kaldi::AmSgmm2* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate", names[0], "::kaldi::AmSgmm2", a[0]);
  ::kaldi::Sgmm2PerFrameDerivedVars* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate", names[1], "::kaldi::Sgmm2PerFrameDerivedVars", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate", names[2], "int", a[2]);
  float arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("accumulate", names[3], "float", a[3]);
  ::kaldi::Sgmm2PerSpkDerivedVars * arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("accumulate", names[4], "::kaldi::Sgmm2PerSpkDerivedVars *", a[4]);
  // Call actual C++ method.
  ::kaldi::MleSgmm2SpeakerAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Accumulate(*arg1, *arg2, std::move(arg3), std::move(arg4), arg5);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// accumulate_from_posteriors(model:AmSgmm2, frame_vars:Sgmm2PerFrameDerivedVars, posteriors:Matrix, pdf_index:int, spk_vars:Sgmm2PerSpkDerivedVars) -> float
static PyObject* wrapAccumulateFromPosteriors_as_accumulate_from_posteriors(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[5];
  char* names[] = {
      C("model"),
      C("frame_vars"),
      C("posteriors"),
      C("pdf_index"),
      C("spk_vars"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOO:accumulate_from_posteriors", names, &a[0], &a[1], &a[2], &a[3], &a[4])) return nullptr;
  ::kaldi::AmSgmm2* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_from_posteriors", names[0], "::kaldi::AmSgmm2", a[0]);
  ::kaldi::Sgmm2PerFrameDerivedVars* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_from_posteriors", names[1], "::kaldi::Sgmm2PerFrameDerivedVars", a[1]);
  ::kaldi::Matrix<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate_from_posteriors", names[2], "::kaldi::Matrix<float>", a[2]);
  int arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("accumulate_from_posteriors", names[3], "int", a[3]);
  ::kaldi::Sgmm2PerSpkDerivedVars * arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("accumulate_from_posteriors", names[4], "::kaldi::Sgmm2PerSpkDerivedVars *", a[4]);
  // Call actual C++ method.
  ::kaldi::MleSgmm2SpeakerAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->AccumulateFromPosteriors(*arg1, *arg2, *arg3, std::move(arg4), arg5);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapMleSgmm2SpeakerAccs_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(model:AmSgmm2, rand_prune:float=default)\n  Calls C++ function\n  void ::kaldi::MleSgmm2SpeakerAccs::MleSgmm2SpeakerAccs(::kaldi::AmSgmm2, float)")},
  {C("clear"), (PyCFunction)wrapClear_as_clear, METH_NOARGS, C("clear()\n  Calls C++ function\n  void ::kaldi::MleSgmm2SpeakerAccs::Clear()")},
  {C("accumulate"), (PyCFunction)wrapAccumulate_as_accumulate, METH_VARARGS | METH_KEYWORDS, C("accumulate(model:AmSgmm2, frame_vars:Sgmm2PerFrameDerivedVars, pdf_index:int, weight:float, spk_vars:Sgmm2PerSpkDerivedVars) -> float\n\nAccumulate statistics.  Returns per-frame log-likelihood.")},
  {C("accumulate_from_posteriors"), (PyCFunction)wrapAccumulateFromPosteriors_as_accumulate_from_posteriors, METH_VARARGS | METH_KEYWORDS, C("accumulate_from_posteriors(model:AmSgmm2, frame_vars:Sgmm2PerFrameDerivedVars, posteriors:Matrix, pdf_index:int, spk_vars:Sgmm2PerSpkDerivedVars) -> float\n\nAccumulate statistics, given posteriors.  \n\nReturns\n  Total count accumulated")},
  {}
};

// MleSgmm2SpeakerAccs __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// MleSgmm2SpeakerAccs __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// MleSgmm2SpeakerAccs __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_estimate_am_sgmm2.MleSgmm2SpeakerAccs", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::MleSgmm2SpeakerAccs", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapMleSgmm2SpeakerAccs_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::MleSgmm2SpeakerAccs* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_MleSgmm2SpeakerAccs"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::MleSgmm2SpeakerAccs"));
      if (!PyErr_Occurred()) {
        ::kaldi::MleSgmm2SpeakerAccs* c = static_cast<::kaldi::MleSgmm2SpeakerAccs*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::MleSgmm2SpeakerAccs*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyMleSgmm2SpeakerAccs


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyMleAmSgmm2Options::wrapper_Type) < 0) return false;
  Py_INCREF(&pyMleAmSgmm2Options::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyMleAmSgmm2Accs::wrapper_Type) < 0) return false;
  Py_INCREF(&pyMleAmSgmm2Accs::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyMleAmSgmm2Updater::wrapper_Type) < 0) return false;
  Py_INCREF(&pyMleAmSgmm2Updater::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyMleSgmm2SpeakerAccs::wrapper_Type) < 0) return false;
  Py_INCREF(&pyMleSgmm2SpeakerAccs::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_estimate_am_sgmm2",  // module name
  "CLIF-generated module for sgmm2/estimate-am-sgmm2.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_am_sgmm2")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "MleAmSgmm2Options", reinterpret_cast<PyObject*>(&pyMleAmSgmm2Options::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "MleAmSgmm2Accs", reinterpret_cast<PyObject*>(&pyMleAmSgmm2Accs::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "MleAmSgmm2Updater", reinterpret_cast<PyObject*>(&pyMleAmSgmm2Updater::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "MleSgmm2SpeakerAccs", reinterpret_cast<PyObject*>(&pyMleSgmm2SpeakerAccs::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __estimate__am__sgmm2_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// MleAmSgmm2Accs to/from ::kaldi::MleAmSgmm2Accs conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::MleAmSgmm2Accs** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::MleAmSgmm2Accs* cpp = __estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Accs::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::MleAmSgmm2Accs>* c) {
  assert(c != nullptr);
  ::kaldi::MleAmSgmm2Accs* cpp = __estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Accs::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Accs::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::MleAmSgmm2Accs>* c) {
  assert(c != nullptr);
  ::kaldi::MleAmSgmm2Accs* cpp = __estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Accs::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Accs::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert MleAmSgmm2Accs instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::MleAmSgmm2Accs* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Accs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Accs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MleAmSgmm2Accs>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::MleAmSgmm2Accs> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Accs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Accs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MleAmSgmm2Accs>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::MleAmSgmm2Accs> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Accs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Accs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MleAmSgmm2Accs>(std::move(c));
  return py;
}

// MleAmSgmm2Options to/from ::kaldi::MleAmSgmm2Options conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::MleAmSgmm2Options** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::MleAmSgmm2Options* cpp = __estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Options::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::MleAmSgmm2Options>* c) {
  assert(c != nullptr);
  ::kaldi::MleAmSgmm2Options* cpp = __estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Options::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Options::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::MleAmSgmm2Options>* c) {
  assert(c != nullptr);
  ::kaldi::MleAmSgmm2Options* cpp = __estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Options::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Options::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert MleAmSgmm2Options instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::MleAmSgmm2Options* c) {
  assert(c != nullptr);
  ::kaldi::MleAmSgmm2Options* cpp = __estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Options::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::MleAmSgmm2Options>* c) {
  assert(c != nullptr);
  ::kaldi::MleAmSgmm2Options* cpp = __estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Options::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::MleAmSgmm2Options* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Options::wrapper_Type, NULL, NULL);
  reinterpret_cast<__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Options::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MleAmSgmm2Options>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::MleAmSgmm2Options> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Options::wrapper_Type, NULL, NULL);
  reinterpret_cast<__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Options::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MleAmSgmm2Options>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::MleAmSgmm2Options> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Options::wrapper_Type, NULL, NULL);
  reinterpret_cast<__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Options::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MleAmSgmm2Options>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::MleAmSgmm2Options& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Options::wrapper_Type, NULL, NULL);
  reinterpret_cast<__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Options::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::MleAmSgmm2Options>(c);
  return py;
}

// MleAmSgmm2Updater to/from ::kaldi::MleAmSgmm2Updater conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::MleAmSgmm2Updater** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::MleAmSgmm2Updater* cpp = __estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Updater::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::MleAmSgmm2Updater>* c) {
  assert(c != nullptr);
  ::kaldi::MleAmSgmm2Updater* cpp = __estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Updater::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Updater::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::MleAmSgmm2Updater>* c) {
  assert(c != nullptr);
  ::kaldi::MleAmSgmm2Updater* cpp = __estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Updater::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Updater::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert MleAmSgmm2Updater instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::MleAmSgmm2Updater* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Updater::wrapper_Type, NULL, NULL);
  reinterpret_cast<__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Updater::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MleAmSgmm2Updater>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::MleAmSgmm2Updater> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Updater::wrapper_Type, NULL, NULL);
  reinterpret_cast<__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Updater::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MleAmSgmm2Updater>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::MleAmSgmm2Updater> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Updater::wrapper_Type, NULL, NULL);
  reinterpret_cast<__estimate__am__sgmm2_clifwrap::pyMleAmSgmm2Updater::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MleAmSgmm2Updater>(std::move(c));
  return py;
}

// MleSgmm2SpeakerAccs to/from ::kaldi::MleSgmm2SpeakerAccs conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::MleSgmm2SpeakerAccs** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::MleSgmm2SpeakerAccs* cpp = __estimate__am__sgmm2_clifwrap::pyMleSgmm2SpeakerAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::MleSgmm2SpeakerAccs>* c) {
  assert(c != nullptr);
  ::kaldi::MleSgmm2SpeakerAccs* cpp = __estimate__am__sgmm2_clifwrap::pyMleSgmm2SpeakerAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__estimate__am__sgmm2_clifwrap::pyMleSgmm2SpeakerAccs::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::MleSgmm2SpeakerAccs>* c) {
  assert(c != nullptr);
  ::kaldi::MleSgmm2SpeakerAccs* cpp = __estimate__am__sgmm2_clifwrap::pyMleSgmm2SpeakerAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__estimate__am__sgmm2_clifwrap::pyMleSgmm2SpeakerAccs::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert MleSgmm2SpeakerAccs instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::MleSgmm2SpeakerAccs* c) {
  assert(c != nullptr);
  ::kaldi::MleSgmm2SpeakerAccs* cpp = __estimate__am__sgmm2_clifwrap::pyMleSgmm2SpeakerAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::MleSgmm2SpeakerAccs>* c) {
  assert(c != nullptr);
  ::kaldi::MleSgmm2SpeakerAccs* cpp = __estimate__am__sgmm2_clifwrap::pyMleSgmm2SpeakerAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::MleSgmm2SpeakerAccs* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__estimate__am__sgmm2_clifwrap::pyMleSgmm2SpeakerAccs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__estimate__am__sgmm2_clifwrap::pyMleSgmm2SpeakerAccs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MleSgmm2SpeakerAccs>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::MleSgmm2SpeakerAccs> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__estimate__am__sgmm2_clifwrap::pyMleSgmm2SpeakerAccs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__estimate__am__sgmm2_clifwrap::pyMleSgmm2SpeakerAccs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MleSgmm2SpeakerAccs>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::MleSgmm2SpeakerAccs> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__estimate__am__sgmm2_clifwrap::pyMleSgmm2SpeakerAccs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__estimate__am__sgmm2_clifwrap::pyMleSgmm2SpeakerAccs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MleSgmm2SpeakerAccs>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::MleSgmm2SpeakerAccs& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__estimate__am__sgmm2_clifwrap::pyMleSgmm2SpeakerAccs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__estimate__am__sgmm2_clifwrap::pyMleSgmm2SpeakerAccs::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::MleSgmm2SpeakerAccs>(c);
  return py;
}

}  // namespace kaldi
