//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/sgmm2/fmllr-sgmm2.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "itf/options-itf-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "sgmm2/am-sgmm2-clifwrap.h"
#include "matrix/sp-matrix-clifwrap.h"
#include "base/iostream-clifwrap.h"
#include "fmllr-sgmm2-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __fmllr__sgmm2_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pySgmm2FmllrConfig {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::Sgmm2FmllrConfig> cpp;
};
static ::kaldi::Sgmm2FmllrConfig* ThisPtr(PyObject*);

static PyObject* get_fmllr_iters(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->fmllr_iters, {});
}

static int set_fmllr_iters(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the fmllr_iters attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->fmllr_iters)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for fmllr_iters:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_step_iters(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->step_iters, {});
}

static int set_step_iters(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the step_iters attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->step_iters)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for step_iters:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_fmllr_min_count_basis(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->fmllr_min_count_basis, {});
}

static int set_fmllr_min_count_basis(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the fmllr_min_count_basis attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->fmllr_min_count_basis)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for fmllr_min_count_basis:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_fmllr_min_count(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->fmllr_min_count, {});
}

static int set_fmllr_min_count(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the fmllr_min_count attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->fmllr_min_count)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for fmllr_min_count:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_fmllr_min_count_full(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->fmllr_min_count_full, {});
}

static int set_fmllr_min_count_full(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the fmllr_min_count_full attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->fmllr_min_count_full)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for fmllr_min_count_full:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_num_fmllr_bases(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->num_fmllr_bases, {});
}

static int set_num_fmllr_bases(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the num_fmllr_bases attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->num_fmllr_bases)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for num_fmllr_bases:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_bases_occ_scale(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->bases_occ_scale, {});
}

static int set_bases_occ_scale(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the bases_occ_scale attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->bases_occ_scale)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for bases_occ_scale:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::Sgmm2FmllrConfig* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("fmllr_iters"), get_fmllr_iters, set_fmllr_iters, C("C++ ::int32 Sgmm2FmllrConfig.fmllr_iters")},
  {C("step_iters"), get_step_iters, set_step_iters, C("C++ ::int32 Sgmm2FmllrConfig.step_iters")},
  {C("fmllr_min_count_basis"), get_fmllr_min_count_basis, set_fmllr_min_count_basis, C("C++ ::kaldi::BaseFloat Sgmm2FmllrConfig.fmllr_min_count_basis")},
  {C("fmllr_min_count"), get_fmllr_min_count, set_fmllr_min_count, C("C++ ::kaldi::BaseFloat Sgmm2FmllrConfig.fmllr_min_count")},
  {C("fmllr_min_count_full"), get_fmllr_min_count_full, set_fmllr_min_count_full, C("C++ ::kaldi::BaseFloat Sgmm2FmllrConfig.fmllr_min_count_full")},
  {C("num_fmllr_bases"), get_num_fmllr_bases, set_num_fmllr_bases, C("C++ ::int32 Sgmm2FmllrConfig.num_fmllr_bases")},
  {C("bases_occ_scale"), get_bases_occ_scale, set_bases_occ_scale, C("C++ ::kaldi::BaseFloat Sgmm2FmllrConfig.bases_occ_scale")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::Sgmm2FmllrConfig::Register(::kaldi::OptionsItf *)")},
  {}
};

// Sgmm2FmllrConfig __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// Sgmm2FmllrConfig __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// Sgmm2FmllrConfig __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_fmllr_sgmm2.Sgmm2FmllrConfig",     // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::Sgmm2FmllrConfig", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "Sgmm2FmllrConfig takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::Sgmm2FmllrConfig>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::Sgmm2FmllrConfig* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_Sgmm2FmllrConfig"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::Sgmm2FmllrConfig"));
      if (!PyErr_Occurred()) {
        ::kaldi::Sgmm2FmllrConfig* c = static_cast<::kaldi::Sgmm2FmllrConfig*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::Sgmm2FmllrConfig*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pySgmm2FmllrConfig

namespace pySgmm2FmllrGlobalParams {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::Sgmm2FmllrGlobalParams> cpp;
};
static ::kaldi::Sgmm2FmllrGlobalParams* ThisPtr(PyObject*);

// init(sgmm:AmSgmm2, state_occs:Vector)
static PyObject* wrapInit_as_init(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("sgmm"),
      C("state_occs"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:init", names, &a[0], &a[1])) return nullptr;
  ::kaldi::AmSgmm2* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("init", names[0], "::kaldi::AmSgmm2", a[0]);
  ::kaldi::Vector<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("init", names[1], "::kaldi::Vector<float>", a[1]);
  // Call actual C++ method.
  ::kaldi::Sgmm2FmllrGlobalParams* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Init(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// write(out_stream:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("out_stream"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::Sgmm2FmllrGlobalParams* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(in_stream:istream, binary:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("in_stream"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::Sgmm2FmllrGlobalParams* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// is_empty() -> bool
static PyObject* wrapIsEmpty_as_is_empty(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::Sgmm2FmllrGlobalParams* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsEmpty();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// has_basis() -> bool
static PyObject* wrapHasBasis_as_has_basis(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::Sgmm2FmllrGlobalParams* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->HasBasis();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyObject* get_pre_xform_(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->pre_xform_), {});
}

static int set_pre_xform_(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the pre_xform_ attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->pre_xform_)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for pre_xform_:Matrix", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_inv_xform_(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->inv_xform_), {});
}

static int set_inv_xform_(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the inv_xform_ attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->inv_xform_)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for inv_xform_:Matrix", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_mean_scatter_(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->mean_scatter_), {});
}

static int set_mean_scatter_(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the mean_scatter_ attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->mean_scatter_)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for mean_scatter_:Vector", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_fmllr_bases_(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->fmllr_bases_, {});
}

static int set_fmllr_bases_(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the fmllr_bases_ attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->fmllr_bases_)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for fmllr_bases_:list<Matrix>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("pre_xform_"), get_pre_xform_, set_pre_xform_, C("C++ ::kaldi::Matrix< ::kaldi::BaseFloat> Sgmm2FmllrGlobalParams.pre_xform_")},
  {C("inv_xform_"), get_inv_xform_, set_inv_xform_, C("C++ ::kaldi::Matrix< ::kaldi::BaseFloat> Sgmm2FmllrGlobalParams.inv_xform_")},
  {C("mean_scatter_"), get_mean_scatter_, set_mean_scatter_, C("C++ ::kaldi::Vector< ::kaldi::BaseFloat> Sgmm2FmllrGlobalParams.mean_scatter_")},
  {C("fmllr_bases_"), get_fmllr_bases_, set_fmllr_bases_, C("C++ ::std::vector< ::kaldi::Matrix< ::kaldi::BaseFloat> > Sgmm2FmllrGlobalParams.fmllr_bases_")},
  {}
};

static PyMethodDef Methods[] = {
  {C("init"), (PyCFunction)wrapInit_as_init, METH_VARARGS | METH_KEYWORDS, C("init(sgmm:AmSgmm2, state_occs:Vector)\n  Calls C++ function\n  void ::kaldi::Sgmm2FmllrGlobalParams::Init(::kaldi::AmSgmm2, ::kaldi::Vector<float>)")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(out_stream:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::Sgmm2FmllrGlobalParams::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(in_stream:istream, binary:bool)\n  Calls C++ function\n  void ::kaldi::Sgmm2FmllrGlobalParams::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool)")},
  {C("is_empty"), (PyCFunction)wrapIsEmpty_as_is_empty, METH_NOARGS, C("is_empty() -> bool\n  Calls C++ function\n  bool ::kaldi::Sgmm2FmllrGlobalParams::IsEmpty()")},
  {C("has_basis"), (PyCFunction)wrapHasBasis_as_has_basis, METH_NOARGS, C("has_basis() -> bool\n  Calls C++ function\n  bool ::kaldi::Sgmm2FmllrGlobalParams::HasBasis()")},
  {}
};

// Sgmm2FmllrGlobalParams __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// Sgmm2FmllrGlobalParams __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// Sgmm2FmllrGlobalParams __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_fmllr_sgmm2.Sgmm2FmllrGlobalParams", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::Sgmm2FmllrGlobalParams", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "Sgmm2FmllrGlobalParams takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::Sgmm2FmllrGlobalParams>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::Sgmm2FmllrGlobalParams* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_Sgmm2FmllrGlobalParams"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::Sgmm2FmllrGlobalParams"));
      if (!PyErr_Occurred()) {
        ::kaldi::Sgmm2FmllrGlobalParams* c = static_cast<::kaldi::Sgmm2FmllrGlobalParams*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::Sgmm2FmllrGlobalParams*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pySgmm2FmllrGlobalParams

namespace pyFmllrSgmm2Accs {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::FmllrSgmm2Accs> cpp;
};
static ::kaldi::FmllrSgmm2Accs* ThisPtr(PyObject*);

// init(dim:int, num_gaussians:int)
static PyObject* wrapInit_as_init(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("dim"),
      C("num_gaussians"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:init", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("init", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("init", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::FmllrSgmm2Accs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Init(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_zero()
static PyObject* wrapSetZero_as_set_zero(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::FmllrSgmm2Accs* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetZero();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// write(out_stream:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("out_stream"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::FmllrSgmm2Accs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(in_stream:istream, binary:bool, add:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("in_stream"),
      C("binary"),
      C("add"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:read", names, &a[0], &a[1], &a[2])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  bool arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("read", names[2], "bool", a[2]);
  // Call actual C++ method.
  ::kaldi::FmllrSgmm2Accs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// accumulate(sgmm:AmSgmm2, data:VectorBase, frame_vars:Sgmm2PerFrameDerivedVars, statE_index:int, weights:float, spk:Sgmm2PerSpkDerivedVars) -> float
static PyObject* wrapAccumulate_as_accumulate(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[6];
  char* names[] = {
      C("sgmm"),
      C("data"),
      C("frame_vars"),
      C("statE_index"),
      C("weights"),
      C("spk"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOOO:accumulate", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5])) return nullptr;
  ::kaldi::AmSgmm2* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate", names[0], "::kaldi::AmSgmm2", a[0]);
  ::kaldi::VectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate", names[1], "::kaldi::VectorBase<float>", a[1]);
  ::kaldi::Sgmm2PerFrameDerivedVars* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate", names[2], "::kaldi::Sgmm2PerFrameDerivedVars", a[2]);
  int arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("accumulate", names[3], "int", a[3]);
  float arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("accumulate", names[4], "float", a[4]);
  ::kaldi::Sgmm2PerSpkDerivedVars * arg6;
  if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("accumulate", names[5], "::kaldi::Sgmm2PerSpkDerivedVars *", a[5]);
  // Call actual C++ method.
  ::kaldi::FmllrSgmm2Accs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Accumulate(*arg1, *arg2, *arg3, std::move(arg4), std::move(arg5), arg6);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// accumulate_from_posteriors(sgmm:AmSgmm2, spk:Sgmm2PerSpkDerivedVars, data:VectorBase, gauss_select:list<int>, posteriors:Matrix, state_index:int)
static PyObject* wrapAccumulateFromPosteriors_as_accumulate_from_posteriors(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[6];
  char* names[] = {
      C("sgmm"),
      C("spk"),
      C("data"),
      C("gauss_select"),
      C("posteriors"),
      C("state_index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOOO:accumulate_from_posteriors", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5])) return nullptr;
  ::kaldi::AmSgmm2* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_from_posteriors", names[0], "::kaldi::AmSgmm2", a[0]);
  ::kaldi::Sgmm2PerSpkDerivedVars* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_from_posteriors", names[1], "::kaldi::Sgmm2PerSpkDerivedVars", a[1]);
  ::kaldi::VectorBase<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate_from_posteriors", names[2], "::kaldi::VectorBase<float>", a[2]);
  ::std::vector< ::int32> arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("accumulate_from_posteriors", names[3], "::std::vector< ::int32>", a[3]);
  ::kaldi::Matrix<float>* arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("accumulate_from_posteriors", names[4], "::kaldi::Matrix<float>", a[4]);
  int arg6;
  if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("accumulate_from_posteriors", names[5], "int", a[5]);
  // Call actual C++ method.
  ::kaldi::FmllrSgmm2Accs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AccumulateFromPosteriors(*arg1, *arg2, *arg3, std::move(arg4), *arg5, std::move(arg6));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// accumulate_for_fmll_subspace(sgmm:AmSgmm2, fmllr_globals:Sgmm2FmllrGlobalParams, grad_scatter:DoubleSpMatrix)
static PyObject* wrapAccumulateForFmllrSubspace_as_accumulate_for_fmll_subspace(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("sgmm"),
      C("fmllr_globals"),
      C("grad_scatter"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:accumulate_for_fmll_subspace", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::AmSgmm2* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_for_fmll_subspace", names[0], "::kaldi::AmSgmm2", a[0]);
  ::kaldi::Sgmm2FmllrGlobalParams* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_for_fmll_subspace", names[1], "::kaldi::Sgmm2FmllrGlobalParams", a[1]);
  ::kaldi::SpMatrix<double> * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate_for_fmll_subspace", names[2], "::kaldi::SpMatrix<double> *", a[2]);
  // Call actual C++ method.
  ::kaldi::FmllrSgmm2Accs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AccumulateForFmllrSubspace(*arg1, *arg2, arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// fmllr_obj_gradient(sgmm:AmSgmm2, xform:Matrix) -> (gradient:float, grad_out:Matrix, G_out:Matrix)
static PyObject* wrapFmllrObjGradient_as_fmllr_obj_gradient(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("sgmm"),
      C("xform"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:fmllr_obj_gradient", names, &a[0], &a[1])) return nullptr;
  ::kaldi::AmSgmm2* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("fmllr_obj_gradient", names[0], "::kaldi::AmSgmm2", a[0]);
  ::kaldi::Matrix<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("fmllr_obj_gradient", names[1], "::kaldi::Matrix<float>", a[1]);
  ::kaldi::Matrix<float> ret1{};
  ::kaldi::Matrix<float> ret2{};
  // Call actual C++ method.
  ::kaldi::FmllrSgmm2Accs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FmllrObjGradient(*arg1, *arg2, &ret1, &ret2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(3);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  if ((p=Clif_PyObjFrom(std::move(ret2), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 2, p);
  return result_tuple;
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::FmllrSgmm2Accs* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("init"), (PyCFunction)wrapInit_as_init, METH_VARARGS | METH_KEYWORDS, C("init(dim:int, num_gaussians:int)\n  Calls C++ function\n  void ::kaldi::FmllrSgmm2Accs::Init(int, int)")},
  {C("set_zero"), (PyCFunction)wrapSetZero_as_set_zero, METH_NOARGS, C("set_zero()\n  Calls C++ function\n  void ::kaldi::FmllrSgmm2Accs::SetZero()")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(out_stream:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::FmllrSgmm2Accs::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(in_stream:istream, binary:bool, add:bool)\n  Calls C++ function\n  void ::kaldi::FmllrSgmm2Accs::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool, bool)")},
  {C("accumulate"), (PyCFunction)wrapAccumulate_as_accumulate, METH_VARARGS | METH_KEYWORDS, C("accumulate(sgmm:AmSgmm2, data:VectorBase, frame_vars:Sgmm2PerFrameDerivedVars, statE_index:int, weights:float, spk:Sgmm2PerSpkDerivedVars) -> float\n  Calls C++ function\n  float ::kaldi::FmllrSgmm2Accs::Accumulate(::kaldi::AmSgmm2, ::kaldi::VectorBase<float>, ::kaldi::Sgmm2PerFrameDerivedVars, int, float, ::kaldi::Sgmm2PerSpkDerivedVars *)")},
  {C("accumulate_from_posteriors"), (PyCFunction)wrapAccumulateFromPosteriors_as_accumulate_from_posteriors, METH_VARARGS | METH_KEYWORDS, C("accumulate_from_posteriors(sgmm:AmSgmm2, spk:Sgmm2PerSpkDerivedVars, data:VectorBase, gauss_select:list<int>, posteriors:Matrix, state_index:int)\n  Calls C++ function\n  void ::kaldi::FmllrSgmm2Accs::AccumulateFromPosteriors(::kaldi::AmSgmm2, ::kaldi::Sgmm2PerSpkDerivedVars, ::kaldi::VectorBase<float>, ::std::vector< ::int32>, ::kaldi::Matrix<float>, int)")},
  {C("accumulate_for_fmll_subspace"), (PyCFunction)wrapAccumulateForFmllrSubspace_as_accumulate_for_fmll_subspace, METH_VARARGS | METH_KEYWORDS, C("accumulate_for_fmll_subspace(sgmm:AmSgmm2, fmllr_globals:Sgmm2FmllrGlobalParams, grad_scatter:DoubleSpMatrix)\n  Calls C++ function\n  void ::kaldi::FmllrSgmm2Accs::AccumulateForFmllrSubspace(::kaldi::AmSgmm2, ::kaldi::Sgmm2FmllrGlobalParams, ::kaldi::SpMatrix<double> *)")},
  {C("fmllr_obj_gradient"), (PyCFunction)wrapFmllrObjGradient_as_fmllr_obj_gradient, METH_VARARGS | METH_KEYWORDS, C("fmllr_obj_gradient(sgmm:AmSgmm2, xform:Matrix) -> (gradient:float, grad_out:Matrix, G_out:Matrix)\n  Calls C++ function\n  float ::kaldi::FmllrSgmm2Accs::FmllrObjGradient(::kaldi::AmSgmm2, ::kaldi::Matrix<float>, ::kaldi::Matrix<float>*, ::kaldi::Matrix<float>*)")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::FmllrSgmm2Accs::Dim()")},
  {}
};

// FmllrSgmm2Accs __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// FmllrSgmm2Accs __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// FmllrSgmm2Accs __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_fmllr_sgmm2.FmllrSgmm2Accs",       // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::FmllrSgmm2Accs", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "FmllrSgmm2Accs takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::FmllrSgmm2Accs>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::FmllrSgmm2Accs* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_FmllrSgmm2Accs"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::FmllrSgmm2Accs"));
      if (!PyErr_Occurred()) {
        ::kaldi::FmllrSgmm2Accs* c = static_cast<::kaldi::FmllrSgmm2Accs*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::FmllrSgmm2Accs*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyFmllrSgmm2Accs


// Initialize module

bool Ready() {
  if (PyType_Ready(&pySgmm2FmllrConfig::wrapper_Type) < 0) return false;
  Py_INCREF(&pySgmm2FmllrConfig::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pySgmm2FmllrGlobalParams::wrapper_Type) < 0) return false;
  Py_INCREF(&pySgmm2FmllrGlobalParams::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyFmllrSgmm2Accs::wrapper_Type) < 0) return false;
  Py_INCREF(&pyFmllrSgmm2Accs::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_fmllr_sgmm2",  // module name
  "CLIF-generated module for sgmm2/fmllr-sgmm2.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_am_sgmm2")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_sp_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "Sgmm2FmllrConfig", reinterpret_cast<PyObject*>(&pySgmm2FmllrConfig::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "Sgmm2FmllrGlobalParams", reinterpret_cast<PyObject*>(&pySgmm2FmllrGlobalParams::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "FmllrSgmm2Accs", reinterpret_cast<PyObject*>(&pyFmllrSgmm2Accs::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __fmllr__sgmm2_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// FmllrSgmm2Accs to/from ::kaldi::FmllrSgmm2Accs conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::FmllrSgmm2Accs** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::FmllrSgmm2Accs* cpp = __fmllr__sgmm2_clifwrap::pyFmllrSgmm2Accs::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::FmllrSgmm2Accs>* c) {
  assert(c != nullptr);
  ::kaldi::FmllrSgmm2Accs* cpp = __fmllr__sgmm2_clifwrap::pyFmllrSgmm2Accs::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__fmllr__sgmm2_clifwrap::pyFmllrSgmm2Accs::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::FmllrSgmm2Accs>* c) {
  assert(c != nullptr);
  ::kaldi::FmllrSgmm2Accs* cpp = __fmllr__sgmm2_clifwrap::pyFmllrSgmm2Accs::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__fmllr__sgmm2_clifwrap::pyFmllrSgmm2Accs::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert FmllrSgmm2Accs instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::FmllrSgmm2Accs* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmllr__sgmm2_clifwrap::pyFmllrSgmm2Accs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__sgmm2_clifwrap::pyFmllrSgmm2Accs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmllrSgmm2Accs>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::FmllrSgmm2Accs> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmllr__sgmm2_clifwrap::pyFmllrSgmm2Accs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__sgmm2_clifwrap::pyFmllrSgmm2Accs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmllrSgmm2Accs>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::FmllrSgmm2Accs> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmllr__sgmm2_clifwrap::pyFmllrSgmm2Accs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__sgmm2_clifwrap::pyFmllrSgmm2Accs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmllrSgmm2Accs>(std::move(c));
  return py;
}

// Sgmm2FmllrConfig to/from ::kaldi::Sgmm2FmllrConfig conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::Sgmm2FmllrConfig** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::Sgmm2FmllrConfig* cpp = __fmllr__sgmm2_clifwrap::pySgmm2FmllrConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::Sgmm2FmllrConfig>* c) {
  assert(c != nullptr);
  ::kaldi::Sgmm2FmllrConfig* cpp = __fmllr__sgmm2_clifwrap::pySgmm2FmllrConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__fmllr__sgmm2_clifwrap::pySgmm2FmllrConfig::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::Sgmm2FmllrConfig>* c) {
  assert(c != nullptr);
  ::kaldi::Sgmm2FmllrConfig* cpp = __fmllr__sgmm2_clifwrap::pySgmm2FmllrConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__fmllr__sgmm2_clifwrap::pySgmm2FmllrConfig::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert Sgmm2FmllrConfig instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::Sgmm2FmllrConfig* c) {
  assert(c != nullptr);
  ::kaldi::Sgmm2FmllrConfig* cpp = __fmllr__sgmm2_clifwrap::pySgmm2FmllrConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::Sgmm2FmllrConfig>* c) {
  assert(c != nullptr);
  ::kaldi::Sgmm2FmllrConfig* cpp = __fmllr__sgmm2_clifwrap::pySgmm2FmllrConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::Sgmm2FmllrConfig* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmllr__sgmm2_clifwrap::pySgmm2FmllrConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__sgmm2_clifwrap::pySgmm2FmllrConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::Sgmm2FmllrConfig>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::Sgmm2FmllrConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmllr__sgmm2_clifwrap::pySgmm2FmllrConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__sgmm2_clifwrap::pySgmm2FmllrConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::Sgmm2FmllrConfig>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::Sgmm2FmllrConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmllr__sgmm2_clifwrap::pySgmm2FmllrConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__sgmm2_clifwrap::pySgmm2FmllrConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::Sgmm2FmllrConfig>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::Sgmm2FmllrConfig& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__fmllr__sgmm2_clifwrap::pySgmm2FmllrConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__sgmm2_clifwrap::pySgmm2FmllrConfig::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::Sgmm2FmllrConfig>(c);
  return py;
}

// Sgmm2FmllrGlobalParams to/from ::kaldi::Sgmm2FmllrGlobalParams conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::Sgmm2FmllrGlobalParams** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::Sgmm2FmllrGlobalParams* cpp = __fmllr__sgmm2_clifwrap::pySgmm2FmllrGlobalParams::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::Sgmm2FmllrGlobalParams>* c) {
  assert(c != nullptr);
  ::kaldi::Sgmm2FmllrGlobalParams* cpp = __fmllr__sgmm2_clifwrap::pySgmm2FmllrGlobalParams::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__fmllr__sgmm2_clifwrap::pySgmm2FmllrGlobalParams::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::Sgmm2FmllrGlobalParams>* c) {
  assert(c != nullptr);
  ::kaldi::Sgmm2FmllrGlobalParams* cpp = __fmllr__sgmm2_clifwrap::pySgmm2FmllrGlobalParams::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__fmllr__sgmm2_clifwrap::pySgmm2FmllrGlobalParams::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert Sgmm2FmllrGlobalParams instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::Sgmm2FmllrGlobalParams* c) {
  assert(c != nullptr);
  ::kaldi::Sgmm2FmllrGlobalParams* cpp = __fmllr__sgmm2_clifwrap::pySgmm2FmllrGlobalParams::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::Sgmm2FmllrGlobalParams>* c) {
  assert(c != nullptr);
  ::kaldi::Sgmm2FmllrGlobalParams* cpp = __fmllr__sgmm2_clifwrap::pySgmm2FmllrGlobalParams::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::Sgmm2FmllrGlobalParams* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmllr__sgmm2_clifwrap::pySgmm2FmllrGlobalParams::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__sgmm2_clifwrap::pySgmm2FmllrGlobalParams::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::Sgmm2FmllrGlobalParams>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::Sgmm2FmllrGlobalParams> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmllr__sgmm2_clifwrap::pySgmm2FmllrGlobalParams::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__sgmm2_clifwrap::pySgmm2FmllrGlobalParams::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::Sgmm2FmllrGlobalParams>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::Sgmm2FmllrGlobalParams> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmllr__sgmm2_clifwrap::pySgmm2FmllrGlobalParams::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__sgmm2_clifwrap::pySgmm2FmllrGlobalParams::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::Sgmm2FmllrGlobalParams>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::Sgmm2FmllrGlobalParams& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__fmllr__sgmm2_clifwrap::pySgmm2FmllrGlobalParams::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__sgmm2_clifwrap::pySgmm2FmllrGlobalParams::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::Sgmm2FmllrGlobalParams>(c);
  return py;
}

}  // namespace kaldi
