//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/rnnlm/rnnlm-example.clif

#include <memory>
#include "clif/python/optional.h"
#include "rnnlm/rnnlm-example.h"
#include "clif/python/postconv.h"

namespace kaldi { namespace rnnlm {
using namespace ::clif;

// CLIF use `::kaldi::rnnlm::RnnlmEgsConfig` as RnnlmEgsConfig
bool Clif_PyObjAs(PyObject* input, ::kaldi::rnnlm::RnnlmEgsConfig** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::rnnlm::RnnlmEgsConfig>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::rnnlm::RnnlmEgsConfig>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::rnnlm::RnnlmEgsConfig* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::rnnlm::RnnlmEgsConfig>* output);
PyObject* Clif_PyObjFrom(::kaldi::rnnlm::RnnlmEgsConfig*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::rnnlm::RnnlmEgsConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::rnnlm::RnnlmEgsConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::rnnlm::RnnlmEgsConfig&, py::PostConv);
// CLIF use `::kaldi::rnnlm::RnnlmExample` as RnnlmExample
bool Clif_PyObjAs(PyObject* input, ::kaldi::rnnlm::RnnlmExample** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::rnnlm::RnnlmExample>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::rnnlm::RnnlmExample>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::rnnlm::RnnlmExample* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::rnnlm::RnnlmExample>* output);
PyObject* Clif_PyObjFrom(::kaldi::rnnlm::RnnlmExample*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::rnnlm::RnnlmExample>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::rnnlm::RnnlmExample>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::rnnlm::RnnlmExample&, py::PostConv);
// CLIF use `::kaldi::rnnlm::RnnlmExampleSampler` as RnnlmExampleSampler
bool Clif_PyObjAs(PyObject* input, ::kaldi::rnnlm::RnnlmExampleSampler** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::rnnlm::RnnlmExampleSampler>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::rnnlm::RnnlmExampleSampler>* output);
PyObject* Clif_PyObjFrom(::kaldi::rnnlm::RnnlmExampleSampler*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::rnnlm::RnnlmExampleSampler>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::rnnlm::RnnlmExampleSampler>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::rnnlm::RnnlmExampleSampler*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::rnnlm::RnnlmExampleSampler&, py::PostConv) = delete;

} }  // namespace kaldi::rnnlm

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_rnnlm_example")) Py_DECREF(m);
// CLIF init_module else goto err;
