//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/rnnlm/rnnlm-lattice-rescoring.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "fstext/float-weight-clifwrap.h"
#include "fstext/lattice-weight-clifwrap.h"
#include "fstext/arc-clifwrap.h"
#include "rnnlm/rnnlm-compute-state-clifwrap.h"
#include "rnnlm-lattice-rescoring-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __rnnlm__lattice__rescoring_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyKaldiRnnlmDeterministicFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::rnnlm::KaldiRnnlmDeterministicFst> cpp;
};
static ::kaldi::rnnlm::KaldiRnnlmDeterministicFst* ThisPtr(PyObject*);

// __init__(max_ngram_order:int, info:RnnlmComputeStateInfo)
static PyObject* wrapKaldiRnnlmDeterministicFst_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("max_ngram_order"),
      C("info"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "int", a[0]);
  ::kaldi::rnnlm::RnnlmComputeStateInfo* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::rnnlm::RnnlmComputeStateInfo", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::rnnlm::KaldiRnnlmDeterministicFst>(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// clear()
static PyObject* wrapClear_as_clear(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::rnnlm::KaldiRnnlmDeterministicFst* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Clear();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// start() -> int
static PyObject* wrapStart_as_start(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::rnnlm::KaldiRnnlmDeterministicFst* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Start();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// final(state:int) -> TropicalWeight
static PyObject* wrapFinal_as_final(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:final", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("final", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::rnnlm::KaldiRnnlmDeterministicFst* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::TropicalWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Final(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_arc(s:int, ilabel:int) -> (success:bool, oarc:StdArc)
static PyObject* wrapGetArc_as_get_arc(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("s"),
      C("ilabel"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_arc", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_arc", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_arc", names[1], "int", a[1]);
  ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > ret1{};
  // Call actual C++ method.
  ::kaldi::rnnlm::KaldiRnnlmDeterministicFst* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetArc(std::move(arg1), std::move(arg2), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  PyObject* pyproc = ImportFQName("kaldi.util._value_error_on_false");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// Implicit cast this as ::fst::DeterministicOnDemandFst< ::fst::StdArc>*
static PyObject* as_fst_DeterministicOnDemandFst__fst_StdArc(PyObject* self) {
  ::fst::DeterministicOnDemandFst< ::fst::StdArc>* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::DeterministicOnDemandFst< ::fst::StdArc>"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapKaldiRnnlmDeterministicFst_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(max_ngram_order:int, info:RnnlmComputeStateInfo)\n  Calls C++ function\n  void ::kaldi::rnnlm::KaldiRnnlmDeterministicFst::KaldiRnnlmDeterministicFst(int, ::kaldi::rnnlm::RnnlmComputeStateInfo)")},
  {C("clear"), (PyCFunction)wrapClear_as_clear, METH_NOARGS, C("clear()\n\nClears the internal maps.\n\nThis method is similar to the destructor but we retain the 0-th entries\nin each map which corresponds to the <bos> state.")},
  {C("start"), (PyCFunction)wrapStart_as_start, METH_NOARGS, C("start() -> int\n\nReturns the start state index.")},
  {C("final"), (PyCFunction)wrapFinal_as_final, METH_VARARGS | METH_KEYWORDS, C("final(state:int) -> TropicalWeight\n\nReturns the final weight of the given state.")},
  {C("get_arc"), (PyCFunction)wrapGetArc_as_get_arc, METH_VARARGS | METH_KEYWORDS, C("get_arc(s:int, ilabel:int) -> (success:bool, oarc:StdArc)\n\nCreates an on demand arc and returns it.\n\nArgs:\n  s (int): State index.\n  ilabel (int): Arc label.\n\nReturns:\n  The created arc.")},
  {C("as_fst_DeterministicOnDemandFst__fst_StdArc"), (PyCFunction)as_fst_DeterministicOnDemandFst__fst_StdArc, METH_NOARGS, C("Upcast to ::fst::DeterministicOnDemandFst< ::fst::StdArc>*")},
  {}
};

// KaldiRnnlmDeterministicFst __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// KaldiRnnlmDeterministicFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// KaldiRnnlmDeterministicFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_rnnlm_lattice_rescoring.KaldiRnnlmDeterministicFst", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Deterministic on demand RNNLM FST.\n\nArgs:\n  max_ngram_order (int): Maximum ngram order.\n  info (RnnlmComputeStateInfo): State information for RNNLM computation.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapKaldiRnnlmDeterministicFst_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::rnnlm::KaldiRnnlmDeterministicFst* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_rnnlm_KaldiRnnlmDeterministicFst"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::rnnlm::KaldiRnnlmDeterministicFst"));
      if (!PyErr_Occurred()) {
        ::kaldi::rnnlm::KaldiRnnlmDeterministicFst* c = static_cast<::kaldi::rnnlm::KaldiRnnlmDeterministicFst*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::rnnlm::KaldiRnnlmDeterministicFst*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyKaldiRnnlmDeterministicFst


// Initialize module

bool Ready() {
  PyObject* base_cls = ImportFQName("kaldi.fstext._deterministic_fst.StdDeterministicOnDemandFst");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._deterministic_fst.StdDeterministicOnDemandFst is not a new style class inheriting from object.");
    return false;
  }
  pyKaldiRnnlmDeterministicFst::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyKaldiRnnlmDeterministicFst::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._deterministic_fst.StdDeterministicOnDemandFst is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyKaldiRnnlmDeterministicFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyKaldiRnnlmDeterministicFst::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_rnnlm_lattice_rescoring",  // module name
  "CLIF-generated module for rnnlm/rnnlm-lattice-rescoring.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_float_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_lattice_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_arc")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_rnnlm_compute_state")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "KaldiRnnlmDeterministicFst", reinterpret_cast<PyObject*>(&pyKaldiRnnlmDeterministicFst::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __rnnlm__lattice__rescoring_clifwrap

namespace kaldi { namespace rnnlm {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// KaldiRnnlmDeterministicFst to/from ::kaldi::rnnlm::KaldiRnnlmDeterministicFst conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::rnnlm::KaldiRnnlmDeterministicFst** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::rnnlm::KaldiRnnlmDeterministicFst* cpp = __rnnlm__lattice__rescoring_clifwrap::pyKaldiRnnlmDeterministicFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::rnnlm::KaldiRnnlmDeterministicFst>* c) {
  assert(c != nullptr);
  ::kaldi::rnnlm::KaldiRnnlmDeterministicFst* cpp = __rnnlm__lattice__rescoring_clifwrap::pyKaldiRnnlmDeterministicFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__rnnlm__lattice__rescoring_clifwrap::pyKaldiRnnlmDeterministicFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::rnnlm::KaldiRnnlmDeterministicFst>* c) {
  assert(c != nullptr);
  ::kaldi::rnnlm::KaldiRnnlmDeterministicFst* cpp = __rnnlm__lattice__rescoring_clifwrap::pyKaldiRnnlmDeterministicFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__rnnlm__lattice__rescoring_clifwrap::pyKaldiRnnlmDeterministicFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert KaldiRnnlmDeterministicFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::rnnlm::KaldiRnnlmDeterministicFst* c) {
  assert(c != nullptr);
  ::kaldi::rnnlm::KaldiRnnlmDeterministicFst* cpp = __rnnlm__lattice__rescoring_clifwrap::pyKaldiRnnlmDeterministicFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::rnnlm::KaldiRnnlmDeterministicFst>* c) {
  assert(c != nullptr);
  ::kaldi::rnnlm::KaldiRnnlmDeterministicFst* cpp = __rnnlm__lattice__rescoring_clifwrap::pyKaldiRnnlmDeterministicFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::rnnlm::KaldiRnnlmDeterministicFst* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__rnnlm__lattice__rescoring_clifwrap::pyKaldiRnnlmDeterministicFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__rnnlm__lattice__rescoring_clifwrap::pyKaldiRnnlmDeterministicFst::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::rnnlm::KaldiRnnlmDeterministicFst>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::rnnlm::KaldiRnnlmDeterministicFst> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__rnnlm__lattice__rescoring_clifwrap::pyKaldiRnnlmDeterministicFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__rnnlm__lattice__rescoring_clifwrap::pyKaldiRnnlmDeterministicFst::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::rnnlm::KaldiRnnlmDeterministicFst>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::rnnlm::KaldiRnnlmDeterministicFst> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__rnnlm__lattice__rescoring_clifwrap::pyKaldiRnnlmDeterministicFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__rnnlm__lattice__rescoring_clifwrap::pyKaldiRnnlmDeterministicFst::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::rnnlm::KaldiRnnlmDeterministicFst>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::rnnlm::KaldiRnnlmDeterministicFst& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__rnnlm__lattice__rescoring_clifwrap::pyKaldiRnnlmDeterministicFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__rnnlm__lattice__rescoring_clifwrap::pyKaldiRnnlmDeterministicFst::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::rnnlm::KaldiRnnlmDeterministicFst>(c);
  return py;
}

} }  // namespace kaldi::rnnlm
