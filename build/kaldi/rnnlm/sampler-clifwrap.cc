//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/rnnlm/sampler.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "sampler-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __sampler_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


// sample_without_replacement(probs:list<float>) -> list<int>
static PyObject* wrapSampleWithoutReplacement_as_sample_without_replacement(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("probs"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:sample_without_replacement", names, &a[0])) return nullptr;
  ::std::vector<double> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("sample_without_replacement", names[0], "::std::vector<double>", a[0]);
  ::std::vector< ::int32> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::rnnlm::SampleWithoutReplacement(std::move(arg1), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

namespace pySampler {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::rnnlm::Sampler> cpp;
};
static ::kaldi::rnnlm::Sampler* ThisPtr(PyObject*);

// __init__(unigram_probs:list<float>)
static PyObject* wrapSampler_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("unigram_probs"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::std::vector< ::kaldi::BaseFloat> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::std::vector< ::kaldi::BaseFloat>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::rnnlm::Sampler>(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// sample_words(num_words_to_sample:int, unigram_weight:float, higher_order_probs:list<tuple<int, float>>) -> list<tuple<int, float>>
static PyObject* wrapSampleWords_as_sample_words(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("num_words_to_sample"),
      C("unigram_weight"),
      C("higher_order_probs"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:sample_words", names, &a[0], &a[1], &a[2])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("sample_words", names[0], "int", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("sample_words", names[1], "float", a[1]);
  ::std::vector< ::std::pair< ::int32, ::kaldi::BaseFloat> > arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("sample_words", names[2], "::std::vector< ::std::pair< ::int32, ::kaldi::BaseFloat> >", a[2]);
  ::std::vector< ::std::pair< ::int32, ::kaldi::BaseFloat> > ret0{};
  // Call actual C++ method.
  ::kaldi::rnnlm::Sampler* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SampleWords(std::move(arg1), std::move(arg2), std::move(arg3), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// sample_words_with_requirements(num_words_to_sample:int, unigram_weight:float, higher_order_probs:list<tuple<int, float>>, words_we_must_sample:list<int>) -> list<tuple<int, float>>
static PyObject* wrapSampleWords_as_sample_words_with_requirements(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("num_words_to_sample"),
      C("unigram_weight"),
      C("higher_order_probs"),
      C("words_we_must_sample"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:sample_words_with_requirements", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("sample_words_with_requirements", names[0], "int", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("sample_words_with_requirements", names[1], "float", a[1]);
  ::std::vector< ::std::pair< ::int32, ::kaldi::BaseFloat> > arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("sample_words_with_requirements", names[2], "::std::vector< ::std::pair< ::int32, ::kaldi::BaseFloat> >", a[2]);
  ::std::vector< ::int32> arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("sample_words_with_requirements", names[3], "::std::vector< ::int32>", a[3]);
  ::std::vector< ::std::pair< ::int32, ::kaldi::BaseFloat> > ret0{};
  // Call actual C++ method.
  ::kaldi::rnnlm::Sampler* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SampleWords(std::move(arg1), std::move(arg2), std::move(arg3), std::move(arg4), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapSampler_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(unigram_probs:list<float>)\n  Calls C++ function\n  void ::kaldi::rnnlm::Sampler::Sampler(::std::vector< ::kaldi::BaseFloat>)")},
  {C("sample_words"), (PyCFunction)wrapSampleWords_as_sample_words, METH_VARARGS | METH_KEYWORDS, C("sample_words(num_words_to_sample:int, unigram_weight:float, higher_order_probs:list<tuple<int, float>>) -> list<tuple<int, float>>\n\nSamples words from the supplied distribution, appropriately scaled.\n\nLet the unnormalized distribution be as follows:\n   p(i)  = unigram_weight * u(i) + h(i)\nwhere u(i) is the 'unigram_probs' list this class was constructed\nwith, and h(i) is the probability that word i is given (if any) in\nthe sparse vector that 'higher_order_probs' represents.\nNotice that we are adding to the unigram distribution, we are not\nbacking off to it.  Doing it this way makes a lot of things simpler.\n\nWe define the first-order inclusion probabilities:\n  q(i) = min(alpha p(i), 1.0)\nwhere alpha is chosen so that the sum of q(i) equals\n'num_words_to_sample'. Then we generate a sample whose first-order\ninclusion probabilities are q(i).  We do all this without explicitly\niterating over the unigram distribution, so this is fairly fast.\n\nArgs:\n  num_words_to_sample (int): The number of words that we are\n    directed sample; must be > 0 and less than the number of nonzero\n    elements of the 'unigram_probs' that this class was constructed\n    with.\n  unigram_weight (float): Must be > 0.0. Search above for p(i) to\n    see what effect it has.\n  higher_order_probs (List[Tuple[int,float]]): A list of pairs (i, p)\n    where 0 <= i < unigram_probs.size() (referring to the unigram_probs\n    list used in the constructor), and p > 0.0.  This list must be\n    sorted and unique w.r.t. i.  Note: the probabilities here will be\n    added to the unigram probabilities of the words concerned.\n\nReturns:\n  The sampled list of words, represented as pairs (i, p), where 0 <= i <\n  unigram_probs.size() is the word index and 0 < p <= 1 is the\n  probabilitity with which that word was included in the set. The list\n  will not be sorted, but it will be unique on the int.  Its size will\n  equal num_words_to_sample.")},
  {C("sample_words_with_requirements"), (PyCFunction)wrapSampleWords_as_sample_words_with_requirements, METH_VARARGS | METH_KEYWORDS, C("sample_words_with_requirements(num_words_to_sample:int, unigram_weight:float, higher_order_probs:list<tuple<int, float>>, words_we_must_sample:list<int>) -> list<tuple<int, float>>\n\nSample words by specifiying a list of words that must be sampled.\n\nThis is an alternative version of :meth:`sample_words` which allows you\nto specify a list of words that must be sampled (i.e. after scaling,\nthey must have probability 1.0.).  It does this by adding them to the\ndistribution with sufficiently large probability and then calling\n:meth:`sample_words`.\n\nArgs:\n  num_words_to_sample (int): The number of words that we are\n    directed sample; must be > 0 and less than the number of nonzero\n    elements of the 'unigram_probs' that this class was constructed\n    with.\n  unigram_weight (float): Must be > 0.0. Search above for p(i) to\n    see what effect it has.\n  higher_order_probs (List[Tuple[int,float]]): A list of pairs (i, p)\n    where 0 <= i < unigram_probs.size() (referring to the unigram_probs\n    list used in the constructor), and p > 0.0.  This list must be\n    sorted and unique w.r.t. i.  Note: the probabilities here will be\n    added to the unigram probabilities of the words concerned.\n  words_we_must_sample (List[int]): A list of words that must be\n    sampled. It must be sorted and unique, and all elements `i` must\n    satisfy `0 <= i < len(unigram_probs)`, where `unigram_probs` is the\n    list supplied to the constructor.\n\nReturns:\n  The sampled list of words, represented as pairs (i, p), where 0 <= i <\n  unigram_probs.size() is the word index and 0 < p <= 1 is the\n  probabilitity with which that word was included in the set. The list\n  will not be sorted, but it will be unique on the int.  Its size will\n  equal num_words_to_sample.\n\nSee Also:\n  :meth:`sample_words`.")},
  {}
};

// Sampler __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// Sampler __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// Sampler __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_sampler.Sampler",                  // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Word sampler.\n\nThis class allows us to sample a set of words from a distribution over\nwords, where the distribution (which ultimately comes from an ARPA-style\nlanguage model) is given as a combination of a unigram distribution with\na sparse component represented as a list of (word-index, probability)\npairs.\n\nArgs:\n  unigram_probs (List[float]): The unigram probabilities for each word.\n    Each elemenet should be >= 0, and they should sum to a value close to\n    1.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapSampler_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::rnnlm::Sampler* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_rnnlm_Sampler"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::rnnlm::Sampler"));
      if (!PyErr_Occurred()) {
        ::kaldi::rnnlm::Sampler* c = static_cast<::kaldi::rnnlm::Sampler*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::rnnlm::Sampler*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pySampler

// check_distribution(d:list<tuple<int, float>>)
static PyObject* wrapCheckDistribution_as_check_distribution(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("d"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:check_distribution", names, &a[0])) return nullptr;
  ::kaldi::rnnlm::Distribution arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("check_distribution", names[0], "::kaldi::rnnlm::Distribution", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::rnnlm::CheckDistribution(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// total_of_distribution(d:list<tuple<int, float>>) -> float
static PyObject* wrapTotalOfDistribution_as_total_of_distribution(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("d"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:total_of_distribution", names, &a[0])) return nullptr;
  ::kaldi::rnnlm::Distribution arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("total_of_distribution", names[0], "::kaldi::rnnlm::Distribution", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::rnnlm::TotalOfDistribution(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// merge_distributions(d1:list<tuple<int, float>>, d2:list<tuple<int, float>>) -> list<tuple<int, float>>
static PyObject* wrapMergeDistributions_as_merge_distributions(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("d1"),
      C("d2"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:merge_distributions", names, &a[0], &a[1])) return nullptr;
  ::kaldi::rnnlm::Distribution arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("merge_distributions", names[0], "::kaldi::rnnlm::Distribution", a[0]);
  ::kaldi::rnnlm::Distribution arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("merge_distributions", names[1], "::kaldi::rnnlm::Distribution", a[1]);
  ::kaldi::rnnlm::Distribution ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::rnnlm::MergeDistributions(std::move(arg1), std::move(arg2), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("sample_without_replacement"), (PyCFunction)wrapSampleWithoutReplacement_as_sample_without_replacement, METH_VARARGS | METH_KEYWORDS, C("sample_without_replacement(probs:list<float>) -> list<int>\n\nSamples without replacement from a distribution.\n\nSamples without replacement from a distribution, with provided 1st order\ninclusion probabilities. For example, if `probs[i] == 1.0`, `i` will\ndefinitely be included in the output list, and if `probs[i] == 0.0`, `i`\nwill definitely not be included.\n\nArgs:\n  probs (List[float]): The input list of inclusion probabilities, with\n    0.0 <= probs[i] <= 1.0, and the sum of `probs` should be close to an\n    integer.  (specifically: within 1.0e-03 of a whole number; this\n    should be easy to ensure in double precision). Let 'k' be this sum,\n    rounded to the nearest integer.\n\nReturns:\n  The output list is an unsorted list of 'k' distinct samples with\n  first order inclusion probabilities given by `probs`.")},
  {C("check_distribution"), (PyCFunction)wrapCheckDistribution_as_check_distribution, METH_VARARGS | METH_KEYWORDS, C("check_distribution(d:list<tuple<int, float>>)\n\nValidates a distribution.\n\nChecks if a distribution is sorted and unique on its first values, and\nif all of its second values are > 0.\n\nArgs:\n  d (List[Tuple[int,float]]): The input distribution.\n\nRaises:\n  RuntimeError: If validation fails.")},
  {C("total_of_distribution"), (PyCFunction)wrapTotalOfDistribution_as_total_of_distribution, METH_VARARGS | METH_KEYWORDS, C("total_of_distribution(d:list<tuple<int, float>>) -> float\n\nReturns the sum of the elements of a distribution.\nArgs:\n  d (List[Tuple[int,float]]): The input distribution.\n\nReturns:\n  The sum of elements of a distribution.")},
  {C("merge_distributions"), (PyCFunction)wrapMergeDistributions_as_merge_distributions, METH_VARARGS | METH_KEYWORDS, C("merge_distributions(d1:list<tuple<int, float>>, d2:list<tuple<int, float>>) -> list<tuple<int, float>>\n\nMerges two distributions.\n\nSums the probabilities of any elements that occur in both input\ndistributions.\n\nArgs:\n  d1 (List[Tuple[int,float]]): The first input distribution.\n  d2 (List[Tuple[int,float]]): The second input distribution.\n\nReturns:\n  The output distribution.")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pySampler::wrapper_Type) < 0) return false;
  Py_INCREF(&pySampler::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_sampler",  // module name
  "CLIF-generated module for rnnlm/sampler.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "Sampler", reinterpret_cast<PyObject*>(&pySampler::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __sampler_clifwrap

namespace kaldi { namespace rnnlm {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// Sampler to/from ::kaldi::rnnlm::Sampler conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::rnnlm::Sampler** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::rnnlm::Sampler* cpp = __sampler_clifwrap::pySampler::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::rnnlm::Sampler>* c) {
  assert(c != nullptr);
  ::kaldi::rnnlm::Sampler* cpp = __sampler_clifwrap::pySampler::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__sampler_clifwrap::pySampler::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::rnnlm::Sampler>* c) {
  assert(c != nullptr);
  ::kaldi::rnnlm::Sampler* cpp = __sampler_clifwrap::pySampler::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__sampler_clifwrap::pySampler::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert Sampler instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::rnnlm::Sampler* c) {
  assert(c != nullptr);
  ::kaldi::rnnlm::Sampler* cpp = __sampler_clifwrap::pySampler::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::rnnlm::Sampler>* c) {
  assert(c != nullptr);
  ::kaldi::rnnlm::Sampler* cpp = __sampler_clifwrap::pySampler::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::rnnlm::Sampler* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__sampler_clifwrap::pySampler::wrapper_Type, NULL, NULL);
  reinterpret_cast<__sampler_clifwrap::pySampler::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::rnnlm::Sampler>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::rnnlm::Sampler> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__sampler_clifwrap::pySampler::wrapper_Type, NULL, NULL);
  reinterpret_cast<__sampler_clifwrap::pySampler::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::rnnlm::Sampler>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::rnnlm::Sampler> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__sampler_clifwrap::pySampler::wrapper_Type, NULL, NULL);
  reinterpret_cast<__sampler_clifwrap::pySampler::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::rnnlm::Sampler>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::rnnlm::Sampler& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__sampler_clifwrap::pySampler::wrapper_Type, NULL, NULL);
  reinterpret_cast<__sampler_clifwrap::pySampler::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::rnnlm::Sampler>(c);
  return py;
}

} }  // namespace kaldi::rnnlm
