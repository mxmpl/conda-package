//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/rnnlm/rnnlm-compute-state.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "itf/options-itf-clifwrap.h"
#include "cudamatrix/cu-matrix-clifwrap.h"
#include "nnet3/nnet-nnet-clifwrap.h"
#include "nnet3/nnet-computation-clifwrap.h"
#include "nnet3/nnet-compute-clifwrap.h"
#include "nnet3/nnet-optimize-clifwrap.h"
#include "rnnlm-compute-state-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __rnnlm__compute__state_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyRnnlmComputeStateComputationOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::rnnlm::RnnlmComputeStateComputationOptions> cpp;
};
static ::kaldi::rnnlm::RnnlmComputeStateComputationOptions* ThisPtr(PyObject*);

static PyObject* get_debug_computation(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->debug_computation, {});
}

static int set_debug_computation(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the debug_computation attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->debug_computation)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for debug_computation:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_normalize_probs(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->normalize_probs, {});
}

static int set_normalize_probs(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the normalize_probs attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->normalize_probs)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for normalize_probs:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_bos_index(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->bos_index, {});
}

static int set_bos_index(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the bos_index attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->bos_index)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for bos_index:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_eos_index(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->eos_index, {});
}

static int set_eos_index(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the eos_index attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->eos_index)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for eos_index:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_brk_index(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->brk_index, {});
}

static int set_brk_index(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the brk_index attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->brk_index)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for brk_index:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_optimize_config(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->optimize_config), {});
}

static int set_optimize_config(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the optimize_config attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->optimize_config)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for optimize_config:NnetOptimizeOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_compute_config(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->compute_config), {});
}

static int set_compute_config(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the compute_config attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->compute_config)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for compute_config:NnetComputeOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::rnnlm::RnnlmComputeStateComputationOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("debug_computation"), get_debug_computation, set_debug_computation, C("Whether to turn on debug for the actual computation (very verbose!).")},
  {C("normalize_probs"), get_normalize_probs, set_normalize_probs, C("Whether to normalize word probabilities exactly.\n\nIf False, the sum-to-one normalization is approximate.")},
  {C("bos_index"), get_bos_index, set_bos_index, C("Index in wordlist representing the begin-of-sentence symbol.\n\nWe need this when we initialize the RnnlmComputeState and pass the BOS\nhistory.")},
  {C("eos_index"), get_eos_index, set_eos_index, C("Index in wordlist representing the end-of-sentence symbol.\n\nWe need this to compute the final cost of a state.")},
  {C("brk_index"), get_brk_index, set_brk_index, C("Index in wordlist representing the break symbol.\n\nThis is not needed for computation; included only for ease of scripting.")},
  {C("optimize_config"), get_optimize_config, set_optimize_config, C("Nnet optimization options.")},
  {C("compute_config"), get_compute_config, set_compute_config, C("Nnet compute options.")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n\nRegisters options with an object implementing the options interface.\n\nArgs:\n  opts (OptionsItf): An object implementing the options interface.\n    Typically a command-line option parser.")},
  {}
};

// RnnlmComputeStateComputationOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// RnnlmComputeStateComputationOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// RnnlmComputeStateComputationOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_rnnlm_compute_state.RnnlmComputeStateComputationOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Options for RNNLM compute state.",  // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "RnnlmComputeStateComputationOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::rnnlm::RnnlmComputeStateComputationOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::rnnlm::RnnlmComputeStateComputationOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_rnnlm_RnnlmComputeStateComputationOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::rnnlm::RnnlmComputeStateComputationOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::rnnlm::RnnlmComputeStateComputationOptions* c = static_cast<::kaldi::rnnlm::RnnlmComputeStateComputationOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::rnnlm::RnnlmComputeStateComputationOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyRnnlmComputeStateComputationOptions

namespace pyRnnlmComputeStateInfo {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::rnnlm::RnnlmComputeStateInfo> cpp;
};
static ::kaldi::rnnlm::RnnlmComputeStateInfo* ThisPtr(PyObject*);

// __init__(opts:RnnlmComputeStateComputationOptions, rnnlm:Nnet, word_embedding_mat:CuMatrix)
static PyObject* wrapRnnlmComputeStateInfo_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("opts"),
      C("rnnlm"),
      C("word_embedding_mat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:__init__", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::rnnlm::RnnlmComputeStateComputationOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::rnnlm::RnnlmComputeStateComputationOptions", a[0]);
  ::kaldi::nnet3::Nnet* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::nnet3::Nnet", a[1]);
  ::kaldi::CuMatrix<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::kaldi::CuMatrix<float>", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::rnnlm::RnnlmComputeStateInfo>(*arg1, *arg2, *arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyObject* get_computation(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->computation), {});
}

static int set_computation(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the computation attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->computation)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for computation:NnetComputation", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("computation"), get_computation, set_computation, C("The compiled, 'looped' nnet computation.")},
  {}
};

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapRnnlmComputeStateInfo_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(opts:RnnlmComputeStateComputationOptions, rnnlm:Nnet, word_embedding_mat:CuMatrix)\n  Calls C++ function\n  void ::kaldi::rnnlm::RnnlmComputeStateInfo::RnnlmComputeStateInfo(::kaldi::rnnlm::RnnlmComputeStateComputationOptions, ::kaldi::nnet3::Nnet, ::kaldi::CuMatrix<float>)")},
  {}
};

// RnnlmComputeStateInfo __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// RnnlmComputeStateInfo __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// RnnlmComputeStateInfo __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_rnnlm_compute_state.RnnlmComputeStateInfo", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::rnnlm::RnnlmComputeStateInfo", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapRnnlmComputeStateInfo_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::rnnlm::RnnlmComputeStateInfo* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_rnnlm_RnnlmComputeStateInfo"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::rnnlm::RnnlmComputeStateInfo"));
      if (!PyErr_Occurred()) {
        ::kaldi::rnnlm::RnnlmComputeStateInfo* c = static_cast<::kaldi::rnnlm::RnnlmComputeStateInfo*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::rnnlm::RnnlmComputeStateInfo*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyRnnlmComputeStateInfo

namespace pyRnnlmComputeState {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::rnnlm::RnnlmComputeState> cpp;
};
static ::kaldi::rnnlm::RnnlmComputeState* ThisPtr(PyObject*);

// __init__(info:RnnlmComputeStateInfo, bos_index:int)
static PyObject* wrapRnnlmComputeState_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("info"),
      C("bos_index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::kaldi::rnnlm::RnnlmComputeStateInfo* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::rnnlm::RnnlmComputeStateInfo", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "int", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::rnnlm::RnnlmComputeState>(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// @classmethod from_other(other:RnnlmComputeState) -> RnnlmComputeState
static PyObject* wrapRnnlmComputeState_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::kaldi::rnnlm::RnnlmComputeState* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::kaldi::rnnlm::RnnlmComputeState", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::rnnlm::RnnlmComputeState> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::rnnlm::RnnlmComputeState>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_successor_state(next_word:int) -> RnnlmComputeState
static PyObject* wrapGetSuccessorState_as_get_successor_state(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("next_word"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_successor_state", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_successor_state", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::rnnlm::RnnlmComputeState* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::gtl::optional<::kaldi::rnnlm::RnnlmComputeState *> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetSuccessorState(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0.value()), {});
}

// log_prob_of_word(word_index:int) -> float
static PyObject* wrapLogProbOfWord_as_log_prob_of_word(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("word_index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:log_prob_of_word", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("log_prob_of_word", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::rnnlm::RnnlmComputeState* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->LogProbOfWord(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_log_prob_of_words(output:CuMatrixBase)
static PyObject* wrapGetLogProbOfWords_as_get_log_prob_of_words(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("output"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_log_prob_of_words", names, &a[0])) return nullptr;
  ::kaldi::CuMatrixBase<float> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_log_prob_of_words", names[0], "::kaldi::CuMatrixBase<float> *", a[0]);
  // Call actual C++ method.
  ::kaldi::rnnlm::RnnlmComputeState* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetLogProbOfWords(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// add_word(word_index:int)
static PyObject* wrapAddWord_as_add_word(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("word_index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:add_word", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add_word", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::rnnlm::RnnlmComputeState* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AddWord(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapRnnlmComputeState_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(info:RnnlmComputeStateInfo, bos_index:int)\n  Calls C++ function\n  void ::kaldi::rnnlm::RnnlmComputeState::RnnlmComputeState(::kaldi::rnnlm::RnnlmComputeStateInfo, int)")},
  {C("from_other"), (PyCFunction)wrapRnnlmComputeState_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(other:RnnlmComputeState) -> RnnlmComputeState\n\nCreates a new instance from another.\nArgs:\n  other (RnnlmComputeState): The other RNNLM computation state.")},
  {C("get_successor_state"), (PyCFunction)wrapGetSuccessorState_as_get_successor_state, METH_VARARGS | METH_KEYWORDS, C("get_successor_state(next_word:int) -> RnnlmComputeState\n\nGenerates another state by processing the next-word.\n\nArgs:\n  next_word (int): The next word to process.")},
  {C("log_prob_of_word"), (PyCFunction)wrapLogProbOfWord_as_log_prob_of_word, METH_VARARGS | METH_KEYWORDS, C("log_prob_of_word(word_index:int) -> float\n\nGets the log-prob for the provided word.\n\nReturns:\n  The log-prob that the model predicts for the provided word-index,\n  given the current history.")},
  {C("get_log_prob_of_words"), (PyCFunction)wrapGetLogProbOfWords_as_get_log_prob_of_words, METH_VARARGS | METH_KEYWORDS, C("get_log_prob_of_words(output:CuMatrixBase)\n\nComputes log probs of all words.\n\nThis function computes log probs of all words and outputs them as a\nmatrix.\n\nNote:\n  output[0,0] corresponds to <eps> symbol and it should NEVER be\n  used in any computation by the caller. To avoid causing unexpected\n  issues, it is set to a very small number.")},
  {C("add_word"), (PyCFunction)wrapAddWord_as_add_word, METH_VARARGS | METH_KEYWORDS, C("add_word(word_index:int)\n\nUpdates the state of the RNNLM by appending a word.")},
  {}
};

// RnnlmComputeState __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// RnnlmComputeState __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// RnnlmComputeState __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_rnnlm_compute_state.RnnlmComputeState", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "RNNLM computation state.\n\nThis class handles the neural net computation; it's mostly accessed\nvia other wrapper classes.\n\nAt every time step this class takes a new word, advances the nnet\ncomputation by one step, and works out the log-prob of words to be used\nin lattice rescoring.\n\nArgs:\n  info (RnnlmComputeStateInfo): State information for RNNLM computation.\n  bos_index (int): Index of the begin-of-sentence symbol.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapRnnlmComputeState_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::rnnlm::RnnlmComputeState* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_rnnlm_RnnlmComputeState"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::rnnlm::RnnlmComputeState"));
      if (!PyErr_Occurred()) {
        ::kaldi::rnnlm::RnnlmComputeState* c = static_cast<::kaldi::rnnlm::RnnlmComputeState*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::rnnlm::RnnlmComputeState*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyRnnlmComputeState


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyRnnlmComputeStateComputationOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyRnnlmComputeStateComputationOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyRnnlmComputeStateInfo::wrapper_Type) < 0) return false;
  Py_INCREF(&pyRnnlmComputeStateInfo::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyRnnlmComputeState::wrapper_Type) < 0) return false;
  Py_INCREF(&pyRnnlmComputeState::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_rnnlm_compute_state",  // module name
  "CLIF-generated module for rnnlm/rnnlm-compute-state.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_cu_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_nnet")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_computation")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_compute")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_optimize")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "RnnlmComputeStateComputationOptions", reinterpret_cast<PyObject*>(&pyRnnlmComputeStateComputationOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "RnnlmComputeStateInfo", reinterpret_cast<PyObject*>(&pyRnnlmComputeStateInfo::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "RnnlmComputeState", reinterpret_cast<PyObject*>(&pyRnnlmComputeState::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __rnnlm__compute__state_clifwrap

namespace kaldi { namespace rnnlm {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// RnnlmComputeState to/from ::kaldi::rnnlm::RnnlmComputeState conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::rnnlm::RnnlmComputeState** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::rnnlm::RnnlmComputeState* cpp = __rnnlm__compute__state_clifwrap::pyRnnlmComputeState::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::rnnlm::RnnlmComputeState>* c) {
  assert(c != nullptr);
  ::kaldi::rnnlm::RnnlmComputeState* cpp = __rnnlm__compute__state_clifwrap::pyRnnlmComputeState::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__rnnlm__compute__state_clifwrap::pyRnnlmComputeState::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::rnnlm::RnnlmComputeState>* c) {
  assert(c != nullptr);
  ::kaldi::rnnlm::RnnlmComputeState* cpp = __rnnlm__compute__state_clifwrap::pyRnnlmComputeState::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__rnnlm__compute__state_clifwrap::pyRnnlmComputeState::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert RnnlmComputeState instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::rnnlm::RnnlmComputeState* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__rnnlm__compute__state_clifwrap::pyRnnlmComputeState::wrapper_Type, NULL, NULL);
  reinterpret_cast<__rnnlm__compute__state_clifwrap::pyRnnlmComputeState::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::rnnlm::RnnlmComputeState>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::rnnlm::RnnlmComputeState> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__rnnlm__compute__state_clifwrap::pyRnnlmComputeState::wrapper_Type, NULL, NULL);
  reinterpret_cast<__rnnlm__compute__state_clifwrap::pyRnnlmComputeState::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::rnnlm::RnnlmComputeState>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::rnnlm::RnnlmComputeState> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__rnnlm__compute__state_clifwrap::pyRnnlmComputeState::wrapper_Type, NULL, NULL);
  reinterpret_cast<__rnnlm__compute__state_clifwrap::pyRnnlmComputeState::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::rnnlm::RnnlmComputeState>(std::move(c));
  return py;
}

// RnnlmComputeStateComputationOptions to/from ::kaldi::rnnlm::RnnlmComputeStateComputationOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::rnnlm::RnnlmComputeStateComputationOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::rnnlm::RnnlmComputeStateComputationOptions* cpp = __rnnlm__compute__state_clifwrap::pyRnnlmComputeStateComputationOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::rnnlm::RnnlmComputeStateComputationOptions>* c) {
  assert(c != nullptr);
  ::kaldi::rnnlm::RnnlmComputeStateComputationOptions* cpp = __rnnlm__compute__state_clifwrap::pyRnnlmComputeStateComputationOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__rnnlm__compute__state_clifwrap::pyRnnlmComputeStateComputationOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::rnnlm::RnnlmComputeStateComputationOptions>* c) {
  assert(c != nullptr);
  ::kaldi::rnnlm::RnnlmComputeStateComputationOptions* cpp = __rnnlm__compute__state_clifwrap::pyRnnlmComputeStateComputationOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__rnnlm__compute__state_clifwrap::pyRnnlmComputeStateComputationOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert RnnlmComputeStateComputationOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::rnnlm::RnnlmComputeStateComputationOptions* c) {
  assert(c != nullptr);
  ::kaldi::rnnlm::RnnlmComputeStateComputationOptions* cpp = __rnnlm__compute__state_clifwrap::pyRnnlmComputeStateComputationOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::rnnlm::RnnlmComputeStateComputationOptions>* c) {
  assert(c != nullptr);
  ::kaldi::rnnlm::RnnlmComputeStateComputationOptions* cpp = __rnnlm__compute__state_clifwrap::pyRnnlmComputeStateComputationOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::rnnlm::RnnlmComputeStateComputationOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__rnnlm__compute__state_clifwrap::pyRnnlmComputeStateComputationOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__rnnlm__compute__state_clifwrap::pyRnnlmComputeStateComputationOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::rnnlm::RnnlmComputeStateComputationOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::rnnlm::RnnlmComputeStateComputationOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__rnnlm__compute__state_clifwrap::pyRnnlmComputeStateComputationOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__rnnlm__compute__state_clifwrap::pyRnnlmComputeStateComputationOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::rnnlm::RnnlmComputeStateComputationOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::rnnlm::RnnlmComputeStateComputationOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__rnnlm__compute__state_clifwrap::pyRnnlmComputeStateComputationOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__rnnlm__compute__state_clifwrap::pyRnnlmComputeStateComputationOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::rnnlm::RnnlmComputeStateComputationOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::rnnlm::RnnlmComputeStateComputationOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__rnnlm__compute__state_clifwrap::pyRnnlmComputeStateComputationOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__rnnlm__compute__state_clifwrap::pyRnnlmComputeStateComputationOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::rnnlm::RnnlmComputeStateComputationOptions>(c);
  return py;
}

// RnnlmComputeStateInfo to/from ::kaldi::rnnlm::RnnlmComputeStateInfo conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::rnnlm::RnnlmComputeStateInfo** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::rnnlm::RnnlmComputeStateInfo* cpp = __rnnlm__compute__state_clifwrap::pyRnnlmComputeStateInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::rnnlm::RnnlmComputeStateInfo>* c) {
  assert(c != nullptr);
  ::kaldi::rnnlm::RnnlmComputeStateInfo* cpp = __rnnlm__compute__state_clifwrap::pyRnnlmComputeStateInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__rnnlm__compute__state_clifwrap::pyRnnlmComputeStateInfo::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::rnnlm::RnnlmComputeStateInfo>* c) {
  assert(c != nullptr);
  ::kaldi::rnnlm::RnnlmComputeStateInfo* cpp = __rnnlm__compute__state_clifwrap::pyRnnlmComputeStateInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__rnnlm__compute__state_clifwrap::pyRnnlmComputeStateInfo::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert RnnlmComputeStateInfo instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::rnnlm::RnnlmComputeStateInfo* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__rnnlm__compute__state_clifwrap::pyRnnlmComputeStateInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__rnnlm__compute__state_clifwrap::pyRnnlmComputeStateInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::rnnlm::RnnlmComputeStateInfo>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::rnnlm::RnnlmComputeStateInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__rnnlm__compute__state_clifwrap::pyRnnlmComputeStateInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__rnnlm__compute__state_clifwrap::pyRnnlmComputeStateInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::rnnlm::RnnlmComputeStateInfo>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::rnnlm::RnnlmComputeStateInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__rnnlm__compute__state_clifwrap::pyRnnlmComputeStateInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__rnnlm__compute__state_clifwrap::pyRnnlmComputeStateInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::rnnlm::RnnlmComputeStateInfo>(std::move(c));
  return py;
}

} }  // namespace kaldi::rnnlm
