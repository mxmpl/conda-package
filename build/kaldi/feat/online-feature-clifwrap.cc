//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/feat/online-feature.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "itf/online-feature-itf-clifwrap.h"
#include "util/options-ext-clifwrap.h"
#include "base/iostream-clifwrap.h"
#include "feat/feature-functions-clifwrap.h"
#include "feat/feature-mfcc-clifwrap.h"
#include "feat/feature-plp-clifwrap.h"
#include "feat/feature-fbank-clifwrap.h"
#include "online-feature-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __online__feature_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyOnlineMfcc {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>> cpp;
};
static ::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>* ThisPtr(PyObject*);

// __init__(opts:MfccOptions)
static PyObject* wrapMfccComputer_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::kaldi::MfccOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::MfccOptions", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_last_frame(frame:int) -> bool
static PyObject* wrapIsLastFrame_as_is_last_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_last_frame", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_last_frame", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsLastFrame(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// frame_shift_in_seconds() -> float
static PyObject* wrapFrameShiftInSeconds_as_frame_shift_in_seconds(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FrameShiftInSeconds();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_frames_ready() -> int
static PyObject* wrapNumFramesReady_as_num_frames_ready(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFramesReady();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_frame(frame:int, feat:VectorBase)
static PyObject* wrapGetFrame_as_get_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("feat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_frame", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_frame", names[0], "int", a[0]);
  ::kaldi::VectorBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_frame", names[1], "::kaldi::VectorBase<float> *", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetFrame(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// accept_waveform(sampling_rate:float, waveform:VectorBase)
static PyObject* wrapAcceptWaveform_as_accept_waveform(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("sampling_rate"),
      C("waveform"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:accept_waveform", names, &a[0], &a[1])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accept_waveform", names[0], "float", a[0]);
  ::kaldi::VectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accept_waveform", names[1], "::kaldi::VectorBase<float>", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AcceptWaveform(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// input_finished()
static PyObject* wrapInputFinished_as_input_finished(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->InputFinished();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::kaldi::OnlineBaseFeature*
static PyObject* as_kaldi_OnlineBaseFeature(PyObject* self) {
  ::kaldi::OnlineBaseFeature* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::OnlineBaseFeature"), nullptr);
}

// Implicit cast this as ::kaldi::OnlineFeatureInterface*
static PyObject* as_kaldi_OnlineFeatureInterface(PyObject* self) {
  ::kaldi::OnlineFeatureInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::OnlineFeatureInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapMfccComputer_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(opts:MfccOptions)\n  Calls C++ function\n  void ::kaldi::OnlineGenericBaseFeature<kaldi::MfccComputer>::OnlineGenericBaseFeature(::kaldi::MfccOptions)")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::OnlineGenericBaseFeature<kaldi::MfccComputer>::Dim()")},
  {C("is_last_frame"), (PyCFunction)wrapIsLastFrame_as_is_last_frame, METH_VARARGS | METH_KEYWORDS, C("is_last_frame(frame:int) -> bool\n  Calls C++ function\n  bool ::kaldi::OnlineGenericBaseFeature<kaldi::MfccComputer>::IsLastFrame(int)")},
  {C("frame_shift_in_seconds"), (PyCFunction)wrapFrameShiftInSeconds_as_frame_shift_in_seconds, METH_NOARGS, C("frame_shift_in_seconds() -> float\n  Calls C++ function\n  float ::kaldi::OnlineGenericBaseFeature<kaldi::MfccComputer>::FrameShiftInSeconds()")},
  {C("num_frames_ready"), (PyCFunction)wrapNumFramesReady_as_num_frames_ready, METH_NOARGS, C("num_frames_ready() -> int\n  Calls C++ function\n  int ::kaldi::OnlineGenericBaseFeature<kaldi::MfccComputer>::NumFramesReady()")},
  {C("get_frame"), (PyCFunction)wrapGetFrame_as_get_frame, METH_VARARGS | METH_KEYWORDS, C("get_frame(frame:int, feat:VectorBase)\n  Calls C++ function\n  void ::kaldi::OnlineGenericBaseFeature<kaldi::MfccComputer>::GetFrame(int, ::kaldi::VectorBase<float> *)")},
  {C("accept_waveform"), (PyCFunction)wrapAcceptWaveform_as_accept_waveform, METH_VARARGS | METH_KEYWORDS, C("accept_waveform(sampling_rate:float, waveform:VectorBase)\n  Calls C++ function\n  void ::kaldi::OnlineGenericBaseFeature<kaldi::MfccComputer>::AcceptWaveform(float, ::kaldi::VectorBase<float>)")},
  {C("input_finished"), (PyCFunction)wrapInputFinished_as_input_finished, METH_NOARGS, C("input_finished()\n  Calls C++ function\n  void ::kaldi::OnlineGenericBaseFeature<kaldi::MfccComputer>::InputFinished()")},
  {C("as_kaldi_OnlineBaseFeature"), (PyCFunction)as_kaldi_OnlineBaseFeature, METH_NOARGS, C("Upcast to ::kaldi::OnlineBaseFeature*")},
  {C("as_kaldi_OnlineFeatureInterface"), (PyCFunction)as_kaldi_OnlineFeatureInterface, METH_NOARGS, C("Upcast to ::kaldi::OnlineFeatureInterface*")},
  {}
};

// OnlineMfcc __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlineMfcc __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineMfcc __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_feature.OnlineMfcc",        // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapMfccComputer_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineGenericBaseFeature__kaldi_MfccComputer"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>* c = static_cast<::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineMfcc

namespace pyOnlinePlp {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>> cpp;
};
static ::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>* ThisPtr(PyObject*);

// __init__(opts:PlpOptions)
static PyObject* wrapPlpComputer_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::kaldi::PlpOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::PlpOptions", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_last_frame(frame:int) -> bool
static PyObject* wrapIsLastFrame_as_is_last_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_last_frame", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_last_frame", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsLastFrame(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// frame_shift_in_seconds() -> float
static PyObject* wrapFrameShiftInSeconds_as_frame_shift_in_seconds(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FrameShiftInSeconds();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_frames_ready() -> int
static PyObject* wrapNumFramesReady_as_num_frames_ready(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFramesReady();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_frame(frame:int, feat:VectorBase)
static PyObject* wrapGetFrame_as_get_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("feat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_frame", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_frame", names[0], "int", a[0]);
  ::kaldi::VectorBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_frame", names[1], "::kaldi::VectorBase<float> *", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetFrame(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// accept_waveform(sampling_rate:float, waveform:VectorBase)
static PyObject* wrapAcceptWaveform_as_accept_waveform(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("sampling_rate"),
      C("waveform"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:accept_waveform", names, &a[0], &a[1])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accept_waveform", names[0], "float", a[0]);
  ::kaldi::VectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accept_waveform", names[1], "::kaldi::VectorBase<float>", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AcceptWaveform(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// input_finished()
static PyObject* wrapInputFinished_as_input_finished(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->InputFinished();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::kaldi::OnlineBaseFeature*
static PyObject* as_kaldi_OnlineBaseFeature(PyObject* self) {
  ::kaldi::OnlineBaseFeature* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::OnlineBaseFeature"), nullptr);
}

// Implicit cast this as ::kaldi::OnlineFeatureInterface*
static PyObject* as_kaldi_OnlineFeatureInterface(PyObject* self) {
  ::kaldi::OnlineFeatureInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::OnlineFeatureInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapPlpComputer_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(opts:PlpOptions)\n  Calls C++ function\n  void ::kaldi::OnlineGenericBaseFeature<kaldi::PlpComputer>::OnlineGenericBaseFeature(::kaldi::PlpOptions)")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::OnlineGenericBaseFeature<kaldi::PlpComputer>::Dim()")},
  {C("is_last_frame"), (PyCFunction)wrapIsLastFrame_as_is_last_frame, METH_VARARGS | METH_KEYWORDS, C("is_last_frame(frame:int) -> bool\n  Calls C++ function\n  bool ::kaldi::OnlineGenericBaseFeature<kaldi::PlpComputer>::IsLastFrame(int)")},
  {C("frame_shift_in_seconds"), (PyCFunction)wrapFrameShiftInSeconds_as_frame_shift_in_seconds, METH_NOARGS, C("frame_shift_in_seconds() -> float\n  Calls C++ function\n  float ::kaldi::OnlineGenericBaseFeature<kaldi::PlpComputer>::FrameShiftInSeconds()")},
  {C("num_frames_ready"), (PyCFunction)wrapNumFramesReady_as_num_frames_ready, METH_NOARGS, C("num_frames_ready() -> int\n  Calls C++ function\n  int ::kaldi::OnlineGenericBaseFeature<kaldi::PlpComputer>::NumFramesReady()")},
  {C("get_frame"), (PyCFunction)wrapGetFrame_as_get_frame, METH_VARARGS | METH_KEYWORDS, C("get_frame(frame:int, feat:VectorBase)\n  Calls C++ function\n  void ::kaldi::OnlineGenericBaseFeature<kaldi::PlpComputer>::GetFrame(int, ::kaldi::VectorBase<float> *)")},
  {C("accept_waveform"), (PyCFunction)wrapAcceptWaveform_as_accept_waveform, METH_VARARGS | METH_KEYWORDS, C("accept_waveform(sampling_rate:float, waveform:VectorBase)\n  Calls C++ function\n  void ::kaldi::OnlineGenericBaseFeature<kaldi::PlpComputer>::AcceptWaveform(float, ::kaldi::VectorBase<float>)")},
  {C("input_finished"), (PyCFunction)wrapInputFinished_as_input_finished, METH_NOARGS, C("input_finished()\n  Calls C++ function\n  void ::kaldi::OnlineGenericBaseFeature<kaldi::PlpComputer>::InputFinished()")},
  {C("as_kaldi_OnlineBaseFeature"), (PyCFunction)as_kaldi_OnlineBaseFeature, METH_NOARGS, C("Upcast to ::kaldi::OnlineBaseFeature*")},
  {C("as_kaldi_OnlineFeatureInterface"), (PyCFunction)as_kaldi_OnlineFeatureInterface, METH_NOARGS, C("Upcast to ::kaldi::OnlineFeatureInterface*")},
  {}
};

// OnlinePlp __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlinePlp __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlinePlp __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_feature.OnlinePlp",         // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapPlpComputer_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineGenericBaseFeature__kaldi_PlpComputer"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>* c = static_cast<::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlinePlp

namespace pyOnlineFbank {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>> cpp;
};
static ::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>* ThisPtr(PyObject*);

// __init__(opts:FbankOptions)
static PyObject* wrapFbankComputer_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::kaldi::FbankOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::FbankOptions", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_last_frame(frame:int) -> bool
static PyObject* wrapIsLastFrame_as_is_last_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_last_frame", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_last_frame", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsLastFrame(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// frame_shift_in_seconds() -> float
static PyObject* wrapFrameShiftInSeconds_as_frame_shift_in_seconds(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FrameShiftInSeconds();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_frames_ready() -> int
static PyObject* wrapNumFramesReady_as_num_frames_ready(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFramesReady();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_frame(frame:int, feat:VectorBase)
static PyObject* wrapGetFrame_as_get_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("feat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_frame", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_frame", names[0], "int", a[0]);
  ::kaldi::VectorBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_frame", names[1], "::kaldi::VectorBase<float> *", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetFrame(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// accept_waveform(sampling_rate:float, waveform:VectorBase)
static PyObject* wrapAcceptWaveform_as_accept_waveform(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("sampling_rate"),
      C("waveform"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:accept_waveform", names, &a[0], &a[1])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accept_waveform", names[0], "float", a[0]);
  ::kaldi::VectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accept_waveform", names[1], "::kaldi::VectorBase<float>", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AcceptWaveform(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// input_finished()
static PyObject* wrapInputFinished_as_input_finished(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->InputFinished();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::kaldi::OnlineBaseFeature*
static PyObject* as_kaldi_OnlineBaseFeature(PyObject* self) {
  ::kaldi::OnlineBaseFeature* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::OnlineBaseFeature"), nullptr);
}

// Implicit cast this as ::kaldi::OnlineFeatureInterface*
static PyObject* as_kaldi_OnlineFeatureInterface(PyObject* self) {
  ::kaldi::OnlineFeatureInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::OnlineFeatureInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapFbankComputer_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(opts:FbankOptions)\n  Calls C++ function\n  void ::kaldi::OnlineGenericBaseFeature<kaldi::FbankComputer>::OnlineGenericBaseFeature(::kaldi::FbankOptions)")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::OnlineGenericBaseFeature<kaldi::FbankComputer>::Dim()")},
  {C("is_last_frame"), (PyCFunction)wrapIsLastFrame_as_is_last_frame, METH_VARARGS | METH_KEYWORDS, C("is_last_frame(frame:int) -> bool\n  Calls C++ function\n  bool ::kaldi::OnlineGenericBaseFeature<kaldi::FbankComputer>::IsLastFrame(int)")},
  {C("frame_shift_in_seconds"), (PyCFunction)wrapFrameShiftInSeconds_as_frame_shift_in_seconds, METH_NOARGS, C("frame_shift_in_seconds() -> float\n  Calls C++ function\n  float ::kaldi::OnlineGenericBaseFeature<kaldi::FbankComputer>::FrameShiftInSeconds()")},
  {C("num_frames_ready"), (PyCFunction)wrapNumFramesReady_as_num_frames_ready, METH_NOARGS, C("num_frames_ready() -> int\n  Calls C++ function\n  int ::kaldi::OnlineGenericBaseFeature<kaldi::FbankComputer>::NumFramesReady()")},
  {C("get_frame"), (PyCFunction)wrapGetFrame_as_get_frame, METH_VARARGS | METH_KEYWORDS, C("get_frame(frame:int, feat:VectorBase)\n  Calls C++ function\n  void ::kaldi::OnlineGenericBaseFeature<kaldi::FbankComputer>::GetFrame(int, ::kaldi::VectorBase<float> *)")},
  {C("accept_waveform"), (PyCFunction)wrapAcceptWaveform_as_accept_waveform, METH_VARARGS | METH_KEYWORDS, C("accept_waveform(sampling_rate:float, waveform:VectorBase)\n  Calls C++ function\n  void ::kaldi::OnlineGenericBaseFeature<kaldi::FbankComputer>::AcceptWaveform(float, ::kaldi::VectorBase<float>)")},
  {C("input_finished"), (PyCFunction)wrapInputFinished_as_input_finished, METH_NOARGS, C("input_finished()\n  Calls C++ function\n  void ::kaldi::OnlineGenericBaseFeature<kaldi::FbankComputer>::InputFinished()")},
  {C("as_kaldi_OnlineBaseFeature"), (PyCFunction)as_kaldi_OnlineBaseFeature, METH_NOARGS, C("Upcast to ::kaldi::OnlineBaseFeature*")},
  {C("as_kaldi_OnlineFeatureInterface"), (PyCFunction)as_kaldi_OnlineFeatureInterface, METH_NOARGS, C("Upcast to ::kaldi::OnlineFeatureInterface*")},
  {}
};

// OnlineFbank __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlineFbank __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineFbank __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_feature.OnlineFbank",       // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapFbankComputer_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineGenericBaseFeature__kaldi_FbankComputer"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>* c = static_cast<::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineFbank

namespace pyOnlineMatrixFeature {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineMatrixFeature> cpp;
};
static ::kaldi::OnlineMatrixFeature* ThisPtr(PyObject*);

// __init__(mat:MatrixBase)
static PyObject* wrapOnlineMatrixFeature_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("mat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::MatrixBase<float>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineMatrixFeature>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineMatrixFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_last_frame(frame:int) -> bool
static PyObject* wrapIsLastFrame_as_is_last_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_last_frame", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_last_frame", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineMatrixFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsLastFrame(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// frame_shift_in_seconds() -> float
static PyObject* wrapFrameShiftInSeconds_as_frame_shift_in_seconds(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineMatrixFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FrameShiftInSeconds();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_frames_ready() -> int
static PyObject* wrapNumFramesReady_as_num_frames_ready(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineMatrixFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFramesReady();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_frame(frame:int, feat:VectorBase)
static PyObject* wrapGetFrame_as_get_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("feat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_frame", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_frame", names[0], "int", a[0]);
  ::kaldi::VectorBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_frame", names[1], "::kaldi::VectorBase<float> *", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineMatrixFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetFrame(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::kaldi::OnlineFeatureInterface*
static PyObject* as_kaldi_OnlineFeatureInterface(PyObject* self) {
  ::kaldi::OnlineFeatureInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::OnlineFeatureInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapOnlineMatrixFeature_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(mat:MatrixBase)\n  Calls C++ function\n  void ::kaldi::OnlineMatrixFeature::OnlineMatrixFeature(::kaldi::MatrixBase<float>)")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::OnlineMatrixFeature::Dim()")},
  {C("is_last_frame"), (PyCFunction)wrapIsLastFrame_as_is_last_frame, METH_VARARGS | METH_KEYWORDS, C("is_last_frame(frame:int) -> bool\n  Calls C++ function\n  bool ::kaldi::OnlineMatrixFeature::IsLastFrame(int)")},
  {C("frame_shift_in_seconds"), (PyCFunction)wrapFrameShiftInSeconds_as_frame_shift_in_seconds, METH_NOARGS, C("frame_shift_in_seconds() -> float\n  Calls C++ function\n  float ::kaldi::OnlineMatrixFeature::FrameShiftInSeconds()")},
  {C("num_frames_ready"), (PyCFunction)wrapNumFramesReady_as_num_frames_ready, METH_NOARGS, C("num_frames_ready() -> int\n  Calls C++ function\n  int ::kaldi::OnlineMatrixFeature::NumFramesReady()")},
  {C("get_frame"), (PyCFunction)wrapGetFrame_as_get_frame, METH_VARARGS | METH_KEYWORDS, C("get_frame(frame:int, feat:VectorBase)\n  Calls C++ function\n  void ::kaldi::OnlineMatrixFeature::GetFrame(int, ::kaldi::VectorBase<float> *)")},
  {C("as_kaldi_OnlineFeatureInterface"), (PyCFunction)as_kaldi_OnlineFeatureInterface, METH_NOARGS, C("Upcast to ::kaldi::OnlineFeatureInterface*")},
  {}
};

// OnlineMatrixFeature __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlineMatrixFeature __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineMatrixFeature __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_feature.OnlineMatrixFeature", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineMatrixFeature", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapOnlineMatrixFeature_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineMatrixFeature* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineMatrixFeature"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineMatrixFeature"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineMatrixFeature* c = static_cast<::kaldi::OnlineMatrixFeature*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineMatrixFeature*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineMatrixFeature

namespace pyOnlineCmvnOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineCmvnOptions> cpp;
};
static ::kaldi::OnlineCmvnOptions* ThisPtr(PyObject*);

static PyObject* get_cmn_window(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->cmn_window, {});
}

static int set_cmn_window(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the cmn_window attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->cmn_window)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for cmn_window:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_speaker_frames(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->speaker_frames, {});
}

static int set_speaker_frames(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the speaker_frames attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->speaker_frames)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for speaker_frames:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_global_frames(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->global_frames, {});
}

static int set_global_frames(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the global_frames attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->global_frames)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for global_frames:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_normalize_mean(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->normalize_mean, {});
}

static int set_normalize_mean(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the normalize_mean attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->normalize_mean)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for normalize_mean:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_normalize_variance(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->normalize_variance, {});
}

static int set_normalize_variance(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the normalize_variance attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->normalize_variance)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for normalize_variance:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_modulus(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->modulus, {});
}

static int set_modulus(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the modulus attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->modulus)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for modulus:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_ring_buffer_size(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->ring_buffer_size, {});
}

static int set_ring_buffer_size(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the ring_buffer_size attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->ring_buffer_size)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for ring_buffer_size:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_skip_dims(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->skip_dims, _1);
}

static int set_skip_dims(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the skip_dims attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->skip_dims)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for skip_dims:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:ParseOptions)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::ParseOptionsExt * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::ParseOptionsExt *", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineCmvnOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("cmn_window"), get_cmn_window, set_cmn_window, C("C++ ::int32 OnlineCmvnOptions.cmn_window")},
  {C("speaker_frames"), get_speaker_frames, set_speaker_frames, C("C++ ::int32 OnlineCmvnOptions.speaker_frames")},
  {C("global_frames"), get_global_frames, set_global_frames, C("C++ ::int32 OnlineCmvnOptions.global_frames")},
  {C("normalize_mean"), get_normalize_mean, set_normalize_mean, C("C++ bool OnlineCmvnOptions.normalize_mean")},
  {C("normalize_variance"), get_normalize_variance, set_normalize_variance, C("C++ bool OnlineCmvnOptions.normalize_variance")},
  {C("modulus"), get_modulus, set_modulus, C("C++ ::int32 OnlineCmvnOptions.modulus")},
  {C("ring_buffer_size"), get_ring_buffer_size, set_ring_buffer_size, C("C++ ::int32 OnlineCmvnOptions.ring_buffer_size")},
  {C("skip_dims"), get_skip_dims, set_skip_dims, C("C++ ::std::string OnlineCmvnOptions.skip_dims")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:ParseOptions)\n  Calls C++ function\n  void ::kaldi::OnlineCmvnOptions::Register(::kaldi::ParseOptionsExt *)")},
  {}
};

// OnlineCmvnOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlineCmvnOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineCmvnOptions __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_feature.OnlineCmvnOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineCmvnOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "OnlineCmvnOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineCmvnOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineCmvnOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineCmvnOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineCmvnOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineCmvnOptions* c = static_cast<::kaldi::OnlineCmvnOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineCmvnOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineCmvnOptions

namespace pyOnlineCmvnState {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineCmvnState> cpp;
};
static ::kaldi::OnlineCmvnState* ThisPtr(PyObject*);

static PyObject* get_speaker_cmvn_stats(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->speaker_cmvn_stats), {});
}

static int set_speaker_cmvn_stats(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the speaker_cmvn_stats attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->speaker_cmvn_stats)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for speaker_cmvn_stats:DoubleMatrix", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_global_cmvn_stats(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->global_cmvn_stats), {});
}

static int set_global_cmvn_stats(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the global_cmvn_stats attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->global_cmvn_stats)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for global_cmvn_stats:DoubleMatrix", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_frozen_state(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->frozen_state), {});
}

static int set_frozen_state(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the frozen_state attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->frozen_state)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for frozen_state:DoubleMatrix", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// @classmethod from_stats(global_stats:DoubleMatrix) -> OnlineCmvnState
static PyObject* wrapOnlineCmvnState_as_from_stats(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("global_stats"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_stats", names, &a[0])) return nullptr;
  ::kaldi::Matrix<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_stats", names[0], "::kaldi::Matrix<double>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::OnlineCmvnState> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::OnlineCmvnState>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_other(other:OnlineCmvnState) -> OnlineCmvnState
static PyObject* wrapOnlineCmvnState_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::kaldi::OnlineCmvnState* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::kaldi::OnlineCmvnState", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::OnlineCmvnState> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::OnlineCmvnState>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineCmvnState* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(is:istream, binary:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineCmvnState* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("speaker_cmvn_stats"), get_speaker_cmvn_stats, set_speaker_cmvn_stats, C("C++ ::kaldi::Matrix<double> OnlineCmvnState.speaker_cmvn_stats")},
  {C("global_cmvn_stats"), get_global_cmvn_stats, set_global_cmvn_stats, C("C++ ::kaldi::Matrix<double> OnlineCmvnState.global_cmvn_stats")},
  {C("frozen_state"), get_frozen_state, set_frozen_state, C("C++ ::kaldi::Matrix<double> OnlineCmvnState.frozen_state")},
  {}
};

static PyMethodDef Methods[] = {
  {C("from_stats"), (PyCFunction)wrapOnlineCmvnState_as_from_stats, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_stats(global_stats:DoubleMatrix) -> OnlineCmvnState\n  Calls C++ function\n  std::unique_ptr<::kaldi::OnlineCmvnState> ::kaldi::OnlineCmvnState::OnlineCmvnState(::kaldi::Matrix<double>)")},
  {C("from_other"), (PyCFunction)wrapOnlineCmvnState_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(other:OnlineCmvnState) -> OnlineCmvnState\n  Calls C++ function\n  std::unique_ptr<::kaldi::OnlineCmvnState> ::kaldi::OnlineCmvnState::OnlineCmvnState(::kaldi::OnlineCmvnState)")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::OnlineCmvnState::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool)\n  Calls C++ function\n  void ::kaldi::OnlineCmvnState::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool)")},
  {}
};

// OnlineCmvnState __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlineCmvnState __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineCmvnState __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_feature.OnlineCmvnState",   // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineCmvnState", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "OnlineCmvnState takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineCmvnState>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineCmvnState* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineCmvnState"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineCmvnState"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineCmvnState* c = static_cast<::kaldi::OnlineCmvnState*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineCmvnState*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineCmvnState

namespace pyOnlineCmvn {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineCmvn> cpp;
};
static ::kaldi::OnlineCmvn* ThisPtr(PyObject*);

// __init__(opts:OnlineCmvnOptions, cmvn_state:OnlineCmvnState, src:OnlineFeatureInterface)
static PyObject* wrapOnlineCmvn_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("opts"),
      C("cmvn_state"),
      C("src"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:__init__", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::OnlineCmvnOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::OnlineCmvnOptions", a[0]);
  ::kaldi::OnlineCmvnState* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::OnlineCmvnState", a[1]);
  ::kaldi::OnlineFeatureInterface * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::kaldi::OnlineFeatureInterface *", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineCmvn>(*arg1, *arg2, arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// @classmethod without_state(opts:OnlineCmvnOptions, src:OnlineFeatureInterface) -> OnlineCmvn
static PyObject* wrapOnlineCmvn_as_without_state(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("opts"),
      C("src"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:without_state", names, &a[0], &a[1])) return nullptr;
  ::kaldi::OnlineCmvnOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("without_state", names[0], "::kaldi::OnlineCmvnOptions", a[0]);
  ::kaldi::OnlineFeatureInterface * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("without_state", names[1], "::kaldi::OnlineFeatureInterface *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::OnlineCmvn> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::OnlineCmvn>(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_state(cur_frame:int) -> OnlineCmvnState
static PyObject* wrapGetState_as_get_state(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("cur_frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_state", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_state", names[0], "int", a[0]);
  ::kaldi::OnlineCmvnState ret0{};
  // Call actual C++ method.
  ::kaldi::OnlineCmvn* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetState(std::move(arg1), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// set_state(cmvn_state:OnlineCmvnState)
static PyObject* wrapSetState_as_set_state(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("cmvn_state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_state", names, &a[0])) return nullptr;
  ::kaldi::OnlineCmvnState* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_state", names[0], "::kaldi::OnlineCmvnState", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineCmvn* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetState(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// freeze(cur_frame:int)
static PyObject* wrapFreeze_as_freeze(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("cur_frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:freeze", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("freeze", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineCmvn* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Freeze(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineCmvn* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_last_frame(frame:int) -> bool
static PyObject* wrapIsLastFrame_as_is_last_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_last_frame", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_last_frame", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineCmvn* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsLastFrame(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// frame_shift_in_seconds() -> float
static PyObject* wrapFrameShiftInSeconds_as_frame_shift_in_seconds(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineCmvn* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FrameShiftInSeconds();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_frames_ready() -> int
static PyObject* wrapNumFramesReady_as_num_frames_ready(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineCmvn* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFramesReady();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_frame(frame:int, feat:VectorBase)
static PyObject* wrapGetFrame_as_get_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("feat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_frame", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_frame", names[0], "int", a[0]);
  ::kaldi::VectorBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_frame", names[1], "::kaldi::VectorBase<float> *", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineCmvn* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetFrame(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::kaldi::OnlineFeatureInterface*
static PyObject* as_kaldi_OnlineFeatureInterface(PyObject* self) {
  ::kaldi::OnlineFeatureInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::OnlineFeatureInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapOnlineCmvn_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(opts:OnlineCmvnOptions, cmvn_state:OnlineCmvnState, src:OnlineFeatureInterface)\n  Calls C++ function\n  void ::kaldi::OnlineCmvn::OnlineCmvn(::kaldi::OnlineCmvnOptions, ::kaldi::OnlineCmvnState, ::kaldi::OnlineFeatureInterface *)")},
  {C("without_state"), (PyCFunction)wrapOnlineCmvn_as_without_state, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("without_state(opts:OnlineCmvnOptions, src:OnlineFeatureInterface) -> OnlineCmvn\n  Calls C++ function\n  std::unique_ptr<::kaldi::OnlineCmvn> ::kaldi::OnlineCmvn::OnlineCmvn(::kaldi::OnlineCmvnOptions, ::kaldi::OnlineFeatureInterface *)")},
  {C("get_state"), (PyCFunction)wrapGetState_as_get_state, METH_VARARGS | METH_KEYWORDS, C("get_state(cur_frame:int) -> OnlineCmvnState\n  Calls C++ function\n  void ::kaldi::OnlineCmvn::GetState(int, ::kaldi::OnlineCmvnState*)")},
  {C("set_state"), (PyCFunction)wrapSetState_as_set_state, METH_VARARGS | METH_KEYWORDS, C("set_state(cmvn_state:OnlineCmvnState)\n  Calls C++ function\n  void ::kaldi::OnlineCmvn::SetState(::kaldi::OnlineCmvnState)")},
  {C("freeze"), (PyCFunction)wrapFreeze_as_freeze, METH_VARARGS | METH_KEYWORDS, C("freeze(cur_frame:int)\n  Calls C++ function\n  void ::kaldi::OnlineCmvn::Freeze(int)")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::OnlineCmvn::Dim()")},
  {C("is_last_frame"), (PyCFunction)wrapIsLastFrame_as_is_last_frame, METH_VARARGS | METH_KEYWORDS, C("is_last_frame(frame:int) -> bool\n  Calls C++ function\n  bool ::kaldi::OnlineCmvn::IsLastFrame(int)")},
  {C("frame_shift_in_seconds"), (PyCFunction)wrapFrameShiftInSeconds_as_frame_shift_in_seconds, METH_NOARGS, C("frame_shift_in_seconds() -> float\n  Calls C++ function\n  float ::kaldi::OnlineCmvn::FrameShiftInSeconds()")},
  {C("num_frames_ready"), (PyCFunction)wrapNumFramesReady_as_num_frames_ready, METH_NOARGS, C("num_frames_ready() -> int\n  Calls C++ function\n  int ::kaldi::OnlineCmvn::NumFramesReady()")},
  {C("get_frame"), (PyCFunction)wrapGetFrame_as_get_frame, METH_VARARGS | METH_KEYWORDS, C("get_frame(frame:int, feat:VectorBase)\n  Calls C++ function\n  void ::kaldi::OnlineCmvn::GetFrame(int, ::kaldi::VectorBase<float> *)")},
  {C("as_kaldi_OnlineFeatureInterface"), (PyCFunction)as_kaldi_OnlineFeatureInterface, METH_NOARGS, C("Upcast to ::kaldi::OnlineFeatureInterface*")},
  {}
};

// OnlineCmvn __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlineCmvn __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineCmvn __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_feature.OnlineCmvn",        // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineCmvn", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapOnlineCmvn_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineCmvn* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineCmvn"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineCmvn"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineCmvn* c = static_cast<::kaldi::OnlineCmvn*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineCmvn*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineCmvn

namespace pyOnlineSpliceOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineSpliceOptions> cpp;
};
static ::kaldi::OnlineSpliceOptions* ThisPtr(PyObject*);

static PyObject* get_left_context(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->left_context, {});
}

static int set_left_context(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the left_context attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->left_context)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for left_context:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_right_context(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->right_context, {});
}

static int set_right_context(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the right_context attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->right_context)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for right_context:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(po:ParseOptions)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("po"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::ParseOptionsExt * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::ParseOptionsExt *", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineSpliceOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("left_context"), get_left_context, set_left_context, C("C++ ::int32 OnlineSpliceOptions.left_context")},
  {C("right_context"), get_right_context, set_right_context, C("C++ ::int32 OnlineSpliceOptions.right_context")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(po:ParseOptions)\n  Calls C++ function\n  void ::kaldi::OnlineSpliceOptions::Register(::kaldi::ParseOptionsExt *)")},
  {}
};

// OnlineSpliceOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlineSpliceOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineSpliceOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_feature.OnlineSpliceOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineSpliceOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "OnlineSpliceOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineSpliceOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineSpliceOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineSpliceOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineSpliceOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineSpliceOptions* c = static_cast<::kaldi::OnlineSpliceOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineSpliceOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineSpliceOptions

namespace pyOnlineSpliceFrames {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineSpliceFrames> cpp;
};
static ::kaldi::OnlineSpliceFrames* ThisPtr(PyObject*);

// __init__(opts:OnlineSpliceOptions, src:OnlineFeatureInterface)
static PyObject* wrapOnlineSpliceFrames_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("opts"),
      C("src"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::kaldi::OnlineSpliceOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::OnlineSpliceOptions", a[0]);
  ::kaldi::OnlineFeatureInterface * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::OnlineFeatureInterface *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineSpliceFrames>(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineSpliceFrames* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_last_frame(frame:int) -> bool
static PyObject* wrapIsLastFrame_as_is_last_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_last_frame", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_last_frame", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineSpliceFrames* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsLastFrame(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// frame_shift_in_seconds() -> float
static PyObject* wrapFrameShiftInSeconds_as_frame_shift_in_seconds(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineSpliceFrames* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FrameShiftInSeconds();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_frames_ready() -> int
static PyObject* wrapNumFramesReady_as_num_frames_ready(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineSpliceFrames* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFramesReady();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_frame(frame:int, feat:VectorBase)
static PyObject* wrapGetFrame_as_get_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("feat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_frame", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_frame", names[0], "int", a[0]);
  ::kaldi::VectorBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_frame", names[1], "::kaldi::VectorBase<float> *", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineSpliceFrames* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetFrame(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::kaldi::OnlineFeatureInterface*
static PyObject* as_kaldi_OnlineFeatureInterface(PyObject* self) {
  ::kaldi::OnlineFeatureInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::OnlineFeatureInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapOnlineSpliceFrames_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(opts:OnlineSpliceOptions, src:OnlineFeatureInterface)\n  Calls C++ function\n  void ::kaldi::OnlineSpliceFrames::OnlineSpliceFrames(::kaldi::OnlineSpliceOptions, ::kaldi::OnlineFeatureInterface *)")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::OnlineSpliceFrames::Dim()")},
  {C("is_last_frame"), (PyCFunction)wrapIsLastFrame_as_is_last_frame, METH_VARARGS | METH_KEYWORDS, C("is_last_frame(frame:int) -> bool\n  Calls C++ function\n  bool ::kaldi::OnlineSpliceFrames::IsLastFrame(int)")},
  {C("frame_shift_in_seconds"), (PyCFunction)wrapFrameShiftInSeconds_as_frame_shift_in_seconds, METH_NOARGS, C("frame_shift_in_seconds() -> float\n  Calls C++ function\n  float ::kaldi::OnlineSpliceFrames::FrameShiftInSeconds()")},
  {C("num_frames_ready"), (PyCFunction)wrapNumFramesReady_as_num_frames_ready, METH_NOARGS, C("num_frames_ready() -> int\n  Calls C++ function\n  int ::kaldi::OnlineSpliceFrames::NumFramesReady()")},
  {C("get_frame"), (PyCFunction)wrapGetFrame_as_get_frame, METH_VARARGS | METH_KEYWORDS, C("get_frame(frame:int, feat:VectorBase)\n  Calls C++ function\n  void ::kaldi::OnlineSpliceFrames::GetFrame(int, ::kaldi::VectorBase<float> *)")},
  {C("as_kaldi_OnlineFeatureInterface"), (PyCFunction)as_kaldi_OnlineFeatureInterface, METH_NOARGS, C("Upcast to ::kaldi::OnlineFeatureInterface*")},
  {}
};

// OnlineSpliceFrames __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlineSpliceFrames __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineSpliceFrames __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_feature.OnlineSpliceFrames", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineSpliceFrames", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapOnlineSpliceFrames_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineSpliceFrames* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineSpliceFrames"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineSpliceFrames"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineSpliceFrames* c = static_cast<::kaldi::OnlineSpliceFrames*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineSpliceFrames*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineSpliceFrames

namespace pyOnlineTransform {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineTransform> cpp;
};
static ::kaldi::OnlineTransform* ThisPtr(PyObject*);

// __init__(transform:MatrixBase, src:OnlineFeatureInterface)
static PyObject* wrapOnlineTransform_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("transform"),
      C("src"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::MatrixBase<float>", a[0]);
  ::kaldi::OnlineFeatureInterface * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::OnlineFeatureInterface *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineTransform>(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineTransform* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_last_frame(frame:int) -> bool
static PyObject* wrapIsLastFrame_as_is_last_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_last_frame", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_last_frame", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineTransform* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsLastFrame(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// frame_shift_in_seconds() -> float
static PyObject* wrapFrameShiftInSeconds_as_frame_shift_in_seconds(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineTransform* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FrameShiftInSeconds();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_frames_ready() -> int
static PyObject* wrapNumFramesReady_as_num_frames_ready(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineTransform* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFramesReady();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_frame(frame:int, feat:VectorBase)
static PyObject* wrapGetFrame_as_get_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("feat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_frame", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_frame", names[0], "int", a[0]);
  ::kaldi::VectorBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_frame", names[1], "::kaldi::VectorBase<float> *", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineTransform* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetFrame(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::kaldi::OnlineFeatureInterface*
static PyObject* as_kaldi_OnlineFeatureInterface(PyObject* self) {
  ::kaldi::OnlineFeatureInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::OnlineFeatureInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapOnlineTransform_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(transform:MatrixBase, src:OnlineFeatureInterface)\n  Calls C++ function\n  void ::kaldi::OnlineTransform::OnlineTransform(::kaldi::MatrixBase<float>, ::kaldi::OnlineFeatureInterface *)")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::OnlineTransform::Dim()")},
  {C("is_last_frame"), (PyCFunction)wrapIsLastFrame_as_is_last_frame, METH_VARARGS | METH_KEYWORDS, C("is_last_frame(frame:int) -> bool\n  Calls C++ function\n  bool ::kaldi::OnlineTransform::IsLastFrame(int)")},
  {C("frame_shift_in_seconds"), (PyCFunction)wrapFrameShiftInSeconds_as_frame_shift_in_seconds, METH_NOARGS, C("frame_shift_in_seconds() -> float\n  Calls C++ function\n  float ::kaldi::OnlineTransform::FrameShiftInSeconds()")},
  {C("num_frames_ready"), (PyCFunction)wrapNumFramesReady_as_num_frames_ready, METH_NOARGS, C("num_frames_ready() -> int\n  Calls C++ function\n  int ::kaldi::OnlineTransform::NumFramesReady()")},
  {C("get_frame"), (PyCFunction)wrapGetFrame_as_get_frame, METH_VARARGS | METH_KEYWORDS, C("get_frame(frame:int, feat:VectorBase)\n  Calls C++ function\n  void ::kaldi::OnlineTransform::GetFrame(int, ::kaldi::VectorBase<float> *)")},
  {C("as_kaldi_OnlineFeatureInterface"), (PyCFunction)as_kaldi_OnlineFeatureInterface, METH_NOARGS, C("Upcast to ::kaldi::OnlineFeatureInterface*")},
  {}
};

// OnlineTransform __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlineTransform __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineTransform __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_feature.OnlineTransform",   // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineTransform", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapOnlineTransform_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineTransform* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineTransform"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineTransform"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineTransform* c = static_cast<::kaldi::OnlineTransform*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineTransform*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineTransform

namespace pyOnlineDeltaFeature {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineDeltaFeature> cpp;
};
static ::kaldi::OnlineDeltaFeature* ThisPtr(PyObject*);

// __init__(opts:DeltaFeaturesOptions, src:OnlineFeatureInterface)
static PyObject* wrapOnlineDeltaFeature_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("opts"),
      C("src"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::kaldi::DeltaFeaturesOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::DeltaFeaturesOptions", a[0]);
  ::kaldi::OnlineFeatureInterface * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::OnlineFeatureInterface *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineDeltaFeature>(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineDeltaFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_last_frame(frame:int) -> bool
static PyObject* wrapIsLastFrame_as_is_last_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_last_frame", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_last_frame", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineDeltaFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsLastFrame(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// frame_shift_in_seconds() -> float
static PyObject* wrapFrameShiftInSeconds_as_frame_shift_in_seconds(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineDeltaFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FrameShiftInSeconds();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_frames_ready() -> int
static PyObject* wrapNumFramesReady_as_num_frames_ready(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineDeltaFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFramesReady();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_frame(frame:int, feat:VectorBase)
static PyObject* wrapGetFrame_as_get_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("feat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_frame", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_frame", names[0], "int", a[0]);
  ::kaldi::VectorBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_frame", names[1], "::kaldi::VectorBase<float> *", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineDeltaFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetFrame(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::kaldi::OnlineFeatureInterface*
static PyObject* as_kaldi_OnlineFeatureInterface(PyObject* self) {
  ::kaldi::OnlineFeatureInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::OnlineFeatureInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapOnlineDeltaFeature_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(opts:DeltaFeaturesOptions, src:OnlineFeatureInterface)\n  Calls C++ function\n  void ::kaldi::OnlineDeltaFeature::OnlineDeltaFeature(::kaldi::DeltaFeaturesOptions, ::kaldi::OnlineFeatureInterface *)")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::OnlineDeltaFeature::Dim()")},
  {C("is_last_frame"), (PyCFunction)wrapIsLastFrame_as_is_last_frame, METH_VARARGS | METH_KEYWORDS, C("is_last_frame(frame:int) -> bool\n  Calls C++ function\n  bool ::kaldi::OnlineDeltaFeature::IsLastFrame(int)")},
  {C("frame_shift_in_seconds"), (PyCFunction)wrapFrameShiftInSeconds_as_frame_shift_in_seconds, METH_NOARGS, C("frame_shift_in_seconds() -> float\n  Calls C++ function\n  float ::kaldi::OnlineDeltaFeature::FrameShiftInSeconds()")},
  {C("num_frames_ready"), (PyCFunction)wrapNumFramesReady_as_num_frames_ready, METH_NOARGS, C("num_frames_ready() -> int\n  Calls C++ function\n  int ::kaldi::OnlineDeltaFeature::NumFramesReady()")},
  {C("get_frame"), (PyCFunction)wrapGetFrame_as_get_frame, METH_VARARGS | METH_KEYWORDS, C("get_frame(frame:int, feat:VectorBase)\n  Calls C++ function\n  void ::kaldi::OnlineDeltaFeature::GetFrame(int, ::kaldi::VectorBase<float> *)")},
  {C("as_kaldi_OnlineFeatureInterface"), (PyCFunction)as_kaldi_OnlineFeatureInterface, METH_NOARGS, C("Upcast to ::kaldi::OnlineFeatureInterface*")},
  {}
};

// OnlineDeltaFeature __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlineDeltaFeature __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineDeltaFeature __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_feature.OnlineDeltaFeature", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineDeltaFeature", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapOnlineDeltaFeature_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineDeltaFeature* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineDeltaFeature"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineDeltaFeature"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineDeltaFeature* c = static_cast<::kaldi::OnlineDeltaFeature*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineDeltaFeature*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineDeltaFeature

namespace pyOnlineCacheFeature {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineCacheFeature> cpp;
};
static ::kaldi::OnlineCacheFeature* ThisPtr(PyObject*);

// __init__(src:OnlineFeatureInterface)
static PyObject* wrapOnlineCacheFeature_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("src"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::kaldi::OnlineFeatureInterface * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::OnlineFeatureInterface *", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineCacheFeature>(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// clear_cache()
static PyObject* wrapClearCache_as_clear_cache(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineCacheFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ClearCache();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineCacheFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_last_frame(frame:int) -> bool
static PyObject* wrapIsLastFrame_as_is_last_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_last_frame", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_last_frame", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineCacheFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsLastFrame(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// frame_shift_in_seconds() -> float
static PyObject* wrapFrameShiftInSeconds_as_frame_shift_in_seconds(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineCacheFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FrameShiftInSeconds();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_frames_ready() -> int
static PyObject* wrapNumFramesReady_as_num_frames_ready(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineCacheFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFramesReady();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_frame(frame:int, feat:VectorBase)
static PyObject* wrapGetFrame_as_get_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("feat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_frame", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_frame", names[0], "int", a[0]);
  ::kaldi::VectorBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_frame", names[1], "::kaldi::VectorBase<float> *", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineCacheFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetFrame(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::kaldi::OnlineFeatureInterface*
static PyObject* as_kaldi_OnlineFeatureInterface(PyObject* self) {
  ::kaldi::OnlineFeatureInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::OnlineFeatureInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapOnlineCacheFeature_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(src:OnlineFeatureInterface)\n  Calls C++ function\n  void ::kaldi::OnlineCacheFeature::OnlineCacheFeature(::kaldi::OnlineFeatureInterface *)")},
  {C("clear_cache"), (PyCFunction)wrapClearCache_as_clear_cache, METH_NOARGS, C("clear_cache()\n  Calls C++ function\n  void ::kaldi::OnlineCacheFeature::ClearCache()")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::OnlineCacheFeature::Dim()")},
  {C("is_last_frame"), (PyCFunction)wrapIsLastFrame_as_is_last_frame, METH_VARARGS | METH_KEYWORDS, C("is_last_frame(frame:int) -> bool\n  Calls C++ function\n  bool ::kaldi::OnlineCacheFeature::IsLastFrame(int)")},
  {C("frame_shift_in_seconds"), (PyCFunction)wrapFrameShiftInSeconds_as_frame_shift_in_seconds, METH_NOARGS, C("frame_shift_in_seconds() -> float\n  Calls C++ function\n  float ::kaldi::OnlineCacheFeature::FrameShiftInSeconds()")},
  {C("num_frames_ready"), (PyCFunction)wrapNumFramesReady_as_num_frames_ready, METH_NOARGS, C("num_frames_ready() -> int\n  Calls C++ function\n  int ::kaldi::OnlineCacheFeature::NumFramesReady()")},
  {C("get_frame"), (PyCFunction)wrapGetFrame_as_get_frame, METH_VARARGS | METH_KEYWORDS, C("get_frame(frame:int, feat:VectorBase)\n  Calls C++ function\n  void ::kaldi::OnlineCacheFeature::GetFrame(int, ::kaldi::VectorBase<float> *)")},
  {C("as_kaldi_OnlineFeatureInterface"), (PyCFunction)as_kaldi_OnlineFeatureInterface, METH_NOARGS, C("Upcast to ::kaldi::OnlineFeatureInterface*")},
  {}
};

// OnlineCacheFeature __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlineCacheFeature __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineCacheFeature __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_feature.OnlineCacheFeature", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineCacheFeature", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapOnlineCacheFeature_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineCacheFeature* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineCacheFeature"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineCacheFeature"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineCacheFeature* c = static_cast<::kaldi::OnlineCacheFeature*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineCacheFeature*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineCacheFeature

namespace pyOnlineAppendFeature {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineAppendFeature> cpp;
};
static ::kaldi::OnlineAppendFeature* ThisPtr(PyObject*);

// __init__(src1:OnlineFeatureInterface, src2:OnlineFeatureInterface)
static PyObject* wrapOnlineAppendFeature_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("src1"),
      C("src2"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::kaldi::OnlineFeatureInterface * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::OnlineFeatureInterface *", a[0]);
  ::kaldi::OnlineFeatureInterface * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::OnlineFeatureInterface *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineAppendFeature>(arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineAppendFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_last_frame(frame:int) -> bool
static PyObject* wrapIsLastFrame_as_is_last_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_last_frame", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_last_frame", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineAppendFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsLastFrame(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// frame_shift_in_seconds() -> float
static PyObject* wrapFrameShiftInSeconds_as_frame_shift_in_seconds(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineAppendFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FrameShiftInSeconds();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_frames_ready() -> int
static PyObject* wrapNumFramesReady_as_num_frames_ready(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineAppendFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFramesReady();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_frame(frame:int, feat:VectorBase)
static PyObject* wrapGetFrame_as_get_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("feat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_frame", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_frame", names[0], "int", a[0]);
  ::kaldi::VectorBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_frame", names[1], "::kaldi::VectorBase<float> *", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineAppendFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetFrame(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::kaldi::OnlineFeatureInterface*
static PyObject* as_kaldi_OnlineFeatureInterface(PyObject* self) {
  ::kaldi::OnlineFeatureInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::OnlineFeatureInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapOnlineAppendFeature_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(src1:OnlineFeatureInterface, src2:OnlineFeatureInterface)\n  Calls C++ function\n  void ::kaldi::OnlineAppendFeature::OnlineAppendFeature(::kaldi::OnlineFeatureInterface *, ::kaldi::OnlineFeatureInterface *)")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::OnlineAppendFeature::Dim()")},
  {C("is_last_frame"), (PyCFunction)wrapIsLastFrame_as_is_last_frame, METH_VARARGS | METH_KEYWORDS, C("is_last_frame(frame:int) -> bool\n  Calls C++ function\n  bool ::kaldi::OnlineAppendFeature::IsLastFrame(int)")},
  {C("frame_shift_in_seconds"), (PyCFunction)wrapFrameShiftInSeconds_as_frame_shift_in_seconds, METH_NOARGS, C("frame_shift_in_seconds() -> float\n  Calls C++ function\n  float ::kaldi::OnlineAppendFeature::FrameShiftInSeconds()")},
  {C("num_frames_ready"), (PyCFunction)wrapNumFramesReady_as_num_frames_ready, METH_NOARGS, C("num_frames_ready() -> int\n  Calls C++ function\n  int ::kaldi::OnlineAppendFeature::NumFramesReady()")},
  {C("get_frame"), (PyCFunction)wrapGetFrame_as_get_frame, METH_VARARGS | METH_KEYWORDS, C("get_frame(frame:int, feat:VectorBase)\n  Calls C++ function\n  void ::kaldi::OnlineAppendFeature::GetFrame(int, ::kaldi::VectorBase<float> *)")},
  {C("as_kaldi_OnlineFeatureInterface"), (PyCFunction)as_kaldi_OnlineFeatureInterface, METH_NOARGS, C("Upcast to ::kaldi::OnlineFeatureInterface*")},
  {}
};

// OnlineAppendFeature __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlineAppendFeature __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineAppendFeature __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_feature.OnlineAppendFeature", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineAppendFeature", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapOnlineAppendFeature_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineAppendFeature* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineAppendFeature"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineAppendFeature"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineAppendFeature* c = static_cast<::kaldi::OnlineAppendFeature*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineAppendFeature*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineAppendFeature


// Initialize module

bool Ready() {
  PyObject* base_cls = ImportFQName("kaldi.itf._online_feature_itf.OnlineBaseFeature");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._online_feature_itf.OnlineBaseFeature is not a new style class inheriting from object.");
    return false;
  }
  pyOnlineMfcc::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyOnlineMfcc::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._online_feature_itf.OnlineBaseFeature is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyOnlineMfcc::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineMfcc::wrapper_Type);  // For PyModule_AddObject to steal.
  Py_INCREF(base_cls);
  pyOnlinePlp::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  if (PyType_Ready(&pyOnlinePlp::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlinePlp::wrapper_Type);  // For PyModule_AddObject to steal.
  Py_INCREF(base_cls);
  pyOnlineFbank::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  if (PyType_Ready(&pyOnlineFbank::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineFbank::wrapper_Type);  // For PyModule_AddObject to steal.
  base_cls = ImportFQName("kaldi.itf._online_feature_itf.OnlineFeatureInterface");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._online_feature_itf.OnlineFeatureInterface is not a new style class inheriting from object.");
    return false;
  }
  pyOnlineMatrixFeature::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyOnlineMatrixFeature::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._online_feature_itf.OnlineFeatureInterface is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyOnlineMatrixFeature::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineMatrixFeature::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyOnlineCmvnOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineCmvnOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyOnlineCmvnState::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineCmvnState::wrapper_Type);  // For PyModule_AddObject to steal.
  Py_INCREF(base_cls);
  pyOnlineCmvn::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  if (PyType_Ready(&pyOnlineCmvn::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineCmvn::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyOnlineSpliceOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineSpliceOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  Py_INCREF(base_cls);
  pyOnlineSpliceFrames::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  if (PyType_Ready(&pyOnlineSpliceFrames::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineSpliceFrames::wrapper_Type);  // For PyModule_AddObject to steal.
  Py_INCREF(base_cls);
  pyOnlineTransform::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  if (PyType_Ready(&pyOnlineTransform::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineTransform::wrapper_Type);  // For PyModule_AddObject to steal.
  Py_INCREF(base_cls);
  pyOnlineDeltaFeature::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  if (PyType_Ready(&pyOnlineDeltaFeature::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineDeltaFeature::wrapper_Type);  // For PyModule_AddObject to steal.
  Py_INCREF(base_cls);
  pyOnlineCacheFeature::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  if (PyType_Ready(&pyOnlineCacheFeature::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineCacheFeature::wrapper_Type);  // For PyModule_AddObject to steal.
  Py_INCREF(base_cls);
  pyOnlineAppendFeature::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  if (PyType_Ready(&pyOnlineAppendFeature::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineAppendFeature::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_online_feature",  // module name
  "CLIF-generated module for feat/online-feature.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_online_feature_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_options_ext")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_feature_functions")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_feature_mfcc")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_feature_plp")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_feature_fbank")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "OnlineMfcc", reinterpret_cast<PyObject*>(&pyOnlineMfcc::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "OnlinePlp", reinterpret_cast<PyObject*>(&pyOnlinePlp::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "OnlineFbank", reinterpret_cast<PyObject*>(&pyOnlineFbank::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "OnlineMatrixFeature", reinterpret_cast<PyObject*>(&pyOnlineMatrixFeature::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "OnlineCmvnOptions", reinterpret_cast<PyObject*>(&pyOnlineCmvnOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "OnlineCmvnState", reinterpret_cast<PyObject*>(&pyOnlineCmvnState::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "OnlineCmvn", reinterpret_cast<PyObject*>(&pyOnlineCmvn::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "OnlineSpliceOptions", reinterpret_cast<PyObject*>(&pyOnlineSpliceOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "OnlineSpliceFrames", reinterpret_cast<PyObject*>(&pyOnlineSpliceFrames::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "OnlineTransform", reinterpret_cast<PyObject*>(&pyOnlineTransform::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "OnlineDeltaFeature", reinterpret_cast<PyObject*>(&pyOnlineDeltaFeature::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "OnlineCacheFeature", reinterpret_cast<PyObject*>(&pyOnlineCacheFeature::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "OnlineAppendFeature", reinterpret_cast<PyObject*>(&pyOnlineAppendFeature::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __online__feature_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// OnlineAppendFeature to/from ::kaldi::OnlineAppendFeature conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineAppendFeature** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineAppendFeature* cpp = __online__feature_clifwrap::pyOnlineAppendFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineAppendFeature>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineAppendFeature* cpp = __online__feature_clifwrap::pyOnlineAppendFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__feature_clifwrap::pyOnlineAppendFeature::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineAppendFeature>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineAppendFeature* cpp = __online__feature_clifwrap::pyOnlineAppendFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__feature_clifwrap::pyOnlineAppendFeature::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineAppendFeature instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineAppendFeature* c) {
  assert(c != nullptr);
  ::kaldi::OnlineAppendFeature* cpp = __online__feature_clifwrap::pyOnlineAppendFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::OnlineAppendFeature>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineAppendFeature* cpp = __online__feature_clifwrap::pyOnlineAppendFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineAppendFeature* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineAppendFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineAppendFeature::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineAppendFeature>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineAppendFeature> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineAppendFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineAppendFeature::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineAppendFeature>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineAppendFeature> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineAppendFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineAppendFeature::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineAppendFeature>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::OnlineAppendFeature& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineAppendFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineAppendFeature::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::OnlineAppendFeature>(c);
  return py;
}

// OnlineCacheFeature to/from ::kaldi::OnlineCacheFeature conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineCacheFeature** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineCacheFeature* cpp = __online__feature_clifwrap::pyOnlineCacheFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineCacheFeature>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineCacheFeature* cpp = __online__feature_clifwrap::pyOnlineCacheFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__feature_clifwrap::pyOnlineCacheFeature::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineCacheFeature>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineCacheFeature* cpp = __online__feature_clifwrap::pyOnlineCacheFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__feature_clifwrap::pyOnlineCacheFeature::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineCacheFeature instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineCacheFeature* c) {
  assert(c != nullptr);
  ::kaldi::OnlineCacheFeature* cpp = __online__feature_clifwrap::pyOnlineCacheFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::OnlineCacheFeature>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineCacheFeature* cpp = __online__feature_clifwrap::pyOnlineCacheFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineCacheFeature* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineCacheFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineCacheFeature::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineCacheFeature>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineCacheFeature> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineCacheFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineCacheFeature::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineCacheFeature>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineCacheFeature> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineCacheFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineCacheFeature::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineCacheFeature>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::OnlineCacheFeature& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineCacheFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineCacheFeature::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::OnlineCacheFeature>(c);
  return py;
}

// OnlineCmvn to/from ::kaldi::OnlineCmvn conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineCmvn** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineCmvn* cpp = __online__feature_clifwrap::pyOnlineCmvn::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineCmvn>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineCmvn* cpp = __online__feature_clifwrap::pyOnlineCmvn::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__feature_clifwrap::pyOnlineCmvn::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineCmvn>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineCmvn* cpp = __online__feature_clifwrap::pyOnlineCmvn::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__feature_clifwrap::pyOnlineCmvn::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineCmvn instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineCmvn* c) {
  assert(c != nullptr);
  ::kaldi::OnlineCmvn* cpp = __online__feature_clifwrap::pyOnlineCmvn::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::OnlineCmvn>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineCmvn* cpp = __online__feature_clifwrap::pyOnlineCmvn::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineCmvn* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineCmvn::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineCmvn::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineCmvn>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineCmvn> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineCmvn::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineCmvn::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineCmvn>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineCmvn> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineCmvn::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineCmvn::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineCmvn>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::OnlineCmvn& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineCmvn::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineCmvn::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::OnlineCmvn>(c);
  return py;
}

// OnlineCmvnOptions to/from ::kaldi::OnlineCmvnOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineCmvnOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineCmvnOptions* cpp = __online__feature_clifwrap::pyOnlineCmvnOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineCmvnOptions>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineCmvnOptions* cpp = __online__feature_clifwrap::pyOnlineCmvnOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__feature_clifwrap::pyOnlineCmvnOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineCmvnOptions>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineCmvnOptions* cpp = __online__feature_clifwrap::pyOnlineCmvnOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__feature_clifwrap::pyOnlineCmvnOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineCmvnOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineCmvnOptions* c) {
  assert(c != nullptr);
  ::kaldi::OnlineCmvnOptions* cpp = __online__feature_clifwrap::pyOnlineCmvnOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::OnlineCmvnOptions>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineCmvnOptions* cpp = __online__feature_clifwrap::pyOnlineCmvnOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineCmvnOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineCmvnOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineCmvnOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineCmvnOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineCmvnOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineCmvnOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineCmvnOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineCmvnOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineCmvnOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineCmvnOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineCmvnOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineCmvnOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::OnlineCmvnOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineCmvnOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineCmvnOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::OnlineCmvnOptions>(c);
  return py;
}

// OnlineCmvnState to/from ::kaldi::OnlineCmvnState conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineCmvnState** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineCmvnState* cpp = __online__feature_clifwrap::pyOnlineCmvnState::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineCmvnState>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineCmvnState* cpp = __online__feature_clifwrap::pyOnlineCmvnState::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__feature_clifwrap::pyOnlineCmvnState::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineCmvnState>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineCmvnState* cpp = __online__feature_clifwrap::pyOnlineCmvnState::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__feature_clifwrap::pyOnlineCmvnState::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineCmvnState instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineCmvnState* c) {
  assert(c != nullptr);
  ::kaldi::OnlineCmvnState* cpp = __online__feature_clifwrap::pyOnlineCmvnState::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::OnlineCmvnState>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineCmvnState* cpp = __online__feature_clifwrap::pyOnlineCmvnState::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineCmvnState* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineCmvnState::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineCmvnState::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineCmvnState>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineCmvnState> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineCmvnState::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineCmvnState::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineCmvnState>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineCmvnState> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineCmvnState::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineCmvnState::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineCmvnState>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::OnlineCmvnState& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineCmvnState::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineCmvnState::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::OnlineCmvnState>(c);
  return py;
}

// OnlineDeltaFeature to/from ::kaldi::OnlineDeltaFeature conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineDeltaFeature** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineDeltaFeature* cpp = __online__feature_clifwrap::pyOnlineDeltaFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineDeltaFeature>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineDeltaFeature* cpp = __online__feature_clifwrap::pyOnlineDeltaFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__feature_clifwrap::pyOnlineDeltaFeature::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineDeltaFeature>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineDeltaFeature* cpp = __online__feature_clifwrap::pyOnlineDeltaFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__feature_clifwrap::pyOnlineDeltaFeature::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineDeltaFeature instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineDeltaFeature* c) {
  assert(c != nullptr);
  ::kaldi::OnlineDeltaFeature* cpp = __online__feature_clifwrap::pyOnlineDeltaFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::OnlineDeltaFeature>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineDeltaFeature* cpp = __online__feature_clifwrap::pyOnlineDeltaFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineDeltaFeature* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineDeltaFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineDeltaFeature::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineDeltaFeature>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineDeltaFeature> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineDeltaFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineDeltaFeature::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineDeltaFeature>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineDeltaFeature> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineDeltaFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineDeltaFeature::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineDeltaFeature>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::OnlineDeltaFeature& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineDeltaFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineDeltaFeature::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::OnlineDeltaFeature>(c);
  return py;
}

// OnlineFbank to/from ::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer> conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>* cpp = __online__feature_clifwrap::pyOnlineFbank::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>* cpp = __online__feature_clifwrap::pyOnlineFbank::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__feature_clifwrap::pyOnlineFbank::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>* cpp = __online__feature_clifwrap::pyOnlineFbank::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__feature_clifwrap::pyOnlineFbank::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineFbank instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineFbank::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineFbank::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineFbank::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineFbank::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineFbank::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineFbank::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>>(std::move(c));
  return py;
}

// OnlineMatrixFeature to/from ::kaldi::OnlineMatrixFeature conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineMatrixFeature** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineMatrixFeature* cpp = __online__feature_clifwrap::pyOnlineMatrixFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineMatrixFeature>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineMatrixFeature* cpp = __online__feature_clifwrap::pyOnlineMatrixFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__feature_clifwrap::pyOnlineMatrixFeature::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineMatrixFeature>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineMatrixFeature* cpp = __online__feature_clifwrap::pyOnlineMatrixFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__feature_clifwrap::pyOnlineMatrixFeature::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineMatrixFeature instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineMatrixFeature* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineMatrixFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineMatrixFeature::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineMatrixFeature>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineMatrixFeature> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineMatrixFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineMatrixFeature::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineMatrixFeature>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineMatrixFeature> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineMatrixFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineMatrixFeature::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineMatrixFeature>(std::move(c));
  return py;
}

// OnlineMfcc to/from ::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer> conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>* cpp = __online__feature_clifwrap::pyOnlineMfcc::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>* cpp = __online__feature_clifwrap::pyOnlineMfcc::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__feature_clifwrap::pyOnlineMfcc::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>* cpp = __online__feature_clifwrap::pyOnlineMfcc::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__feature_clifwrap::pyOnlineMfcc::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineMfcc instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineMfcc::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineMfcc::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineMfcc::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineMfcc::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineMfcc::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineMfcc::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>>(std::move(c));
  return py;
}

// OnlinePlp to/from ::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer> conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>* cpp = __online__feature_clifwrap::pyOnlinePlp::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>* cpp = __online__feature_clifwrap::pyOnlinePlp::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__feature_clifwrap::pyOnlinePlp::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>* cpp = __online__feature_clifwrap::pyOnlinePlp::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__feature_clifwrap::pyOnlinePlp::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlinePlp instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlinePlp::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlinePlp::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlinePlp::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlinePlp::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlinePlp::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlinePlp::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>>(std::move(c));
  return py;
}

// OnlineSpliceFrames to/from ::kaldi::OnlineSpliceFrames conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineSpliceFrames** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineSpliceFrames* cpp = __online__feature_clifwrap::pyOnlineSpliceFrames::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineSpliceFrames>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineSpliceFrames* cpp = __online__feature_clifwrap::pyOnlineSpliceFrames::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__feature_clifwrap::pyOnlineSpliceFrames::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineSpliceFrames>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineSpliceFrames* cpp = __online__feature_clifwrap::pyOnlineSpliceFrames::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__feature_clifwrap::pyOnlineSpliceFrames::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineSpliceFrames instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineSpliceFrames* c) {
  assert(c != nullptr);
  ::kaldi::OnlineSpliceFrames* cpp = __online__feature_clifwrap::pyOnlineSpliceFrames::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::OnlineSpliceFrames>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineSpliceFrames* cpp = __online__feature_clifwrap::pyOnlineSpliceFrames::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineSpliceFrames* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineSpliceFrames::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineSpliceFrames::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineSpliceFrames>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineSpliceFrames> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineSpliceFrames::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineSpliceFrames::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineSpliceFrames>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineSpliceFrames> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineSpliceFrames::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineSpliceFrames::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineSpliceFrames>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::OnlineSpliceFrames& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineSpliceFrames::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineSpliceFrames::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::OnlineSpliceFrames>(c);
  return py;
}

// OnlineSpliceOptions to/from ::kaldi::OnlineSpliceOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineSpliceOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineSpliceOptions* cpp = __online__feature_clifwrap::pyOnlineSpliceOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineSpliceOptions>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineSpliceOptions* cpp = __online__feature_clifwrap::pyOnlineSpliceOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__feature_clifwrap::pyOnlineSpliceOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineSpliceOptions>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineSpliceOptions* cpp = __online__feature_clifwrap::pyOnlineSpliceOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__feature_clifwrap::pyOnlineSpliceOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineSpliceOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineSpliceOptions* c) {
  assert(c != nullptr);
  ::kaldi::OnlineSpliceOptions* cpp = __online__feature_clifwrap::pyOnlineSpliceOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::OnlineSpliceOptions>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineSpliceOptions* cpp = __online__feature_clifwrap::pyOnlineSpliceOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineSpliceOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineSpliceOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineSpliceOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineSpliceOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineSpliceOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineSpliceOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineSpliceOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineSpliceOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineSpliceOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineSpliceOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineSpliceOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineSpliceOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::OnlineSpliceOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineSpliceOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineSpliceOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::OnlineSpliceOptions>(c);
  return py;
}

// OnlineTransform to/from ::kaldi::OnlineTransform conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineTransform** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineTransform* cpp = __online__feature_clifwrap::pyOnlineTransform::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineTransform>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineTransform* cpp = __online__feature_clifwrap::pyOnlineTransform::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__feature_clifwrap::pyOnlineTransform::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineTransform>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineTransform* cpp = __online__feature_clifwrap::pyOnlineTransform::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__feature_clifwrap::pyOnlineTransform::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineTransform instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineTransform* c) {
  assert(c != nullptr);
  ::kaldi::OnlineTransform* cpp = __online__feature_clifwrap::pyOnlineTransform::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::OnlineTransform>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineTransform* cpp = __online__feature_clifwrap::pyOnlineTransform::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineTransform* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineTransform::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineTransform::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineTransform>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineTransform> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineTransform::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineTransform::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineTransform>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineTransform> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineTransform::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineTransform::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineTransform>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::OnlineTransform& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__online__feature_clifwrap::pyOnlineTransform::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature_clifwrap::pyOnlineTransform::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::OnlineTransform>(c);
  return py;
}

}  // namespace kaldi
