//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/feat/pitch-functions.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "itf/options-itf-clifwrap.h"
#include "util/options-ext-clifwrap.h"
#include "itf/online-feature-itf-clifwrap.h"
#include "pitch-functions-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __pitch__functions_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyPitchExtractionOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::PitchExtractionOptions> cpp;
};
static ::kaldi::PitchExtractionOptions* ThisPtr(PyObject*);

static PyObject* get_samp_freq(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->samp_freq, {});
}

static int set_samp_freq(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the samp_freq attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->samp_freq)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for samp_freq:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_frame_shift_ms(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->frame_shift_ms, {});
}

static int set_frame_shift_ms(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the frame_shift_ms attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->frame_shift_ms)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for frame_shift_ms:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_frame_length_ms(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->frame_length_ms, {});
}

static int set_frame_length_ms(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the frame_length_ms attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->frame_length_ms)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for frame_length_ms:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_preemph_coeff(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->preemph_coeff, {});
}

static int set_preemph_coeff(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the preemph_coeff attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->preemph_coeff)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for preemph_coeff:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_min_f0(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->min_f0, {});
}

static int set_min_f0(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the min_f0 attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->min_f0)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for min_f0:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_max_f0(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->max_f0, {});
}

static int set_max_f0(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the max_f0 attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->max_f0)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for max_f0:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_soft_min_f0(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->soft_min_f0, {});
}

static int set_soft_min_f0(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the soft_min_f0 attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->soft_min_f0)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for soft_min_f0:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_penalty_factor(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->penalty_factor, {});
}

static int set_penalty_factor(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the penalty_factor attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->penalty_factor)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for penalty_factor:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_lowpass_cutoff(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->lowpass_cutoff, {});
}

static int set_lowpass_cutoff(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the lowpass_cutoff attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->lowpass_cutoff)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for lowpass_cutoff:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_resample_freq(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->resample_freq, {});
}

static int set_resample_freq(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the resample_freq attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->resample_freq)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for resample_freq:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_delta_pitch(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->delta_pitch, {});
}

static int set_delta_pitch(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the delta_pitch attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->delta_pitch)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for delta_pitch:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_nccf_ballast(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->nccf_ballast, {});
}

static int set_nccf_ballast(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the nccf_ballast attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->nccf_ballast)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for nccf_ballast:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_lowpass_filter_width(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->lowpass_filter_width, {});
}

static int set_lowpass_filter_width(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the lowpass_filter_width attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->lowpass_filter_width)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for lowpass_filter_width:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_upsample_filter_width(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->upsample_filter_width, {});
}

static int set_upsample_filter_width(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the upsample_filter_width attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->upsample_filter_width)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for upsample_filter_width:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_max_frames_latency(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->max_frames_latency, {});
}

static int set_max_frames_latency(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the max_frames_latency attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->max_frames_latency)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for max_frames_latency:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_frames_per_chunk(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->frames_per_chunk, {});
}

static int set_frames_per_chunk(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the frames_per_chunk attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->frames_per_chunk)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for frames_per_chunk:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_simulate_first_pass_online(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->simulate_first_pass_online, {});
}

static int set_simulate_first_pass_online(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the simulate_first_pass_online attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->simulate_first_pass_online)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for simulate_first_pass_online:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_recompute_frame(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->recompute_frame, {});
}

static int set_recompute_frame(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the recompute_frame attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->recompute_frame)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for recompute_frame:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_nccf_ballast_online(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->nccf_ballast_online, {});
}

static int set_nccf_ballast_online(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the nccf_ballast_online attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->nccf_ballast_online)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for nccf_ballast_online:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_snip_edges(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->snip_edges, {});
}

static int set_snip_edges(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the snip_edges attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->snip_edges)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for snip_edges:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::PitchExtractionOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// nccf_window_size() -> int
static PyObject* wrapNccfWindowSize_as_nccf_window_size(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::PitchExtractionOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NccfWindowSize();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// nccf_window_shift() -> int
static PyObject* wrapNccfWindowShift_as_nccf_window_shift(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::PitchExtractionOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NccfWindowShift();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyGetSetDef Properties[] = {
  {C("samp_freq"), get_samp_freq, set_samp_freq, C("C++ ::kaldi::BaseFloat PitchExtractionOptions.samp_freq")},
  {C("frame_shift_ms"), get_frame_shift_ms, set_frame_shift_ms, C("C++ ::kaldi::BaseFloat PitchExtractionOptions.frame_shift_ms")},
  {C("frame_length_ms"), get_frame_length_ms, set_frame_length_ms, C("C++ ::kaldi::BaseFloat PitchExtractionOptions.frame_length_ms")},
  {C("preemph_coeff"), get_preemph_coeff, set_preemph_coeff, C("C++ ::kaldi::BaseFloat PitchExtractionOptions.preemph_coeff")},
  {C("min_f0"), get_min_f0, set_min_f0, C("C++ ::kaldi::BaseFloat PitchExtractionOptions.min_f0")},
  {C("max_f0"), get_max_f0, set_max_f0, C("C++ ::kaldi::BaseFloat PitchExtractionOptions.max_f0")},
  {C("soft_min_f0"), get_soft_min_f0, set_soft_min_f0, C("C++ ::kaldi::BaseFloat PitchExtractionOptions.soft_min_f0")},
  {C("penalty_factor"), get_penalty_factor, set_penalty_factor, C("C++ ::kaldi::BaseFloat PitchExtractionOptions.penalty_factor")},
  {C("lowpass_cutoff"), get_lowpass_cutoff, set_lowpass_cutoff, C("C++ ::kaldi::BaseFloat PitchExtractionOptions.lowpass_cutoff")},
  {C("resample_freq"), get_resample_freq, set_resample_freq, C("C++ ::kaldi::BaseFloat PitchExtractionOptions.resample_freq")},
  {C("delta_pitch"), get_delta_pitch, set_delta_pitch, C("C++ ::kaldi::BaseFloat PitchExtractionOptions.delta_pitch")},
  {C("nccf_ballast"), get_nccf_ballast, set_nccf_ballast, C("C++ ::kaldi::BaseFloat PitchExtractionOptions.nccf_ballast")},
  {C("lowpass_filter_width"), get_lowpass_filter_width, set_lowpass_filter_width, C("C++ ::int32 PitchExtractionOptions.lowpass_filter_width")},
  {C("upsample_filter_width"), get_upsample_filter_width, set_upsample_filter_width, C("C++ ::int32 PitchExtractionOptions.upsample_filter_width")},
  {C("max_frames_latency"), get_max_frames_latency, set_max_frames_latency, C("C++ ::int32 PitchExtractionOptions.max_frames_latency")},
  {C("frames_per_chunk"), get_frames_per_chunk, set_frames_per_chunk, C("C++ ::int32 PitchExtractionOptions.frames_per_chunk")},
  {C("simulate_first_pass_online"), get_simulate_first_pass_online, set_simulate_first_pass_online, C("C++ bool PitchExtractionOptions.simulate_first_pass_online")},
  {C("recompute_frame"), get_recompute_frame, set_recompute_frame, C("C++ ::int32 PitchExtractionOptions.recompute_frame")},
  {C("nccf_ballast_online"), get_nccf_ballast_online, set_nccf_ballast_online, C("C++ bool PitchExtractionOptions.nccf_ballast_online")},
  {C("snip_edges"), get_snip_edges, set_snip_edges, C("C++ bool PitchExtractionOptions.snip_edges")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::PitchExtractionOptions::Register(::kaldi::OptionsItf *)")},
  {C("nccf_window_size"), (PyCFunction)wrapNccfWindowSize_as_nccf_window_size, METH_NOARGS, C("nccf_window_size() -> int\n  Calls C++ function\n  int ::kaldi::PitchExtractionOptions::NccfWindowSize()")},
  {C("nccf_window_shift"), (PyCFunction)wrapNccfWindowShift_as_nccf_window_shift, METH_NOARGS, C("nccf_window_shift() -> int\n  Calls C++ function\n  int ::kaldi::PitchExtractionOptions::NccfWindowShift()")},
  {}
};

// PitchExtractionOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// PitchExtractionOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// PitchExtractionOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_pitch_functions.PitchExtractionOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::PitchExtractionOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "PitchExtractionOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::PitchExtractionOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::PitchExtractionOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_PitchExtractionOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::PitchExtractionOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::PitchExtractionOptions* c = static_cast<::kaldi::PitchExtractionOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::PitchExtractionOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyPitchExtractionOptions

namespace pyProcessPitchOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::ProcessPitchOptions> cpp;
};
static ::kaldi::ProcessPitchOptions* ThisPtr(PyObject*);

static PyObject* get_pitch_scale(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->pitch_scale, {});
}

static int set_pitch_scale(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the pitch_scale attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->pitch_scale)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for pitch_scale:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_pov_scale(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->pov_scale, {});
}

static int set_pov_scale(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the pov_scale attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->pov_scale)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for pov_scale:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_pov_offset(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->pov_offset, {});
}

static int set_pov_offset(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the pov_offset attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->pov_offset)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for pov_offset:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_delta_pitch_scale(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->delta_pitch_scale, {});
}

static int set_delta_pitch_scale(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the delta_pitch_scale attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->delta_pitch_scale)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for delta_pitch_scale:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_delta_pitch_noise_stddev(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->delta_pitch_noise_stddev, {});
}

static int set_delta_pitch_noise_stddev(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the delta_pitch_noise_stddev attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->delta_pitch_noise_stddev)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for delta_pitch_noise_stddev:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_normalization_left_context(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->normalization_left_context, {});
}

static int set_normalization_left_context(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the normalization_left_context attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->normalization_left_context)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for normalization_left_context:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_normalization_right_context(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->normalization_right_context, {});
}

static int set_normalization_right_context(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the normalization_right_context attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->normalization_right_context)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for normalization_right_context:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_delta_window(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->delta_window, {});
}

static int set_delta_window(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the delta_window attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->delta_window)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for delta_window:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_delay(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->delay, {});
}

static int set_delay(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the delay attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->delay)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for delay:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_add_pov_feature(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->add_pov_feature, {});
}

static int set_add_pov_feature(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the add_pov_feature attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->add_pov_feature)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for add_pov_feature:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_add_normalized_log_pitch(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->add_normalized_log_pitch, {});
}

static int set_add_normalized_log_pitch(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the add_normalized_log_pitch attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->add_normalized_log_pitch)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for add_normalized_log_pitch:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_add_delta_pitch(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->add_delta_pitch, {});
}

static int set_add_delta_pitch(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the add_delta_pitch attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->add_delta_pitch)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for add_delta_pitch:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_add_raw_log_pitch(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->add_raw_log_pitch, {});
}

static int set_add_raw_log_pitch(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the add_raw_log_pitch attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->add_raw_log_pitch)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for add_raw_log_pitch:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:ParseOptions)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::ParseOptionsExt * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::ParseOptionsExt *", a[0]);
  // Call actual C++ method.
  ::kaldi::ProcessPitchOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("pitch_scale"), get_pitch_scale, set_pitch_scale, C("C++ ::kaldi::BaseFloat ProcessPitchOptions.pitch_scale")},
  {C("pov_scale"), get_pov_scale, set_pov_scale, C("C++ ::kaldi::BaseFloat ProcessPitchOptions.pov_scale")},
  {C("pov_offset"), get_pov_offset, set_pov_offset, C("C++ ::kaldi::BaseFloat ProcessPitchOptions.pov_offset")},
  {C("delta_pitch_scale"), get_delta_pitch_scale, set_delta_pitch_scale, C("C++ ::kaldi::BaseFloat ProcessPitchOptions.delta_pitch_scale")},
  {C("delta_pitch_noise_stddev"), get_delta_pitch_noise_stddev, set_delta_pitch_noise_stddev, C("C++ ::kaldi::BaseFloat ProcessPitchOptions.delta_pitch_noise_stddev")},
  {C("normalization_left_context"), get_normalization_left_context, set_normalization_left_context, C("C++ ::int32 ProcessPitchOptions.normalization_left_context")},
  {C("normalization_right_context"), get_normalization_right_context, set_normalization_right_context, C("C++ ::int32 ProcessPitchOptions.normalization_right_context")},
  {C("delta_window"), get_delta_window, set_delta_window, C("C++ ::int32 ProcessPitchOptions.delta_window")},
  {C("delay"), get_delay, set_delay, C("C++ ::int32 ProcessPitchOptions.delay")},
  {C("add_pov_feature"), get_add_pov_feature, set_add_pov_feature, C("C++ bool ProcessPitchOptions.add_pov_feature")},
  {C("add_normalized_log_pitch"), get_add_normalized_log_pitch, set_add_normalized_log_pitch, C("C++ bool ProcessPitchOptions.add_normalized_log_pitch")},
  {C("add_delta_pitch"), get_add_delta_pitch, set_add_delta_pitch, C("C++ bool ProcessPitchOptions.add_delta_pitch")},
  {C("add_raw_log_pitch"), get_add_raw_log_pitch, set_add_raw_log_pitch, C("C++ bool ProcessPitchOptions.add_raw_log_pitch")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:ParseOptions)\n  Calls C++ function\n  void ::kaldi::ProcessPitchOptions::Register(::kaldi::ParseOptionsExt *)")},
  {}
};

// ProcessPitchOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ProcessPitchOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ProcessPitchOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_pitch_functions.ProcessPitchOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::ProcessPitchOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "ProcessPitchOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::ProcessPitchOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::ProcessPitchOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_ProcessPitchOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::ProcessPitchOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::ProcessPitchOptions* c = static_cast<::kaldi::ProcessPitchOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::ProcessPitchOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyProcessPitchOptions

namespace pyOnlinePitchFeature {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlinePitchFeature> cpp;
};
static ::kaldi::OnlinePitchFeature* ThisPtr(PyObject*);

// __init__(opts:PitchExtractionOptions)
static PyObject* wrapOnlinePitchFeature_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::kaldi::PitchExtractionOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::PitchExtractionOptions", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlinePitchFeature>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::kaldi::OnlineBaseFeature*
static PyObject* as_kaldi_OnlineBaseFeature(PyObject* self) {
  ::kaldi::OnlineBaseFeature* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::OnlineBaseFeature"), nullptr);
}

// Implicit cast this as ::kaldi::OnlineFeatureInterface*
static PyObject* as_kaldi_OnlineFeatureInterface(PyObject* self) {
  ::kaldi::OnlineFeatureInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::OnlineFeatureInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapOnlinePitchFeature_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(opts:PitchExtractionOptions)\n  Calls C++ function\n  void ::kaldi::OnlinePitchFeature::OnlinePitchFeature(::kaldi::PitchExtractionOptions)")},
  {C("as_kaldi_OnlineBaseFeature"), (PyCFunction)as_kaldi_OnlineBaseFeature, METH_NOARGS, C("Upcast to ::kaldi::OnlineBaseFeature*")},
  {C("as_kaldi_OnlineFeatureInterface"), (PyCFunction)as_kaldi_OnlineFeatureInterface, METH_NOARGS, C("Upcast to ::kaldi::OnlineFeatureInterface*")},
  {}
};

// OnlinePitchFeature __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlinePitchFeature __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlinePitchFeature __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_pitch_functions.OnlinePitchFeature", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlinePitchFeature", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapOnlinePitchFeature_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlinePitchFeature* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlinePitchFeature"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlinePitchFeature"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlinePitchFeature* c = static_cast<::kaldi::OnlinePitchFeature*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlinePitchFeature*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlinePitchFeature

namespace pyOnlineProcessPitch {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineProcessPitch> cpp;
};
static ::kaldi::OnlineProcessPitch* ThisPtr(PyObject*);

// __init__(opts:ProcessPitchOptions, src:OnlineFeatureInterface)
static PyObject* wrapOnlineProcessPitch_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("opts"),
      C("src"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::kaldi::ProcessPitchOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::ProcessPitchOptions", a[0]);
  ::kaldi::OnlineFeatureInterface * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::OnlineFeatureInterface *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineProcessPitch>(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::kaldi::OnlineFeatureInterface*
static PyObject* as_kaldi_OnlineFeatureInterface(PyObject* self) {
  ::kaldi::OnlineFeatureInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::OnlineFeatureInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapOnlineProcessPitch_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(opts:ProcessPitchOptions, src:OnlineFeatureInterface)\n  Calls C++ function\n  void ::kaldi::OnlineProcessPitch::OnlineProcessPitch(::kaldi::ProcessPitchOptions, ::kaldi::OnlineFeatureInterface *)")},
  {C("as_kaldi_OnlineFeatureInterface"), (PyCFunction)as_kaldi_OnlineFeatureInterface, METH_NOARGS, C("Upcast to ::kaldi::OnlineFeatureInterface*")},
  {}
};

// OnlineProcessPitch __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlineProcessPitch __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineProcessPitch __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_pitch_functions.OnlineProcessPitch", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineProcessPitch", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapOnlineProcessPitch_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineProcessPitch* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineProcessPitch"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineProcessPitch"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineProcessPitch* c = static_cast<::kaldi::OnlineProcessPitch*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineProcessPitch*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineProcessPitch

// compute_kaldi_pitch(opts:PitchExtractionOptions, wave:VectorBase) -> Matrix
static PyObject* wrapComputeKaldiPitch_as_compute_kaldi_pitch(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("opts"),
      C("wave"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:compute_kaldi_pitch", names, &a[0], &a[1])) return nullptr;
  ::kaldi::PitchExtractionOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_kaldi_pitch", names[0], "::kaldi::PitchExtractionOptions", a[0]);
  ::kaldi::VectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute_kaldi_pitch", names[1], "::kaldi::VectorBase<float>", a[1]);
  ::kaldi::Matrix<float> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::ComputeKaldiPitch(*arg1, *arg2, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// process_pitch(opts:ProcessPitchOptions, input:MatrixBase) -> Matrix
static PyObject* wrapProcessPitch_as_process_pitch(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("opts"),
      C("input"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:process_pitch", names, &a[0], &a[1])) return nullptr;
  ::kaldi::ProcessPitchOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("process_pitch", names[0], "::kaldi::ProcessPitchOptions", a[0]);
  ::kaldi::MatrixBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("process_pitch", names[1], "::kaldi::MatrixBase<float>", a[1]);
  ::kaldi::Matrix<float> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::ProcessPitch(*arg1, *arg2, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// compute_and_process_kaldi_pitch(pitch_opts:PitchExtractionOptions, process_opts:ProcessPitchOptions, wave:VectorBase) -> Matrix
static PyObject* wrapComputeAndProcessKaldiPitch_as_compute_and_process_kaldi_pitch(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("pitch_opts"),
      C("process_opts"),
      C("wave"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:compute_and_process_kaldi_pitch", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::PitchExtractionOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_and_process_kaldi_pitch", names[0], "::kaldi::PitchExtractionOptions", a[0]);
  ::kaldi::ProcessPitchOptions* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute_and_process_kaldi_pitch", names[1], "::kaldi::ProcessPitchOptions", a[1]);
  ::kaldi::VectorBase<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("compute_and_process_kaldi_pitch", names[2], "::kaldi::VectorBase<float>", a[2]);
  ::kaldi::Matrix<float> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::ComputeAndProcessKaldiPitch(*arg1, *arg2, *arg3, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("compute_kaldi_pitch"), (PyCFunction)wrapComputeKaldiPitch_as_compute_kaldi_pitch, METH_VARARGS | METH_KEYWORDS, C("compute_kaldi_pitch(opts:PitchExtractionOptions, wave:VectorBase) -> Matrix\n  Calls C++ function\n  void ::kaldi::ComputeKaldiPitch(::kaldi::PitchExtractionOptions, ::kaldi::VectorBase<float>, ::kaldi::Matrix<float>*)")},
  {C("process_pitch"), (PyCFunction)wrapProcessPitch_as_process_pitch, METH_VARARGS | METH_KEYWORDS, C("process_pitch(opts:ProcessPitchOptions, input:MatrixBase) -> Matrix\n  Calls C++ function\n  void ::kaldi::ProcessPitch(::kaldi::ProcessPitchOptions, ::kaldi::MatrixBase<float>, ::kaldi::Matrix<float>*)")},
  {C("compute_and_process_kaldi_pitch"), (PyCFunction)wrapComputeAndProcessKaldiPitch_as_compute_and_process_kaldi_pitch, METH_VARARGS | METH_KEYWORDS, C("compute_and_process_kaldi_pitch(pitch_opts:PitchExtractionOptions, process_opts:ProcessPitchOptions, wave:VectorBase) -> Matrix\n  Calls C++ function\n  void ::kaldi::ComputeAndProcessKaldiPitch(::kaldi::PitchExtractionOptions, ::kaldi::ProcessPitchOptions, ::kaldi::VectorBase<float>, ::kaldi::Matrix<float>*)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyPitchExtractionOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyPitchExtractionOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyProcessPitchOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyProcessPitchOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  PyObject* base_cls = ImportFQName("kaldi.itf._online_feature_itf.OnlineBaseFeature");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._online_feature_itf.OnlineBaseFeature is not a new style class inheriting from object.");
    return false;
  }
  pyOnlinePitchFeature::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyOnlinePitchFeature::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._online_feature_itf.OnlineBaseFeature is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyOnlinePitchFeature::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlinePitchFeature::wrapper_Type);  // For PyModule_AddObject to steal.
  base_cls = ImportFQName("kaldi.itf._online_feature_itf.OnlineFeatureInterface");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._online_feature_itf.OnlineFeatureInterface is not a new style class inheriting from object.");
    return false;
  }
  pyOnlineProcessPitch::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyOnlineProcessPitch::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._online_feature_itf.OnlineFeatureInterface is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyOnlineProcessPitch::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineProcessPitch::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_pitch_functions",  // module name
  "CLIF-generated module for feat/pitch-functions.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_options_ext")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_online_feature_itf")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "PitchExtractionOptions", reinterpret_cast<PyObject*>(&pyPitchExtractionOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "ProcessPitchOptions", reinterpret_cast<PyObject*>(&pyProcessPitchOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "OnlinePitchFeature", reinterpret_cast<PyObject*>(&pyOnlinePitchFeature::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "OnlineProcessPitch", reinterpret_cast<PyObject*>(&pyOnlineProcessPitch::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __pitch__functions_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// OnlinePitchFeature to/from ::kaldi::OnlinePitchFeature conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlinePitchFeature** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlinePitchFeature* cpp = __pitch__functions_clifwrap::pyOnlinePitchFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlinePitchFeature>* c) {
  assert(c != nullptr);
  ::kaldi::OnlinePitchFeature* cpp = __pitch__functions_clifwrap::pyOnlinePitchFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__pitch__functions_clifwrap::pyOnlinePitchFeature::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlinePitchFeature>* c) {
  assert(c != nullptr);
  ::kaldi::OnlinePitchFeature* cpp = __pitch__functions_clifwrap::pyOnlinePitchFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__pitch__functions_clifwrap::pyOnlinePitchFeature::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlinePitchFeature instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlinePitchFeature* c) {
  assert(c != nullptr);
  ::kaldi::OnlinePitchFeature* cpp = __pitch__functions_clifwrap::pyOnlinePitchFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::OnlinePitchFeature>* c) {
  assert(c != nullptr);
  ::kaldi::OnlinePitchFeature* cpp = __pitch__functions_clifwrap::pyOnlinePitchFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlinePitchFeature* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__pitch__functions_clifwrap::pyOnlinePitchFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__pitch__functions_clifwrap::pyOnlinePitchFeature::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlinePitchFeature>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlinePitchFeature> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__pitch__functions_clifwrap::pyOnlinePitchFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__pitch__functions_clifwrap::pyOnlinePitchFeature::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlinePitchFeature>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlinePitchFeature> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__pitch__functions_clifwrap::pyOnlinePitchFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__pitch__functions_clifwrap::pyOnlinePitchFeature::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlinePitchFeature>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::OnlinePitchFeature& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__pitch__functions_clifwrap::pyOnlinePitchFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__pitch__functions_clifwrap::pyOnlinePitchFeature::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::OnlinePitchFeature>(c);
  return py;
}

// OnlineProcessPitch to/from ::kaldi::OnlineProcessPitch conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineProcessPitch** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineProcessPitch* cpp = __pitch__functions_clifwrap::pyOnlineProcessPitch::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineProcessPitch>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineProcessPitch* cpp = __pitch__functions_clifwrap::pyOnlineProcessPitch::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__pitch__functions_clifwrap::pyOnlineProcessPitch::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineProcessPitch>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineProcessPitch* cpp = __pitch__functions_clifwrap::pyOnlineProcessPitch::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__pitch__functions_clifwrap::pyOnlineProcessPitch::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineProcessPitch instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineProcessPitch* c) {
  assert(c != nullptr);
  ::kaldi::OnlineProcessPitch* cpp = __pitch__functions_clifwrap::pyOnlineProcessPitch::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::OnlineProcessPitch>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineProcessPitch* cpp = __pitch__functions_clifwrap::pyOnlineProcessPitch::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineProcessPitch* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__pitch__functions_clifwrap::pyOnlineProcessPitch::wrapper_Type, NULL, NULL);
  reinterpret_cast<__pitch__functions_clifwrap::pyOnlineProcessPitch::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineProcessPitch>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineProcessPitch> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__pitch__functions_clifwrap::pyOnlineProcessPitch::wrapper_Type, NULL, NULL);
  reinterpret_cast<__pitch__functions_clifwrap::pyOnlineProcessPitch::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineProcessPitch>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineProcessPitch> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__pitch__functions_clifwrap::pyOnlineProcessPitch::wrapper_Type, NULL, NULL);
  reinterpret_cast<__pitch__functions_clifwrap::pyOnlineProcessPitch::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineProcessPitch>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::OnlineProcessPitch& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__pitch__functions_clifwrap::pyOnlineProcessPitch::wrapper_Type, NULL, NULL);
  reinterpret_cast<__pitch__functions_clifwrap::pyOnlineProcessPitch::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::OnlineProcessPitch>(c);
  return py;
}

// PitchExtractionOptions to/from ::kaldi::PitchExtractionOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::PitchExtractionOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::PitchExtractionOptions* cpp = __pitch__functions_clifwrap::pyPitchExtractionOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::PitchExtractionOptions>* c) {
  assert(c != nullptr);
  ::kaldi::PitchExtractionOptions* cpp = __pitch__functions_clifwrap::pyPitchExtractionOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__pitch__functions_clifwrap::pyPitchExtractionOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::PitchExtractionOptions>* c) {
  assert(c != nullptr);
  ::kaldi::PitchExtractionOptions* cpp = __pitch__functions_clifwrap::pyPitchExtractionOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__pitch__functions_clifwrap::pyPitchExtractionOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert PitchExtractionOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::PitchExtractionOptions* c) {
  assert(c != nullptr);
  ::kaldi::PitchExtractionOptions* cpp = __pitch__functions_clifwrap::pyPitchExtractionOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::PitchExtractionOptions>* c) {
  assert(c != nullptr);
  ::kaldi::PitchExtractionOptions* cpp = __pitch__functions_clifwrap::pyPitchExtractionOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::PitchExtractionOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__pitch__functions_clifwrap::pyPitchExtractionOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__pitch__functions_clifwrap::pyPitchExtractionOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PitchExtractionOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::PitchExtractionOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__pitch__functions_clifwrap::pyPitchExtractionOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__pitch__functions_clifwrap::pyPitchExtractionOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PitchExtractionOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::PitchExtractionOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__pitch__functions_clifwrap::pyPitchExtractionOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__pitch__functions_clifwrap::pyPitchExtractionOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::PitchExtractionOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::PitchExtractionOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__pitch__functions_clifwrap::pyPitchExtractionOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__pitch__functions_clifwrap::pyPitchExtractionOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::PitchExtractionOptions>(c);
  return py;
}

// ProcessPitchOptions to/from ::kaldi::ProcessPitchOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::ProcessPitchOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::ProcessPitchOptions* cpp = __pitch__functions_clifwrap::pyProcessPitchOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::ProcessPitchOptions>* c) {
  assert(c != nullptr);
  ::kaldi::ProcessPitchOptions* cpp = __pitch__functions_clifwrap::pyProcessPitchOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__pitch__functions_clifwrap::pyProcessPitchOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::ProcessPitchOptions>* c) {
  assert(c != nullptr);
  ::kaldi::ProcessPitchOptions* cpp = __pitch__functions_clifwrap::pyProcessPitchOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__pitch__functions_clifwrap::pyProcessPitchOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ProcessPitchOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::ProcessPitchOptions* c) {
  assert(c != nullptr);
  ::kaldi::ProcessPitchOptions* cpp = __pitch__functions_clifwrap::pyProcessPitchOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::ProcessPitchOptions>* c) {
  assert(c != nullptr);
  ::kaldi::ProcessPitchOptions* cpp = __pitch__functions_clifwrap::pyProcessPitchOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::ProcessPitchOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__pitch__functions_clifwrap::pyProcessPitchOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__pitch__functions_clifwrap::pyProcessPitchOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ProcessPitchOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::ProcessPitchOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__pitch__functions_clifwrap::pyProcessPitchOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__pitch__functions_clifwrap::pyProcessPitchOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ProcessPitchOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::ProcessPitchOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__pitch__functions_clifwrap::pyProcessPitchOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__pitch__functions_clifwrap::pyProcessPitchOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ProcessPitchOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::ProcessPitchOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__pitch__functions_clifwrap::pyProcessPitchOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__pitch__functions_clifwrap::pyProcessPitchOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::ProcessPitchOptions>(c);
  return py;
}

}  // namespace kaldi
