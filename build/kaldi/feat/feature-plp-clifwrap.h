//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/feat/feature-plp.clif

#include <memory>
#include "clif/python/optional.h"
#include "feat/feature-plp.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::OfflineFeatureTpl< ::kaldi::PlpComputer>` as Plp
bool Clif_PyObjAs(PyObject* input, ::kaldi::OfflineFeatureTpl< ::kaldi::PlpComputer>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OfflineFeatureTpl< ::kaldi::PlpComputer>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OfflineFeatureTpl< ::kaldi::PlpComputer>>* output);
PyObject* Clif_PyObjFrom(::kaldi::OfflineFeatureTpl< ::kaldi::PlpComputer>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OfflineFeatureTpl< ::kaldi::PlpComputer>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OfflineFeatureTpl< ::kaldi::PlpComputer>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OfflineFeatureTpl< ::kaldi::PlpComputer>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::OfflineFeatureTpl< ::kaldi::PlpComputer>&, py::PostConv) = delete;
// CLIF use `::kaldi::PlpComputer` as PlpComputer
bool Clif_PyObjAs(PyObject* input, ::kaldi::PlpComputer** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::PlpComputer>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::PlpComputer>* output);
PyObject* Clif_PyObjFrom(::kaldi::PlpComputer*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::PlpComputer>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::PlpComputer>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::PlpComputer*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::PlpComputer&, py::PostConv) = delete;
// CLIF use `::kaldi::PlpOptions` as PlpOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::PlpOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::PlpOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::PlpOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::PlpOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::PlpOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::PlpOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::PlpOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::PlpOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::PlpOptions&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_feature_plp")) Py_DECREF(m);
// CLIF init_module else goto err;
