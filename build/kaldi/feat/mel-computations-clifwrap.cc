//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/feat/mel-computations.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "feat/feature-window-clifwrap.h"
#include "mel-computations-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __mel__computations_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyMelBanksOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::MelBanksOptions> cpp;
};
static ::kaldi::MelBanksOptions* ThisPtr(PyObject*);

static PyObject* get_num_bins(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->num_bins, {});
}

static int set_num_bins(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the num_bins attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->num_bins)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for num_bins:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_low_freq(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->low_freq, {});
}

static int set_low_freq(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the low_freq attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->low_freq)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for low_freq:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_high_freq(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->high_freq, {});
}

static int set_high_freq(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the high_freq attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->high_freq)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for high_freq:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_vtln_low(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->vtln_low, {});
}

static int set_vtln_low(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the vtln_low attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->vtln_low)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for vtln_low:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_vtln_high(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->vtln_high, {});
}

static int set_vtln_high(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the vtln_high attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->vtln_high)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for vtln_high:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_debug_mel(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->debug_mel, {});
}

static int set_debug_mel(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the debug_mel attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->debug_mel)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for debug_mel:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_htk_mode(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->htk_mode, {});
}

static int set_htk_mode(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the htk_mode attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->htk_mode)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for htk_mode:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// __init__(num_bins:int=default)
static PyObject* wrapMelBanksOptions_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("num_bins"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:__init__", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  int arg1;
  if (nargs > 0) {
    if (!a[0]) arg1 = (int)25;
    else if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "int", a[0]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::MelBanksOptions>(); break;
  case 1:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::MelBanksOptions>(std::move(arg1)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("num_bins"), get_num_bins, set_num_bins, C("C++ ::int32 MelBanksOptions.num_bins")},
  {C("low_freq"), get_low_freq, set_low_freq, C("C++ ::kaldi::BaseFloat MelBanksOptions.low_freq")},
  {C("high_freq"), get_high_freq, set_high_freq, C("C++ ::kaldi::BaseFloat MelBanksOptions.high_freq")},
  {C("vtln_low"), get_vtln_low, set_vtln_low, C("C++ ::kaldi::BaseFloat MelBanksOptions.vtln_low")},
  {C("vtln_high"), get_vtln_high, set_vtln_high, C("C++ ::kaldi::BaseFloat MelBanksOptions.vtln_high")},
  {C("debug_mel"), get_debug_mel, set_debug_mel, C("C++ bool MelBanksOptions.debug_mel")},
  {C("htk_mode"), get_htk_mode, set_htk_mode, C("C++ bool MelBanksOptions.htk_mode")},
  {}
};

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapMelBanksOptions_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(num_bins:int=default)\n  Calls C++ function\n  void ::kaldi::MelBanksOptions::MelBanksOptions(int)")},
  {}
};

// MelBanksOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// MelBanksOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// MelBanksOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_mel_computations.MelBanksOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::MelBanksOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapMelBanksOptions_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::MelBanksOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_MelBanksOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::MelBanksOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::MelBanksOptions* c = static_cast<::kaldi::MelBanksOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::MelBanksOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyMelBanksOptions

namespace pyMelBanks {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::MelBanks> cpp;
};
static ::kaldi::MelBanks* ThisPtr(PyObject*);

// __init__(opts:MelBanksOptions, frame_opts:FrameExtractionOptions, vtln_warp_factor:float)
static PyObject* wrapMelBanks_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("opts"),
      C("frame_opts"),
      C("vtln_warp_factor"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:__init__", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::MelBanksOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::MelBanksOptions", a[0]);
  ::kaldi::FrameExtractionOptions* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::FrameExtractionOptions", a[1]);
  float arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "float", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::MelBanks>(*arg1, *arg2, std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// @classmethod from_other(other:MelBanks) -> MelBanks
static PyObject* wrapMelBanks_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::kaldi::MelBanks* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::kaldi::MelBanks", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::MelBanks> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::MelBanks>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod inverse_mel_scale(mel_freq:float) -> float
static PyObject* wrapInverseMelScale_as_inverse_mel_scale(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("mel_freq"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:inverse_mel_scale", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("inverse_mel_scale", names[0], "float", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::MelBanks::InverseMelScale(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod mel_scale(freq:float) -> float
static PyObject* wrapMelScale_as_mel_scale(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("freq"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:mel_scale", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("mel_scale", names[0], "float", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::MelBanks::MelScale(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod vtln_warp_freq(vtln_low_cutoff:float, vtln_high_cutoff:float, low_freq:float, high_freq:float, vtln_warp_factor:float, freq:float) -> float
static PyObject* wrapVtlnWarpFreq_as_vtln_warp_freq(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[6];
  char* names[] = {
      C("vtln_low_cutoff"),
      C("vtln_high_cutoff"),
      C("low_freq"),
      C("high_freq"),
      C("vtln_warp_factor"),
      C("freq"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOOO:vtln_warp_freq", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("vtln_warp_freq", names[0], "float", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("vtln_warp_freq", names[1], "float", a[1]);
  float arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("vtln_warp_freq", names[2], "float", a[2]);
  float arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("vtln_warp_freq", names[3], "float", a[3]);
  float arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("vtln_warp_freq", names[4], "float", a[4]);
  float arg6;
  if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("vtln_warp_freq", names[5], "float", a[5]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::MelBanks::VtlnWarpFreq(std::move(arg1), std::move(arg2), std::move(arg3), std::move(arg4), std::move(arg5), std::move(arg6));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod vtln_warp_mel_freq(vtln_low_cutoff:float, vtln_high_cutoff:float, low_freq:float, high_freq:float, vtln_warp_factor:float, mel_freq:float) -> float
static PyObject* wrapVtlnWarpMelFreq_as_vtln_warp_mel_freq(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[6];
  char* names[] = {
      C("vtln_low_cutoff"),
      C("vtln_high_cutoff"),
      C("low_freq"),
      C("high_freq"),
      C("vtln_warp_factor"),
      C("mel_freq"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOOO:vtln_warp_mel_freq", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("vtln_warp_mel_freq", names[0], "float", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("vtln_warp_mel_freq", names[1], "float", a[1]);
  float arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("vtln_warp_mel_freq", names[2], "float", a[2]);
  float arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("vtln_warp_mel_freq", names[3], "float", a[3]);
  float arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("vtln_warp_mel_freq", names[4], "float", a[4]);
  float arg6;
  if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("vtln_warp_mel_freq", names[5], "float", a[5]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::MelBanks::VtlnWarpMelFreq(std::move(arg1), std::move(arg2), std::move(arg3), std::move(arg4), std::move(arg5), std::move(arg6));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// compute(fft_energies:VectorBase, mel_energies_out:VectorBase)
static PyObject* wrapCompute_as_compute(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("fft_energies"),
      C("mel_energies_out"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:compute", names, &a[0], &a[1])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute", names[0], "::kaldi::VectorBase<float>", a[0]);
  ::kaldi::VectorBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute", names[1], "::kaldi::VectorBase<float> *", a[1]);
  // Call actual C++ method.
  ::kaldi::MelBanks* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Compute(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// num_bins() -> int
static PyObject* wrapNumBins_as_num_bins(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::MelBanks* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumBins();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_center_freqs() -> Vector
static PyObject* wrapGetCenterFreqs_as_get_center_freqs(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::MelBanks* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::Vector<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetCenterFreqs();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapMelBanks_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(opts:MelBanksOptions, frame_opts:FrameExtractionOptions, vtln_warp_factor:float)\n  Calls C++ function\n  void ::kaldi::MelBanks::MelBanks(::kaldi::MelBanksOptions, ::kaldi::FrameExtractionOptions, float)")},
  {C("from_other"), (PyCFunction)wrapMelBanks_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(other:MelBanks) -> MelBanks\n  Calls C++ function\n  std::unique_ptr<::kaldi::MelBanks> ::kaldi::MelBanks::MelBanks(::kaldi::MelBanks)")},
  {C("inverse_mel_scale"), (PyCFunction)wrapInverseMelScale_as_inverse_mel_scale, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("inverse_mel_scale(mel_freq:float) -> float\n  Calls C++ function\n  float ::kaldi::MelBanks::InverseMelScale(float)")},
  {C("mel_scale"), (PyCFunction)wrapMelScale_as_mel_scale, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("mel_scale(freq:float) -> float\n  Calls C++ function\n  float ::kaldi::MelBanks::MelScale(float)")},
  {C("vtln_warp_freq"), (PyCFunction)wrapVtlnWarpFreq_as_vtln_warp_freq, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("vtln_warp_freq(vtln_low_cutoff:float, vtln_high_cutoff:float, low_freq:float, high_freq:float, vtln_warp_factor:float, freq:float) -> float\n  Calls C++ function\n  float ::kaldi::MelBanks::VtlnWarpFreq(float, float, float, float, float, float)")},
  {C("vtln_warp_mel_freq"), (PyCFunction)wrapVtlnWarpMelFreq_as_vtln_warp_mel_freq, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("vtln_warp_mel_freq(vtln_low_cutoff:float, vtln_high_cutoff:float, low_freq:float, high_freq:float, vtln_warp_factor:float, mel_freq:float) -> float\n  Calls C++ function\n  float ::kaldi::MelBanks::VtlnWarpMelFreq(float, float, float, float, float, float)")},
  {C("compute"), (PyCFunction)wrapCompute_as_compute, METH_VARARGS | METH_KEYWORDS, C("compute(fft_energies:VectorBase, mel_energies_out:VectorBase)\n  Calls C++ function\n  void ::kaldi::MelBanks::Compute(::kaldi::VectorBase<float>, ::kaldi::VectorBase<float> *)")},
  {C("num_bins"), (PyCFunction)wrapNumBins_as_num_bins, METH_NOARGS, C("num_bins() -> int\n  Calls C++ function\n  int ::kaldi::MelBanks::NumBins()")},
  {C("get_center_freqs"), (PyCFunction)wrapGetCenterFreqs_as_get_center_freqs, METH_NOARGS, C("get_center_freqs() -> Vector\n  Calls C++ function\n  ::kaldi::Vector<float> ::kaldi::MelBanks::GetCenterFreqs()")},
  {}
};

// MelBanks __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// MelBanks __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// MelBanks __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_mel_computations.MelBanks",        // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::MelBanks", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapMelBanks_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::MelBanks* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_MelBanks"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::MelBanks"));
      if (!PyErr_Occurred()) {
        ::kaldi::MelBanks* c = static_cast<::kaldi::MelBanks*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::MelBanks*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyMelBanks

// compute_lifter_coeffs(Q:float, coeffs:VectorBase)
static PyObject* wrapComputeLifterCoeffs_as_compute_lifter_coeffs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("Q"),
      C("coeffs"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:compute_lifter_coeffs", names, &a[0], &a[1])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_lifter_coeffs", names[0], "float", a[0]);
  ::kaldi::VectorBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute_lifter_coeffs", names[1], "::kaldi::VectorBase<float> *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::ComputeLifterCoeffs(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// compute_lpc(autocorr_in:VectorBase, lpc_out:Vector) -> float
static PyObject* wrapComputeLpc_as_compute_lpc(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("autocorr_in"),
      C("lpc_out"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:compute_lpc", names, &a[0], &a[1])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_lpc", names[0], "::kaldi::VectorBase<float>", a[0]);
  ::kaldi::Vector<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute_lpc", names[1], "::kaldi::Vector<float> *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::ComputeLpc(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_equal_loudness_vector(mel_banks:MelBanks, ans:Vector)
static PyObject* wrapGetEqualLoudnessVector_as_get_equal_loudness_vector(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("mel_banks"),
      C("ans"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_equal_loudness_vector", names, &a[0], &a[1])) return nullptr;
  ::kaldi::MelBanks* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_equal_loudness_vector", names[0], "::kaldi::MelBanks", a[0]);
  ::kaldi::Vector<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_equal_loudness_vector", names[1], "::kaldi::Vector<float> *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::GetEqualLoudnessVector(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("compute_lifter_coeffs"), (PyCFunction)wrapComputeLifterCoeffs_as_compute_lifter_coeffs, METH_VARARGS | METH_KEYWORDS, C("compute_lifter_coeffs(Q:float, coeffs:VectorBase)\n  Calls C++ function\n  void ::kaldi::ComputeLifterCoeffs(float, ::kaldi::VectorBase<float> *)")},
  {C("compute_lpc"), (PyCFunction)wrapComputeLpc_as_compute_lpc, METH_VARARGS | METH_KEYWORDS, C("compute_lpc(autocorr_in:VectorBase, lpc_out:Vector) -> float\n  Calls C++ function\n  float ::kaldi::ComputeLpc(::kaldi::VectorBase<float>, ::kaldi::Vector<float> *)")},
  {C("get_equal_loudness_vector"), (PyCFunction)wrapGetEqualLoudnessVector_as_get_equal_loudness_vector, METH_VARARGS | METH_KEYWORDS, C("get_equal_loudness_vector(mel_banks:MelBanks, ans:Vector)\n  Calls C++ function\n  void ::kaldi::GetEqualLoudnessVector(::kaldi::MelBanks, ::kaldi::Vector<float> *)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyMelBanksOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyMelBanksOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyMelBanks::wrapper_Type) < 0) return false;
  Py_INCREF(&pyMelBanks::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_mel_computations",  // module name
  "CLIF-generated module for feat/mel-computations.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_feature_window")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "MelBanksOptions", reinterpret_cast<PyObject*>(&pyMelBanksOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "MelBanks", reinterpret_cast<PyObject*>(&pyMelBanks::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __mel__computations_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// MelBanks to/from ::kaldi::MelBanks conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::MelBanks** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::MelBanks* cpp = __mel__computations_clifwrap::pyMelBanks::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::MelBanks>* c) {
  assert(c != nullptr);
  ::kaldi::MelBanks* cpp = __mel__computations_clifwrap::pyMelBanks::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__mel__computations_clifwrap::pyMelBanks::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::MelBanks>* c) {
  assert(c != nullptr);
  ::kaldi::MelBanks* cpp = __mel__computations_clifwrap::pyMelBanks::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__mel__computations_clifwrap::pyMelBanks::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert MelBanks instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::MelBanks* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mel__computations_clifwrap::pyMelBanks::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mel__computations_clifwrap::pyMelBanks::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MelBanks>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::MelBanks> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mel__computations_clifwrap::pyMelBanks::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mel__computations_clifwrap::pyMelBanks::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MelBanks>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::MelBanks> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mel__computations_clifwrap::pyMelBanks::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mel__computations_clifwrap::pyMelBanks::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MelBanks>(std::move(c));
  return py;
}

// MelBanksOptions to/from ::kaldi::MelBanksOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::MelBanksOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::MelBanksOptions* cpp = __mel__computations_clifwrap::pyMelBanksOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::MelBanksOptions>* c) {
  assert(c != nullptr);
  ::kaldi::MelBanksOptions* cpp = __mel__computations_clifwrap::pyMelBanksOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__mel__computations_clifwrap::pyMelBanksOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::MelBanksOptions>* c) {
  assert(c != nullptr);
  ::kaldi::MelBanksOptions* cpp = __mel__computations_clifwrap::pyMelBanksOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__mel__computations_clifwrap::pyMelBanksOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert MelBanksOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::MelBanksOptions* c) {
  assert(c != nullptr);
  ::kaldi::MelBanksOptions* cpp = __mel__computations_clifwrap::pyMelBanksOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::MelBanksOptions>* c) {
  assert(c != nullptr);
  ::kaldi::MelBanksOptions* cpp = __mel__computations_clifwrap::pyMelBanksOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::MelBanksOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mel__computations_clifwrap::pyMelBanksOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mel__computations_clifwrap::pyMelBanksOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MelBanksOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::MelBanksOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mel__computations_clifwrap::pyMelBanksOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mel__computations_clifwrap::pyMelBanksOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MelBanksOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::MelBanksOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mel__computations_clifwrap::pyMelBanksOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mel__computations_clifwrap::pyMelBanksOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MelBanksOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::MelBanksOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__mel__computations_clifwrap::pyMelBanksOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mel__computations_clifwrap::pyMelBanksOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::MelBanksOptions>(c);
  return py;
}

}  // namespace kaldi
