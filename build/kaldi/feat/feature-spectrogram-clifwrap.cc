//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/feat/feature-spectrogram.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "itf/options-itf-clifwrap.h"
#include "feat/feature-window-clifwrap.h"
#include "feature-spectrogram-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __feature__spectrogram_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pySpectrogramOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::SpectrogramOptions> cpp;
};
static ::kaldi::SpectrogramOptions* ThisPtr(PyObject*);

static PyObject* get_frame_opts(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->frame_opts), {});
}

static int set_frame_opts(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the frame_opts attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->frame_opts)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for frame_opts:FrameExtractionOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_energy_floor(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->energy_floor, {});
}

static int set_energy_floor(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the energy_floor attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->energy_floor)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for energy_floor:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_raw_energy(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->raw_energy, {});
}

static int set_raw_energy(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the raw_energy attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->raw_energy)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for raw_energy:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::SpectrogramOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("frame_opts"), get_frame_opts, set_frame_opts, C("C++ ::kaldi::FrameExtractionOptions SpectrogramOptions.frame_opts")},
  {C("energy_floor"), get_energy_floor, set_energy_floor, C("C++ ::kaldi::BaseFloat SpectrogramOptions.energy_floor")},
  {C("raw_energy"), get_raw_energy, set_raw_energy, C("C++ bool SpectrogramOptions.raw_energy")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::SpectrogramOptions::Register(::kaldi::OptionsItf *)")},
  {}
};

// SpectrogramOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// SpectrogramOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// SpectrogramOptions __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_feature_spectrogram.SpectrogramOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::SpectrogramOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "SpectrogramOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::SpectrogramOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::SpectrogramOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_SpectrogramOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::SpectrogramOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::SpectrogramOptions* c = static_cast<::kaldi::SpectrogramOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::SpectrogramOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pySpectrogramOptions

namespace pySpectrogramComputer {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::SpectrogramComputer> cpp;
};
static ::kaldi::SpectrogramComputer* ThisPtr(PyObject*);

// __init__(opts:SpectrogramOptions)
static PyObject* wrapSpectrogramComputer_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::kaldi::SpectrogramOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::SpectrogramOptions", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::SpectrogramComputer>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// @classmethod from_other(other:SpectrogramComputer) -> SpectrogramComputer
static PyObject* wrapSpectrogramComputer_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::kaldi::SpectrogramComputer* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::kaldi::SpectrogramComputer", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::SpectrogramComputer> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::SpectrogramComputer>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_frame_options() -> FrameExtractionOptions
static PyObject* wrapGetFrameOptions_as_get_frame_options(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SpectrogramComputer* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::FrameExtractionOptions ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetFrameOptions();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SpectrogramComputer* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// need_raw_log_energy() -> bool
static PyObject* wrapNeedRawLogEnergy_as_need_raw_log_energy(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SpectrogramComputer* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NeedRawLogEnergy();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// compute(signal_log_energy:float, vtln_warp:float, signal_frame:VectorBase, feature:VectorBase)
static PyObject* wrapCompute_as_compute(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("signal_log_energy"),
      C("vtln_warp"),
      C("signal_frame"),
      C("feature"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:compute", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute", names[0], "float", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute", names[1], "float", a[1]);
  ::kaldi::VectorBase<float> * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("compute", names[2], "::kaldi::VectorBase<float> *", a[2]);
  ::kaldi::VectorBase<float> * arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("compute", names[3], "::kaldi::VectorBase<float> *", a[3]);
  // Call actual C++ method.
  ::kaldi::SpectrogramComputer* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Compute(std::move(arg1), std::move(arg2), arg3, arg4);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapSpectrogramComputer_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(opts:SpectrogramOptions)\n  Calls C++ function\n  void ::kaldi::SpectrogramComputer::SpectrogramComputer(::kaldi::SpectrogramOptions)")},
  {C("from_other"), (PyCFunction)wrapSpectrogramComputer_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(other:SpectrogramComputer) -> SpectrogramComputer\n  Calls C++ function\n  std::unique_ptr<::kaldi::SpectrogramComputer> ::kaldi::SpectrogramComputer::SpectrogramComputer(::kaldi::SpectrogramComputer)")},
  {C("get_frame_options"), (PyCFunction)wrapGetFrameOptions_as_get_frame_options, METH_NOARGS, C("get_frame_options() -> FrameExtractionOptions\n  Calls C++ function\n  ::kaldi::FrameExtractionOptions ::kaldi::SpectrogramComputer::GetFrameOptions()")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::SpectrogramComputer::Dim()")},
  {C("need_raw_log_energy"), (PyCFunction)wrapNeedRawLogEnergy_as_need_raw_log_energy, METH_NOARGS, C("need_raw_log_energy() -> bool\n  Calls C++ function\n  bool ::kaldi::SpectrogramComputer::NeedRawLogEnergy()")},
  {C("compute"), (PyCFunction)wrapCompute_as_compute, METH_VARARGS | METH_KEYWORDS, C("compute(signal_log_energy:float, vtln_warp:float, signal_frame:VectorBase, feature:VectorBase)\n  Calls C++ function\n  void ::kaldi::SpectrogramComputer::Compute(float, float, ::kaldi::VectorBase<float> *, ::kaldi::VectorBase<float> *)")},
  {}
};

// SpectrogramComputer __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// SpectrogramComputer __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// SpectrogramComputer __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_feature_spectrogram.SpectrogramComputer", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::SpectrogramComputer", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapSpectrogramComputer_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::SpectrogramComputer* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_SpectrogramComputer"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::SpectrogramComputer"));
      if (!PyErr_Occurred()) {
        ::kaldi::SpectrogramComputer* c = static_cast<::kaldi::SpectrogramComputer*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::SpectrogramComputer*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pySpectrogramComputer

namespace pySpectrogram {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>> cpp;
};
static ::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>* ThisPtr(PyObject*);

// __init__(opts:SpectrogramOptions)
static PyObject* wrapSpectrogramComputer_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::kaldi::SpectrogramOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::SpectrogramOptions", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// @classmethod from_other(other:Spectrogram) -> Spectrogram
static PyObject* wrapOfflineFeatureTpl_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// compute(wave:VectorBase, vtnl_warp:float) -> Matrix
static PyObject* wrapCompute_as_compute(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("wave"),
      C("vtnl_warp"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:compute", names, &a[0], &a[1])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute", names[0], "::kaldi::VectorBase<float>", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute", names[1], "float", a[1]);
  ::kaldi::Matrix<float> ret0{};
  // Call actual C++ method.
  ::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Compute(*arg1, std::move(arg2), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.matrix._matrix_wrapper");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// compute_features(wave:VectorBase, sample_freq:float, vtnl_warp:float) -> Matrix
static PyObject* wrapComputeFeatures_as_compute_features(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("wave"),
      C("sample_freq"),
      C("vtnl_warp"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:compute_features", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_features", names[0], "::kaldi::VectorBase<float>", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute_features", names[1], "float", a[1]);
  float arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("compute_features", names[2], "float", a[2]);
  ::kaldi::Matrix<float> ret0{};
  // Call actual C++ method.
  ::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ComputeFeatures(*arg1, std::move(arg2), std::move(arg3), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.matrix._matrix_wrapper");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapSpectrogramComputer_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(opts:SpectrogramOptions)\n  Calls C++ function\n  void ::kaldi::OfflineFeatureTpl<kaldi::SpectrogramComputer>::OfflineFeatureTpl(::kaldi::SpectrogramOptions)")},
  {C("from_other"), (PyCFunction)wrapOfflineFeatureTpl_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(other:Spectrogram) -> Spectrogram\n  Calls C++ function\n  std::unique_ptr<::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>> ::kaldi::OfflineFeatureTpl<kaldi::SpectrogramComputer>::OfflineFeatureTpl(::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>)")},
  {C("compute"), (PyCFunction)wrapCompute_as_compute, METH_VARARGS | METH_KEYWORDS, C("compute(wave:VectorBase, vtnl_warp:float) -> Matrix\n  Calls C++ function\n  void ::kaldi::OfflineFeatureTpl<kaldi::SpectrogramComputer>::Compute(::kaldi::VectorBase<float>, float, ::kaldi::Matrix<float>*)")},
  {C("compute_features"), (PyCFunction)wrapComputeFeatures_as_compute_features, METH_VARARGS | METH_KEYWORDS, C("compute_features(wave:VectorBase, sample_freq:float, vtnl_warp:float) -> Matrix\n\nComputes the features for one file (one sequence of features).\n\nArgs:\n  wave (:class:`kaldi.matrix.VectorBase`): The input waveform\n  sample_freq (float): The sampling frequency with which wave is\n    sampled. If sample_freq is higher than the frequency specified in\n    the config, Kaldi will downsample the waveform\n  vtnl_warp (float): The VTNL wrapping factor (normally 1.0)\n\nReturns:\n  The matrix of features, where the row-index is the frame index")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::OfflineFeatureTpl<kaldi::SpectrogramComputer>::Dim()")},
  {}
};

// Spectrogram __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// Spectrogram __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// Spectrogram __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_feature_spectrogram.Spectrogram",  // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapSpectrogramComputer_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OfflineFeatureTpl__kaldi_SpectrogramComputer"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>"));
      if (!PyErr_Occurred()) {
        ::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>* c = static_cast<::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pySpectrogram


// Initialize module

bool Ready() {
  if (PyType_Ready(&pySpectrogramOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pySpectrogramOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pySpectrogramComputer::wrapper_Type) < 0) return false;
  Py_INCREF(&pySpectrogramComputer::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pySpectrogram::wrapper_Type) < 0) return false;
  Py_INCREF(&pySpectrogram::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_feature_spectrogram",  // module name
  "CLIF-generated module for feat/feature-spectrogram.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_feature_window")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "SpectrogramOptions", reinterpret_cast<PyObject*>(&pySpectrogramOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "SpectrogramComputer", reinterpret_cast<PyObject*>(&pySpectrogramComputer::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "Spectrogram", reinterpret_cast<PyObject*>(&pySpectrogram::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __feature__spectrogram_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// Spectrogram to/from ::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer> conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>* cpp = __feature__spectrogram_clifwrap::pySpectrogram::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>>* c) {
  assert(c != nullptr);
  ::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>* cpp = __feature__spectrogram_clifwrap::pySpectrogram::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__feature__spectrogram_clifwrap::pySpectrogram::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>>* c) {
  assert(c != nullptr);
  ::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>* cpp = __feature__spectrogram_clifwrap::pySpectrogram::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__feature__spectrogram_clifwrap::pySpectrogram::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert Spectrogram instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__spectrogram_clifwrap::pySpectrogram::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__spectrogram_clifwrap::pySpectrogram::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__spectrogram_clifwrap::pySpectrogram::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__spectrogram_clifwrap::pySpectrogram::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__spectrogram_clifwrap::pySpectrogram::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__spectrogram_clifwrap::pySpectrogram::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OfflineFeatureTpl< ::kaldi::SpectrogramComputer>>(std::move(c));
  return py;
}

// SpectrogramComputer to/from ::kaldi::SpectrogramComputer conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::SpectrogramComputer** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::SpectrogramComputer* cpp = __feature__spectrogram_clifwrap::pySpectrogramComputer::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::SpectrogramComputer>* c) {
  assert(c != nullptr);
  ::kaldi::SpectrogramComputer* cpp = __feature__spectrogram_clifwrap::pySpectrogramComputer::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__feature__spectrogram_clifwrap::pySpectrogramComputer::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::SpectrogramComputer>* c) {
  assert(c != nullptr);
  ::kaldi::SpectrogramComputer* cpp = __feature__spectrogram_clifwrap::pySpectrogramComputer::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__feature__spectrogram_clifwrap::pySpectrogramComputer::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert SpectrogramComputer instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::SpectrogramComputer* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__spectrogram_clifwrap::pySpectrogramComputer::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__spectrogram_clifwrap::pySpectrogramComputer::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::SpectrogramComputer>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SpectrogramComputer> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__spectrogram_clifwrap::pySpectrogramComputer::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__spectrogram_clifwrap::pySpectrogramComputer::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::SpectrogramComputer>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SpectrogramComputer> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__spectrogram_clifwrap::pySpectrogramComputer::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__spectrogram_clifwrap::pySpectrogramComputer::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::SpectrogramComputer>(std::move(c));
  return py;
}

// SpectrogramOptions to/from ::kaldi::SpectrogramOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::SpectrogramOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::SpectrogramOptions* cpp = __feature__spectrogram_clifwrap::pySpectrogramOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::SpectrogramOptions>* c) {
  assert(c != nullptr);
  ::kaldi::SpectrogramOptions* cpp = __feature__spectrogram_clifwrap::pySpectrogramOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__feature__spectrogram_clifwrap::pySpectrogramOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::SpectrogramOptions>* c) {
  assert(c != nullptr);
  ::kaldi::SpectrogramOptions* cpp = __feature__spectrogram_clifwrap::pySpectrogramOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__feature__spectrogram_clifwrap::pySpectrogramOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert SpectrogramOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::SpectrogramOptions* c) {
  assert(c != nullptr);
  ::kaldi::SpectrogramOptions* cpp = __feature__spectrogram_clifwrap::pySpectrogramOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::SpectrogramOptions>* c) {
  assert(c != nullptr);
  ::kaldi::SpectrogramOptions* cpp = __feature__spectrogram_clifwrap::pySpectrogramOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::SpectrogramOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__spectrogram_clifwrap::pySpectrogramOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__spectrogram_clifwrap::pySpectrogramOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::SpectrogramOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SpectrogramOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__spectrogram_clifwrap::pySpectrogramOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__spectrogram_clifwrap::pySpectrogramOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::SpectrogramOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SpectrogramOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__spectrogram_clifwrap::pySpectrogramOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__spectrogram_clifwrap::pySpectrogramOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::SpectrogramOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::SpectrogramOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__feature__spectrogram_clifwrap::pySpectrogramOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__spectrogram_clifwrap::pySpectrogramOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::SpectrogramOptions>(c);
  return py;
}

}  // namespace kaldi
