//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/feat/feature-fbank.clif

#include <memory>
#include "clif/python/optional.h"
#include "feat/feature-fbank.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::OfflineFeatureTpl< ::kaldi::FbankComputer>` as Fbank
bool Clif_PyObjAs(PyObject* input, ::kaldi::OfflineFeatureTpl< ::kaldi::FbankComputer>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OfflineFeatureTpl< ::kaldi::FbankComputer>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OfflineFeatureTpl< ::kaldi::FbankComputer>>* output);
PyObject* Clif_PyObjFrom(::kaldi::OfflineFeatureTpl< ::kaldi::FbankComputer>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OfflineFeatureTpl< ::kaldi::FbankComputer>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OfflineFeatureTpl< ::kaldi::FbankComputer>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OfflineFeatureTpl< ::kaldi::FbankComputer>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::OfflineFeatureTpl< ::kaldi::FbankComputer>&, py::PostConv) = delete;
// CLIF use `::kaldi::FbankComputer` as FbankComputer
bool Clif_PyObjAs(PyObject* input, ::kaldi::FbankComputer** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::FbankComputer>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::FbankComputer>* output);
PyObject* Clif_PyObjFrom(::kaldi::FbankComputer*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::FbankComputer>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::FbankComputer>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::FbankComputer*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::FbankComputer&, py::PostConv) = delete;
// CLIF use `::kaldi::FbankOptions` as FbankOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::FbankOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::FbankOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::FbankOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::FbankOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::FbankOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::FbankOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::FbankOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::FbankOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::FbankOptions&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_feature_fbank")) Py_DECREF(m);
// CLIF init_module else goto err;
