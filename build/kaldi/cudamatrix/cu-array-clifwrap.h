//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/cudamatrix/cu-array.clif

#include <memory>
#include "clif/python/optional.h"
#include "cudamatrix/cu-array.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::CuArray<int>` as CuArray
bool Clif_PyObjAs(PyObject* input, ::kaldi::CuArray<int>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::CuArray<int>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::CuArray<int>>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::CuArray<int>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::CuArray<int>>* output);
PyObject* Clif_PyObjFrom(::kaldi::CuArray<int>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::CuArray<int>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::CuArray<int>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::CuArray<int>&, py::PostConv);
// CLIF use `::kaldi::CuArray<double *>` as CuDoublePtrArray
bool Clif_PyObjAs(PyObject* input, ::kaldi::CuArray<double *>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::CuArray<double *>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::CuArray<double *>>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::CuArray<double *>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::CuArray<double *>>* output);
PyObject* Clif_PyObjFrom(::kaldi::CuArray<double *>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::CuArray<double *>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::CuArray<double *>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::CuArray<double *>&, py::PostConv);
// CLIF use `::kaldi::CuArray<float *>` as CuFloatPtrArray
bool Clif_PyObjAs(PyObject* input, ::kaldi::CuArray<float *>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::CuArray<float *>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::CuArray<float *>>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::CuArray<float *>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::CuArray<float *>>* output);
PyObject* Clif_PyObjFrom(::kaldi::CuArray<float *>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::CuArray<float *>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::CuArray<float *>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::CuArray<float *>&, py::PostConv);
// CLIF use `::kaldi::CuArray< ::Int32Pair>` as CuIntPairArray
bool Clif_PyObjAs(PyObject* input, ::kaldi::CuArray< ::Int32Pair>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::CuArray< ::Int32Pair>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::CuArray< ::Int32Pair>>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::CuArray< ::Int32Pair>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::CuArray< ::Int32Pair>>* output);
PyObject* Clif_PyObjFrom(::kaldi::CuArray< ::Int32Pair>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::CuArray< ::Int32Pair>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::CuArray< ::Int32Pair>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::CuArray< ::Int32Pair>&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_cu_array")) Py_DECREF(m);
// CLIF init_module else goto err;
