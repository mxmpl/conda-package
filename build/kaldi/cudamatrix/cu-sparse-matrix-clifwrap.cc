//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/cudamatrix/cu-sparse-matrix.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "matrix/matrix-common-clifwrap.h"
#include "matrix/sparse-matrix-clifwrap.h"
#include "cudamatrix/cu-matrixdim-clifwrap.h"
#include "cudamatrix/cu-array-clifwrap.h"
#include "cudamatrix/cu-vector-clifwrap.h"
#include "cudamatrix/cu-matrix-clifwrap.h"
#include "cu-sparse-matrix-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __cu__sparse__matrix_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyCuSparseMatrix {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::CuSparseMatrix<float>> cpp;
};
static ::kaldi::CuSparseMatrix<float>* ThisPtr(PyObject*);

// __len__() -> int
static PyObject* wrapNumRows_as___len__(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuSparseMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumRows();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyObject* get_num_rows(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->NumRows(), {});
}

static PyObject* get_num_cols(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->NumCols(), {});
}

// num_elements() -> int
static PyObject* wrapNumElements_as_num_elements(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuSparseMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumElements();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// sum() -> float
static PyObject* wrapSum_as_sum(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuSparseMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Sum();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// frobenius_norm() -> float
static PyObject* wrapFrobeniusNorm_as_frobenius_norm(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuSparseMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FrobeniusNorm();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// copy_to_mat(dest:CuMatrixBase, trans:MatrixTransposeType=default)
static PyObject* wrapCopyToMat_as_copy_to_mat(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("dest"),
      C("trans"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:copy_to_mat", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::CuMatrixBase<float> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_to_mat", names[0], "::kaldi::CuMatrixBase<float> *", a[0]);
  ::kaldi::MatrixTransposeType arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("copy_to_mat", names[1], "::kaldi::MatrixTransposeType", a[1]);
  }
  // Call actual C++ method.
  ::kaldi::CuSparseMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    c->CopyToMat(arg1); break;
  case 2:
    c->CopyToMat(arg1, std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// copy_elements_to_vec(vec:CuVectorBase)
static PyObject* wrapCopyElementsToVec_as_copy_elements_to_vec(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("vec"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:copy_elements_to_vec", names, &a[0])) return nullptr;
  ::kaldi::CuVectorBase<float> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_elements_to_vec", names[0], "::kaldi::CuVectorBase<float> *", a[0]);
  // Call actual C++ method.
  ::kaldi::CuSparseMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CopyElementsToVec(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// copy_from_smat_(smat:CuSparseMatrix, trans:MatrixTransposeType=default)
static PyObject* wrapCopyFromSmat_as_copy_from_smat_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("smat"),
      C("trans"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:copy_from_smat_", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::CuSparseMatrix<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_from_smat_", names[0], "::kaldi::CuSparseMatrix<float>", a[0]);
  ::kaldi::MatrixTransposeType arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("copy_from_smat_", names[1], "::kaldi::MatrixTransposeType", a[1]);
  }
  // Call actual C++ method.
  ::kaldi::CuSparseMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    c->CopyFromSmat(*arg1); break;
  case 2:
    c->CopyFromSmat(*arg1, std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// select_rows_(row_indexes:CuArray, smat_other:CuSparseMatrix)
static PyObject* wrapSelectRows_as_select_rows_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("row_indexes"),
      C("smat_other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:select_rows_", names, &a[0], &a[1])) return nullptr;
  ::kaldi::CuArray<int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("select_rows_", names[0], "::kaldi::CuArray<int>", a[0]);
  ::kaldi::CuSparseMatrix<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("select_rows_", names[1], "::kaldi::CuSparseMatrix<float>", a[1]);
  // Call actual C++ method.
  ::kaldi::CuSparseMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SelectRows(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// copy_to_smat(smat:SparseMatrix)
static PyObject* wrapCopyToSmat_as_copy_to_smat(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("smat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:copy_to_smat", names, &a[0])) return nullptr;
  ::kaldi::SparseMatrix<float> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_to_smat", names[0], "::kaldi::SparseMatrix<float> *", a[0]);
  // Call actual C++ method.
  ::kaldi::CuSparseMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CopyToSmat(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// swap_with_cpu_(other:SparseMatrix)
static PyObject* wrapSwap_as_swap_with_cpu_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:swap_with_cpu_", names, &a[0])) return nullptr;
  ::kaldi::SparseMatrix<float> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("swap_with_cpu_", names[0], "::kaldi::SparseMatrix<float> *", a[0]);
  // Call actual C++ method.
  ::kaldi::CuSparseMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Swap(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// swap_(other:CuSparseMatrix)
static PyObject* wrapSwap_as_swap_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:swap_", names, &a[0])) return nullptr;
  ::kaldi::CuSparseMatrix<float> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("swap_", names[0], "::kaldi::CuSparseMatrix<float> *", a[0]);
  // Call actual C++ method.
  ::kaldi::CuSparseMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Swap(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// @classmethod from_cpu(smat:SparseMatrix) -> CuSparseMatrix
static PyObject* wrapCuSparseMatrix_as_from_cpu(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("smat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_cpu", names, &a[0])) return nullptr;
  ::kaldi::SparseMatrix<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_cpu", names[0], "::kaldi::SparseMatrix<float>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::CuSparseMatrix<float>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::CuSparseMatrix<float>>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_other(smat:CuSparseMatrix, trans:MatrixTransposeType=default) -> CuSparseMatrix
static PyObject* wrapCuSparseMatrix_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("smat"),
      C("trans"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:from_other", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::CuSparseMatrix<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::kaldi::CuSparseMatrix<float>", a[0]);
  ::kaldi::MatrixTransposeType arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_other", names[1], "::kaldi::MatrixTransposeType", a[1]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::CuSparseMatrix<float>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    ret0 = ::gtl::MakeUnique<::kaldi::CuSparseMatrix<float>>(*arg1); break;
  case 2:
    ret0 = ::gtl::MakeUnique<::kaldi::CuSparseMatrix<float>>(*arg1, std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_indexes(indexes:CuArray, dim:int, trans:MatrixTransposeType=default) -> CuSparseMatrix
static PyObject* wrapCuSparseMatrix_as_from_indexes(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("indexes"),
      C("dim"),
      C("trans"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:from_indexes", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::CuArray<int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_indexes", names[0], "::kaldi::CuArray<int>", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_indexes", names[1], "int", a[1]);
  ::kaldi::MatrixTransposeType arg3;
  if (nargs > 2) {
    if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("from_indexes", names[2], "::kaldi::MatrixTransposeType", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::CuSparseMatrix<float>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ret0 = ::gtl::MakeUnique<::kaldi::CuSparseMatrix<float>>(*arg1, std::move(arg2)); break;
  case 3:
    ret0 = ::gtl::MakeUnique<::kaldi::CuSparseMatrix<float>>(*arg1, std::move(arg2), std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_indexes_and_weights(indexes:CuArray, weights:CuVectorBase, dim:int, trans:MatrixTransposeType=default) -> CuSparseMatrix
static PyObject* wrapCuSparseMatrix_as_from_indexes_and_weights(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[4]{};
  char* names[] = {
      C("indexes"),
      C("weights"),
      C("dim"),
      C("trans"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO|O:from_indexes_and_weights", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 4; nargs > 3; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::CuArray<int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_indexes_and_weights", names[0], "::kaldi::CuArray<int>", a[0]);
  ::kaldi::CuVectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_indexes_and_weights", names[1], "::kaldi::CuVectorBase<float>", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("from_indexes_and_weights", names[2], "int", a[2]);
  ::kaldi::MatrixTransposeType arg4;
  if (nargs > 3) {
    if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("from_indexes_and_weights", names[3], "::kaldi::MatrixTransposeType", a[3]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::CuSparseMatrix<float>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 3:
    ret0 = ::gtl::MakeUnique<::kaldi::CuSparseMatrix<float>>(*arg1, *arg2, std::move(arg3)); break;
  case 4:
    ret0 = ::gtl::MakeUnique<::kaldi::CuSparseMatrix<float>>(*arg1, *arg2, std::move(arg3), std::move(arg4)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// set_randn_(zero_prob:float)
static PyObject* wrapSetRandn_as_set_randn_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("zero_prob"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_randn_", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_randn_", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::CuSparseMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetRandn(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::CuSparseMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read_(is:istream, binary:bool)
static PyObject* wrapRead_as_read_(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read_", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read_", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read_", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::CuSparseMatrix<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

static PyGetSetDef Properties[] = {
  {C("num_rows"), get_num_rows, nullptr, C("Number of rows (zero for empty matrix).")},
  {C("num_cols"), get_num_cols, nullptr, C("Number of columns (zero for empty matrix).")},
  {}
};

PySequenceMethods AsSequence = {
  slot::adapter<Py_ssize_t, slot::as_size, wrapNumRows_as___len__>, // sq_length
  nullptr,                             // sq_concat
  nullptr,                             // sq_repeat
  nullptr,                             // sq_item
  nullptr,                             // was_sq_slice
  nullptr,                             // sq_ass_item
  nullptr,                             // was_sq_ass_slice
  nullptr,                             // sq_contains
  nullptr,                             // sq_inplace_concat
  nullptr,                             // sq_inplace_repeat
};

PyMappingMethods AsMapping = {
  slot::adapter<Py_ssize_t, slot::as_size, wrapNumRows_as___len__>, // mp_length
  nullptr,                             // mp_subscript
  nullptr,                             // mp_ass_subscript
};

static PyMethodDef Methods[] = {
  {C("num_elements"), (PyCFunction)wrapNumElements_as_num_elements, METH_NOARGS, C("num_elements() -> int\n\nReturns the number of nonzero elements.")},
  {C("sum"), (PyCFunction)wrapSum_as_sum, METH_NOARGS, C("sum() -> float\n\nReturns the sum of the elememts.")},
  {C("frobenius_norm"), (PyCFunction)wrapFrobeniusNorm_as_frobenius_norm, METH_NOARGS, C("frobenius_norm() -> float\n\nComputes and returns the Frobenius norm.")},
  {C("copy_to_mat"), (PyCFunction)wrapCopyToMat_as_copy_to_mat, METH_VARARGS | METH_KEYWORDS, C("copy_to_mat(dest:CuMatrixBase, trans:MatrixTransposeType=default)\n\nCopies elements to a CUDA matrix.\n\nArgs:\n    dest (CuMatrixBase): The matrix to copy to.\n    trans (MatrixTransposeType): transpose or not.")},
  {C("copy_elements_to_vec"), (PyCFunction)wrapCopyElementsToVec_as_copy_elements_to_vec, METH_VARARGS | METH_KEYWORDS, C("copy_elements_to_vec(vec:CuVectorBase)\n\nCopies the nonzero elements of the matrix to the vector other.\n\nArgs:\n    vec (CuVectorBase): A CUDA vector to store the nonzero elements of self\n\nRaises:\n    Error if the size of other is different than the number of nonzero\n    elements of self")},
  {C("copy_from_smat_"), (PyCFunction)wrapCopyFromSmat_as_copy_from_smat_, METH_VARARGS | METH_KEYWORDS, C("copy_from_smat_(smat:CuSparseMatrix, trans:MatrixTransposeType=default)\n\nCopy data from another sparse CUDA matrix. Will resize if necessary.\n\nArgs:\n    smat (CuSparseMatrix): The sparse CUDA matrix to copy from.\n    trans (MatrixTransposeType): transpose or not")},
  {C("select_rows_"), (PyCFunction)wrapSelectRows_as_select_rows_, METH_VARARGS | METH_KEYWORDS, C("select_rows_(row_indexes:CuArray, smat_other:CuSparseMatrix)\n\nSets self to a subset of the rows of another sparse CUDA matrix.\n\nArgs:\n    row_indexes (CuArray): The rows to select.\n    smat_other (CuSparseMatrix): The other sparse CUDA matrix.")},
  {C("copy_to_smat"), (PyCFunction)wrapCopyToSmat_as_copy_to_smat, METH_VARARGS | METH_KEYWORDS, C("copy_to_smat(smat:SparseMatrix)\n\nCopy data to a sparse matrix.\n\nArgs:\n    smat(SparseMatrix): The sparse matrix to copy to.")},
  {C("swap_with_cpu_"), (PyCFunction)wrapSwap_as_swap_with_cpu_, METH_VARARGS | METH_KEYWORDS, C("swap_with_cpu_(other:SparseMatrix)\n\nSwaps the contents with a sparse matrix.\n\nShallow swap.")},
  {C("swap_"), (PyCFunction)wrapSwap_as_swap_, METH_VARARGS | METH_KEYWORDS, C("swap_(other:CuSparseMatrix)\n\nSwaps the contents with another sparse CUDA matrix.\n\nShallow swap.")},
  {C("from_cpu"), (PyCFunction)wrapCuSparseMatrix_as_from_cpu, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_cpu(smat:SparseMatrix) -> CuSparseMatrix\n\nInitialization by copying the elements of a sparse matrix.\n\nArgs:\n    smat(SparseMatrix): A sparse matrix.")},
  {C("from_other"), (PyCFunction)wrapCuSparseMatrix_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(smat:CuSparseMatrix, trans:MatrixTransposeType=default) -> CuSparseMatrix\n\nInitialization by copying the elements of another sparse CUDA matrix.\n\nArgs:\n    smat (CuSparseMatrix): A sparse CUDA matrix\n    trans (MatrixTransposeType): transpose or not")},
  {C("from_indexes"), (PyCFunction)wrapCuSparseMatrix_as_from_indexes, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_indexes(indexes:CuArray, dim:int, trans:MatrixTransposeType=default) -> CuSparseMatrix\n\nInitialization from an array of indexes.\n\nIf trans == NO_TRANS, construct a sparse matrix with num-rows ==\nindexes.Dim() and num-cols = 'dim'. 'indexes' is expected to contain\nelements in the range [0, dim - 1]. Each row 'i' of self after\ncalling the constructor will contain  a single element at column-index\nindexes[i] with value 1.0.\n\nIf trans == TRANS, the result will be the transpose of the sparse\nmatrix described above.\n\nArgs:\n    indexes (CuArray): The CUDA array of indexes.\n    dim (int): The column (or row) dimension.\n    trans (MatrixTransposeType): Transpose or not.")},
  {C("from_indexes_and_weights"), (PyCFunction)wrapCuSparseMatrix_as_from_indexes_and_weights, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_indexes_and_weights(indexes:CuArray, weights:CuVectorBase, dim:int, trans:MatrixTransposeType=default) -> CuSparseMatrix\n\nInitialization from an array of indexes and an array of weights.\n\nRequires indexes.Dim() == weights.Dim(). If trans == NO_TRANS,\nconstruct a sparse matrix with num-rows == indexes.Dim() and num-cols =\n'dim'. 'indexes' is expected to contain elements in the range [0, dim -\n1].  Each row 'i' of *this after calling the constructor will contain a\nsingle element at column-index indexes[i] with value weights[i]. If\ntrans == TRANS, the result will be the transpose of the sparse matrix\ndescribed above.\n\nArgs:\n    indexes (CuArray): The CUDA array of indexes.\n    weights (CuVectorBase): The CUDA vector of weights.\n    dim (int): The column (or row) dimension.\n    trans (MatrixTransposeType): Transpose or not.")},
  {C("set_randn_"), (PyCFunction)wrapSetRandn_as_set_randn_, METH_VARARGS | METH_KEYWORDS, C("set_randn_(zero_prob:float)\n\nSets up to a pseudo-randomly initialized matrix,\nwith each element zero with probability zero_prob\nand else normally distributed.")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n\nWrites to C++ stream.\n\nArgs:\n    os(ostream): The output straem.\n    binary(bool): If the stream is binary.")},
  {C("read_"), (PyCFunction)wrapRead_as_read_, METH_VARARGS | METH_KEYWORDS, C("read_(is:istream, binary:bool)\n\nReads from C++ stream.\n\nArgs:\n    is(istream): The input straem.\n    binary(bool): If the stream is binary.")},
  {}
};

// CuSparseMatrix __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// CuSparseMatrix __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// CuSparseMatrix __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_cu_sparse_matrix.CuSparseMatrix",  // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  &AsSequence,                         // tp_as_sequence
  &AsMapping,                          // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "This class defines a Sparse CUDA Matrix.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "CuSparseMatrix takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::CuSparseMatrix<float>>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::CuSparseMatrix<float>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_CuSparseMatrix_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::CuSparseMatrix<float>"));
      if (!PyErr_Occurred()) {
        ::kaldi::CuSparseMatrix<float>* c = static_cast<::kaldi::CuSparseMatrix<float>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::CuSparseMatrix<float>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyCuSparseMatrix

// trace_mat_smat(A:CuMatrixBase, B:CuSparseMatrix, trans:MatrixTransposeType=default) -> float
static PyObject* wrapTraceMatSmat_as_trace_mat_smat(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("A"),
      C("B"),
      C("trans"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:trace_mat_smat", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::CuMatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("trace_mat_smat", names[0], "::kaldi::CuMatrixBase<float>", a[0]);
  ::kaldi::CuSparseMatrix<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("trace_mat_smat", names[1], "::kaldi::CuSparseMatrix<float>", a[1]);
  ::kaldi::MatrixTransposeType arg3;
  if (nargs > 2) {
    if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("trace_mat_smat", names[2], "::kaldi::MatrixTransposeType", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ret0 = ::kaldi::TraceMatSmat(*arg1, *arg2); break;
  case 3:
    ret0 = ::kaldi::TraceMatSmat(*arg1, *arg2, std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("trace_mat_smat"), (PyCFunction)wrapTraceMatSmat_as_trace_mat_smat, METH_VARARGS | METH_KEYWORDS, C("trace_mat_smat(A:CuMatrixBase, B:CuSparseMatrix, trans:MatrixTransposeType=default) -> float\n\nIf trans==kNoTrans compute Trace(A*B). If trans==kTrans compute Trace(A^T*B)\n\nArgs:\n    A(CuMatrix): A CUDA matrix\n    B(CuSparseMatrix): A sparse CUDA matrix\n    trans(MatrixTransposeType): Determines if we use A as is or its transpose\n\nRaises:\n    Error in case of dimensionality mismatch")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyCuSparseMatrix::wrapper_Type) < 0) return false;
  Py_INCREF(&pyCuSparseMatrix::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_cu_sparse_matrix",  // module name
  "CLIF-generated module for cudamatrix/cu-sparse-matrix.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_matrix_common")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_sparse_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_cu_matrixdim")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_cu_array")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_cu_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_cu_matrix")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "CuSparseMatrix", reinterpret_cast<PyObject*>(&pyCuSparseMatrix::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __cu__sparse__matrix_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// CuSparseMatrix to/from ::kaldi::CuSparseMatrix<float> conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::CuSparseMatrix<float>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::CuSparseMatrix<float>* cpp = __cu__sparse__matrix_clifwrap::pyCuSparseMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::CuSparseMatrix<float>>* c) {
  assert(c != nullptr);
  ::kaldi::CuSparseMatrix<float>* cpp = __cu__sparse__matrix_clifwrap::pyCuSparseMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__cu__sparse__matrix_clifwrap::pyCuSparseMatrix::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::CuSparseMatrix<float>>* c) {
  assert(c != nullptr);
  ::kaldi::CuSparseMatrix<float>* cpp = __cu__sparse__matrix_clifwrap::pyCuSparseMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__cu__sparse__matrix_clifwrap::pyCuSparseMatrix::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert CuSparseMatrix instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::CuSparseMatrix<float>* c) {
  assert(c != nullptr);
  ::kaldi::CuSparseMatrix<float>* cpp = __cu__sparse__matrix_clifwrap::pyCuSparseMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::CuSparseMatrix<float>>* c) {
  assert(c != nullptr);
  ::kaldi::CuSparseMatrix<float>* cpp = __cu__sparse__matrix_clifwrap::pyCuSparseMatrix::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::CuSparseMatrix<float>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cu__sparse__matrix_clifwrap::pyCuSparseMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__sparse__matrix_clifwrap::pyCuSparseMatrix::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CuSparseMatrix<float>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::CuSparseMatrix<float>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cu__sparse__matrix_clifwrap::pyCuSparseMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__sparse__matrix_clifwrap::pyCuSparseMatrix::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CuSparseMatrix<float>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::CuSparseMatrix<float>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cu__sparse__matrix_clifwrap::pyCuSparseMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__sparse__matrix_clifwrap::pyCuSparseMatrix::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CuSparseMatrix<float>>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::CuSparseMatrix<float>& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__cu__sparse__matrix_clifwrap::pyCuSparseMatrix::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__sparse__matrix_clifwrap::pyCuSparseMatrix::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::CuSparseMatrix<float>>(c);
  return py;
}

}  // namespace kaldi
