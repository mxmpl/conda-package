//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/cudamatrix/cu-vector.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "matrix/matrix-common-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "cu-vector-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __cu__vector_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyCuVectorBase {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::CuVectorBase<float>> cpp;
};
static ::kaldi::CuVectorBase<float>* ThisPtr(PyObject*);

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __len__() -> int
static PyObject* wrapDim_as___len__(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// copy_from_cu_vec(src:CuVectorBase)
static PyObject* wrapCopyFromVec_as_copy_from_cu_vec(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("src"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:copy_from_cu_vec", names, &a[0])) return nullptr;
  ::kaldi::CuVectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_from_cu_vec", names[0], "::kaldi::CuVectorBase<float>", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CopyFromVec(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// copy_from_vec(src:VectorBase)
static PyObject* wrapCopyFromVec_as_copy_from_vec(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("src"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:copy_from_vec", names, &a[0])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_from_vec", names[0], "::kaldi::VectorBase<float>", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CopyFromVec(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// copy_to_vec(dst:VectorBase)
static PyObject* wrapCopyToVec_as_copy_to_vec(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("dst"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:copy_to_vec", names, &a[0])) return nullptr;
  ::kaldi::VectorBase<float> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_to_vec", names[0], "::kaldi::VectorBase<float> *", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CopyToVec(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// copy_rows_from_mat(M:MatrixBase)
static PyObject* wrapCopyRowsFromMat_as_copy_rows_from_mat(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("M"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:copy_rows_from_mat", names, &a[0])) return nullptr;
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_rows_from_mat", names[0], "::kaldi::MatrixBase<float>", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CopyRowsFromMat(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_zero()
static PyObject* wrapSetZero_as_set_zero(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetZero();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set(value:float)
static PyObject* wrapSet_as_set(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("value"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Set(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// add(value:float)
static PyObject* wrapAdd_as_add(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("value"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:add", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Add(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// scale(value:float)
static PyObject* wrapScale_as_scale(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("value"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:scale", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("scale", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Scale(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// add_vec(alpha:float, vec:CuVectorBase, beta:float=default)
static PyObject* wrapAddVec_as_add_vec(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("alpha"),
      C("vec"),
      C("beta"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:add_vec", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add_vec", names[0], "float", a[0]);
  ::kaldi::CuVectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("add_vec", names[1], "::kaldi::CuVectorBase<float>", a[1]);
  float arg3;
  if (nargs > 2) {
    if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("add_vec", names[2], "float", a[2]);
  }
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    c->AddVec(std::move(arg1), *arg2); break;
  case 3:
    c->AddVec(std::move(arg1), *arg2, std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// approx_equal(other:CuVectorBase, tol:float=default) -> bool
static PyObject* wrapApproxEqual_as_approx_equal(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("other"),
      C("tol"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:approx_equal", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::CuVectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("approx_equal", names[0], "::kaldi::CuVectorBase<float>", a[0]);
  float arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("approx_equal", names[1], "float", a[1]);
  }
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    ret0 = c->ApproxEqual(*arg1); break;
  case 2:
    ret0 = c->ApproxEqual(*arg1, std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// invert_elements()
static PyObject* wrapInvertElements_as_invert_elements(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->InvertElements();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// apply_softmax()
static PyObject* wrapApplySoftMax_as_apply_softmax(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ApplySoftMax();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// apply_exp()
static PyObject* wrapApplyExp_as_apply_exp(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ApplyExp();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// apply_log()
static PyObject* wrapApplyLog_as_apply_log(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ApplyLog();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// apply_floor(floor_val:float) -> int
static PyObject* wrapApplyFloor_as_apply_floor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("floor_val"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:apply_floor", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("apply_floor", names[0], "float", a[0]);
  int ret0{};
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ApplyFloor(std::move(arg1), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// apply_floor_no_count(floor_val:float)
static PyObject* wrapApplyFloor_as_apply_floor_no_count(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("floor_val"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:apply_floor_no_count", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("apply_floor_no_count", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ApplyFloor(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// apply_ceiling(ceiling_val:float) -> int
static PyObject* wrapApplyCeiling_as_apply_ceiling(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("ceiling_val"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:apply_ceiling", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("apply_ceiling", names[0], "float", a[0]);
  int ret0{};
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ApplyCeiling(std::move(arg1), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// apply_ceiling_no_count(ceiling_val:float)
static PyObject* wrapApplyCeiling_as_apply_ceiling_no_count(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("ceiling_val"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:apply_ceiling_no_count", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("apply_ceiling_no_count", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ApplyCeiling(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// apply_pow(power:float)
static PyObject* wrapApplyPow_as_apply_pow(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("power"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:apply_pow", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("apply_pow", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ApplyPow(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// sum() -> float
static PyObject* wrapSum_as_sum(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Sum();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// set_randn()
static PyObject* wrapSetRandn_as_set_randn(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetRandn();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_rand_uniform()
static PyObject* wrapSetRandUniform_as_set_rand_uniform(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetRandUniform();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// add_vec_vec(alpha:float, v:CuVectorBase, r:CuVectorBase, beta:float)
static PyObject* wrapAddVecVec_as_add_vec_vec(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("alpha"),
      C("v"),
      C("r"),
      C("beta"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:add_vec_vec", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add_vec_vec", names[0], "float", a[0]);
  ::kaldi::CuVectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("add_vec_vec", names[1], "::kaldi::CuVectorBase<float>", a[1]);
  ::kaldi::CuVectorBase<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("add_vec_vec", names[2], "::kaldi::CuVectorBase<float>", a[2]);
  float arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("add_vec_vec", names[3], "float", a[3]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AddVecVec(std::move(arg1), *arg2, *arg3, std::move(arg4));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// norm(p:float) -> float
static PyObject* wrapNorm_as_norm(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("p"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:norm", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("norm", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Norm(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __getitem__#(index:int) -> float
static PyObject* wrap__getitem__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__getitem__", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__getitem__", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->operator()(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// max() -> float
static PyObject* wrapMax_as_max(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Max();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// min() -> float
static PyObject* wrapMin_as_min(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Min();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// replace_value(orig:float, changed:float)
static PyObject* wrapReplaceValue_as_replace_value(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("orig"),
      C("changed"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:replace_value", names, &a[0], &a[1])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("replace_value", names[0], "float", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("replace_value", names[1], "float", a[1]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ReplaceValue(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// mul_elements(v:CuVectorBase)
static PyObject* wrapMulElements_as_mul_elements(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("v"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:mul_elements", names, &a[0])) return nullptr;
  ::kaldi::CuVectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("mul_elements", names[0], "::kaldi::CuVectorBase<float>", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->MulElements(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

PySequenceMethods AsSequence = {
  slot::adapter<Py_ssize_t, slot::as_size, wrapDim_as___len__>, // sq_length
  nullptr,                             // sq_concat
  nullptr,                             // sq_repeat
  slot::getitem<wrap__getitem__>,      // sq_item
  nullptr,                             // was_sq_slice
  nullptr,                             // sq_ass_item
  nullptr,                             // was_sq_ass_slice
  nullptr,                             // sq_contains
  nullptr,                             // sq_inplace_concat
  nullptr,                             // sq_inplace_repeat
};

PyMappingMethods AsMapping = {
  slot::adapter<Py_ssize_t, slot::as_size, wrapDim_as___len__>, // mp_length
  nullptr,                             // mp_subscript
  nullptr,                             // mp_ass_subscript
};

static PyMethodDef Methods[] = {
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n\nReturns this vector dimension")},
  {C("copy_from_cu_vec"), (PyCFunction)wrapCopyFromVec_as_copy_from_cu_vec, METH_VARARGS | METH_KEYWORDS, C("copy_from_cu_vec(src:CuVectorBase)\n\nCopies data from other CuVector")},
  {C("copy_from_vec"), (PyCFunction)wrapCopyFromVec_as_copy_from_vec, METH_VARARGS | METH_KEYWORDS, C("copy_from_vec(src:VectorBase)\n\nCopies data from other `:class:kaldi.matrix.VectorBase`")},
  {C("copy_to_vec"), (PyCFunction)wrapCopyToVec_as_copy_to_vec, METH_VARARGS | METH_KEYWORDS, C("copy_to_vec(dst:VectorBase)\n\nCopies data to `:class:kaldi.matrix.VectorBase`")},
  {C("copy_rows_from_mat"), (PyCFunction)wrapCopyRowsFromMat_as_copy_rows_from_mat, METH_VARARGS | METH_KEYWORDS, C("copy_rows_from_mat(M:MatrixBase)\n\nCopies data from `:class:kaldi.matrix.MatrixBase`")},
  {C("set_zero"), (PyCFunction)wrapSetZero_as_set_zero, METH_NOARGS, C("set_zero()\n\nSets this vector's data to zero")},
  {C("set"), (PyCFunction)wrapSet_as_set, METH_VARARGS | METH_KEYWORDS, C("set(value:float)\n\nSets this vector's data to a constant")},
  {C("add"), (PyCFunction)wrapAdd_as_add, METH_VARARGS | METH_KEYWORDS, C("add(value:float)\n\nAdds a constant to this vector")},
  {C("scale"), (PyCFunction)wrapScale_as_scale, METH_VARARGS | METH_KEYWORDS, C("scale(value:float)\n\nMultiplies this vector's data by a constant")},
  {C("add_vec"), (PyCFunction)wrapAddVec_as_add_vec, METH_VARARGS | METH_KEYWORDS, C("add_vec(alpha:float, vec:CuVectorBase, beta:float=default)\n\nComputes this <-- beta * this + alpha * vec")},
  {C("approx_equal"), (PyCFunction)wrapApproxEqual_as_approx_equal, METH_VARARGS | METH_KEYWORDS, C("approx_equal(other:CuVectorBase, tol:float=default) -> bool\n\nReturns true if ||this - other|| <= tol")},
  {C("invert_elements"), (PyCFunction)wrapInvertElements_as_invert_elements, METH_NOARGS, C("invert_elements()\n\nInverts this vector's elements")},
  {C("apply_softmax"), (PyCFunction)wrapApplySoftMax_as_apply_softmax, METH_NOARGS, C("apply_softmax()\n\nApplies a softmax to this vector's elements")},
  {C("apply_exp"), (PyCFunction)wrapApplyExp_as_apply_exp, METH_NOARGS, C("apply_exp()\n\nApplies exp to this vector's elements")},
  {C("apply_log"), (PyCFunction)wrapApplyLog_as_apply_log, METH_NOARGS, C("apply_log()\n\nApplies log to this vector's elements")},
  {C("apply_floor"), (PyCFunction)wrapApplyFloor_as_apply_floor, METH_VARARGS | METH_KEYWORDS, C("apply_floor(floor_val:float) -> int\n\nApplies floor to this vector's elements\n\nReturns:\n  The number of elements set to floor value.")},
  {C("apply_floor_no_count"), (PyCFunction)wrapApplyFloor_as_apply_floor_no_count, METH_VARARGS | METH_KEYWORDS, C("apply_floor_no_count(floor_val:float)\n\nApplies floor to this vector's elements")},
  {C("apply_ceiling"), (PyCFunction)wrapApplyCeiling_as_apply_ceiling, METH_VARARGS | METH_KEYWORDS, C("apply_ceiling(ceiling_val:float) -> int\n\nApplies ceiling to this vector's elements\n\nReturns:\n  The number of elements set to ceiling value.")},
  {C("apply_ceiling_no_count"), (PyCFunction)wrapApplyCeiling_as_apply_ceiling_no_count, METH_VARARGS | METH_KEYWORDS, C("apply_ceiling_no_count(ceiling_val:float)\n\nApplies ceiling to this vector's elements")},
  {C("apply_pow"), (PyCFunction)wrapApplyPow_as_apply_pow, METH_VARARGS | METH_KEYWORDS, C("apply_pow(power:float)\n\nApplies pow to this vector's elements")},
  {C("sum"), (PyCFunction)wrapSum_as_sum, METH_NOARGS, C("sum() -> float\n\nSum this vector's elements")},
  {C("set_randn"), (PyCFunction)wrapSetRandn_as_set_randn, METH_NOARGS, C("set_randn()\n\nSets this vector's elements to random [0,1)")},
  {C("set_rand_uniform"), (PyCFunction)wrapSetRandUniform_as_set_rand_uniform, METH_NOARGS, C("set_rand_uniform()\n\nSets this vector's elements to values from random uniform")},
  {C("add_vec_vec"), (PyCFunction)wrapAddVecVec_as_add_vec_vec, METH_VARARGS | METH_KEYWORDS, C("add_vec_vec(alpha:float, v:CuVectorBase, r:CuVectorBase, beta:float)\n\nComputes this <-- alpha * v + beta * r")},
  {C("norm"), (PyCFunction)wrapNorm_as_norm, METH_VARARGS | METH_KEYWORDS, C("norm(p:float) -> float\n\nReturns:\n  p-norm of this vector")},
  {C("max"), (PyCFunction)wrapMax_as_max, METH_NOARGS, C("max() -> float\n\nReturns:\n  Maximum value of this vector")},
  {C("min"), (PyCFunction)wrapMin_as_min, METH_NOARGS, C("min() -> float\n\nReturns:\n  Minimum value of this vector")},
  {C("replace_value"), (PyCFunction)wrapReplaceValue_as_replace_value, METH_VARARGS | METH_KEYWORDS, C("replace_value(orig:float, changed:float)\n\nSet each element to y = (x == orig ? changed : x).")},
  {C("mul_elements"), (PyCFunction)wrapMulElements_as_mul_elements, METH_VARARGS | METH_KEYWORDS, C("mul_elements(v:CuVectorBase)\n\nMultipy element-by-element by another vector. ")},
  {}
};

// CuVectorBase __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// CuVectorBase __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_cu_vector.CuVectorBase",           // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  &AsSequence,                         // tp_as_sequence
  &AsMapping,                          // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::CuVectorBase<float>", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::CuVectorBase<float>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_CuVectorBase_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::CuVectorBase<float>"));
      if (!PyErr_Occurred()) {
        ::kaldi::CuVectorBase<float>* c = static_cast<::kaldi::CuVectorBase<float>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::CuVectorBase<float>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyCuVectorBase

namespace pyCuVector {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::CuVector<float>> cpp;
};
static ::kaldi::CuVector<float>* ThisPtr(PyObject*);

// @classmethod from_size(dim:int, resize_type:MatrixResizeType=default) -> CuVector
static PyObject* wrapCuVector_as_from_size(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("dim"),
      C("resize_type"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:from_size", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_size", names[0], "int", a[0]);
  ::kaldi::MatrixResizeType arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_size", names[1], "::kaldi::MatrixResizeType", a[1]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::CuVector<float>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    ret0 = ::gtl::MakeUnique<::kaldi::CuVector<float>>(std::move(arg1)); break;
  case 2:
    ret0 = ::gtl::MakeUnique<::kaldi::CuVector<float>>(std::move(arg1), std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_base(v:CuVectorBase) -> CuVector
static PyObject* wrapCuVector_as_from_base(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("v"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_base", names, &a[0])) return nullptr;
  ::kaldi::CuVectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_base", names[0], "::kaldi::CuVectorBase<float>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::CuVector<float>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::CuVector<float>>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_vector(v:VectorBase) -> CuVector
static PyObject* wrapCuVector_as_from_vector(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("v"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_vector", names, &a[0])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_vector", names[0], "::kaldi::VectorBase<float>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::CuVector<float>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::CuVector<float>>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// resize(dim:int, resize_type:MatrixResizeType=default)
static PyObject* wrapResize_as_resize(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("dim"),
      C("resize_type"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:resize", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("resize", names[0], "int", a[0]);
  ::kaldi::MatrixResizeType arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("resize", names[1], "::kaldi::MatrixResizeType", a[1]);
  }
  // Call actual C++ method.
  ::kaldi::CuVector<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    c->Resize(std::move(arg1)); break;
  case 2:
    c->Resize(std::move(arg1), std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(is:istream, binary:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::CuVector<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::CuVector<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// swap(vec:Vector)
static PyObject* wrapSwap_as_swap(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("vec"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:swap", names, &a[0])) return nullptr;
  ::kaldi::Vector<float> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("swap", names[0], "::kaldi::Vector<float> *", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVector<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Swap(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::kaldi::CuVectorBase<float>*
static PyObject* as_kaldi_CuVectorBase_float(PyObject* self) {
  ::kaldi::CuVectorBase<float>* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::CuVectorBase<float>"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("from_size"), (PyCFunction)wrapCuVector_as_from_size, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_size(dim:int, resize_type:MatrixResizeType=default) -> CuVector\n  Calls C++ function\n  std::unique_ptr<::kaldi::CuVector<float>> ::kaldi::CuVector<float>::CuVector(int, ::kaldi::MatrixResizeType)")},
  {C("from_base"), (PyCFunction)wrapCuVector_as_from_base, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_base(v:CuVectorBase) -> CuVector\n  Calls C++ function\n  std::unique_ptr<::kaldi::CuVector<float>> ::kaldi::CuVector<float>::CuVector(::kaldi::CuVectorBase<float>)")},
  {C("from_vector"), (PyCFunction)wrapCuVector_as_from_vector, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_vector(v:VectorBase) -> CuVector\n  Calls C++ function\n  std::unique_ptr<::kaldi::CuVector<float>> ::kaldi::CuVector<float>::CuVector(::kaldi::VectorBase<float>)")},
  {C("resize"), (PyCFunction)wrapResize_as_resize, METH_VARARGS | METH_KEYWORDS, C("resize(dim:int, resize_type:MatrixResizeType=default)\n\nResize this vector to dim")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool)\n\nI/O")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n\nI/O")},
  {C("swap"), (PyCFunction)wrapSwap_as_swap, METH_VARARGS | METH_KEYWORDS, C("swap(vec:Vector)\n\nSwaps the contents of this and vec. Shallow swap. ")},
  {C("as_kaldi_CuVectorBase_float"), (PyCFunction)as_kaldi_CuVectorBase_float, METH_NOARGS, C("Upcast to ::kaldi::CuVectorBase<float>*")},
  {}
};

// CuVector __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// CuVector __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// CuVector __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_cu_vector.CuVector",               // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::CuVector<float>", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "CuVector takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::CuVector<float>>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::CuVector<float>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_CuVector_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::CuVector<float>"));
      if (!PyErr_Occurred()) {
        ::kaldi::CuVector<float>* c = static_cast<::kaldi::CuVector<float>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::CuVector<float>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyCuVector

namespace pyCuSubVector {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::CuSubVector<float>> cpp;
};
static ::kaldi::CuSubVector<float>* ThisPtr(PyObject*);

// __init__(t:CuVectorBase, origin:int, length:int)
static PyObject* wrapCuSubVector_float_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("t"),
      C("origin"),
      C("length"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:__init__", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::CuVectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::CuVectorBase<float>", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "int", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "int", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::CuSubVector<float>>(*arg1, std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// @classmethod from_other(other:CuSubVector) -> CuSubVector
static PyObject* wrapCuSubVector_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::kaldi::CuSubVector<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::kaldi::CuSubVector<float>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::CuSubVector<float>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::CuSubVector<float>>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::kaldi::CuVectorBase<float>*
static PyObject* as_kaldi_CuVectorBase_float(PyObject* self) {
  ::kaldi::CuVectorBase<float>* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::CuVectorBase<float>"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapCuSubVector_float_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(t:CuVectorBase, origin:int, length:int)\n  Calls C++ function\n  void ::kaldi::CuSubVector<float>::CuSubVector(::kaldi::CuVectorBase<float>, int, int)")},
  {C("from_other"), (PyCFunction)wrapCuSubVector_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(other:CuSubVector) -> CuSubVector\n  Calls C++ function\n  std::unique_ptr<::kaldi::CuSubVector<float>> ::kaldi::CuSubVector<float>::CuSubVector(::kaldi::CuSubVector<float>)")},
  {C("as_kaldi_CuVectorBase_float"), (PyCFunction)as_kaldi_CuVectorBase_float, METH_NOARGS, C("Upcast to ::kaldi::CuVectorBase<float>*")},
  {}
};

// CuSubVector __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// CuSubVector __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// CuSubVector __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_cu_vector.CuSubVector",            // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::CuSubVector<float>", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapCuSubVector_float_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::CuSubVector<float>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_CuSubVector_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::CuSubVector<float>"));
      if (!PyErr_Occurred()) {
        ::kaldi::CuSubVector<float>* c = static_cast<::kaldi::CuSubVector<float>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::CuSubVector<float>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyCuSubVector

// approx_equal_cu_vector(a:CuVectorBase, b:CuVectorBase, tol:float=default) -> bool
static PyObject* wrapApproxEqual_as_approx_equal_cu_vector(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("a"),
      C("b"),
      C("tol"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:approx_equal_cu_vector", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::CuVectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("approx_equal_cu_vector", names[0], "::kaldi::CuVectorBase<float>", a[0]);
  ::kaldi::CuVectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("approx_equal_cu_vector", names[1], "::kaldi::CuVectorBase<float>", a[1]);
  float arg3;
  if (nargs > 2) {
    if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("approx_equal_cu_vector", names[2], "float", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ret0 = ::kaldi::ApproxEqual(*arg1, *arg2); break;
  case 3:
    ret0 = ::kaldi::ApproxEqual(*arg1, *arg2, std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// assert_equal_cu_vector(a:CuVectorBase, b:CuVectorBase, tol:float=default)
static PyObject* wrapAssertEqual_as_assert_equal_cu_vector(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("a"),
      C("b"),
      C("tol"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:assert_equal_cu_vector", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::CuVectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("assert_equal_cu_vector", names[0], "::kaldi::CuVectorBase<float>", a[0]);
  ::kaldi::CuVectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("assert_equal_cu_vector", names[1], "::kaldi::CuVectorBase<float>", a[1]);
  float arg3;
  if (nargs > 2) {
    if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("assert_equal_cu_vector", names[2], "float", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ::kaldi::AssertEqual(*arg1, *arg2); break;
  case 3:
    ::kaldi::AssertEqual(*arg1, *arg2, std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

namespace pyCuDoubleVectorBase {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::CuVectorBase<double>> cpp;
};
static ::kaldi::CuVectorBase<double>* ThisPtr(PyObject*);

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __len__() -> int
static PyObject* wrapDim_as___len__(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// copy_from_cu_vec(src:CuDoubleVectorBase)
static PyObject* wrapCopyFromVec_as_copy_from_cu_vec(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("src"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:copy_from_cu_vec", names, &a[0])) return nullptr;
  ::kaldi::CuVectorBase<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_from_cu_vec", names[0], "::kaldi::CuVectorBase<double>", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CopyFromVec(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// copy_from_vec(src:DoubleVectorBase)
static PyObject* wrapCopyFromVec_as_copy_from_vec(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("src"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:copy_from_vec", names, &a[0])) return nullptr;
  ::kaldi::VectorBase<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_from_vec", names[0], "::kaldi::VectorBase<double>", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CopyFromVec(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// copy_to_vec(dst:DoubleVectorBase)
static PyObject* wrapCopyToVec_as_copy_to_vec(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("dst"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:copy_to_vec", names, &a[0])) return nullptr;
  ::kaldi::VectorBase<double> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_to_vec", names[0], "::kaldi::VectorBase<double> *", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CopyToVec(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// copy_rows_from_mat(M:DoubleMatrixBase)
static PyObject* wrapCopyRowsFromMat_as_copy_rows_from_mat(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("M"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:copy_rows_from_mat", names, &a[0])) return nullptr;
  ::kaldi::MatrixBase<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_rows_from_mat", names[0], "::kaldi::MatrixBase<double>", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CopyRowsFromMat(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_zero()
static PyObject* wrapSetZero_as_set_zero(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetZero();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set(value:float)
static PyObject* wrapSet_as_set(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("value"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set", names, &a[0])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set", names[0], "double", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Set(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// add(value:float)
static PyObject* wrapAdd_as_add(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("value"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:add", names, &a[0])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add", names[0], "double", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Add(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// scale(value:float)
static PyObject* wrapScale_as_scale(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("value"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:scale", names, &a[0])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("scale", names[0], "double", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Scale(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// add_vec(alpha:float, vec:CuDoubleVectorBase, beta:float=default)
static PyObject* wrapAddVec_as_add_vec(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("alpha"),
      C("vec"),
      C("beta"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:add_vec", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add_vec", names[0], "double", a[0]);
  ::kaldi::CuVectorBase<double>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("add_vec", names[1], "::kaldi::CuVectorBase<double>", a[1]);
  double arg3;
  if (nargs > 2) {
    if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("add_vec", names[2], "double", a[2]);
  }
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    c->AddVec(std::move(arg1), *arg2); break;
  case 3:
    c->AddVec(std::move(arg1), *arg2, std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// approx_equal(other:CuDoubleVectorBase, tol:float=default) -> bool
static PyObject* wrapApproxEqual_as_approx_equal(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("other"),
      C("tol"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:approx_equal", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::CuVectorBase<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("approx_equal", names[0], "::kaldi::CuVectorBase<double>", a[0]);
  float arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("approx_equal", names[1], "float", a[1]);
  }
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    ret0 = c->ApproxEqual(*arg1); break;
  case 2:
    ret0 = c->ApproxEqual(*arg1, std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// invert_elements()
static PyObject* wrapInvertElements_as_invert_elements(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->InvertElements();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// apply_softmax()
static PyObject* wrapApplySoftMax_as_apply_softmax(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ApplySoftMax();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// apply_exp()
static PyObject* wrapApplyExp_as_apply_exp(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ApplyExp();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// apply_log()
static PyObject* wrapApplyLog_as_apply_log(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ApplyLog();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// apply_floor(floor_val:float) -> int
static PyObject* wrapApplyFloor_as_apply_floor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("floor_val"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:apply_floor", names, &a[0])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("apply_floor", names[0], "double", a[0]);
  int ret0{};
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ApplyFloor(std::move(arg1), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// apply_floor_no_count(floor_val:float)
static PyObject* wrapApplyFloor_as_apply_floor_no_count(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("floor_val"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:apply_floor_no_count", names, &a[0])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("apply_floor_no_count", names[0], "double", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ApplyFloor(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// apply_ceiling(ceiling_val:float) -> int
static PyObject* wrapApplyCeiling_as_apply_ceiling(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("ceiling_val"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:apply_ceiling", names, &a[0])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("apply_ceiling", names[0], "double", a[0]);
  int ret0{};
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ApplyCeiling(std::move(arg1), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// apply_ceiling_no_count(ceiling_val:float)
static PyObject* wrapApplyCeiling_as_apply_ceiling_no_count(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("ceiling_val"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:apply_ceiling_no_count", names, &a[0])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("apply_ceiling_no_count", names[0], "double", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ApplyCeiling(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// apply_pow(power:float)
static PyObject* wrapApplyPow_as_apply_pow(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("power"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:apply_pow", names, &a[0])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("apply_pow", names[0], "double", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ApplyPow(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// sum() -> float
static PyObject* wrapSum_as_sum(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  double ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Sum();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// set_randn()
static PyObject* wrapSetRandn_as_set_randn(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetRandn();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_rand_uniform()
static PyObject* wrapSetRandUniform_as_set_rand_uniform(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetRandUniform();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// add_vec_vec(alpha:float, v:CuDoubleVectorBase, r:CuDoubleVectorBase, beta:float)
static PyObject* wrapAddVecVec_as_add_vec_vec(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("alpha"),
      C("v"),
      C("r"),
      C("beta"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:add_vec_vec", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add_vec_vec", names[0], "double", a[0]);
  ::kaldi::CuVectorBase<double>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("add_vec_vec", names[1], "::kaldi::CuVectorBase<double>", a[1]);
  ::kaldi::CuVectorBase<double>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("add_vec_vec", names[2], "::kaldi::CuVectorBase<double>", a[2]);
  double arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("add_vec_vec", names[3], "double", a[3]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AddVecVec(std::move(arg1), *arg2, *arg3, std::move(arg4));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// norm(p:float) -> float
static PyObject* wrapNorm_as_norm(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("p"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:norm", names, &a[0])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("norm", names[0], "double", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  double ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Norm(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __getitem__#(index:int) -> float
static PyObject* wrap__getitem__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__getitem__", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__getitem__", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  double ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->operator()(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// max() -> float
static PyObject* wrapMax_as_max(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  double ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Max();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// min() -> float
static PyObject* wrapMin_as_min(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  double ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Min();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// replace_value(orig:float, changed:float)
static PyObject* wrapReplaceValue_as_replace_value(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("orig"),
      C("changed"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:replace_value", names, &a[0], &a[1])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("replace_value", names[0], "double", a[0]);
  double arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("replace_value", names[1], "double", a[1]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ReplaceValue(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// mul_elements(v:CuDoubleVectorBase)
static PyObject* wrapMulElements_as_mul_elements(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("v"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:mul_elements", names, &a[0])) return nullptr;
  ::kaldi::CuVectorBase<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("mul_elements", names[0], "::kaldi::CuVectorBase<double>", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVectorBase<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->MulElements(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

PySequenceMethods AsSequence = {
  slot::adapter<Py_ssize_t, slot::as_size, wrapDim_as___len__>, // sq_length
  nullptr,                             // sq_concat
  nullptr,                             // sq_repeat
  slot::getitem<wrap__getitem__>,      // sq_item
  nullptr,                             // was_sq_slice
  nullptr,                             // sq_ass_item
  nullptr,                             // was_sq_ass_slice
  nullptr,                             // sq_contains
  nullptr,                             // sq_inplace_concat
  nullptr,                             // sq_inplace_repeat
};

PyMappingMethods AsMapping = {
  slot::adapter<Py_ssize_t, slot::as_size, wrapDim_as___len__>, // mp_length
  nullptr,                             // mp_subscript
  nullptr,                             // mp_ass_subscript
};

static PyMethodDef Methods[] = {
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n\nReturns this vector dimension")},
  {C("copy_from_cu_vec"), (PyCFunction)wrapCopyFromVec_as_copy_from_cu_vec, METH_VARARGS | METH_KEYWORDS, C("copy_from_cu_vec(src:CuDoubleVectorBase)\n\nCopies data from other CuVector")},
  {C("copy_from_vec"), (PyCFunction)wrapCopyFromVec_as_copy_from_vec, METH_VARARGS | METH_KEYWORDS, C("copy_from_vec(src:DoubleVectorBase)\n\nCopies data from other `:class:kaldi.matrix.VectorBase`")},
  {C("copy_to_vec"), (PyCFunction)wrapCopyToVec_as_copy_to_vec, METH_VARARGS | METH_KEYWORDS, C("copy_to_vec(dst:DoubleVectorBase)\n\nCopies data to `:class:kaldi.matrix.VectorBase`")},
  {C("copy_rows_from_mat"), (PyCFunction)wrapCopyRowsFromMat_as_copy_rows_from_mat, METH_VARARGS | METH_KEYWORDS, C("copy_rows_from_mat(M:DoubleMatrixBase)\n\nCopies data from `:class:kaldi.matrix.MatrixBase`")},
  {C("set_zero"), (PyCFunction)wrapSetZero_as_set_zero, METH_NOARGS, C("set_zero()\n\nSets this vector's data to zero")},
  {C("set"), (PyCFunction)wrapSet_as_set, METH_VARARGS | METH_KEYWORDS, C("set(value:float)\n\nSets this vector's data to a constant")},
  {C("add"), (PyCFunction)wrapAdd_as_add, METH_VARARGS | METH_KEYWORDS, C("add(value:float)\n\nAdds a constant to this vector")},
  {C("scale"), (PyCFunction)wrapScale_as_scale, METH_VARARGS | METH_KEYWORDS, C("scale(value:float)\n\nMultiplies this vector's data by a constant")},
  {C("add_vec"), (PyCFunction)wrapAddVec_as_add_vec, METH_VARARGS | METH_KEYWORDS, C("add_vec(alpha:float, vec:CuDoubleVectorBase, beta:float=default)\n\nComputes this <-- beta * this + alpha * vec")},
  {C("approx_equal"), (PyCFunction)wrapApproxEqual_as_approx_equal, METH_VARARGS | METH_KEYWORDS, C("approx_equal(other:CuDoubleVectorBase, tol:float=default) -> bool\n\nReturns true if ||this - other|| <= tol")},
  {C("invert_elements"), (PyCFunction)wrapInvertElements_as_invert_elements, METH_NOARGS, C("invert_elements()\n\nInverts this vector's elements")},
  {C("apply_softmax"), (PyCFunction)wrapApplySoftMax_as_apply_softmax, METH_NOARGS, C("apply_softmax()\n\nApplies a softmax to this vector's elements")},
  {C("apply_exp"), (PyCFunction)wrapApplyExp_as_apply_exp, METH_NOARGS, C("apply_exp()\n\nApplies exp to this vector's elements")},
  {C("apply_log"), (PyCFunction)wrapApplyLog_as_apply_log, METH_NOARGS, C("apply_log()\n\nApplies log to this vector's elements")},
  {C("apply_floor"), (PyCFunction)wrapApplyFloor_as_apply_floor, METH_VARARGS | METH_KEYWORDS, C("apply_floor(floor_val:float) -> int\n\nApplies floor to this vector's elements\n\nReturns:\n  The number of elements set to floor value.")},
  {C("apply_floor_no_count"), (PyCFunction)wrapApplyFloor_as_apply_floor_no_count, METH_VARARGS | METH_KEYWORDS, C("apply_floor_no_count(floor_val:float)\n\nApplies floor to this vector's elements")},
  {C("apply_ceiling"), (PyCFunction)wrapApplyCeiling_as_apply_ceiling, METH_VARARGS | METH_KEYWORDS, C("apply_ceiling(ceiling_val:float) -> int\n\nApplies ceiling to this vector's elements\n\nReturns:\n  The number of elements set to ceiling value.")},
  {C("apply_ceiling_no_count"), (PyCFunction)wrapApplyCeiling_as_apply_ceiling_no_count, METH_VARARGS | METH_KEYWORDS, C("apply_ceiling_no_count(ceiling_val:float)\n\nApplies ceiling to this vector's elements")},
  {C("apply_pow"), (PyCFunction)wrapApplyPow_as_apply_pow, METH_VARARGS | METH_KEYWORDS, C("apply_pow(power:float)\n\nApplies pow to this vector's elements")},
  {C("sum"), (PyCFunction)wrapSum_as_sum, METH_NOARGS, C("sum() -> float\n\nSum this vector's elements")},
  {C("set_randn"), (PyCFunction)wrapSetRandn_as_set_randn, METH_NOARGS, C("set_randn()\n\nSets this vector's elements to random [0,1)")},
  {C("set_rand_uniform"), (PyCFunction)wrapSetRandUniform_as_set_rand_uniform, METH_NOARGS, C("set_rand_uniform()\n\nSets this vector's elements to values from random uniform")},
  {C("add_vec_vec"), (PyCFunction)wrapAddVecVec_as_add_vec_vec, METH_VARARGS | METH_KEYWORDS, C("add_vec_vec(alpha:float, v:CuDoubleVectorBase, r:CuDoubleVectorBase, beta:float)\n\nComputes this <-- alpha * v + beta * r")},
  {C("norm"), (PyCFunction)wrapNorm_as_norm, METH_VARARGS | METH_KEYWORDS, C("norm(p:float) -> float\n\nReturns:\n  p-norm of this vector")},
  {C("max"), (PyCFunction)wrapMax_as_max, METH_NOARGS, C("max() -> float\n\nReturns:\n  Maximum value of this vector")},
  {C("min"), (PyCFunction)wrapMin_as_min, METH_NOARGS, C("min() -> float\n\nReturns:\n  Minimum value of this vector")},
  {C("replace_value"), (PyCFunction)wrapReplaceValue_as_replace_value, METH_VARARGS | METH_KEYWORDS, C("replace_value(orig:float, changed:float)\n\nSet each element to y = (x == orig ? changed : x).")},
  {C("mul_elements"), (PyCFunction)wrapMulElements_as_mul_elements, METH_VARARGS | METH_KEYWORDS, C("mul_elements(v:CuDoubleVectorBase)\n\nMultipy element-by-element by another vector. ")},
  {}
};

// CuDoubleVectorBase __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// CuDoubleVectorBase __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_cu_vector.CuDoubleVectorBase",     // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  &AsSequence,                         // tp_as_sequence
  &AsMapping,                          // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::CuVectorBase<double>", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::CuVectorBase<double>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_CuVectorBase_double"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::CuVectorBase<double>"));
      if (!PyErr_Occurred()) {
        ::kaldi::CuVectorBase<double>* c = static_cast<::kaldi::CuVectorBase<double>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::CuVectorBase<double>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyCuDoubleVectorBase

namespace pyCuDoubleVector {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::CuVector<double>> cpp;
};
static ::kaldi::CuVector<double>* ThisPtr(PyObject*);

// @classmethod from_size(dim:int, resize_type:MatrixResizeType=default) -> CuDoubleVector
static PyObject* wrapCuVector_as_from_size(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("dim"),
      C("resize_type"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:from_size", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_size", names[0], "int", a[0]);
  ::kaldi::MatrixResizeType arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_size", names[1], "::kaldi::MatrixResizeType", a[1]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::CuVector<double>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    ret0 = ::gtl::MakeUnique<::kaldi::CuVector<double>>(std::move(arg1)); break;
  case 2:
    ret0 = ::gtl::MakeUnique<::kaldi::CuVector<double>>(std::move(arg1), std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_base(v:CuDoubleVectorBase) -> CuDoubleVector
static PyObject* wrapCuVector_as_from_base(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("v"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_base", names, &a[0])) return nullptr;
  ::kaldi::CuVectorBase<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_base", names[0], "::kaldi::CuVectorBase<double>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::CuVector<double>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::CuVector<double>>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_vector(v:DoubleVectorBase) -> CuDoubleVector
static PyObject* wrapCuVector_as_from_vector(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("v"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_vector", names, &a[0])) return nullptr;
  ::kaldi::VectorBase<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_vector", names[0], "::kaldi::VectorBase<double>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::CuVector<double>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::CuVector<double>>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// resize(dim:int, resize_type:MatrixResizeType=default)
static PyObject* wrapResize_as_resize(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("dim"),
      C("resize_type"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:resize", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("resize", names[0], "int", a[0]);
  ::kaldi::MatrixResizeType arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("resize", names[1], "::kaldi::MatrixResizeType", a[1]);
  }
  // Call actual C++ method.
  ::kaldi::CuVector<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    c->Resize(std::move(arg1)); break;
  case 2:
    c->Resize(std::move(arg1), std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(is:istream, binary:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::CuVector<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::CuVector<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// swap(vec:DoubleVector)
static PyObject* wrapSwap_as_swap(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("vec"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:swap", names, &a[0])) return nullptr;
  ::kaldi::Vector<double> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("swap", names[0], "::kaldi::Vector<double> *", a[0]);
  // Call actual C++ method.
  ::kaldi::CuVector<double>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Swap(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::kaldi::CuVectorBase<double>*
static PyObject* as_kaldi_CuVectorBase_double(PyObject* self) {
  ::kaldi::CuVectorBase<double>* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::CuVectorBase<double>"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("from_size"), (PyCFunction)wrapCuVector_as_from_size, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_size(dim:int, resize_type:MatrixResizeType=default) -> CuDoubleVector\n  Calls C++ function\n  std::unique_ptr<::kaldi::CuVector<double>> ::kaldi::CuVector<double>::CuVector(int, ::kaldi::MatrixResizeType)")},
  {C("from_base"), (PyCFunction)wrapCuVector_as_from_base, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_base(v:CuDoubleVectorBase) -> CuDoubleVector\n  Calls C++ function\n  std::unique_ptr<::kaldi::CuVector<double>> ::kaldi::CuVector<double>::CuVector(::kaldi::CuVectorBase<double>)")},
  {C("from_vector"), (PyCFunction)wrapCuVector_as_from_vector, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_vector(v:DoubleVectorBase) -> CuDoubleVector\n  Calls C++ function\n  std::unique_ptr<::kaldi::CuVector<double>> ::kaldi::CuVector<double>::CuVector(::kaldi::VectorBase<double>)")},
  {C("resize"), (PyCFunction)wrapResize_as_resize, METH_VARARGS | METH_KEYWORDS, C("resize(dim:int, resize_type:MatrixResizeType=default)\n\nResize this vector to dim")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool)\n\nI/O")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n\nI/O")},
  {C("swap"), (PyCFunction)wrapSwap_as_swap, METH_VARARGS | METH_KEYWORDS, C("swap(vec:DoubleVector)\n\nSwaps the contents of this and vec. Shallow swap. ")},
  {C("as_kaldi_CuVectorBase_double"), (PyCFunction)as_kaldi_CuVectorBase_double, METH_NOARGS, C("Upcast to ::kaldi::CuVectorBase<double>*")},
  {}
};

// CuDoubleVector __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// CuDoubleVector __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// CuDoubleVector __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_cu_vector.CuDoubleVector",         // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::CuVector<double>", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "CuDoubleVector takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::CuVector<double>>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::CuVector<double>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_CuVector_double"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::CuVector<double>"));
      if (!PyErr_Occurred()) {
        ::kaldi::CuVector<double>* c = static_cast<::kaldi::CuVector<double>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::CuVector<double>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyCuDoubleVector

namespace pyCuDoubleSubVector {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::CuSubVector<double>> cpp;
};
static ::kaldi::CuSubVector<double>* ThisPtr(PyObject*);

// __init__(t:CuDoubleVectorBase, origin:int, length:int)
static PyObject* wrapCuSubVector_double_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("t"),
      C("origin"),
      C("length"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:__init__", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::CuVectorBase<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::CuVectorBase<double>", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "int", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "int", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::CuSubVector<double>>(*arg1, std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// @classmethod from_other(other:CuDoubleSubVector) -> CuDoubleSubVector
static PyObject* wrapCuSubVector_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::kaldi::CuSubVector<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::kaldi::CuSubVector<double>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::CuSubVector<double>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::CuSubVector<double>>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::kaldi::CuVectorBase<double>*
static PyObject* as_kaldi_CuVectorBase_double(PyObject* self) {
  ::kaldi::CuVectorBase<double>* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::CuVectorBase<double>"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapCuSubVector_double_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(t:CuDoubleVectorBase, origin:int, length:int)\n  Calls C++ function\n  void ::kaldi::CuSubVector<double>::CuSubVector(::kaldi::CuVectorBase<double>, int, int)")},
  {C("from_other"), (PyCFunction)wrapCuSubVector_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(other:CuDoubleSubVector) -> CuDoubleSubVector\n  Calls C++ function\n  std::unique_ptr<::kaldi::CuSubVector<double>> ::kaldi::CuSubVector<double>::CuSubVector(::kaldi::CuSubVector<double>)")},
  {C("as_kaldi_CuVectorBase_double"), (PyCFunction)as_kaldi_CuVectorBase_double, METH_NOARGS, C("Upcast to ::kaldi::CuVectorBase<double>*")},
  {}
};

// CuDoubleSubVector __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// CuDoubleSubVector __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// CuDoubleSubVector __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_cu_vector.CuDoubleSubVector",      // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::CuSubVector<double>", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapCuSubVector_double_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::CuSubVector<double>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_CuSubVector_double"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::CuSubVector<double>"));
      if (!PyErr_Occurred()) {
        ::kaldi::CuSubVector<double>* c = static_cast<::kaldi::CuSubVector<double>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::CuSubVector<double>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyCuDoubleSubVector

// approx_equal_cu_double_vector(a:CuDoubleVectorBase, b:CuDoubleVectorBase, tol:float=default) -> bool
static PyObject* wrapApproxEqual_as_approx_equal_cu_double_vector(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("a"),
      C("b"),
      C("tol"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:approx_equal_cu_double_vector", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::CuVectorBase<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("approx_equal_cu_double_vector", names[0], "::kaldi::CuVectorBase<double>", a[0]);
  ::kaldi::CuVectorBase<double>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("approx_equal_cu_double_vector", names[1], "::kaldi::CuVectorBase<double>", a[1]);
  double arg3;
  if (nargs > 2) {
    if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("approx_equal_cu_double_vector", names[2], "double", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ret0 = ::kaldi::ApproxEqual(*arg1, *arg2); break;
  case 3:
    ret0 = ::kaldi::ApproxEqual(*arg1, *arg2, std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// assert_equal_cu_double_vector(a:CuDoubleVectorBase, b:CuDoubleVectorBase, tol:float=default)
static PyObject* wrapAssertEqual_as_assert_equal_cu_double_vector(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("a"),
      C("b"),
      C("tol"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:assert_equal_cu_double_vector", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::CuVectorBase<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("assert_equal_cu_double_vector", names[0], "::kaldi::CuVectorBase<double>", a[0]);
  ::kaldi::CuVectorBase<double>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("assert_equal_cu_double_vector", names[1], "::kaldi::CuVectorBase<double>", a[1]);
  double arg3;
  if (nargs > 2) {
    if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("assert_equal_cu_double_vector", names[2], "double", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ::kaldi::AssertEqual(*arg1, *arg2); break;
  case 3:
    ::kaldi::AssertEqual(*arg1, *arg2, std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("approx_equal_cu_vector"), (PyCFunction)wrapApproxEqual_as_approx_equal_cu_vector, METH_VARARGS | METH_KEYWORDS, C("approx_equal_cu_vector(a:CuVectorBase, b:CuVectorBase, tol:float=default) -> bool\n  Calls C++ function\n  bool ::kaldi::ApproxEqual(::kaldi::CuVectorBase<float>, ::kaldi::CuVectorBase<float>, float)")},
  {C("assert_equal_cu_vector"), (PyCFunction)wrapAssertEqual_as_assert_equal_cu_vector, METH_VARARGS | METH_KEYWORDS, C("assert_equal_cu_vector(a:CuVectorBase, b:CuVectorBase, tol:float=default)\n  Calls C++ function\n  void ::kaldi::AssertEqual(::kaldi::CuVectorBase<float>, ::kaldi::CuVectorBase<float>, float)")},
  {C("approx_equal_cu_double_vector"), (PyCFunction)wrapApproxEqual_as_approx_equal_cu_double_vector, METH_VARARGS | METH_KEYWORDS, C("approx_equal_cu_double_vector(a:CuDoubleVectorBase, b:CuDoubleVectorBase, tol:float=default) -> bool\n  Calls C++ function\n  bool ::kaldi::ApproxEqual(::kaldi::CuVectorBase<double>, ::kaldi::CuVectorBase<double>, double)")},
  {C("assert_equal_cu_double_vector"), (PyCFunction)wrapAssertEqual_as_assert_equal_cu_double_vector, METH_VARARGS | METH_KEYWORDS, C("assert_equal_cu_double_vector(a:CuDoubleVectorBase, b:CuDoubleVectorBase, tol:float=default)\n  Calls C++ function\n  void ::kaldi::AssertEqual(::kaldi::CuVectorBase<double>, ::kaldi::CuVectorBase<double>, double)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyCuVectorBase::wrapper_Type) < 0) return false;
  Py_INCREF(&pyCuVectorBase::wrapper_Type);  // For PyModule_AddObject to steal.
  pyCuVector::wrapper_Type.tp_base = &pyCuVectorBase::wrapper_Type;
  if (PyType_Ready(&pyCuVector::wrapper_Type) < 0) return false;
  Py_INCREF(&pyCuVector::wrapper_Type);  // For PyModule_AddObject to steal.
  pyCuSubVector::wrapper_Type.tp_base = &pyCuVectorBase::wrapper_Type;
  if (PyType_Ready(&pyCuSubVector::wrapper_Type) < 0) return false;
  Py_INCREF(&pyCuSubVector::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyCuDoubleVectorBase::wrapper_Type) < 0) return false;
  Py_INCREF(&pyCuDoubleVectorBase::wrapper_Type);  // For PyModule_AddObject to steal.
  pyCuDoubleVector::wrapper_Type.tp_base = &pyCuDoubleVectorBase::wrapper_Type;
  if (PyType_Ready(&pyCuDoubleVector::wrapper_Type) < 0) return false;
  Py_INCREF(&pyCuDoubleVector::wrapper_Type);  // For PyModule_AddObject to steal.
  pyCuDoubleSubVector::wrapper_Type.tp_base = &pyCuDoubleVectorBase::wrapper_Type;
  if (PyType_Ready(&pyCuDoubleSubVector::wrapper_Type) < 0) return false;
  Py_INCREF(&pyCuDoubleSubVector::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_cu_vector",  // module name
  "CLIF-generated module for cudamatrix/cu-vector.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_matrix_common")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "CuVectorBase", reinterpret_cast<PyObject*>(&pyCuVectorBase::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "CuVector", reinterpret_cast<PyObject*>(&pyCuVector::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "CuSubVector", reinterpret_cast<PyObject*>(&pyCuSubVector::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "CuDoubleVectorBase", reinterpret_cast<PyObject*>(&pyCuDoubleVectorBase::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "CuDoubleVector", reinterpret_cast<PyObject*>(&pyCuDoubleVector::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "CuDoubleSubVector", reinterpret_cast<PyObject*>(&pyCuDoubleSubVector::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __cu__vector_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// CuDoubleSubVector to/from ::kaldi::CuSubVector<double> conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::CuSubVector<double>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::CuSubVector<double>* cpp = __cu__vector_clifwrap::pyCuDoubleSubVector::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::CuSubVector<double>>* c) {
  assert(c != nullptr);
  ::kaldi::CuSubVector<double>* cpp = __cu__vector_clifwrap::pyCuDoubleSubVector::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__cu__vector_clifwrap::pyCuDoubleSubVector::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::CuSubVector<double>>* c) {
  assert(c != nullptr);
  ::kaldi::CuSubVector<double>* cpp = __cu__vector_clifwrap::pyCuDoubleSubVector::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__cu__vector_clifwrap::pyCuDoubleSubVector::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert CuDoubleSubVector instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::CuSubVector<double>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cu__vector_clifwrap::pyCuDoubleSubVector::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__vector_clifwrap::pyCuDoubleSubVector::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CuSubVector<double>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::CuSubVector<double>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cu__vector_clifwrap::pyCuDoubleSubVector::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__vector_clifwrap::pyCuDoubleSubVector::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CuSubVector<double>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::CuSubVector<double>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cu__vector_clifwrap::pyCuDoubleSubVector::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__vector_clifwrap::pyCuDoubleSubVector::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CuSubVector<double>>(std::move(c));
  return py;
}

// CuDoubleVector to/from ::kaldi::CuVector<double> conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::CuVector<double>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::CuVector<double>* cpp = __cu__vector_clifwrap::pyCuDoubleVector::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::CuVector<double>>* c) {
  assert(c != nullptr);
  ::kaldi::CuVector<double>* cpp = __cu__vector_clifwrap::pyCuDoubleVector::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__cu__vector_clifwrap::pyCuDoubleVector::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::CuVector<double>>* c) {
  assert(c != nullptr);
  ::kaldi::CuVector<double>* cpp = __cu__vector_clifwrap::pyCuDoubleVector::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__cu__vector_clifwrap::pyCuDoubleVector::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert CuDoubleVector instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::CuVector<double>* c) {
  assert(c != nullptr);
  ::kaldi::CuVector<double>* cpp = __cu__vector_clifwrap::pyCuDoubleVector::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::CuVector<double>>* c) {
  assert(c != nullptr);
  ::kaldi::CuVector<double>* cpp = __cu__vector_clifwrap::pyCuDoubleVector::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::CuVector<double>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cu__vector_clifwrap::pyCuDoubleVector::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__vector_clifwrap::pyCuDoubleVector::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CuVector<double>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::CuVector<double>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cu__vector_clifwrap::pyCuDoubleVector::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__vector_clifwrap::pyCuDoubleVector::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CuVector<double>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::CuVector<double>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cu__vector_clifwrap::pyCuDoubleVector::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__vector_clifwrap::pyCuDoubleVector::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CuVector<double>>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::CuVector<double>& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__cu__vector_clifwrap::pyCuDoubleVector::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__vector_clifwrap::pyCuDoubleVector::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::CuVector<double>>(c);
  return py;
}

// CuDoubleVectorBase to/from ::kaldi::CuVectorBase<double> conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::CuVectorBase<double>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::CuVectorBase<double>* cpp = __cu__vector_clifwrap::pyCuDoubleVectorBase::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::CuVectorBase<double>>* c) {
  assert(c != nullptr);
  ::kaldi::CuVectorBase<double>* cpp = __cu__vector_clifwrap::pyCuDoubleVectorBase::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__cu__vector_clifwrap::pyCuDoubleVectorBase::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::CuVectorBase<double>>* c) {
  assert(c != nullptr);
  ::kaldi::CuVectorBase<double>* cpp = __cu__vector_clifwrap::pyCuDoubleVectorBase::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__cu__vector_clifwrap::pyCuDoubleVectorBase::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert CuDoubleVectorBase instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::CuVectorBase<double>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cu__vector_clifwrap::pyCuDoubleVectorBase::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__vector_clifwrap::pyCuDoubleVectorBase::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CuVectorBase<double>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::CuVectorBase<double>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cu__vector_clifwrap::pyCuDoubleVectorBase::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__vector_clifwrap::pyCuDoubleVectorBase::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CuVectorBase<double>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::CuVectorBase<double>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cu__vector_clifwrap::pyCuDoubleVectorBase::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__vector_clifwrap::pyCuDoubleVectorBase::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CuVectorBase<double>>(std::move(c));
  return py;
}

// CuSubVector to/from ::kaldi::CuSubVector<float> conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::CuSubVector<float>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::CuSubVector<float>* cpp = __cu__vector_clifwrap::pyCuSubVector::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::CuSubVector<float>>* c) {
  assert(c != nullptr);
  ::kaldi::CuSubVector<float>* cpp = __cu__vector_clifwrap::pyCuSubVector::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__cu__vector_clifwrap::pyCuSubVector::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::CuSubVector<float>>* c) {
  assert(c != nullptr);
  ::kaldi::CuSubVector<float>* cpp = __cu__vector_clifwrap::pyCuSubVector::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__cu__vector_clifwrap::pyCuSubVector::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert CuSubVector instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::CuSubVector<float>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cu__vector_clifwrap::pyCuSubVector::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__vector_clifwrap::pyCuSubVector::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CuSubVector<float>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::CuSubVector<float>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cu__vector_clifwrap::pyCuSubVector::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__vector_clifwrap::pyCuSubVector::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CuSubVector<float>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::CuSubVector<float>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cu__vector_clifwrap::pyCuSubVector::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__vector_clifwrap::pyCuSubVector::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CuSubVector<float>>(std::move(c));
  return py;
}

// CuVector to/from ::kaldi::CuVector<float> conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::CuVector<float>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::CuVector<float>* cpp = __cu__vector_clifwrap::pyCuVector::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::CuVector<float>>* c) {
  assert(c != nullptr);
  ::kaldi::CuVector<float>* cpp = __cu__vector_clifwrap::pyCuVector::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__cu__vector_clifwrap::pyCuVector::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::CuVector<float>>* c) {
  assert(c != nullptr);
  ::kaldi::CuVector<float>* cpp = __cu__vector_clifwrap::pyCuVector::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__cu__vector_clifwrap::pyCuVector::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert CuVector instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::CuVector<float>* c) {
  assert(c != nullptr);
  ::kaldi::CuVector<float>* cpp = __cu__vector_clifwrap::pyCuVector::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::CuVector<float>>* c) {
  assert(c != nullptr);
  ::kaldi::CuVector<float>* cpp = __cu__vector_clifwrap::pyCuVector::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::CuVector<float>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cu__vector_clifwrap::pyCuVector::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__vector_clifwrap::pyCuVector::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CuVector<float>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::CuVector<float>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cu__vector_clifwrap::pyCuVector::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__vector_clifwrap::pyCuVector::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CuVector<float>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::CuVector<float>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cu__vector_clifwrap::pyCuVector::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__vector_clifwrap::pyCuVector::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CuVector<float>>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::CuVector<float>& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__cu__vector_clifwrap::pyCuVector::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__vector_clifwrap::pyCuVector::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::CuVector<float>>(c);
  return py;
}

// CuVectorBase to/from ::kaldi::CuVectorBase<float> conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::CuVectorBase<float>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::CuVectorBase<float>* cpp = __cu__vector_clifwrap::pyCuVectorBase::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::CuVectorBase<float>>* c) {
  assert(c != nullptr);
  ::kaldi::CuVectorBase<float>* cpp = __cu__vector_clifwrap::pyCuVectorBase::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__cu__vector_clifwrap::pyCuVectorBase::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::CuVectorBase<float>>* c) {
  assert(c != nullptr);
  ::kaldi::CuVectorBase<float>* cpp = __cu__vector_clifwrap::pyCuVectorBase::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__cu__vector_clifwrap::pyCuVectorBase::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert CuVectorBase instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::CuVectorBase<float>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cu__vector_clifwrap::pyCuVectorBase::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__vector_clifwrap::pyCuVectorBase::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CuVectorBase<float>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::CuVectorBase<float>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cu__vector_clifwrap::pyCuVectorBase::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__vector_clifwrap::pyCuVectorBase::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CuVectorBase<float>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::CuVectorBase<float>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cu__vector_clifwrap::pyCuVectorBase::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cu__vector_clifwrap::pyCuVectorBase::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::CuVectorBase<float>>(std::move(c));
  return py;
}

}  // namespace kaldi
