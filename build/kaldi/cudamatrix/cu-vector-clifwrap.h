//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/cudamatrix/cu-vector.clif

#include <memory>
#include "clif/python/optional.h"
#include "cudamatrix/cu-vector.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::CuSubVector<double>` as CuDoubleSubVector
bool Clif_PyObjAs(PyObject* input, ::kaldi::CuSubVector<double>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::CuSubVector<double>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::CuSubVector<double>>* output);
PyObject* Clif_PyObjFrom(::kaldi::CuSubVector<double>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::CuSubVector<double>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::CuSubVector<double>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::CuSubVector<double>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::CuSubVector<double>&, py::PostConv) = delete;
// CLIF use `::kaldi::CuVector<double>` as CuDoubleVector
bool Clif_PyObjAs(PyObject* input, ::kaldi::CuVector<double>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::CuVector<double>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::CuVector<double>>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::CuVector<double>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::CuVector<double>>* output);
PyObject* Clif_PyObjFrom(::kaldi::CuVector<double>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::CuVector<double>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::CuVector<double>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::CuVector<double>&, py::PostConv);
// CLIF use `::kaldi::CuVectorBase<double>` as CuDoubleVectorBase
bool Clif_PyObjAs(PyObject* input, ::kaldi::CuVectorBase<double>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::CuVectorBase<double>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::CuVectorBase<double>>* output);
PyObject* Clif_PyObjFrom(::kaldi::CuVectorBase<double>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::CuVectorBase<double>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::CuVectorBase<double>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::CuVectorBase<double>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::CuVectorBase<double>&, py::PostConv) = delete;
// CLIF use `::kaldi::CuSubVector<float>` as CuSubVector
bool Clif_PyObjAs(PyObject* input, ::kaldi::CuSubVector<float>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::CuSubVector<float>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::CuSubVector<float>>* output);
PyObject* Clif_PyObjFrom(::kaldi::CuSubVector<float>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::CuSubVector<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::CuSubVector<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::CuSubVector<float>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::CuSubVector<float>&, py::PostConv) = delete;
// CLIF use `::kaldi::CuVector<float>` as CuVector
bool Clif_PyObjAs(PyObject* input, ::kaldi::CuVector<float>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::CuVector<float>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::CuVector<float>>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::CuVector<float>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::CuVector<float>>* output);
PyObject* Clif_PyObjFrom(::kaldi::CuVector<float>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::CuVector<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::CuVector<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::CuVector<float>&, py::PostConv);
// CLIF use `::kaldi::CuVectorBase<float>` as CuVectorBase
bool Clif_PyObjAs(PyObject* input, ::kaldi::CuVectorBase<float>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::CuVectorBase<float>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::CuVectorBase<float>>* output);
PyObject* Clif_PyObjFrom(::kaldi::CuVectorBase<float>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::CuVectorBase<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::CuVectorBase<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::CuVectorBase<float>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::CuVectorBase<float>&, py::PostConv) = delete;

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_cu_vector")) Py_DECREF(m);
// CLIF init_module else goto err;
