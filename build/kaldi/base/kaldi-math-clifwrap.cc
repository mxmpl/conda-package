//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/base/kaldi-math.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "kaldi-math-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __kaldi__math_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyRandomState {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::RandomState> cpp;
};
static ::kaldi::RandomState* ThisPtr(PyObject*);

static PyObject* get_seed(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->seed, {});
}

static int set_seed(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the seed attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->seed)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for seed:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("seed"), get_seed, set_seed, C("C++ unsigned int RandomState.seed")},
  {}
};

// RandomState __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// RandomState __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// RandomState __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_kaldi_math.RandomState",           // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::RandomState", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  nullptr,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "RandomState takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::RandomState>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::RandomState* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_RandomState"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::RandomState"));
      if (!PyErr_Occurred()) {
        ::kaldi::RandomState* c = static_cast<::kaldi::RandomState*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::RandomState*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyRandomState

// rand(state:RandomState=default) -> int
static PyObject* wrapRand_as_rand(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:rand", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::RandomState * arg1;
  if (nargs > 0) {
    if (!a[0]) arg1 = (::kaldi::RandomState *)nullptr;
    else if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("rand", names[0], "::kaldi::RandomState *", a[0]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    ret0 = ::kaldi::Rand(); break;
  case 1:
    ret0 = ::kaldi::Rand(arg1); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _rand_int(first:int, last:int, state:RandomState=default) -> int
static PyObject* wrapRandInt_as__rand_int(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("first"),
      C("last"),
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:_rand_int", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_rand_int", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_rand_int", names[1], "int", a[1]);
  ::kaldi::RandomState * arg3;
  if (nargs > 2) {
    if (!a[2]) arg3 = (::kaldi::RandomState *)nullptr;
    else if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("_rand_int", names[2], "::kaldi::RandomState *", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ret0 = ::kaldi::RandInt(std::move(arg1), std::move(arg2)); break;
  case 3:
    ret0 = ::kaldi::RandInt(std::move(arg1), std::move(arg2), arg3); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _with_prob(prob:float, state:RandomState=default) -> bool
static PyObject* wrapWithProb_as__with_prob(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("prob"),
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:_with_prob", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_with_prob", names[0], "float", a[0]);
  ::kaldi::RandomState * arg2;
  if (nargs > 1) {
    if (!a[1]) arg2 = (::kaldi::RandomState *)nullptr;
    else if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_with_prob", names[1], "::kaldi::RandomState *", a[1]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    ret0 = ::kaldi::WithProb(std::move(arg1)); break;
  case 2:
    ret0 = ::kaldi::WithProb(std::move(arg1), arg2); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// rand_uniform(state:RandomState=default) -> float
static PyObject* wrapRandUniform_as_rand_uniform(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:rand_uniform", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::RandomState * arg1;
  if (nargs > 0) {
    if (!a[0]) arg1 = (::kaldi::RandomState *)nullptr;
    else if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("rand_uniform", names[0], "::kaldi::RandomState *", a[0]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    ret0 = ::kaldi::RandUniform(); break;
  case 1:
    ret0 = ::kaldi::RandUniform(arg1); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// rand_gauss(state:RandomState=default) -> float
static PyObject* wrapRandGauss_as_rand_gauss(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:rand_gauss", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::RandomState * arg1;
  if (nargs > 0) {
    if (!a[0]) arg1 = (::kaldi::RandomState *)nullptr;
    else if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("rand_gauss", names[0], "::kaldi::RandomState *", a[0]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    ret0 = ::kaldi::RandGauss(); break;
  case 1:
    ret0 = ::kaldi::RandGauss(arg1); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// rand_poisson(lambda:float, state:RandomState=default) -> int
static PyObject* wrapRandPoisson_as_rand_poisson(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("lambda"),
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:rand_poisson", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("rand_poisson", names[0], "float", a[0]);
  ::kaldi::RandomState * arg2;
  if (nargs > 1) {
    if (!a[1]) arg2 = (::kaldi::RandomState *)nullptr;
    else if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("rand_poisson", names[1], "::kaldi::RandomState *", a[1]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    ret0 = ::kaldi::RandPoisson(std::move(arg1)); break;
  case 2:
    ret0 = ::kaldi::RandPoisson(std::move(arg1), arg2); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// float_rand_prune(post:float, prune_tresh:float, state:RandomState=default) -> float
static PyObject* wrapRandPrune_as_float_rand_prune(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("post"),
      C("prune_tresh"),
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:float_rand_prune", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("float_rand_prune", names[0], "double", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("float_rand_prune", names[1], "float", a[1]);
  ::kaldi::RandomState * arg3;
  if (nargs > 2) {
    if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("float_rand_prune", names[2], "::kaldi::RandomState *", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  double ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ret0 = ::kaldi::RandPrune(std::move(arg1), std::move(arg2)); break;
  case 3:
    ret0 = ::kaldi::RandPrune(std::move(arg1), std::move(arg2), arg3); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// approx_equal(a:float, b:float, relative_tolerance:float=default) -> bool
static PyObject* wrapApproxEqual_as_approx_equal(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("a"),
      C("b"),
      C("relative_tolerance"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:approx_equal", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("approx_equal", names[0], "float", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("approx_equal", names[1], "float", a[1]);
  float arg3;
  if (nargs > 2) {
    if (!a[2]) arg3 = (float)1.000000e-03;
    else if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("approx_equal", names[2], "float", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ret0 = ::kaldi::ApproxEqual(std::move(arg1), std::move(arg2)); break;
  case 3:
    ret0 = ::kaldi::ApproxEqual(std::move(arg1), std::move(arg2), std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _round_up_to_nearest_power_of_two(n:int) -> int
static PyObject* wrapRoundUpToNearestPowerOfTwo_as__round_up_to_nearest_power_of_two(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("n"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_round_up_to_nearest_power_of_two", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_round_up_to_nearest_power_of_two", names[0], "int", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::RoundUpToNearestPowerOfTwo(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// divide_rounding_down(a:int, b:int) -> int
static PyObject* wrapDivideRoundingDown_as_divide_rounding_down(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("a"),
      C("b"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:divide_rounding_down", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("divide_rounding_down", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("divide_rounding_down", names[1], "int", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::DivideRoundingDown(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// gcd(m:int, n:int) -> int
static PyObject* wrapGcd_as_gcd(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("m"),
      C("n"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:gcd", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("gcd", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("gcd", names[1], "int", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::Gcd(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _lcm(m:int, n:int) -> int
static PyObject* wrapLcm_as__lcm(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("m"),
      C("n"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_lcm", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_lcm", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_lcm", names[1], "int", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::Lcm(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _factorize(m:int) -> list<int>
static PyObject* wrapFactorize_as__factorize(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("m"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_factorize", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_factorize", names[0], "int", a[0]);
  ::std::vector<int> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::Factorize(std::move(arg1), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("rand"), (PyCFunction)wrapRand_as_rand, METH_VARARGS | METH_KEYWORDS, C("rand(state:RandomState=default) -> int\n\nReturns a random integer between 0 and RAND_MAX, inclusive.")},
  {C("_rand_int"), (PyCFunction)wrapRandInt_as__rand_int, METH_VARARGS | METH_KEYWORDS, C("_rand_int(first:int, last:int, state:RandomState=default) -> int\n\nReturns a random integer between first and last inclusive. Should not be called directly, instead call it via math.py")},
  {C("_with_prob"), (PyCFunction)wrapWithProb_as__with_prob, METH_VARARGS | METH_KEYWORDS, C("_with_prob(prob:float, state:RandomState=default) -> bool\n\nThis function should not be called directly, instead call it using with_prob from math.py")},
  {C("rand_uniform"), (PyCFunction)wrapRandUniform_as_rand_uniform, METH_VARARGS | METH_KEYWORDS, C("rand_uniform(state:RandomState=default) -> float\n\nReturns a random number strictly between 0 and 1.")},
  {C("rand_gauss"), (PyCFunction)wrapRandGauss_as_rand_gauss, METH_VARARGS | METH_KEYWORDS, C("rand_gauss(state:RandomState=default) -> float\n  Calls C++ function\n  float ::kaldi::RandGauss(::kaldi::RandomState *)")},
  {C("rand_poisson"), (PyCFunction)wrapRandPoisson_as_rand_poisson, METH_VARARGS | METH_KEYWORDS, C("rand_poisson(lambda:float, state:RandomState=default) -> int\n\nReturns poisson-distributed random number.")},
  {C("float_rand_prune"), (PyCFunction)wrapRandPrune_as_float_rand_prune, METH_VARARGS | METH_KEYWORDS, C("float_rand_prune(post:float, prune_tresh:float, state:RandomState=default) -> float\n\nRandomized pruning mechanism that preserves expectations, typically used to prune posteriors.")},
  {C("approx_equal"), (PyCFunction)wrapApproxEqual_as_approx_equal, METH_VARARGS | METH_KEYWORDS, C("approx_equal(a:float, b:float, relative_tolerance:float=default) -> bool\n\nReturn abs(a - b) <= relative_tolerance * (abs(a) + abs(b))")},
  {C("_round_up_to_nearest_power_of_two"), (PyCFunction)wrapRoundUpToNearestPowerOfTwo_as__round_up_to_nearest_power_of_two, METH_VARARGS | METH_KEYWORDS, C("_round_up_to_nearest_power_of_two(n:int) -> int\n\nShould not be called directly. Instead call it from math.py")},
  {C("divide_rounding_down"), (PyCFunction)wrapDivideRoundingDown_as_divide_rounding_down, METH_VARARGS | METH_KEYWORDS, C("divide_rounding_down(a:int, b:int) -> int\n\nReturns the division")},
  {C("gcd"), (PyCFunction)wrapGcd_as_gcd, METH_VARARGS | METH_KEYWORDS, C("gcd(m:int, n:int) -> int\n\nReturns the greatest common divisor of two integers.")},
  {C("_lcm"), (PyCFunction)wrapLcm_as__lcm, METH_VARARGS | METH_KEYWORDS, C("_lcm(m:int, n:int) -> int\n\nReturns the least common multiple of two integers.\nThis function should not be called directly, instead call it from math.py")},
  {C("_factorize"), (PyCFunction)wrapFactorize_as__factorize, METH_VARARGS | METH_KEYWORDS, C("_factorize(m:int) -> list<int>\n\nReturns the decomposiion of m into its prime factors.\nThis function should not be called directly, instead call it using factorize(x) from math.py")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyRandomState::wrapper_Type) < 0) return false;
  Py_INCREF(&pyRandomState::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_kaldi_math",  // module name
  "CLIF-generated module for base/kaldi-math.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "RandomState", reinterpret_cast<PyObject*>(&pyRandomState::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __kaldi__math_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// RandomState to/from ::kaldi::RandomState conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::RandomState** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::RandomState* cpp = __kaldi__math_clifwrap::pyRandomState::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::RandomState>* c) {
  assert(c != nullptr);
  ::kaldi::RandomState* cpp = __kaldi__math_clifwrap::pyRandomState::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__kaldi__math_clifwrap::pyRandomState::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::RandomState>* c) {
  assert(c != nullptr);
  ::kaldi::RandomState* cpp = __kaldi__math_clifwrap::pyRandomState::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__kaldi__math_clifwrap::pyRandomState::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert RandomState instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::RandomState* c) {
  assert(c != nullptr);
  ::kaldi::RandomState* cpp = __kaldi__math_clifwrap::pyRandomState::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::RandomState>* c) {
  assert(c != nullptr);
  ::kaldi::RandomState* cpp = __kaldi__math_clifwrap::pyRandomState::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::RandomState* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__math_clifwrap::pyRandomState::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__math_clifwrap::pyRandomState::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RandomState>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomState> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__math_clifwrap::pyRandomState::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__math_clifwrap::pyRandomState::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RandomState>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomState> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__math_clifwrap::pyRandomState::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__math_clifwrap::pyRandomState::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RandomState>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::RandomState& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__kaldi__math_clifwrap::pyRandomState::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__math_clifwrap::pyRandomState::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::RandomState>(c);
  return py;
}

}  // namespace kaldi
