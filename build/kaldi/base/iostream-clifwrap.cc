//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/base/iostream.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "iostream-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __iostream_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyistream {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::std::basic_istream<char, ::std::char_traits<char> >> cpp;
};
static ::std::basic_istream<char, ::std::char_traits<char> >* ThisPtr(PyObject*);

// good() -> bool
static PyObject* wrapgood(PyObject* self) {
  // Call actual C++ method.
  ::std::basic_istream<char, ::std::char_traits<char> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->good();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::std::basic_ios<char, ::std::char_traits<char> >*
static PyObject* as_std_basic_ios_char__std_char_traits_char(PyObject* self) {
  ::std::basic_ios<char, ::std::char_traits<char> >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::std::basic_ios<char, ::std::char_traits<char> >"), nullptr);
}

// Implicit cast this as ::std::ios_base*
static PyObject* as_std_ios_base(PyObject* self) {
  ::std::ios_base* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::std::ios_base"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("good"), (PyCFunction)wrapgood, METH_NOARGS, C("good() -> bool\n\nChecks whether the state of the stream is good.")},
  {C("as_std_basic_ios_char__std_char_traits_char"), (PyCFunction)as_std_basic_ios_char__std_char_traits_char, METH_NOARGS, C("Upcast to ::std::basic_ios<char, ::std::char_traits<char> >*")},
  {C("as_std_ios_base"), (PyCFunction)as_std_ios_base, METH_NOARGS, C("Upcast to ::std::ios_base*")},
  {}
};

// istream __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// istream __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_iostream.istream",                 // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Input stream.",                     // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::std::basic_istream<char, ::std::char_traits<char> >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_std_basic_istream_char__std_char_traits_char"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::std::basic_istream<char, ::std::char_traits<char> >"));
      if (!PyErr_Occurred()) {
        ::std::basic_istream<char, ::std::char_traits<char> >* c = static_cast<::std::basic_istream<char, ::std::char_traits<char> >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::std::basic_istream<char, ::std::char_traits<char> >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyistream

namespace pyostream {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::std::basic_ostream<char, ::std::char_traits<char> >> cpp;
};
static ::std::basic_ostream<char, ::std::char_traits<char> >* ThisPtr(PyObject*);

// good() -> bool
static PyObject* wrapgood(PyObject* self) {
  // Call actual C++ method.
  ::std::basic_ostream<char, ::std::char_traits<char> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->good();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::std::basic_ios<char, ::std::char_traits<char> >*
static PyObject* as_std_basic_ios_char__std_char_traits_char(PyObject* self) {
  ::std::basic_ios<char, ::std::char_traits<char> >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::std::basic_ios<char, ::std::char_traits<char> >"), nullptr);
}

// Implicit cast this as ::std::ios_base*
static PyObject* as_std_ios_base(PyObject* self) {
  ::std::ios_base* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::std::ios_base"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("good"), (PyCFunction)wrapgood, METH_NOARGS, C("good() -> bool\n\nChecks whether the state of the stream is good.")},
  {C("as_std_basic_ios_char__std_char_traits_char"), (PyCFunction)as_std_basic_ios_char__std_char_traits_char, METH_NOARGS, C("Upcast to ::std::basic_ios<char, ::std::char_traits<char> >*")},
  {C("as_std_ios_base"), (PyCFunction)as_std_ios_base, METH_NOARGS, C("Upcast to ::std::ios_base*")},
  {}
};

// ostream __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ostream __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_iostream.ostream",                 // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Output stream.",                    // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::std::basic_ostream<char, ::std::char_traits<char> >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_std_basic_ostream_char__std_char_traits_char"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::std::basic_ostream<char, ::std::char_traits<char> >"));
      if (!PyErr_Occurred()) {
        ::std::basic_ostream<char, ::std::char_traits<char> >* c = static_cast<::std::basic_ostream<char, ::std::char_traits<char> >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::std::basic_ostream<char, ::std::char_traits<char> >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyostream

namespace pyiostream {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::std::basic_iostream<char, ::std::char_traits<char> >> cpp;
};
static ::std::basic_iostream<char, ::std::char_traits<char> >* ThisPtr(PyObject*);

// Implicit cast this as ::std::basic_istream<char, ::std::char_traits<char> >*
static PyObject* as_std_basic_istream_char__std_char_traits_char(PyObject* self) {
  ::std::basic_istream<char, ::std::char_traits<char> >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::std::basic_istream<char, ::std::char_traits<char> >"), nullptr);
}

// Implicit cast this as ::std::basic_ostream<char, ::std::char_traits<char> >*
static PyObject* as_std_basic_ostream_char__std_char_traits_char(PyObject* self) {
  ::std::basic_ostream<char, ::std::char_traits<char> >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::std::basic_ostream<char, ::std::char_traits<char> >"), nullptr);
}

// Implicit cast this as ::std::basic_ios<char, ::std::char_traits<char> >*
static PyObject* as_std_basic_ios_char__std_char_traits_char(PyObject* self) {
  ::std::basic_ios<char, ::std::char_traits<char> >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::std::basic_ios<char, ::std::char_traits<char> >"), nullptr);
}

// Implicit cast this as ::std::ios_base*
static PyObject* as_std_ios_base(PyObject* self) {
  ::std::ios_base* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::std::ios_base"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("as_std_basic_istream_char__std_char_traits_char"), (PyCFunction)as_std_basic_istream_char__std_char_traits_char, METH_NOARGS, C("Upcast to ::std::basic_istream<char, ::std::char_traits<char> >*")},
  {C("as_std_basic_ostream_char__std_char_traits_char"), (PyCFunction)as_std_basic_ostream_char__std_char_traits_char, METH_NOARGS, C("Upcast to ::std::basic_ostream<char, ::std::char_traits<char> >*")},
  {C("as_std_basic_ios_char__std_char_traits_char"), (PyCFunction)as_std_basic_ios_char__std_char_traits_char, METH_NOARGS, C("Upcast to ::std::basic_ios<char, ::std::char_traits<char> >*")},
  {C("as_std_ios_base"), (PyCFunction)as_std_ios_base, METH_NOARGS, C("Upcast to ::std::ios_base*")},
  {}
};

// iostream __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// iostream __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_iostream.iostream",                // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Input/output stream.",              // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::std::basic_iostream<char, ::std::char_traits<char> >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_std_basic_iostream_char__std_char_traits_char"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::std::basic_iostream<char, ::std::char_traits<char> >"));
      if (!PyErr_Occurred()) {
        ::std::basic_iostream<char, ::std::char_traits<char> >* c = static_cast<::std::basic_iostream<char, ::std::char_traits<char> >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::std::basic_iostream<char, ::std::char_traits<char> >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyiostream

// get_stdin() -> istream
static PyObject* wrapGetStdinPtr_as_get_stdin(PyObject* self) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::gtl::optional<::std::basic_istream<char, ::std::char_traits<char> > *> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::std::GetStdinPtr();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0.value()), {});
}

// get_stdout() -> ostream
static PyObject* wrapGetStdoutPtr_as_get_stdout(PyObject* self) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::gtl::optional<::std::basic_ostream<char, ::std::char_traits<char> > *> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::std::GetStdoutPtr();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0.value()), {});
}

// get_stderr() -> ostream
static PyObject* wrapGetStderrPtr_as_get_stderr(PyObject* self) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::gtl::optional<::std::basic_ostream<char, ::std::char_traits<char> > *> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::std::GetStderrPtr();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0.value()), {});
}

// flush(os:ostream)
static PyObject* wrapFlush_as_flush(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("os"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:flush", names, &a[0])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("flush", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::std::Flush(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read_text(is:istream) -> str
static PyObject* wrapRead_as_read_text(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("is"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:read_text", names, &a[0])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read_text", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::std::Read(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// read(is:istream) -> bytes
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("is"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:read", names, &a[0])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::std::Read(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// readline_text(is:istream) -> str
static PyObject* wrapReadLine_as_readline_text(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("is"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:readline_text", names, &a[0])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("readline_text", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::std::ReadLine(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// readline(is:istream) -> bytes
static PyObject* wrapReadLine_as_readline(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("is"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:readline", names, &a[0])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("readline", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::std::ReadLine(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// write_text(os:ostream, s:str)
static PyObject* wrapWrite_as_write_text(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("s"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write_text", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write_text", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  ::std::string arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write_text", names[1], "::std::string", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::std::Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// write(os:ostream, b:bytes)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("b"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  ::std::string arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "::std::string", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::std::Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("get_stdin"), (PyCFunction)wrapGetStdinPtr_as_get_stdin, METH_NOARGS, C("get_stdin() -> istream\n\nReturns standard input stream.")},
  {C("get_stdout"), (PyCFunction)wrapGetStdoutPtr_as_get_stdout, METH_NOARGS, C("get_stdout() -> ostream\n\nReturns standard output stream.")},
  {C("get_stderr"), (PyCFunction)wrapGetStderrPtr_as_get_stderr, METH_NOARGS, C("get_stderr() -> ostream\n\nReturns standard error stream.")},
  {C("flush"), (PyCFunction)wrapFlush_as_flush, METH_VARARGS | METH_KEYWORDS, C("flush(os:ostream)\n\nFlushes output stream.")},
  {C("read_text"), (PyCFunction)wrapRead_as_read_text, METH_VARARGS | METH_KEYWORDS, C("read_text(is:istream) -> str\n\nReads and returns the contents of the stream as a unicode string.")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream) -> bytes\n\nReads and returns the contents of the stream as a bytes object.")},
  {C("readline_text"), (PyCFunction)wrapReadLine_as_readline_text, METH_VARARGS | METH_KEYWORDS, C("readline_text(is:istream) -> str\n\nReads and returns a line from the input stream.\n\nIf the stream is already at EOF, an empty unicode string is returned.")},
  {C("readline"), (PyCFunction)wrapReadLine_as_readline, METH_VARARGS | METH_KEYWORDS, C("readline(is:istream) -> bytes\n\nReads and returns a line from the input stream.\n\nIf the stream is already at EOF, an empty bytes object is returned.")},
  {C("write_text"), (PyCFunction)wrapWrite_as_write_text, METH_VARARGS | METH_KEYWORDS, C("write_text(os:ostream, s:str)\n\nWrites unicode string to output stream.")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, b:bytes)\n\nWrites bytes object to output stream.")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyistream::wrapper_Type) < 0) return false;
  Py_INCREF(&pyistream::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyostream::wrapper_Type) < 0) return false;
  Py_INCREF(&pyostream::wrapper_Type);  // For PyModule_AddObject to steal.
  pyiostream::wrapper_Type.tp_base = &pyistream::wrapper_Type;
  if (PyType_Ready(&pyiostream::wrapper_Type) < 0) return false;
  Py_INCREF(&pyiostream::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_iostream",  // module name
  "C++ std::iostream wrapper.\n\nThis module provides the wrappers needed for working with C++ std::iostream\ninstances. The wrappers for input and/or output stream types do not expose any\nmembers other than `good` since we do not want to work with them directly in\nPython. They can be used for wrapping methods and functions that accept or\nreturn iostream objects. The get_* utility functions provide the handles for\nthe standard C++ streams.", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "istream", reinterpret_cast<PyObject*>(&pyistream::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "ostream", reinterpret_cast<PyObject*>(&pyostream::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "iostream", reinterpret_cast<PyObject*>(&pyiostream::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __iostream_clifwrap

namespace std {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// iostream to/from ::std::basic_iostream<char, ::std::char_traits<char> > conversion

bool Clif_PyObjAs(PyObject* py, ::std::basic_iostream<char, ::std::char_traits<char> >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::std::basic_iostream<char, ::std::char_traits<char> >* cpp = __iostream_clifwrap::pyiostream::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::std::basic_iostream<char, ::std::char_traits<char> >>* c) {
  assert(c != nullptr);
  ::std::basic_iostream<char, ::std::char_traits<char> >* cpp = __iostream_clifwrap::pyiostream::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__iostream_clifwrap::pyiostream::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::std::basic_iostream<char, ::std::char_traits<char> >>* c) {
  assert(c != nullptr);
  ::std::basic_iostream<char, ::std::char_traits<char> >* cpp = __iostream_clifwrap::pyiostream::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__iostream_clifwrap::pyiostream::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert iostream instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::std::basic_iostream<char, ::std::char_traits<char> >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__iostream_clifwrap::pyiostream::wrapper_Type, NULL, NULL);
  reinterpret_cast<__iostream_clifwrap::pyiostream::wrapper*>(py)->cpp = ::clif::Instance<::std::basic_iostream<char, ::std::char_traits<char> >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::std::basic_iostream<char, ::std::char_traits<char> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__iostream_clifwrap::pyiostream::wrapper_Type, NULL, NULL);
  reinterpret_cast<__iostream_clifwrap::pyiostream::wrapper*>(py)->cpp = ::clif::Instance<::std::basic_iostream<char, ::std::char_traits<char> >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::std::basic_iostream<char, ::std::char_traits<char> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__iostream_clifwrap::pyiostream::wrapper_Type, NULL, NULL);
  reinterpret_cast<__iostream_clifwrap::pyiostream::wrapper*>(py)->cpp = ::clif::Instance<::std::basic_iostream<char, ::std::char_traits<char> >>(std::move(c));
  return py;
}

// istream to/from ::std::basic_istream<char, ::std::char_traits<char> > conversion

bool Clif_PyObjAs(PyObject* py, ::std::basic_istream<char, ::std::char_traits<char> >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::std::basic_istream<char, ::std::char_traits<char> >* cpp = __iostream_clifwrap::pyistream::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::std::basic_istream<char, ::std::char_traits<char> >>* c) {
  assert(c != nullptr);
  ::std::basic_istream<char, ::std::char_traits<char> >* cpp = __iostream_clifwrap::pyistream::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__iostream_clifwrap::pyistream::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::std::basic_istream<char, ::std::char_traits<char> >>* c) {
  assert(c != nullptr);
  ::std::basic_istream<char, ::std::char_traits<char> >* cpp = __iostream_clifwrap::pyistream::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__iostream_clifwrap::pyistream::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert istream instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::std::basic_istream<char, ::std::char_traits<char> >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__iostream_clifwrap::pyistream::wrapper_Type, NULL, NULL);
  reinterpret_cast<__iostream_clifwrap::pyistream::wrapper*>(py)->cpp = ::clif::Instance<::std::basic_istream<char, ::std::char_traits<char> >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::std::basic_istream<char, ::std::char_traits<char> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__iostream_clifwrap::pyistream::wrapper_Type, NULL, NULL);
  reinterpret_cast<__iostream_clifwrap::pyistream::wrapper*>(py)->cpp = ::clif::Instance<::std::basic_istream<char, ::std::char_traits<char> >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::std::basic_istream<char, ::std::char_traits<char> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__iostream_clifwrap::pyistream::wrapper_Type, NULL, NULL);
  reinterpret_cast<__iostream_clifwrap::pyistream::wrapper*>(py)->cpp = ::clif::Instance<::std::basic_istream<char, ::std::char_traits<char> >>(std::move(c));
  return py;
}

// ostream to/from ::std::basic_ostream<char, ::std::char_traits<char> > conversion

bool Clif_PyObjAs(PyObject* py, ::std::basic_ostream<char, ::std::char_traits<char> >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::std::basic_ostream<char, ::std::char_traits<char> >* cpp = __iostream_clifwrap::pyostream::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::std::basic_ostream<char, ::std::char_traits<char> >>* c) {
  assert(c != nullptr);
  ::std::basic_ostream<char, ::std::char_traits<char> >* cpp = __iostream_clifwrap::pyostream::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__iostream_clifwrap::pyostream::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::std::basic_ostream<char, ::std::char_traits<char> >>* c) {
  assert(c != nullptr);
  ::std::basic_ostream<char, ::std::char_traits<char> >* cpp = __iostream_clifwrap::pyostream::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__iostream_clifwrap::pyostream::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ostream instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::std::basic_ostream<char, ::std::char_traits<char> >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__iostream_clifwrap::pyostream::wrapper_Type, NULL, NULL);
  reinterpret_cast<__iostream_clifwrap::pyostream::wrapper*>(py)->cpp = ::clif::Instance<::std::basic_ostream<char, ::std::char_traits<char> >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::std::basic_ostream<char, ::std::char_traits<char> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__iostream_clifwrap::pyostream::wrapper_Type, NULL, NULL);
  reinterpret_cast<__iostream_clifwrap::pyostream::wrapper*>(py)->cpp = ::clif::Instance<::std::basic_ostream<char, ::std::char_traits<char> >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::std::basic_ostream<char, ::std::char_traits<char> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__iostream_clifwrap::pyostream::wrapper_Type, NULL, NULL);
  reinterpret_cast<__iostream_clifwrap::pyostream::wrapper*>(py)->cpp = ::clif::Instance<::std::basic_ostream<char, ::std::char_traits<char> >>(std::move(c));
  return py;
}

}  // namespace std
