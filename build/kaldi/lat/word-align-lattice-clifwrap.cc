//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/lat/word-align-lattice.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "itf/options-itf-clifwrap.h"
#include "fstext/lattice-weight-clifwrap.h"
#include "fstext/vector-fst-clifwrap.h"
#include "hmm/transition-model-clifwrap.h"
#include "word-align-lattice-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __word__align__lattice_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes

static PyObject *_Enum{}, *_IntEnum{};  // set below in Init()


namespace pyWordBoundaryInfoNewOpts {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::WordBoundaryInfoNewOpts> cpp;
};
static ::kaldi::WordBoundaryInfoNewOpts* ThisPtr(PyObject*);

static PyObject* get_silence_label(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->silence_label, {});
}

static int set_silence_label(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the silence_label attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->silence_label)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for silence_label:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_partial_word_label(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->partial_word_label, {});
}

static int set_partial_word_label(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the partial_word_label attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->partial_word_label)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for partial_word_label:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_reorder(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->reorder, {});
}

static int set_reorder(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the reorder attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->reorder)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for reorder:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::WordBoundaryInfoNewOpts* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("silence_label"), get_silence_label, set_silence_label, C("Label for silence arcs.")},
  {C("partial_word_label"), get_partial_word_label, set_partial_word_label, C("Label for partial word arcs at the end of \"forced-out\" utterances.")},
  {C("reorder"), get_reorder, set_reorder, C("Whether lattice was created from a graph with reorder option set.")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n\nRegisters options with an object implementing the options interface.\n\nArgs:\n  opts (OptionsItf): An object implementing the options interface.\n    Typically a command-line option parser.")},
  {}
};

// WordBoundaryInfoNewOpts __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// WordBoundaryInfoNewOpts __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// WordBoundaryInfoNewOpts __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_word_align_lattice.WordBoundaryInfoNewOpts", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Options for word alignment using word boundary phones.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "WordBoundaryInfoNewOpts takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::WordBoundaryInfoNewOpts>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::WordBoundaryInfoNewOpts* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_WordBoundaryInfoNewOpts"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::WordBoundaryInfoNewOpts"));
      if (!PyErr_Occurred()) {
        ::kaldi::WordBoundaryInfoNewOpts* c = static_cast<::kaldi::WordBoundaryInfoNewOpts*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::WordBoundaryInfoNewOpts*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyWordBoundaryInfoNewOpts

namespace pyWordBoundaryInfo {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::WordBoundaryInfo> cpp;
};
static ::kaldi::WordBoundaryInfo* ThisPtr(PyObject*);

// __init__(opts:WordBoundaryInfoNewOpts)
static PyObject* wrapWordBoundaryInfo_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::kaldi::WordBoundaryInfoNewOpts* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::WordBoundaryInfoNewOpts", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::WordBoundaryInfo>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// @classmethod from_file(opts:WordBoundaryInfoNewOpts, word_boundary_file:str) -> WordBoundaryInfo
static PyObject* wrapWordBoundaryInfo_as_from_file(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("opts"),
      C("word_boundary_file"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:from_file", names, &a[0], &a[1])) return nullptr;
  ::kaldi::WordBoundaryInfoNewOpts* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_file", names[0], "::kaldi::WordBoundaryInfoNewOpts", a[0]);
  ::std::string arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_file", names[1], "::std::string", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::WordBoundaryInfo> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::WordBoundaryInfo>(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// init(is:istream)
static PyObject* wrapInit_as_init(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("is"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:init", names, &a[0])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("init", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  // Call actual C++ method.
  ::kaldi::WordBoundaryInfo* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Init(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Create Python Enum object (cached in _PhoneType) for ::kaldi::WordBoundaryInfo::PhoneType
static PyObject* wrapPhoneType() {
  PyObject *py, *py_enum_class{}, *names = PyTuple_New(6);
  if (names == nullptr) return nullptr;
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("NO_PHONE"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::WordBoundaryInfo::PhoneType>::type>(::kaldi::WordBoundaryInfo::PhoneType::kNoPhone)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 0, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("WORD_BEGIN_PHONE"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::WordBoundaryInfo::PhoneType>::type>(::kaldi::WordBoundaryInfo::PhoneType::kWordBeginPhone)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 1, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("WORD_END_PHONE"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::WordBoundaryInfo::PhoneType>::type>(::kaldi::WordBoundaryInfo::PhoneType::kWordEndPhone)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 2, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("WORD_BEGIN_AND_END_PHONE"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::WordBoundaryInfo::PhoneType>::type>(::kaldi::WordBoundaryInfo::PhoneType::kWordBeginAndEndPhone)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 3, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("WORD_INTERNAL_PHONE"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::WordBoundaryInfo::PhoneType>::type>(::kaldi::WordBoundaryInfo::PhoneType::kWordInternalPhone)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 4, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("NON_WORD_PHONE"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::WordBoundaryInfo::PhoneType>::type>(::kaldi::WordBoundaryInfo::PhoneType::kNonWordPhone)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 5, py);
  py = PyUnicode_FromString("WordBoundaryInfo.PhoneType");
  py_enum_class = PyObject_CallFunctionObjArgs(_IntEnum, py, names, nullptr);
  Py_DECREF(py);
err:
  Py_DECREF(names);
  return py_enum_class;
}
static PyObject* _PhoneType{};  // set by above func in Init()

// type_of_phone(p:int) -> PhoneType
static PyObject* wrapTypeOfPhone_as_type_of_phone(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("p"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:type_of_phone", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("type_of_phone", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::WordBoundaryInfo* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::WordBoundaryInfo::PhoneType ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->TypeOfPhone(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyObject* get_phone_to_type(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->phone_to_type, {});
}

static int set_phone_to_type(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the phone_to_type attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->phone_to_type)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for phone_to_type:list<PhoneType>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_silence_label(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->silence_label, {});
}

static int set_silence_label(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the silence_label attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->silence_label)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for silence_label:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_partial_word_label(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->partial_word_label, {});
}

static int set_partial_word_label(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the partial_word_label attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->partial_word_label)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for partial_word_label:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_reorder(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->reorder, {});
}

static int set_reorder(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the reorder attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->reorder)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for reorder:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("phone_to_type"), get_phone_to_type, set_phone_to_type, C("Mapping from phone ids to phone types.")},
  {C("silence_label"), get_silence_label, set_silence_label, C("Label for silence arcs.")},
  {C("partial_word_label"), get_partial_word_label, set_partial_word_label, C("Label for partial word arcs at the end of \"forced-out\" utterances.")},
  {C("reorder"), get_reorder, set_reorder, C("Whether lattice was created from a graph with reorder option set.")},
  {}
};

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapWordBoundaryInfo_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(opts:WordBoundaryInfoNewOpts)\n  Calls C++ function\n  void ::kaldi::WordBoundaryInfo::WordBoundaryInfo(::kaldi::WordBoundaryInfoNewOpts)")},
  {C("from_file"), (PyCFunction)wrapWordBoundaryInfo_as_from_file, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_file(opts:WordBoundaryInfoNewOpts, word_boundary_file:str) -> WordBoundaryInfo\n\nCreates a new `WordBoundaryInfo` object from file.")},
  {C("init"), (PyCFunction)wrapInit_as_init, METH_VARARGS | METH_KEYWORDS, C("init(is:istream)\n\nInitializes with information read from an input stream.")},
  {C("type_of_phone"), (PyCFunction)wrapTypeOfPhone_as_type_of_phone, METH_VARARGS | METH_KEYWORDS, C("type_of_phone(p:int) -> PhoneType\n\nLooks up the type of the given phone id.\n\nArgs:\n  p (int): The input phone id.\n\nReturns:\n  PhoneType: The type of input phone id.")},
  {}
};

// WordBoundaryInfo __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// WordBoundaryInfo __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// WordBoundaryInfo __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_word_align_lattice.WordBoundaryInfo", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "WordBoundaryInfo(opts)\n\nWord boundary information.\n\nArgs:\n  opts (WordBoundaryInfoNewOpts): Decoder options.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapWordBoundaryInfo_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::WordBoundaryInfo* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_WordBoundaryInfo"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::WordBoundaryInfo"));
      if (!PyErr_Occurred()) {
        ::kaldi::WordBoundaryInfo* c = static_cast<::kaldi::WordBoundaryInfo*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::WordBoundaryInfo*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyWordBoundaryInfo

// _word_align_lattice(lat:CompactLatticeVectorFst, tmodel:TransitionModel, info:WordBoundaryInfo, max_states:int) -> (success:bool, lat_out:CompactLatticeVectorFst)
static PyObject* wrapWordAlignLattice_as__word_align_lattice(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("lat"),
      C("tmodel"),
      C("info"),
      C("max_states"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:_word_align_lattice", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_word_align_lattice", names[0], "::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > >", a[0]);
  ::kaldi::TransitionModel* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_word_align_lattice", names[1], "::kaldi::TransitionModel", a[1]);
  ::kaldi::WordBoundaryInfo* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("_word_align_lattice", names[2], "::kaldi::WordBoundaryInfo", a[2]);
  int arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("_word_align_lattice", names[3], "int", a[3]);
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > > ret1{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::WordAlignLattice(*arg1, *arg2, *arg3, std::move(arg4), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// test_word_aligned_lattice(lat:CompactLatticeVectorFst, tmodel:TransitionModel, info:WordBoundaryInfo, aligned_lat:CompactLatticeVectorFst)
static PyObject* wrapTestWordAlignedLattice_as_test_word_aligned_lattice(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("lat"),
      C("tmodel"),
      C("info"),
      C("aligned_lat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:test_word_aligned_lattice", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("test_word_aligned_lattice", names[0], "::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > >", a[0]);
  ::kaldi::TransitionModel* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("test_word_aligned_lattice", names[1], "::kaldi::TransitionModel", a[1]);
  ::kaldi::WordBoundaryInfo* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("test_word_aligned_lattice", names[2], "::kaldi::WordBoundaryInfo", a[2]);
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > >* arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("test_word_aligned_lattice", names[3], "::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > >", a[3]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::TestWordAlignedLattice(*arg1, *arg2, *arg3, *arg4);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("_word_align_lattice"), (PyCFunction)wrapWordAlignLattice_as__word_align_lattice, METH_VARARGS | METH_KEYWORDS, C("_word_align_lattice(lat:CompactLatticeVectorFst, tmodel:TransitionModel, info:WordBoundaryInfo, max_states:int) -> (success:bool, lat_out:CompactLatticeVectorFst)\n  Calls C++ function\n  bool ::kaldi::WordAlignLattice(::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > >, ::kaldi::TransitionModel, ::kaldi::WordBoundaryInfo, int, ::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > >*)")},
  {C("test_word_aligned_lattice"), (PyCFunction)wrapTestWordAlignedLattice_as_test_word_aligned_lattice, METH_VARARGS | METH_KEYWORDS, C("test_word_aligned_lattice(lat:CompactLatticeVectorFst, tmodel:TransitionModel, info:WordBoundaryInfo, aligned_lat:CompactLatticeVectorFst)\n\nVerifies the output of `word_align_lattice`.\n\nArgs:\n  lat (CompactLatticeVectorFst): The input lattice.\n  tmodel (TransitionModel): The transition model.\n  info (WordBoundaryInfo): The word boundary information.\n  aligned_lat (CompactLatticeVectorFst): The word-aligned lattice.\n\nRaises:\n  RuntimeError: If verification fails.")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyWordBoundaryInfoNewOpts::wrapper_Type) < 0) return false;
  Py_INCREF(&pyWordBoundaryInfoNewOpts::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyWordBoundaryInfo::wrapper_Type) < 0) return false;
  Py_INCREF(&pyWordBoundaryInfo::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_word_align_lattice",  // module name
  "CLIF-generated module for lat/word-align-lattice.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_lattice_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_vector_fst")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_transition_model")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  {PyObject* em = PyImport_ImportModule("enum");
   if (em == nullptr) goto err;
   _Enum = PyObject_GetAttrString(em, "Enum");
   _IntEnum = PyObject_GetAttrString(em, "IntEnum");
   Py_DECREF(em);}
  if (!_Enum || !_IntEnum) {
    Py_XDECREF(_Enum);
    Py_XDECREF(_IntEnum);
    goto err;
  }
  if (PyDict_SetItemString(pyWordBoundaryInfo::wrapper_Type.tp_dict, "PhoneType", (pyWordBoundaryInfo::_PhoneType=pyWordBoundaryInfo::wrapPhoneType())) < 0) goto err;
  if (PyModule_AddObject(module, "WordBoundaryInfoNewOpts", reinterpret_cast<PyObject*>(&pyWordBoundaryInfoNewOpts::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "WordBoundaryInfo", reinterpret_cast<PyObject*>(&pyWordBoundaryInfo::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __word__align__lattice_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// WordBoundaryInfo to/from ::kaldi::WordBoundaryInfo conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::WordBoundaryInfo** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::WordBoundaryInfo* cpp = __word__align__lattice_clifwrap::pyWordBoundaryInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::WordBoundaryInfo>* c) {
  assert(c != nullptr);
  ::kaldi::WordBoundaryInfo* cpp = __word__align__lattice_clifwrap::pyWordBoundaryInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__word__align__lattice_clifwrap::pyWordBoundaryInfo::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::WordBoundaryInfo>* c) {
  assert(c != nullptr);
  ::kaldi::WordBoundaryInfo* cpp = __word__align__lattice_clifwrap::pyWordBoundaryInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__word__align__lattice_clifwrap::pyWordBoundaryInfo::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert WordBoundaryInfo instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::WordBoundaryInfo* c) {
  assert(c != nullptr);
  ::kaldi::WordBoundaryInfo* cpp = __word__align__lattice_clifwrap::pyWordBoundaryInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::WordBoundaryInfo>* c) {
  assert(c != nullptr);
  ::kaldi::WordBoundaryInfo* cpp = __word__align__lattice_clifwrap::pyWordBoundaryInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::WordBoundaryInfo* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__word__align__lattice_clifwrap::pyWordBoundaryInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__word__align__lattice_clifwrap::pyWordBoundaryInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::WordBoundaryInfo>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::WordBoundaryInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__word__align__lattice_clifwrap::pyWordBoundaryInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__word__align__lattice_clifwrap::pyWordBoundaryInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::WordBoundaryInfo>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::WordBoundaryInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__word__align__lattice_clifwrap::pyWordBoundaryInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__word__align__lattice_clifwrap::pyWordBoundaryInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::WordBoundaryInfo>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::WordBoundaryInfo& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__word__align__lattice_clifwrap::pyWordBoundaryInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__word__align__lattice_clifwrap::pyWordBoundaryInfo::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::WordBoundaryInfo>(c);
  return py;
}

// WordBoundaryInfo.PhoneType:IntEnum to/from enum ::kaldi::WordBoundaryInfo::PhoneType conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::WordBoundaryInfo::PhoneType* c) {
  assert(c != nullptr);
  if (!PyObject_IsInstance(py, __word__align__lattice_clifwrap::pyWordBoundaryInfo::_PhoneType)) {
    PyErr_Format(PyExc_TypeError, "expecting enum WordBoundaryInfo.PhoneType, got %s %s", ClassName(py), ClassType(py));
    return false;
  }
  typename std::underlying_type<::kaldi::WordBoundaryInfo::PhoneType>::type v;
  PyObject* value = PyObject_GetAttrString(py, "value");
  if (value == nullptr || !Clif_PyObjAs(value, &v)) return false;
  Py_DECREF(value);
  *c = static_cast<::kaldi::WordBoundaryInfo::PhoneType>(v);
  return true;
}

PyObject* Clif_PyObjFrom(const ::kaldi::WordBoundaryInfo::PhoneType& c, py::PostConv) {
  return PyObject_CallFunctionObjArgs(__word__align__lattice_clifwrap::pyWordBoundaryInfo::_PhoneType, PyInt_FromLong(
      static_cast<typename std::underlying_type<::kaldi::WordBoundaryInfo::PhoneType>::type>(c)), nullptr);
}

// WordBoundaryInfoNewOpts to/from ::kaldi::WordBoundaryInfoNewOpts conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::WordBoundaryInfoNewOpts** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::WordBoundaryInfoNewOpts* cpp = __word__align__lattice_clifwrap::pyWordBoundaryInfoNewOpts::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::WordBoundaryInfoNewOpts>* c) {
  assert(c != nullptr);
  ::kaldi::WordBoundaryInfoNewOpts* cpp = __word__align__lattice_clifwrap::pyWordBoundaryInfoNewOpts::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__word__align__lattice_clifwrap::pyWordBoundaryInfoNewOpts::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::WordBoundaryInfoNewOpts>* c) {
  assert(c != nullptr);
  ::kaldi::WordBoundaryInfoNewOpts* cpp = __word__align__lattice_clifwrap::pyWordBoundaryInfoNewOpts::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__word__align__lattice_clifwrap::pyWordBoundaryInfoNewOpts::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert WordBoundaryInfoNewOpts instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::WordBoundaryInfoNewOpts* c) {
  assert(c != nullptr);
  ::kaldi::WordBoundaryInfoNewOpts* cpp = __word__align__lattice_clifwrap::pyWordBoundaryInfoNewOpts::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::WordBoundaryInfoNewOpts>* c) {
  assert(c != nullptr);
  ::kaldi::WordBoundaryInfoNewOpts* cpp = __word__align__lattice_clifwrap::pyWordBoundaryInfoNewOpts::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::WordBoundaryInfoNewOpts* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__word__align__lattice_clifwrap::pyWordBoundaryInfoNewOpts::wrapper_Type, NULL, NULL);
  reinterpret_cast<__word__align__lattice_clifwrap::pyWordBoundaryInfoNewOpts::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::WordBoundaryInfoNewOpts>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::WordBoundaryInfoNewOpts> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__word__align__lattice_clifwrap::pyWordBoundaryInfoNewOpts::wrapper_Type, NULL, NULL);
  reinterpret_cast<__word__align__lattice_clifwrap::pyWordBoundaryInfoNewOpts::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::WordBoundaryInfoNewOpts>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::WordBoundaryInfoNewOpts> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__word__align__lattice_clifwrap::pyWordBoundaryInfoNewOpts::wrapper_Type, NULL, NULL);
  reinterpret_cast<__word__align__lattice_clifwrap::pyWordBoundaryInfoNewOpts::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::WordBoundaryInfoNewOpts>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::WordBoundaryInfoNewOpts& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__word__align__lattice_clifwrap::pyWordBoundaryInfoNewOpts::wrapper_Type, NULL, NULL);
  reinterpret_cast<__word__align__lattice_clifwrap::pyWordBoundaryInfoNewOpts::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::WordBoundaryInfoNewOpts>(c);
  return py;
}

}  // namespace kaldi
