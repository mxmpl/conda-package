//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/lat/sausages.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "itf/options-itf-clifwrap.h"
#include "fstext/lattice-weight-clifwrap.h"
#include "fstext/vector-fst-clifwrap.h"
#include "sausages-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __sausages_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyMinimumBayesRiskOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::MinimumBayesRiskOptions> cpp;
};
static ::kaldi::MinimumBayesRiskOptions* ThisPtr(PyObject*);

static PyObject* get_decode_mbr(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->decode_mbr, {});
}

static int set_decode_mbr(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the decode_mbr attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->decode_mbr)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for decode_mbr:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_print_silence(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->print_silence, {});
}

static int set_print_silence(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the print_silence attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->print_silence)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for print_silence:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::MinimumBayesRiskOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("decode_mbr"), get_decode_mbr, set_decode_mbr, C("Whether to output MBR hypothesis.")},
  {C("print_silence"), get_print_silence, set_print_silence, C("Whether the 1-best path will \"keep\" <eps> bins.")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n\nRegisters options with an object implementing the options interface.\n\nArgs:\n  opts (OptionsItf): An object implementing the options interface.\n    Typically a command-line option parser.")},
  {}
};

// MinimumBayesRiskOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// MinimumBayesRiskOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// MinimumBayesRiskOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_sausages.MinimumBayesRiskOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Options for Minimum Bayes Risk decoding.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "MinimumBayesRiskOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::MinimumBayesRiskOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::MinimumBayesRiskOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_MinimumBayesRiskOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::MinimumBayesRiskOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::MinimumBayesRiskOptions* c = static_cast<::kaldi::MinimumBayesRiskOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::MinimumBayesRiskOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyMinimumBayesRiskOptions

namespace pyMinimumBayesRisk {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::MinimumBayesRisk> cpp;
};
static ::kaldi::MinimumBayesRisk* ThisPtr(PyObject*);

// __init__(clat:CompactLatticeVectorFst, opts:MinimumBayesRiskOptions=default)
static PyObject* wrapMinimumBayesRisk_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("clat"),
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:__init__", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > >", a[0]);
  ::kaldi::MinimumBayesRiskOptions* arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::MinimumBayesRiskOptions", a[1]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::MinimumBayesRisk>(*arg1); break;
  case 2:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::MinimumBayesRisk>(*arg1, *arg2); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// @classmethod new_with_words(clat:CompactLatticeVectorFst, words:list<int>, opts:MinimumBayesRiskOptions=default) -> MinimumBayesRisk
static PyObject* wrapMinimumBayesRisk_as_new_with_words(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("clat"),
      C("words"),
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:new_with_words", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new_with_words", names[0], "::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > >", a[0]);
  ::std::vector< ::int32> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("new_with_words", names[1], "::std::vector< ::int32>", a[1]);
  ::kaldi::MinimumBayesRiskOptions* arg3;
  if (nargs > 2) {
    if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("new_with_words", names[2], "::kaldi::MinimumBayesRiskOptions", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::MinimumBayesRisk> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ret0 = ::gtl::MakeUnique<::kaldi::MinimumBayesRisk>(*arg1, std::move(arg2)); break;
  case 3:
    ret0 = ::gtl::MakeUnique<::kaldi::MinimumBayesRisk>(*arg1, std::move(arg2), *arg3); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod new_with_words_times(clat:CompactLatticeVectorFst, words:list<int>, times:list<tuple<float, float>>, opts:MinimumBayesRiskOptions=default) -> MinimumBayesRisk
static PyObject* wrapMinimumBayesRisk_as_new_with_words_times(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[4]{};
  char* names[] = {
      C("clat"),
      C("words"),
      C("times"),
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO|O:new_with_words_times", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 4; nargs > 3; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new_with_words_times", names[0], "::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > >", a[0]);
  ::std::vector< ::int32> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("new_with_words_times", names[1], "::std::vector< ::int32>", a[1]);
  ::std::vector< ::std::pair< ::kaldi::BaseFloat, ::kaldi::BaseFloat> > arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("new_with_words_times", names[2], "::std::vector< ::std::pair< ::kaldi::BaseFloat, ::kaldi::BaseFloat> >", a[2]);
  ::kaldi::MinimumBayesRiskOptions* arg4;
  if (nargs > 3) {
    if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("new_with_words_times", names[3], "::kaldi::MinimumBayesRiskOptions", a[3]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::MinimumBayesRisk> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 3:
    ret0 = ::gtl::MakeUnique<::kaldi::MinimumBayesRisk>(*arg1, std::move(arg2), std::move(arg3)); break;
  case 4:
    ret0 = ::gtl::MakeUnique<::kaldi::MinimumBayesRisk>(*arg1, std::move(arg2), std::move(arg3), *arg4); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_one_best() -> list<int>
static PyObject* wrapGetOneBest_as_get_one_best(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::MinimumBayesRisk* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::vector< ::int32> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetOneBest();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_sausage_times() -> list<tuple<float, float>>
static PyObject* wrapGetSausageTimes_as_get_sausage_times(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::MinimumBayesRisk* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::vector< ::std::pair< ::kaldi::BaseFloat, ::kaldi::BaseFloat> > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetSausageTimes();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_one_best_times() -> list<tuple<float, float>>
static PyObject* wrapGetOneBestTimes_as_get_one_best_times(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::MinimumBayesRisk* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::vector< ::std::pair< ::kaldi::BaseFloat, ::kaldi::BaseFloat> > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetOneBestTimes();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_one_best_confidences() -> list<float>
static PyObject* wrapGetOneBestConfidences_as_get_one_best_confidences(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::MinimumBayesRisk* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::vector< ::kaldi::BaseFloat> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetOneBestConfidences();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_bayes_risk() -> float
static PyObject* wrapGetBayesRisk_as_get_bayes_risk(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::MinimumBayesRisk* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetBayesRisk();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_sausage_stats() -> list<list<tuple<int, float>>>
static PyObject* wrapGetSausageStats_as_get_sausage_stats(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::MinimumBayesRisk* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::vector< ::std::vector< ::std::pair< ::int32, ::kaldi::BaseFloat> > > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetSausageStats();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapMinimumBayesRisk_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(clat:CompactLatticeVectorFst, opts:MinimumBayesRiskOptions=default)\n  Calls C++ function\n  void ::kaldi::MinimumBayesRisk::MinimumBayesRisk(::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > >, ::kaldi::MinimumBayesRiskOptions)")},
  {C("new_with_words"), (PyCFunction)wrapMinimumBayesRisk_as_new_with_words, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new_with_words(clat:CompactLatticeVectorFst, words:list<int>, opts:MinimumBayesRiskOptions=default) -> MinimumBayesRisk\n\nCreates an instance using `words` as the initial 1-best.\n\nArgs:\n  clat (CompactLatticeVectorFst): The input lattice.\n  words (List[int]): Initial best word sequence.\n  opts (MinimumBayesRiskOptions): The MBR options.")},
  {C("new_with_words_times"), (PyCFunction)wrapMinimumBayesRisk_as_new_with_words_times, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new_with_words_times(clat:CompactLatticeVectorFst, words:list<int>, times:list<tuple<float, float>>, opts:MinimumBayesRiskOptions=default) -> MinimumBayesRisk\n\nCreates an instance using `words` and `times` as the initial 1-best.\n\nArgs:\n  clat (CompactLatticeVectorFst): The input lattice.\n  words (List[int]): Initial best word sequence.\n  times (List[Tuple[float, float]]): Initial times for the bins.\n  opts (MinimumBayesRiskOptions): The MBR options.")},
  {C("get_one_best"), (PyCFunction)wrapGetOneBest_as_get_one_best, METH_NOARGS, C("get_one_best() -> list<int>\n\nReturns one-best output (with no epsilons).")},
  {C("get_sausage_times"), (PyCFunction)wrapGetSausageTimes_as_get_sausage_times, METH_NOARGS, C("get_sausage_times() -> list<tuple<float, float>>\n\nReturns average (start, end) times for each bin.")},
  {C("get_one_best_times"), (PyCFunction)wrapGetOneBestTimes_as_get_one_best_times, METH_NOARGS, C("get_one_best_times() -> list<tuple<float, float>>\n\nReturns average (start, end) times for bins of the one-best output.\n\nThis is just the appopriate subsequence of times output by\n:meth:`get_sausage_times`.")},
  {C("get_one_best_confidences"), (PyCFunction)wrapGetOneBestConfidences_as_get_one_best_confidences, METH_NOARGS, C("get_one_best_confidences() -> list<float>\n\nReturns the confidences for the one-best output.")},
  {C("get_bayes_risk"), (PyCFunction)wrapGetBayesRisk_as_get_bayes_risk, METH_NOARGS, C("get_bayes_risk() -> float\n\nReturns the expected WER over this sentence.")},
  {C("get_sausage_stats"), (PyCFunction)wrapGetSausageStats_as_get_sausage_stats, METH_NOARGS, C("get_sausage_stats() -> list<list<tuple<int, float>>>\n\nReturns the sausage statistics.")},
  {}
};

// MinimumBayesRisk __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// MinimumBayesRisk __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// MinimumBayesRisk __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_sausages.MinimumBayesRisk",        // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "MinimumBayesRisk(clat, opts=MinimumBayesRiskOptions())\n\nMinimum Bayes Risk decoding.\n\nThis class does the word-level Minimum Bayes Risk computation, and gives\nyou either the 1-best MBR output together with the expected Bayes Risk,\nor a sausage-like structure. Initial 1-best is set to lattice 1-best.\n\nArgs:\n  clat (CompactLatticeVectorFst): The input lattice.\n  opts (MinimumBayesRiskOptions): The MBR options.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapMinimumBayesRisk_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::MinimumBayesRisk* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_MinimumBayesRisk"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::MinimumBayesRisk"));
      if (!PyErr_Occurred()) {
        ::kaldi::MinimumBayesRisk* c = static_cast<::kaldi::MinimumBayesRisk*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::MinimumBayesRisk*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyMinimumBayesRisk


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyMinimumBayesRiskOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyMinimumBayesRiskOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyMinimumBayesRisk::wrapper_Type) < 0) return false;
  Py_INCREF(&pyMinimumBayesRisk::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_sausages",  // module name
  "CLIF-generated module for lat/sausages.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_lattice_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_vector_fst")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "MinimumBayesRiskOptions", reinterpret_cast<PyObject*>(&pyMinimumBayesRiskOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "MinimumBayesRisk", reinterpret_cast<PyObject*>(&pyMinimumBayesRisk::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __sausages_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// MinimumBayesRisk to/from ::kaldi::MinimumBayesRisk conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::MinimumBayesRisk** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::MinimumBayesRisk* cpp = __sausages_clifwrap::pyMinimumBayesRisk::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::MinimumBayesRisk>* c) {
  assert(c != nullptr);
  ::kaldi::MinimumBayesRisk* cpp = __sausages_clifwrap::pyMinimumBayesRisk::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__sausages_clifwrap::pyMinimumBayesRisk::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::MinimumBayesRisk>* c) {
  assert(c != nullptr);
  ::kaldi::MinimumBayesRisk* cpp = __sausages_clifwrap::pyMinimumBayesRisk::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__sausages_clifwrap::pyMinimumBayesRisk::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert MinimumBayesRisk instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::MinimumBayesRisk* c) {
  assert(c != nullptr);
  ::kaldi::MinimumBayesRisk* cpp = __sausages_clifwrap::pyMinimumBayesRisk::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::MinimumBayesRisk>* c) {
  assert(c != nullptr);
  ::kaldi::MinimumBayesRisk* cpp = __sausages_clifwrap::pyMinimumBayesRisk::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::MinimumBayesRisk* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__sausages_clifwrap::pyMinimumBayesRisk::wrapper_Type, NULL, NULL);
  reinterpret_cast<__sausages_clifwrap::pyMinimumBayesRisk::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MinimumBayesRisk>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::MinimumBayesRisk> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__sausages_clifwrap::pyMinimumBayesRisk::wrapper_Type, NULL, NULL);
  reinterpret_cast<__sausages_clifwrap::pyMinimumBayesRisk::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MinimumBayesRisk>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::MinimumBayesRisk> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__sausages_clifwrap::pyMinimumBayesRisk::wrapper_Type, NULL, NULL);
  reinterpret_cast<__sausages_clifwrap::pyMinimumBayesRisk::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MinimumBayesRisk>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::MinimumBayesRisk& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__sausages_clifwrap::pyMinimumBayesRisk::wrapper_Type, NULL, NULL);
  reinterpret_cast<__sausages_clifwrap::pyMinimumBayesRisk::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::MinimumBayesRisk>(c);
  return py;
}

// MinimumBayesRiskOptions to/from ::kaldi::MinimumBayesRiskOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::MinimumBayesRiskOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::MinimumBayesRiskOptions* cpp = __sausages_clifwrap::pyMinimumBayesRiskOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::MinimumBayesRiskOptions>* c) {
  assert(c != nullptr);
  ::kaldi::MinimumBayesRiskOptions* cpp = __sausages_clifwrap::pyMinimumBayesRiskOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__sausages_clifwrap::pyMinimumBayesRiskOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::MinimumBayesRiskOptions>* c) {
  assert(c != nullptr);
  ::kaldi::MinimumBayesRiskOptions* cpp = __sausages_clifwrap::pyMinimumBayesRiskOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__sausages_clifwrap::pyMinimumBayesRiskOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert MinimumBayesRiskOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::MinimumBayesRiskOptions* c) {
  assert(c != nullptr);
  ::kaldi::MinimumBayesRiskOptions* cpp = __sausages_clifwrap::pyMinimumBayesRiskOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::MinimumBayesRiskOptions>* c) {
  assert(c != nullptr);
  ::kaldi::MinimumBayesRiskOptions* cpp = __sausages_clifwrap::pyMinimumBayesRiskOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::MinimumBayesRiskOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__sausages_clifwrap::pyMinimumBayesRiskOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__sausages_clifwrap::pyMinimumBayesRiskOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MinimumBayesRiskOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::MinimumBayesRiskOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__sausages_clifwrap::pyMinimumBayesRiskOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__sausages_clifwrap::pyMinimumBayesRiskOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MinimumBayesRiskOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::MinimumBayesRiskOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__sausages_clifwrap::pyMinimumBayesRiskOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__sausages_clifwrap::pyMinimumBayesRiskOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MinimumBayesRiskOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::MinimumBayesRiskOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__sausages_clifwrap::pyMinimumBayesRiskOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__sausages_clifwrap::pyMinimumBayesRiskOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::MinimumBayesRiskOptions>(c);
  return py;
}

}  // namespace kaldi
