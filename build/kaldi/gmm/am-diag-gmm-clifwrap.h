//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/gmm/am-diag-gmm.clif

#include <memory>
#include "clif/python/optional.h"
#include "gmm/am-diag-gmm.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::AmDiagGmm` as AmDiagGmm
bool Clif_PyObjAs(PyObject* input, ::kaldi::AmDiagGmm** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::AmDiagGmm>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::AmDiagGmm>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::AmDiagGmm* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::AmDiagGmm>* output);
PyObject* Clif_PyObjFrom(::kaldi::AmDiagGmm*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::AmDiagGmm>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::AmDiagGmm>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::AmDiagGmm&, py::PostConv);
// CLIF use `::kaldi::UbmClusteringOptions` as UbmClusteringOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::UbmClusteringOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::UbmClusteringOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::UbmClusteringOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::UbmClusteringOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::UbmClusteringOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::UbmClusteringOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::UbmClusteringOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::UbmClusteringOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::UbmClusteringOptions&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_am_diag_gmm")) Py_DECREF(m);
// CLIF init_module else goto err;
