//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/gmm/am-diag-gmm.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "itf/options-itf-clifwrap.h"
#include "base/iostream-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "gmm/diag-gmm-clifwrap.h"
#include "am-diag-gmm-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __am__diag__gmm_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyAmDiagGmm {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::AmDiagGmm> cpp;
};
static ::kaldi::AmDiagGmm* ThisPtr(PyObject*);

// init(proto:DiagGmm, num_pdfs:int)
static PyObject* wrapInit_as_init(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("proto"),
      C("num_pdfs"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:init", names, &a[0], &a[1])) return nullptr;
  ::kaldi::DiagGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("init", names[0], "::kaldi::DiagGmm", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("init", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::AmDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Init(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// add_pdf(gmm:DiagGmm)
static PyObject* wrapAddPdf_as_add_pdf(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("gmm"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:add_pdf", names, &a[0])) return nullptr;
  ::kaldi::DiagGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add_pdf", names[0], "::kaldi::DiagGmm", a[0]);
  // Call actual C++ method.
  ::kaldi::AmDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AddPdf(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// copy_from_am_diag(other:AmDiagGmm)
static PyObject* wrapCopyFromAmDiagGmm_as_copy_from_am_diag(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:copy_from_am_diag", names, &a[0])) return nullptr;
  ::kaldi::AmDiagGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_from_am_diag", names[0], "::kaldi::AmDiagGmm", a[0]);
  // Call actual C++ method.
  ::kaldi::AmDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CopyFromAmDiagGmm(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// split_pdf(idx:int, target_components:int, perturb_factor:float)
static PyObject* wrapSplitPdf_as_split_pdf(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("idx"),
      C("target_components"),
      C("perturb_factor"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:split_pdf", names, &a[0], &a[1], &a[2])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("split_pdf", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("split_pdf", names[1], "int", a[1]);
  float arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("split_pdf", names[2], "float", a[2]);
  // Call actual C++ method.
  ::kaldi::AmDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SplitPdf(std::move(arg1), std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// split_by_count(state_occs:Vector, target_components:int, perturb_factor:float, power:float, min_count:float)
static PyObject* wrapSplitByCount_as_split_by_count(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[5];
  char* names[] = {
      C("state_occs"),
      C("target_components"),
      C("perturb_factor"),
      C("power"),
      C("min_count"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOO:split_by_count", names, &a[0], &a[1], &a[2], &a[3], &a[4])) return nullptr;
  ::kaldi::Vector<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("split_by_count", names[0], "::kaldi::Vector<float>", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("split_by_count", names[1], "int", a[1]);
  float arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("split_by_count", names[2], "float", a[2]);
  float arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("split_by_count", names[3], "float", a[3]);
  float arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("split_by_count", names[4], "float", a[4]);
  // Call actual C++ method.
  ::kaldi::AmDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SplitByCount(*arg1, std::move(arg2), std::move(arg3), std::move(arg4), std::move(arg5));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// merge_by_count(state_occs:Vector, target_components:int, power:float, min_count:float)
static PyObject* wrapMergeByCount_as_merge_by_count(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("state_occs"),
      C("target_components"),
      C("power"),
      C("min_count"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:merge_by_count", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::Vector<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("merge_by_count", names[0], "::kaldi::Vector<float>", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("merge_by_count", names[1], "int", a[1]);
  float arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("merge_by_count", names[2], "float", a[2]);
  float arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("merge_by_count", names[3], "float", a[3]);
  // Call actual C++ method.
  ::kaldi::AmDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->MergeByCount(*arg1, std::move(arg2), std::move(arg3), std::move(arg4));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// compute_gconsts() -> int
static PyObject* wrapComputeGconsts_as_compute_gconsts(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::AmDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->ComputeGconsts();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// log_likelihood(pdf_index:int, data:VectorBase) -> float
static PyObject* wrapLogLikelihood_as_log_likelihood(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("pdf_index"),
      C("data"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:log_likelihood", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("log_likelihood", names[0], "int", a[0]);
  ::kaldi::VectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("log_likelihood", names[1], "::kaldi::VectorBase<float>", a[1]);
  // Call actual C++ method.
  ::kaldi::AmDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->LogLikelihood(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// read(is:istream, binary:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::AmDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::AmDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::AmDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_pdfs() -> int
static PyObject* wrapNumPdfs_as_num_pdfs(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::AmDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumPdfs();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_gauss() -> int
static PyObject* wrapNumGauss_as_num_gauss(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::AmDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumGauss();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_gauss_in_pdf(pdf_index:int) -> int
static PyObject* wrapNumGaussInPdf_as_num_gauss_in_pdf(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("pdf_index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:num_gauss_in_pdf", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("num_gauss_in_pdf", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::AmDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumGaussInPdf(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_gaussian_mean(pdf_index:int, gauss:int, out:VectorBase)
static PyObject* wrapGetGaussianMean_as_get_gaussian_mean(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("pdf_index"),
      C("gauss"),
      C("out"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:get_gaussian_mean", names, &a[0], &a[1], &a[2])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_gaussian_mean", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_gaussian_mean", names[1], "int", a[1]);
  ::kaldi::VectorBase<float> * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("get_gaussian_mean", names[2], "::kaldi::VectorBase<float> *", a[2]);
  // Call actual C++ method.
  ::kaldi::AmDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetGaussianMean(std::move(arg1), std::move(arg2), arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// get_gaussian_variance(pdf_index:int, gauss:int, out:VectorBase)
static PyObject* wrapGetGaussianVariance_as_get_gaussian_variance(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("pdf_index"),
      C("gauss"),
      C("out"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:get_gaussian_variance", names, &a[0], &a[1], &a[2])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_gaussian_variance", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_gaussian_variance", names[1], "int", a[1]);
  ::kaldi::VectorBase<float> * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("get_gaussian_variance", names[2], "::kaldi::VectorBase<float> *", a[2]);
  // Call actual C++ method.
  ::kaldi::AmDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetGaussianVariance(std::move(arg1), std::move(arg2), arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_gaussian_mean(pdf_index:int, gauss:int, in:VectorBase)
static PyObject* wrapSetGaussianMean_as_set_gaussian_mean(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("pdf_index"),
      C("gauss"),
      C("in"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:set_gaussian_mean", names, &a[0], &a[1], &a[2])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_gaussian_mean", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("set_gaussian_mean", names[1], "int", a[1]);
  ::kaldi::VectorBase<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("set_gaussian_mean", names[2], "::kaldi::VectorBase<float>", a[2]);
  // Call actual C++ method.
  ::kaldi::AmDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetGaussianMean(std::move(arg1), std::move(arg2), *arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("init"), (PyCFunction)wrapInit_as_init, METH_VARARGS | METH_KEYWORDS, C("init(proto:DiagGmm, num_pdfs:int)\n  Calls C++ function\n  void ::kaldi::AmDiagGmm::Init(::kaldi::DiagGmm, int)")},
  {C("add_pdf"), (PyCFunction)wrapAddPdf_as_add_pdf, METH_VARARGS | METH_KEYWORDS, C("add_pdf(gmm:DiagGmm)\n  Calls C++ function\n  void ::kaldi::AmDiagGmm::AddPdf(::kaldi::DiagGmm)")},
  {C("copy_from_am_diag"), (PyCFunction)wrapCopyFromAmDiagGmm_as_copy_from_am_diag, METH_VARARGS | METH_KEYWORDS, C("copy_from_am_diag(other:AmDiagGmm)\n  Calls C++ function\n  void ::kaldi::AmDiagGmm::CopyFromAmDiagGmm(::kaldi::AmDiagGmm)")},
  {C("split_pdf"), (PyCFunction)wrapSplitPdf_as_split_pdf, METH_VARARGS | METH_KEYWORDS, C("split_pdf(idx:int, target_components:int, perturb_factor:float)\n  Calls C++ function\n  void ::kaldi::AmDiagGmm::SplitPdf(int, int, float)")},
  {C("split_by_count"), (PyCFunction)wrapSplitByCount_as_split_by_count, METH_VARARGS | METH_KEYWORDS, C("split_by_count(state_occs:Vector, target_components:int, perturb_factor:float, power:float, min_count:float)\n  Calls C++ function\n  void ::kaldi::AmDiagGmm::SplitByCount(::kaldi::Vector<float>, int, float, float, float)")},
  {C("merge_by_count"), (PyCFunction)wrapMergeByCount_as_merge_by_count, METH_VARARGS | METH_KEYWORDS, C("merge_by_count(state_occs:Vector, target_components:int, power:float, min_count:float)\n  Calls C++ function\n  void ::kaldi::AmDiagGmm::MergeByCount(::kaldi::Vector<float>, int, float, float)")},
  {C("compute_gconsts"), (PyCFunction)wrapComputeGconsts_as_compute_gconsts, METH_NOARGS, C("compute_gconsts() -> int\n  Calls C++ function\n  int ::kaldi::AmDiagGmm::ComputeGconsts()")},
  {C("log_likelihood"), (PyCFunction)wrapLogLikelihood_as_log_likelihood, METH_VARARGS | METH_KEYWORDS, C("log_likelihood(pdf_index:int, data:VectorBase) -> float\n  Calls C++ function\n  float ::kaldi::AmDiagGmm::LogLikelihood(int, ::kaldi::VectorBase<float>)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool)\n  Calls C++ function\n  void ::kaldi::AmDiagGmm::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool)")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::AmDiagGmm::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::AmDiagGmm::Dim()")},
  {C("num_pdfs"), (PyCFunction)wrapNumPdfs_as_num_pdfs, METH_NOARGS, C("num_pdfs() -> int\n  Calls C++ function\n  int ::kaldi::AmDiagGmm::NumPdfs()")},
  {C("num_gauss"), (PyCFunction)wrapNumGauss_as_num_gauss, METH_NOARGS, C("num_gauss() -> int\n  Calls C++ function\n  int ::kaldi::AmDiagGmm::NumGauss()")},
  {C("num_gauss_in_pdf"), (PyCFunction)wrapNumGaussInPdf_as_num_gauss_in_pdf, METH_VARARGS | METH_KEYWORDS, C("num_gauss_in_pdf(pdf_index:int) -> int\n  Calls C++ function\n  int ::kaldi::AmDiagGmm::NumGaussInPdf(int)")},
  {C("get_gaussian_mean"), (PyCFunction)wrapGetGaussianMean_as_get_gaussian_mean, METH_VARARGS | METH_KEYWORDS, C("get_gaussian_mean(pdf_index:int, gauss:int, out:VectorBase)\n  Calls C++ function\n  void ::kaldi::AmDiagGmm::GetGaussianMean(int, int, ::kaldi::VectorBase<float> *)")},
  {C("get_gaussian_variance"), (PyCFunction)wrapGetGaussianVariance_as_get_gaussian_variance, METH_VARARGS | METH_KEYWORDS, C("get_gaussian_variance(pdf_index:int, gauss:int, out:VectorBase)\n  Calls C++ function\n  void ::kaldi::AmDiagGmm::GetGaussianVariance(int, int, ::kaldi::VectorBase<float> *)")},
  {C("set_gaussian_mean"), (PyCFunction)wrapSetGaussianMean_as_set_gaussian_mean, METH_VARARGS | METH_KEYWORDS, C("set_gaussian_mean(pdf_index:int, gauss:int, in:VectorBase)\n  Calls C++ function\n  void ::kaldi::AmDiagGmm::SetGaussianMean(int, int, ::kaldi::VectorBase<float>)")},
  {}
};

// AmDiagGmm __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// AmDiagGmm __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// AmDiagGmm __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_am_diag_gmm.AmDiagGmm",            // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::AmDiagGmm", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "AmDiagGmm takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::AmDiagGmm>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::AmDiagGmm* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_AmDiagGmm"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::AmDiagGmm"));
      if (!PyErr_Occurred()) {
        ::kaldi::AmDiagGmm* c = static_cast<::kaldi::AmDiagGmm*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::AmDiagGmm*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyAmDiagGmm

namespace pyUbmClusteringOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::UbmClusteringOptions> cpp;
};
static ::kaldi::UbmClusteringOptions* ThisPtr(PyObject*);

static PyObject* get_ubm_num_gauss(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->ubm_num_gauss, {});
}

static int set_ubm_num_gauss(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the ubm_num_gauss attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->ubm_num_gauss)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for ubm_num_gauss:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_reduce_state_factor(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->reduce_state_factor, {});
}

static int set_reduce_state_factor(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the reduce_state_factor attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->reduce_state_factor)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for reduce_state_factor:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_intermediate_num_gauss(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->intermediate_num_gauss, {});
}

static int set_intermediate_num_gauss(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the intermediate_num_gauss attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->intermediate_num_gauss)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for intermediate_num_gauss:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_cluster_varfloor(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->cluster_varfloor, {});
}

static int set_cluster_varfloor(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the cluster_varfloor attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->cluster_varfloor)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for cluster_varfloor:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_max_am_gauss(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->max_am_gauss, {});
}

static int set_max_am_gauss(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the max_am_gauss attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->max_am_gauss)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for max_am_gauss:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::UbmClusteringOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// check()
static PyObject* wrapCheck_as_check(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::UbmClusteringOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Check();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("ubm_num_gauss"), get_ubm_num_gauss, set_ubm_num_gauss, C("C++ ::int32 UbmClusteringOptions.ubm_num_gauss")},
  {C("reduce_state_factor"), get_reduce_state_factor, set_reduce_state_factor, C("C++ ::kaldi::BaseFloat UbmClusteringOptions.reduce_state_factor")},
  {C("intermediate_num_gauss"), get_intermediate_num_gauss, set_intermediate_num_gauss, C("C++ ::int32 UbmClusteringOptions.intermediate_num_gauss")},
  {C("cluster_varfloor"), get_cluster_varfloor, set_cluster_varfloor, C("C++ ::kaldi::BaseFloat UbmClusteringOptions.cluster_varfloor")},
  {C("max_am_gauss"), get_max_am_gauss, set_max_am_gauss, C("C++ ::int32 UbmClusteringOptions.max_am_gauss")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::UbmClusteringOptions::Register(::kaldi::OptionsItf *)")},
  {C("check"), (PyCFunction)wrapCheck_as_check, METH_NOARGS, C("check()\n  Calls C++ function\n  void ::kaldi::UbmClusteringOptions::Check()")},
  {}
};

// UbmClusteringOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// UbmClusteringOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// UbmClusteringOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_am_diag_gmm.UbmClusteringOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::UbmClusteringOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "UbmClusteringOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::UbmClusteringOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::UbmClusteringOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_UbmClusteringOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::UbmClusteringOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::UbmClusteringOptions* c = static_cast<::kaldi::UbmClusteringOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::UbmClusteringOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyUbmClusteringOptions

// cluster_gaussians_to_ubm(am:AmDiagGmm, state_occs:Vector, opts:UbmClusteringOptions, ubm_out:DiagGmm)
static PyObject* wrapClusterGaussiansToUbm_as_cluster_gaussians_to_ubm(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("am"),
      C("state_occs"),
      C("opts"),
      C("ubm_out"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:cluster_gaussians_to_ubm", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::AmDiagGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("cluster_gaussians_to_ubm", names[0], "::kaldi::AmDiagGmm", a[0]);
  ::kaldi::Vector<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("cluster_gaussians_to_ubm", names[1], "::kaldi::Vector<float>", a[1]);
  ::kaldi::UbmClusteringOptions* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("cluster_gaussians_to_ubm", names[2], "::kaldi::UbmClusteringOptions", a[2]);
  ::kaldi::DiagGmm * arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("cluster_gaussians_to_ubm", names[3], "::kaldi::DiagGmm *", a[3]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::ClusterGaussiansToUbm(*arg1, *arg2, *arg3, arg4);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("cluster_gaussians_to_ubm"), (PyCFunction)wrapClusterGaussiansToUbm_as_cluster_gaussians_to_ubm, METH_VARARGS | METH_KEYWORDS, C("cluster_gaussians_to_ubm(am:AmDiagGmm, state_occs:Vector, opts:UbmClusteringOptions, ubm_out:DiagGmm)\n  Calls C++ function\n  void ::kaldi::ClusterGaussiansToUbm(::kaldi::AmDiagGmm, ::kaldi::Vector<float>, ::kaldi::UbmClusteringOptions, ::kaldi::DiagGmm *)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyAmDiagGmm::wrapper_Type) < 0) return false;
  Py_INCREF(&pyAmDiagGmm::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyUbmClusteringOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyUbmClusteringOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_am_diag_gmm",  // module name
  "CLIF-generated module for gmm/am-diag-gmm.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_diag_gmm")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "AmDiagGmm", reinterpret_cast<PyObject*>(&pyAmDiagGmm::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "UbmClusteringOptions", reinterpret_cast<PyObject*>(&pyUbmClusteringOptions::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __am__diag__gmm_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// AmDiagGmm to/from ::kaldi::AmDiagGmm conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::AmDiagGmm** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::AmDiagGmm* cpp = __am__diag__gmm_clifwrap::pyAmDiagGmm::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::AmDiagGmm>* c) {
  assert(c != nullptr);
  ::kaldi::AmDiagGmm* cpp = __am__diag__gmm_clifwrap::pyAmDiagGmm::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__am__diag__gmm_clifwrap::pyAmDiagGmm::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::AmDiagGmm>* c) {
  assert(c != nullptr);
  ::kaldi::AmDiagGmm* cpp = __am__diag__gmm_clifwrap::pyAmDiagGmm::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__am__diag__gmm_clifwrap::pyAmDiagGmm::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert AmDiagGmm instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::AmDiagGmm* c) {
  assert(c != nullptr);
  ::kaldi::AmDiagGmm* cpp = __am__diag__gmm_clifwrap::pyAmDiagGmm::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::AmDiagGmm>* c) {
  assert(c != nullptr);
  ::kaldi::AmDiagGmm* cpp = __am__diag__gmm_clifwrap::pyAmDiagGmm::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::AmDiagGmm* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__am__diag__gmm_clifwrap::pyAmDiagGmm::wrapper_Type, NULL, NULL);
  reinterpret_cast<__am__diag__gmm_clifwrap::pyAmDiagGmm::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::AmDiagGmm>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::AmDiagGmm> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__am__diag__gmm_clifwrap::pyAmDiagGmm::wrapper_Type, NULL, NULL);
  reinterpret_cast<__am__diag__gmm_clifwrap::pyAmDiagGmm::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::AmDiagGmm>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::AmDiagGmm> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__am__diag__gmm_clifwrap::pyAmDiagGmm::wrapper_Type, NULL, NULL);
  reinterpret_cast<__am__diag__gmm_clifwrap::pyAmDiagGmm::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::AmDiagGmm>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::AmDiagGmm& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__am__diag__gmm_clifwrap::pyAmDiagGmm::wrapper_Type, NULL, NULL);
  reinterpret_cast<__am__diag__gmm_clifwrap::pyAmDiagGmm::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::AmDiagGmm>(c);
  return py;
}

// UbmClusteringOptions to/from ::kaldi::UbmClusteringOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::UbmClusteringOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::UbmClusteringOptions* cpp = __am__diag__gmm_clifwrap::pyUbmClusteringOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::UbmClusteringOptions>* c) {
  assert(c != nullptr);
  ::kaldi::UbmClusteringOptions* cpp = __am__diag__gmm_clifwrap::pyUbmClusteringOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__am__diag__gmm_clifwrap::pyUbmClusteringOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::UbmClusteringOptions>* c) {
  assert(c != nullptr);
  ::kaldi::UbmClusteringOptions* cpp = __am__diag__gmm_clifwrap::pyUbmClusteringOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__am__diag__gmm_clifwrap::pyUbmClusteringOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert UbmClusteringOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::UbmClusteringOptions* c) {
  assert(c != nullptr);
  ::kaldi::UbmClusteringOptions* cpp = __am__diag__gmm_clifwrap::pyUbmClusteringOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::UbmClusteringOptions>* c) {
  assert(c != nullptr);
  ::kaldi::UbmClusteringOptions* cpp = __am__diag__gmm_clifwrap::pyUbmClusteringOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::UbmClusteringOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__am__diag__gmm_clifwrap::pyUbmClusteringOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__am__diag__gmm_clifwrap::pyUbmClusteringOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::UbmClusteringOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::UbmClusteringOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__am__diag__gmm_clifwrap::pyUbmClusteringOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__am__diag__gmm_clifwrap::pyUbmClusteringOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::UbmClusteringOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::UbmClusteringOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__am__diag__gmm_clifwrap::pyUbmClusteringOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__am__diag__gmm_clifwrap::pyUbmClusteringOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::UbmClusteringOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::UbmClusteringOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__am__diag__gmm_clifwrap::pyUbmClusteringOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__am__diag__gmm_clifwrap::pyUbmClusteringOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::UbmClusteringOptions>(c);
  return py;
}

}  // namespace kaldi
