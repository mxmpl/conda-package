//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/itf/context-dep-itf.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "context-dep-itf-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __context__dep__itf_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyContextDependencyInterface {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::ContextDependencyInterface> cpp;
};
static ::kaldi::ContextDependencyInterface* ThisPtr(PyObject*);

// context_width() -> int
static PyObject* wrapContextWidth_as_context_width(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::ContextDependencyInterface* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->ContextWidth();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// central_position() -> int
static PyObject* wrapCentralPosition_as_central_position(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::ContextDependencyInterface* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->CentralPosition();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// compute(phoneseq:list<int>, pdf_class:int) -> (success:bool, pdf_id:int)
static PyObject* wrapCompute_as_compute(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("phoneseq"),
      C("pdf_class"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:compute", names, &a[0], &a[1])) return nullptr;
  ::std::vector< ::int32> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute", names[0], "::std::vector< ::int32>", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute", names[1], "int", a[1]);
  int ret1{};
  // Call actual C++ method.
  ::kaldi::ContextDependencyInterface* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Compute(std::move(arg1), std::move(arg2), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  PyObject* pyproc = ImportFQName("kaldi.util._value_error_on_false");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// get_pdf_info(phones:list<int>, num_pdf_classes:list<int>) -> list<list<tuple<int, int>>>
static PyObject* wrapGetPdfInfo_as_get_pdf_info(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("phones"),
      C("num_pdf_classes"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_pdf_info", names, &a[0], &a[1])) return nullptr;
  ::std::vector< ::int32> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_pdf_info", names[0], "::std::vector< ::int32>", a[0]);
  ::std::vector< ::int32> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_pdf_info", names[1], "::std::vector< ::int32>", a[1]);
  ::std::vector< ::std::vector< ::std::pair< ::int32, ::int32> > > ret0{};
  // Call actual C++ method.
  ::kaldi::ContextDependencyInterface* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetPdfInfo(std::move(arg1), std::move(arg2), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_pdf_pair_info(phones:list<int>, pdf_class_pairs:list<list<tuple<int, int>>>) -> list<list<list<tuple<int, int>>>>
static PyObject* wrapGetPdfInfo_as_get_pdf_pair_info(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("phones"),
      C("pdf_class_pairs"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_pdf_pair_info", names, &a[0], &a[1])) return nullptr;
  ::std::vector< ::int32> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_pdf_pair_info", names[0], "::std::vector< ::int32>", a[0]);
  ::std::vector< ::std::vector< ::std::pair< ::int32, ::int32> > > arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_pdf_pair_info", names[1], "::std::vector< ::std::vector< ::std::pair< ::int32, ::int32> > >", a[1]);
  ::std::vector< ::std::vector< ::std::vector< ::std::pair< ::int32, ::int32> > > > ret0{};
  // Call actual C++ method.
  ::kaldi::ContextDependencyInterface* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetPdfInfo(std::move(arg1), std::move(arg2), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_pdfs() -> int
static PyObject* wrapNumPdfs_as_num_pdfs(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::ContextDependencyInterface* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumPdfs();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// copy() -> ContextDependencyInterface
static PyObject* wrapCopy_as_copy(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::ContextDependencyInterface* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::ContextDependencyInterface * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Copy();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("context_width"), (PyCFunction)wrapContextWidth_as_context_width, METH_NOARGS, C("context_width() -> int\n  Calls C++ function\n  int ::kaldi::ContextDependencyInterface::ContextWidth()")},
  {C("central_position"), (PyCFunction)wrapCentralPosition_as_central_position, METH_NOARGS, C("central_position() -> int\n  Calls C++ function\n  int ::kaldi::ContextDependencyInterface::CentralPosition()")},
  {C("compute"), (PyCFunction)wrapCompute_as_compute, METH_VARARGS | METH_KEYWORDS, C("compute(phoneseq:list<int>, pdf_class:int) -> (success:bool, pdf_id:int)\n  Calls C++ function\n  bool ::kaldi::ContextDependencyInterface::Compute(::std::vector< ::int32>, int, int*)")},
  {C("get_pdf_info"), (PyCFunction)wrapGetPdfInfo_as_get_pdf_info, METH_VARARGS | METH_KEYWORDS, C("get_pdf_info(phones:list<int>, num_pdf_classes:list<int>) -> list<list<tuple<int, int>>>\n  Calls C++ function\n  void ::kaldi::ContextDependencyInterface::GetPdfInfo(::std::vector< ::int32>, ::std::vector< ::int32>, ::std::vector< ::std::vector< ::std::pair< ::int32, ::int32> > >*)")},
  {C("get_pdf_pair_info"), (PyCFunction)wrapGetPdfInfo_as_get_pdf_pair_info, METH_VARARGS | METH_KEYWORDS, C("get_pdf_pair_info(phones:list<int>, pdf_class_pairs:list<list<tuple<int, int>>>) -> list<list<list<tuple<int, int>>>>\n  Calls C++ function\n  void ::kaldi::ContextDependencyInterface::GetPdfInfo(::std::vector< ::int32>, ::std::vector< ::std::vector< ::std::pair< ::int32, ::int32> > >, ::std::vector< ::std::vector< ::std::vector< ::std::pair< ::int32, ::int32> > > >*)")},
  {C("num_pdfs"), (PyCFunction)wrapNumPdfs_as_num_pdfs, METH_NOARGS, C("num_pdfs() -> int\n  Calls C++ function\n  int ::kaldi::ContextDependencyInterface::NumPdfs()")},
  {C("copy"), (PyCFunction)wrapCopy_as_copy, METH_NOARGS, C("copy() -> ContextDependencyInterface\n  Calls C++ function\n  ::kaldi::ContextDependencyInterface * ::kaldi::ContextDependencyInterface::Copy()")},
  {}
};

// ContextDependencyInterface __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ContextDependencyInterface __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_context_dep_itf.ContextDependencyInterface", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::ContextDependencyInterface", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::ContextDependencyInterface* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_ContextDependencyInterface"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::ContextDependencyInterface"));
      if (!PyErr_Occurred()) {
        ::kaldi::ContextDependencyInterface* c = static_cast<::kaldi::ContextDependencyInterface*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::ContextDependencyInterface*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyContextDependencyInterface


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyContextDependencyInterface::wrapper_Type) < 0) return false;
  Py_INCREF(&pyContextDependencyInterface::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_context_dep_itf",  // module name
  "CLIF-generated module for itf/context-dep-itf.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "ContextDependencyInterface", reinterpret_cast<PyObject*>(&pyContextDependencyInterface::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __context__dep__itf_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// ContextDependencyInterface to/from ::kaldi::ContextDependencyInterface conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::ContextDependencyInterface** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::ContextDependencyInterface* cpp = __context__dep__itf_clifwrap::pyContextDependencyInterface::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::ContextDependencyInterface>* c) {
  assert(c != nullptr);
  ::kaldi::ContextDependencyInterface* cpp = __context__dep__itf_clifwrap::pyContextDependencyInterface::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__context__dep__itf_clifwrap::pyContextDependencyInterface::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::ContextDependencyInterface>* c) {
  assert(c != nullptr);
  ::kaldi::ContextDependencyInterface* cpp = __context__dep__itf_clifwrap::pyContextDependencyInterface::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__context__dep__itf_clifwrap::pyContextDependencyInterface::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ContextDependencyInterface instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::ContextDependencyInterface* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__context__dep__itf_clifwrap::pyContextDependencyInterface::wrapper_Type, NULL, NULL);
  reinterpret_cast<__context__dep__itf_clifwrap::pyContextDependencyInterface::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ContextDependencyInterface>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::ContextDependencyInterface> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__context__dep__itf_clifwrap::pyContextDependencyInterface::wrapper_Type, NULL, NULL);
  reinterpret_cast<__context__dep__itf_clifwrap::pyContextDependencyInterface::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ContextDependencyInterface>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::ContextDependencyInterface> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__context__dep__itf_clifwrap::pyContextDependencyInterface::wrapper_Type, NULL, NULL);
  reinterpret_cast<__context__dep__itf_clifwrap::pyContextDependencyInterface::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ContextDependencyInterface>(std::move(c));
  return py;
}

}  // namespace kaldi
