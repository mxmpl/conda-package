//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/itf/online-feature-itf.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "online-feature-itf-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __online__feature__itf_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyOnlineFeatureInterface {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineFeatureInterface> cpp;
};
static ::kaldi::OnlineFeatureInterface* ThisPtr(PyObject*);

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineFeatureInterface* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_last_frame(frame:int) -> bool
static PyObject* wrapIsLastFrame_as_is_last_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_last_frame", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_last_frame", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineFeatureInterface* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsLastFrame(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// frame_shift_in_seconds() -> float
static PyObject* wrapFrameShiftInSeconds_as_frame_shift_in_seconds(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineFeatureInterface* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FrameShiftInSeconds();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_frames_ready() -> int
static PyObject* wrapNumFramesReady_as_num_frames_ready(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineFeatureInterface* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFramesReady();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_frame(frame:int, feat:VectorBase)
static PyObject* wrapGetFrame_as_get_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("feat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_frame", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_frame", names[0], "int", a[0]);
  ::kaldi::VectorBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_frame", names[1], "::kaldi::VectorBase<float> *", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineFeatureInterface* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetFrame(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::OnlineFeatureInterface::Dim()")},
  {C("is_last_frame"), (PyCFunction)wrapIsLastFrame_as_is_last_frame, METH_VARARGS | METH_KEYWORDS, C("is_last_frame(frame:int) -> bool\n  Calls C++ function\n  bool ::kaldi::OnlineFeatureInterface::IsLastFrame(int)")},
  {C("frame_shift_in_seconds"), (PyCFunction)wrapFrameShiftInSeconds_as_frame_shift_in_seconds, METH_NOARGS, C("frame_shift_in_seconds() -> float\n  Calls C++ function\n  float ::kaldi::OnlineFeatureInterface::FrameShiftInSeconds()")},
  {C("num_frames_ready"), (PyCFunction)wrapNumFramesReady_as_num_frames_ready, METH_NOARGS, C("num_frames_ready() -> int\n  Calls C++ function\n  int ::kaldi::OnlineFeatureInterface::NumFramesReady()")},
  {C("get_frame"), (PyCFunction)wrapGetFrame_as_get_frame, METH_VARARGS | METH_KEYWORDS, C("get_frame(frame:int, feat:VectorBase)\n  Calls C++ function\n  void ::kaldi::OnlineFeatureInterface::GetFrame(int, ::kaldi::VectorBase<float> *)")},
  {}
};

// OnlineFeatureInterface __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineFeatureInterface __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_feature_itf.OnlineFeatureInterface", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineFeatureInterface", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineFeatureInterface* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineFeatureInterface"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineFeatureInterface"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineFeatureInterface* c = static_cast<::kaldi::OnlineFeatureInterface*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineFeatureInterface*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineFeatureInterface

namespace pyOnlineBaseFeature {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineBaseFeature> cpp;
};
static ::kaldi::OnlineBaseFeature* ThisPtr(PyObject*);

// accept_waveform(sampling_rate:float, waveform:VectorBase)
static PyObject* wrapAcceptWaveform_as_accept_waveform(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("sampling_rate"),
      C("waveform"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:accept_waveform", names, &a[0], &a[1])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accept_waveform", names[0], "float", a[0]);
  ::kaldi::VectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accept_waveform", names[1], "::kaldi::VectorBase<float>", a[1]);
  // Call actual C++ method.
  ::kaldi::OnlineBaseFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AcceptWaveform(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// input_finished()
static PyObject* wrapInputFinished_as_input_finished(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineBaseFeature* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->InputFinished();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::kaldi::OnlineFeatureInterface*
static PyObject* as_kaldi_OnlineFeatureInterface(PyObject* self) {
  ::kaldi::OnlineFeatureInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::OnlineFeatureInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("accept_waveform"), (PyCFunction)wrapAcceptWaveform_as_accept_waveform, METH_VARARGS | METH_KEYWORDS, C("accept_waveform(sampling_rate:float, waveform:VectorBase)\n  Calls C++ function\n  void ::kaldi::OnlineBaseFeature::AcceptWaveform(float, ::kaldi::VectorBase<float>)")},
  {C("input_finished"), (PyCFunction)wrapInputFinished_as_input_finished, METH_NOARGS, C("input_finished()\n  Calls C++ function\n  void ::kaldi::OnlineBaseFeature::InputFinished()")},
  {C("as_kaldi_OnlineFeatureInterface"), (PyCFunction)as_kaldi_OnlineFeatureInterface, METH_NOARGS, C("Upcast to ::kaldi::OnlineFeatureInterface*")},
  {}
};

// OnlineBaseFeature __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineBaseFeature __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_feature_itf.OnlineBaseFeature", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineBaseFeature", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineBaseFeature* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineBaseFeature"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineBaseFeature"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineBaseFeature* c = static_cast<::kaldi::OnlineBaseFeature*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineBaseFeature*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineBaseFeature


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyOnlineFeatureInterface::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineFeatureInterface::wrapper_Type);  // For PyModule_AddObject to steal.
  pyOnlineBaseFeature::wrapper_Type.tp_base = &pyOnlineFeatureInterface::wrapper_Type;
  if (PyType_Ready(&pyOnlineBaseFeature::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineBaseFeature::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_online_feature_itf",  // module name
  "CLIF-generated module for itf/online-feature-itf.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "OnlineFeatureInterface", reinterpret_cast<PyObject*>(&pyOnlineFeatureInterface::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "OnlineBaseFeature", reinterpret_cast<PyObject*>(&pyOnlineBaseFeature::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __online__feature__itf_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// OnlineBaseFeature to/from ::kaldi::OnlineBaseFeature conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineBaseFeature** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineBaseFeature* cpp = __online__feature__itf_clifwrap::pyOnlineBaseFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineBaseFeature>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineBaseFeature* cpp = __online__feature__itf_clifwrap::pyOnlineBaseFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__feature__itf_clifwrap::pyOnlineBaseFeature::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineBaseFeature>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineBaseFeature* cpp = __online__feature__itf_clifwrap::pyOnlineBaseFeature::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__feature__itf_clifwrap::pyOnlineBaseFeature::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineBaseFeature instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineBaseFeature* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature__itf_clifwrap::pyOnlineBaseFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature__itf_clifwrap::pyOnlineBaseFeature::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineBaseFeature>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineBaseFeature> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature__itf_clifwrap::pyOnlineBaseFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature__itf_clifwrap::pyOnlineBaseFeature::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineBaseFeature>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineBaseFeature> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature__itf_clifwrap::pyOnlineBaseFeature::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature__itf_clifwrap::pyOnlineBaseFeature::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineBaseFeature>(std::move(c));
  return py;
}

// OnlineFeatureInterface to/from ::kaldi::OnlineFeatureInterface conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineFeatureInterface** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineFeatureInterface* cpp = __online__feature__itf_clifwrap::pyOnlineFeatureInterface::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineFeatureInterface>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineFeatureInterface* cpp = __online__feature__itf_clifwrap::pyOnlineFeatureInterface::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__feature__itf_clifwrap::pyOnlineFeatureInterface::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineFeatureInterface>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineFeatureInterface* cpp = __online__feature__itf_clifwrap::pyOnlineFeatureInterface::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__feature__itf_clifwrap::pyOnlineFeatureInterface::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineFeatureInterface instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineFeatureInterface* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature__itf_clifwrap::pyOnlineFeatureInterface::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature__itf_clifwrap::pyOnlineFeatureInterface::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineFeatureInterface>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineFeatureInterface> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature__itf_clifwrap::pyOnlineFeatureInterface::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature__itf_clifwrap::pyOnlineFeatureInterface::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineFeatureInterface>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineFeatureInterface> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__feature__itf_clifwrap::pyOnlineFeatureInterface::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__feature__itf_clifwrap::pyOnlineFeatureInterface::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineFeatureInterface>(std::move(c));
  return py;
}

}  // namespace kaldi
