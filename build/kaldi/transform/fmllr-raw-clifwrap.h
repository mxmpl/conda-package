//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/transform/fmllr-raw.clif

#include <memory>
#include "clif/python/optional.h"
#include "transform/fmllr-raw.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::FmllrRawAccs` as FmllrRawAccs
bool Clif_PyObjAs(PyObject* input, ::kaldi::FmllrRawAccs** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::FmllrRawAccs>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::FmllrRawAccs>* output);
PyObject* Clif_PyObjFrom(::kaldi::FmllrRawAccs*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::FmllrRawAccs>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::FmllrRawAccs>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::FmllrRawAccs*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::FmllrRawAccs&, py::PostConv) = delete;
// CLIF use `::kaldi::FmllrRawOptions` as FmllrRawOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::FmllrRawOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::FmllrRawOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::FmllrRawOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::FmllrRawOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::FmllrRawOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::FmllrRawOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::FmllrRawOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::FmllrRawOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::FmllrRawOptions&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_fmllr_raw")) Py_DECREF(m);
// CLIF init_module else goto err;
