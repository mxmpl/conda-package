//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/transform/decodable-am-diag-gmm-regtree.clif

#include <memory>
#include "clif/python/optional.h"
#include "transform/decodable-am-diag-gmm-regtree.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::DecodableAmDiagGmmRegtreeFmllr` as DecodableAmDiagGmmRegtreeFmllr
bool Clif_PyObjAs(PyObject* input, ::kaldi::DecodableAmDiagGmmRegtreeFmllr** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::DecodableAmDiagGmmRegtreeFmllr>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::DecodableAmDiagGmmRegtreeFmllr>* output);
PyObject* Clif_PyObjFrom(::kaldi::DecodableAmDiagGmmRegtreeFmllr*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::DecodableAmDiagGmmRegtreeFmllr>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::DecodableAmDiagGmmRegtreeFmllr>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::DecodableAmDiagGmmRegtreeFmllr*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::DecodableAmDiagGmmRegtreeFmllr&, py::PostConv) = delete;
// CLIF use `::kaldi::DecodableAmDiagGmmRegtreeMllr` as DecodableAmDiagGmmRegtreeMllr
bool Clif_PyObjAs(PyObject* input, ::kaldi::DecodableAmDiagGmmRegtreeMllr** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::DecodableAmDiagGmmRegtreeMllr>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::DecodableAmDiagGmmRegtreeMllr>* output);
PyObject* Clif_PyObjFrom(::kaldi::DecodableAmDiagGmmRegtreeMllr*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::DecodableAmDiagGmmRegtreeMllr>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::DecodableAmDiagGmmRegtreeMllr>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::DecodableAmDiagGmmRegtreeMllr*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::DecodableAmDiagGmmRegtreeMllr&, py::PostConv) = delete;

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_decodable_am_diag_gmm_regtree")) Py_DECREF(m);
// CLIF init_module else goto err;
