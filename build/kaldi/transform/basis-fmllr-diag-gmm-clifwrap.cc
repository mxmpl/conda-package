//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/transform/basis-fmllr-diag-gmm.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "itf/options-itf-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "matrix/sp-matrix-clifwrap.h"
#include "gmm/am-diag-gmm-clifwrap.h"
#include "transform/transform-common-clifwrap.h"
#include "basis-fmllr-diag-gmm-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __basis__fmllr__diag__gmm_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyBasisFmllrOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::BasisFmllrOptions> cpp;
};
static ::kaldi::BasisFmllrOptions* ThisPtr(PyObject*);

static PyObject* get_num_iters(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->num_iters, {});
}

static int set_num_iters(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the num_iters attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->num_iters)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for num_iters:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_size_scale(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->size_scale, {});
}

static int set_size_scale(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the size_scale attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->size_scale)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for size_scale:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_min_count(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->min_count, {});
}

static int set_min_count(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the min_count attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->min_count)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for min_count:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_step_size_iters(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->step_size_iters, {});
}

static int set_step_size_iters(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the step_size_iters attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->step_size_iters)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for step_size_iters:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::BasisFmllrOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("num_iters"), get_num_iters, set_num_iters, C("C++ ::int32 BasisFmllrOptions.num_iters")},
  {C("size_scale"), get_size_scale, set_size_scale, C("C++ ::kaldi::BaseFloat BasisFmllrOptions.size_scale")},
  {C("min_count"), get_min_count, set_min_count, C("C++ ::kaldi::BaseFloat BasisFmllrOptions.min_count")},
  {C("step_size_iters"), get_step_size_iters, set_step_size_iters, C("C++ ::int32 BasisFmllrOptions.step_size_iters")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::BasisFmllrOptions::Register(::kaldi::OptionsItf *)")},
  {}
};

// BasisFmllrOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// BasisFmllrOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// BasisFmllrOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_basis_fmllr_diag_gmm.BasisFmllrOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::BasisFmllrOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "BasisFmllrOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::BasisFmllrOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::BasisFmllrOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_BasisFmllrOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::BasisFmllrOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::BasisFmllrOptions* c = static_cast<::kaldi::BasisFmllrOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::BasisFmllrOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyBasisFmllrOptions

namespace pyBasisFmllrAccus {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::BasisFmllrAccus> cpp;
};
static ::kaldi::BasisFmllrAccus* ThisPtr(PyObject*);

// @classmethod from_dim(dim:int) -> BasisFmllrAccus
static PyObject* wrapBasisFmllrAccus_as_from_dim(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("dim"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_dim", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_dim", names[0], "int", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::BasisFmllrAccus> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::BasisFmllrAccus>(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// resize_accus(dim:int)
static PyObject* wrapResizeAccus_as_resize_accus(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("dim"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:resize_accus", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("resize_accus", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::BasisFmllrAccus* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ResizeAccus(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::BasisFmllrAccus* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(is:istream, binary:bool, add:bool=default)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("is"),
      C("binary"),
      C("add"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:read", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  bool arg3;
  if (nargs > 2) {
    if (!a[2]) arg3 = (bool)false;
    else if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("read", names[2], "bool", a[2]);
  }
  // Call actual C++ method.
  ::kaldi::BasisFmllrAccus* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    c->Read(*arg1, std::move(arg2)); break;
  case 3:
    c->Read(*arg1, std::move(arg2), std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// accu_gradient_scatter(spk_stats:AffineXformStats)
static PyObject* wrapAccuGradientScatter_as_accu_gradient_scatter(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("spk_stats"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:accu_gradient_scatter", names, &a[0])) return nullptr;
  ::kaldi::AffineXformStats* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accu_gradient_scatter", names[0], "::kaldi::AffineXformStats", a[0]);
  // Call actual C++ method.
  ::kaldi::BasisFmllrAccus* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AccuGradientScatter(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyObject* get_grad_scatter_(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->grad_scatter_), {});
}

static int set_grad_scatter_(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the grad_scatter_ attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->grad_scatter_)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for grad_scatter_:SpMatrix", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_dim_(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->dim_, {});
}

static int set_dim_(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the dim_ attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->dim_)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for dim_:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_beta_(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->beta_, {});
}

static int set_beta_(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the beta_ attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->beta_)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for beta_:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("grad_scatter_"), get_grad_scatter_, set_grad_scatter_, C("C++ ::kaldi::SpMatrix< ::kaldi::BaseFloat> BasisFmllrAccus.grad_scatter_")},
  {C("dim_"), get_dim_, set_dim_, C("C++ ::int32 BasisFmllrAccus.dim_")},
  {C("beta_"), get_beta_, set_beta_, C("C++ double BasisFmllrAccus.beta_")},
  {}
};

static PyMethodDef Methods[] = {
  {C("from_dim"), (PyCFunction)wrapBasisFmllrAccus_as_from_dim, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_dim(dim:int) -> BasisFmllrAccus\n  Calls C++ function\n  std::unique_ptr<::kaldi::BasisFmllrAccus> ::kaldi::BasisFmllrAccus::BasisFmllrAccus(int)")},
  {C("resize_accus"), (PyCFunction)wrapResizeAccus_as_resize_accus, METH_VARARGS | METH_KEYWORDS, C("resize_accus(dim:int)\n  Calls C++ function\n  void ::kaldi::BasisFmllrAccus::ResizeAccus(int)")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::BasisFmllrAccus::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool, add:bool=default)\n  Calls C++ function\n  void ::kaldi::BasisFmllrAccus::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool, bool)")},
  {C("accu_gradient_scatter"), (PyCFunction)wrapAccuGradientScatter_as_accu_gradient_scatter, METH_VARARGS | METH_KEYWORDS, C("accu_gradient_scatter(spk_stats:AffineXformStats)\n  Calls C++ function\n  void ::kaldi::BasisFmllrAccus::AccuGradientScatter(::kaldi::AffineXformStats)")},
  {}
};

// BasisFmllrAccus __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// BasisFmllrAccus __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// BasisFmllrAccus __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_basis_fmllr_diag_gmm.BasisFmllrAccus", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::BasisFmllrAccus", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "BasisFmllrAccus takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::BasisFmllrAccus>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::BasisFmllrAccus* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_BasisFmllrAccus"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::BasisFmllrAccus"));
      if (!PyErr_Occurred()) {
        ::kaldi::BasisFmllrAccus* c = static_cast<::kaldi::BasisFmllrAccus*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::BasisFmllrAccus*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyBasisFmllrAccus

namespace pyBasisFmllrEstimate {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::BasisFmllrEstimate> cpp;
};
static ::kaldi::BasisFmllrEstimate* ThisPtr(PyObject*);

// @classmethod from_dim(dim:int) -> BasisFmllrEstimate
static PyObject* wrapBasisFmllrEstimate_as_from_dim(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("dim"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_dim", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_dim", names[0], "int", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::BasisFmllrEstimate> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::BasisFmllrEstimate>(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::BasisFmllrEstimate* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(is:istream, binary:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::BasisFmllrEstimate* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// estimate_fmllr_basis(am_gmm:AmDiagGmm, basis_accus:BasisFmllrAccus)
static PyObject* wrapEstimateFmllrBasis_as_estimate_fmllr_basis(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("am_gmm"),
      C("basis_accus"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:estimate_fmllr_basis", names, &a[0], &a[1])) return nullptr;
  ::kaldi::AmDiagGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("estimate_fmllr_basis", names[0], "::kaldi::AmDiagGmm", a[0]);
  ::kaldi::BasisFmllrAccus* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("estimate_fmllr_basis", names[1], "::kaldi::BasisFmllrAccus", a[1]);
  // Call actual C++ method.
  ::kaldi::BasisFmllrEstimate* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->EstimateFmllrBasis(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// compute_am_diag_precond(am_gmm:AmDiagGmm, pre_cond:DoubleSpMatrix)
static PyObject* wrapComputeAmDiagPrecond_as_compute_am_diag_precond(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("am_gmm"),
      C("pre_cond"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:compute_am_diag_precond", names, &a[0], &a[1])) return nullptr;
  ::kaldi::AmDiagGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_am_diag_precond", names[0], "::kaldi::AmDiagGmm", a[0]);
  ::kaldi::SpMatrix<double> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute_am_diag_precond", names[1], "::kaldi::SpMatrix<double> *", a[1]);
  // Call actual C++ method.
  ::kaldi::BasisFmllrEstimate* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ComputeAmDiagPrecond(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::BasisFmllrEstimate* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// basis_size() -> int
static PyObject* wrapBasisSize_as_basis_size(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::BasisFmllrEstimate* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->BasisSize();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// compute_transform(spk_stats:AffineXformStats, out_xform:Matrix, coefficients:Vector, options:BasisFmllrOptions) -> float
static PyObject* wrapComputeTransform_as_compute_transform(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("spk_stats"),
      C("out_xform"),
      C("coefficients"),
      C("options"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:compute_transform", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::AffineXformStats* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_transform", names[0], "::kaldi::AffineXformStats", a[0]);
  ::kaldi::Matrix<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute_transform", names[1], "::kaldi::Matrix<float> *", a[1]);
  ::kaldi::Vector<float> * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("compute_transform", names[2], "::kaldi::Vector<float> *", a[2]);
  ::kaldi::BasisFmllrOptions* arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("compute_transform", names[3], "::kaldi::BasisFmllrOptions", a[3]);
  // Call actual C++ method.
  ::kaldi::BasisFmllrEstimate* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  double ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->ComputeTransform(*arg1, arg2, arg3, *arg4);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("from_dim"), (PyCFunction)wrapBasisFmllrEstimate_as_from_dim, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_dim(dim:int) -> BasisFmllrEstimate\n  Calls C++ function\n  std::unique_ptr<::kaldi::BasisFmllrEstimate> ::kaldi::BasisFmllrEstimate::BasisFmllrEstimate(int)")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::BasisFmllrEstimate::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool)\n  Calls C++ function\n  void ::kaldi::BasisFmllrEstimate::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool)")},
  {C("estimate_fmllr_basis"), (PyCFunction)wrapEstimateFmllrBasis_as_estimate_fmllr_basis, METH_VARARGS | METH_KEYWORDS, C("estimate_fmllr_basis(am_gmm:AmDiagGmm, basis_accus:BasisFmllrAccus)\n  Calls C++ function\n  void ::kaldi::BasisFmllrEstimate::EstimateFmllrBasis(::kaldi::AmDiagGmm, ::kaldi::BasisFmllrAccus)")},
  {C("compute_am_diag_precond"), (PyCFunction)wrapComputeAmDiagPrecond_as_compute_am_diag_precond, METH_VARARGS | METH_KEYWORDS, C("compute_am_diag_precond(am_gmm:AmDiagGmm, pre_cond:DoubleSpMatrix)\n  Calls C++ function\n  void ::kaldi::BasisFmllrEstimate::ComputeAmDiagPrecond(::kaldi::AmDiagGmm, ::kaldi::SpMatrix<double> *)")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::BasisFmllrEstimate::Dim()")},
  {C("basis_size"), (PyCFunction)wrapBasisSize_as_basis_size, METH_NOARGS, C("basis_size() -> int\n  Calls C++ function\n  int ::kaldi::BasisFmllrEstimate::BasisSize()")},
  {C("compute_transform"), (PyCFunction)wrapComputeTransform_as_compute_transform, METH_VARARGS | METH_KEYWORDS, C("compute_transform(spk_stats:AffineXformStats, out_xform:Matrix, coefficients:Vector, options:BasisFmllrOptions) -> float\n  Calls C++ function\n  double ::kaldi::BasisFmllrEstimate::ComputeTransform(::kaldi::AffineXformStats, ::kaldi::Matrix<float> *, ::kaldi::Vector<float> *, ::kaldi::BasisFmllrOptions)")},
  {}
};

// BasisFmllrEstimate __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// BasisFmllrEstimate __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// BasisFmllrEstimate __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_basis_fmllr_diag_gmm.BasisFmllrEstimate", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::BasisFmllrEstimate", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "BasisFmllrEstimate takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::BasisFmllrEstimate>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::BasisFmllrEstimate* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_BasisFmllrEstimate"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::BasisFmllrEstimate"));
      if (!PyErr_Occurred()) {
        ::kaldi::BasisFmllrEstimate* c = static_cast<::kaldi::BasisFmllrEstimate*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::BasisFmllrEstimate*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyBasisFmllrEstimate


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyBasisFmllrOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyBasisFmllrOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyBasisFmllrAccus::wrapper_Type) < 0) return false;
  Py_INCREF(&pyBasisFmllrAccus::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyBasisFmllrEstimate::wrapper_Type) < 0) return false;
  Py_INCREF(&pyBasisFmllrEstimate::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_basis_fmllr_diag_gmm",  // module name
  "CLIF-generated module for transform/basis-fmllr-diag-gmm.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_sp_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_am_diag_gmm")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_transform_common")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "BasisFmllrOptions", reinterpret_cast<PyObject*>(&pyBasisFmllrOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "BasisFmllrAccus", reinterpret_cast<PyObject*>(&pyBasisFmllrAccus::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "BasisFmllrEstimate", reinterpret_cast<PyObject*>(&pyBasisFmllrEstimate::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __basis__fmllr__diag__gmm_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// BasisFmllrAccus to/from ::kaldi::BasisFmllrAccus conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::BasisFmllrAccus** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::BasisFmllrAccus* cpp = __basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrAccus::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::BasisFmllrAccus>* c) {
  assert(c != nullptr);
  ::kaldi::BasisFmllrAccus* cpp = __basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrAccus::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrAccus::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::BasisFmllrAccus>* c) {
  assert(c != nullptr);
  ::kaldi::BasisFmllrAccus* cpp = __basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrAccus::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrAccus::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert BasisFmllrAccus instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::BasisFmllrAccus* c) {
  assert(c != nullptr);
  ::kaldi::BasisFmllrAccus* cpp = __basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrAccus::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::BasisFmllrAccus>* c) {
  assert(c != nullptr);
  ::kaldi::BasisFmllrAccus* cpp = __basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrAccus::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::BasisFmllrAccus* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrAccus::wrapper_Type, NULL, NULL);
  reinterpret_cast<__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrAccus::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::BasisFmllrAccus>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::BasisFmllrAccus> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrAccus::wrapper_Type, NULL, NULL);
  reinterpret_cast<__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrAccus::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::BasisFmllrAccus>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::BasisFmllrAccus> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrAccus::wrapper_Type, NULL, NULL);
  reinterpret_cast<__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrAccus::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::BasisFmllrAccus>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::BasisFmllrAccus& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrAccus::wrapper_Type, NULL, NULL);
  reinterpret_cast<__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrAccus::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::BasisFmllrAccus>(c);
  return py;
}

// BasisFmllrEstimate to/from ::kaldi::BasisFmllrEstimate conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::BasisFmllrEstimate** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::BasisFmllrEstimate* cpp = __basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrEstimate::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::BasisFmllrEstimate>* c) {
  assert(c != nullptr);
  ::kaldi::BasisFmllrEstimate* cpp = __basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrEstimate::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrEstimate::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::BasisFmllrEstimate>* c) {
  assert(c != nullptr);
  ::kaldi::BasisFmllrEstimate* cpp = __basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrEstimate::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrEstimate::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert BasisFmllrEstimate instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::BasisFmllrEstimate* c) {
  assert(c != nullptr);
  ::kaldi::BasisFmllrEstimate* cpp = __basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrEstimate::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::BasisFmllrEstimate>* c) {
  assert(c != nullptr);
  ::kaldi::BasisFmllrEstimate* cpp = __basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrEstimate::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::BasisFmllrEstimate* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrEstimate::wrapper_Type, NULL, NULL);
  reinterpret_cast<__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrEstimate::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::BasisFmllrEstimate>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::BasisFmllrEstimate> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrEstimate::wrapper_Type, NULL, NULL);
  reinterpret_cast<__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrEstimate::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::BasisFmllrEstimate>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::BasisFmllrEstimate> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrEstimate::wrapper_Type, NULL, NULL);
  reinterpret_cast<__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrEstimate::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::BasisFmllrEstimate>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::BasisFmllrEstimate& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrEstimate::wrapper_Type, NULL, NULL);
  reinterpret_cast<__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrEstimate::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::BasisFmllrEstimate>(c);
  return py;
}

// BasisFmllrOptions to/from ::kaldi::BasisFmllrOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::BasisFmllrOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::BasisFmllrOptions* cpp = __basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::BasisFmllrOptions>* c) {
  assert(c != nullptr);
  ::kaldi::BasisFmllrOptions* cpp = __basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::BasisFmllrOptions>* c) {
  assert(c != nullptr);
  ::kaldi::BasisFmllrOptions* cpp = __basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert BasisFmllrOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::BasisFmllrOptions* c) {
  assert(c != nullptr);
  ::kaldi::BasisFmllrOptions* cpp = __basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::BasisFmllrOptions>* c) {
  assert(c != nullptr);
  ::kaldi::BasisFmllrOptions* cpp = __basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::BasisFmllrOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::BasisFmllrOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::BasisFmllrOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::BasisFmllrOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::BasisFmllrOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::BasisFmllrOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::BasisFmllrOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__basis__fmllr__diag__gmm_clifwrap::pyBasisFmllrOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::BasisFmllrOptions>(c);
  return py;
}

}  // namespace kaldi
