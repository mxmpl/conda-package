//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/transform/mllt.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "matrix/sp-matrix-clifwrap.h"
#include "gmm/am-diag-gmm-clifwrap.h"
#include "gmm/diag-gmm-clifwrap.h"
#include "mllt-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __mllt_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyMlltAccs {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::MlltAccs> cpp;
};
static ::kaldi::MlltAccs* ThisPtr(PyObject*);

// @classmethod new(dim:int, rand_prune:float=default) -> MlltAccs
static PyObject* wrapMlltAccs_as_new(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("dim"),
      C("rand_prune"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:new", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new", names[0], "int", a[0]);
  float arg2;
  if (nargs > 1) {
    if (!a[1]) arg2 = (float)2.500000e-01;
    else if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("new", names[1], "float", a[1]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::MlltAccs> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    ret0 = ::gtl::MakeUnique<::kaldi::MlltAccs>(std::move(arg1)); break;
  case 2:
    ret0 = ::gtl::MakeUnique<::kaldi::MlltAccs>(std::move(arg1), std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// init(dim:int, rand_prune:float=default)
static PyObject* wrapInit_as_init(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("dim"),
      C("rand_prune"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:init", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("init", names[0], "int", a[0]);
  float arg2;
  if (nargs > 1) {
    if (!a[1]) arg2 = (float)2.500000e-01;
    else if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("init", names[1], "float", a[1]);
  }
  // Call actual C++ method.
  ::kaldi::MlltAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    c->Init(std::move(arg1)); break;
  case 2:
    c->Init(std::move(arg1), std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(is:istream, binary:bool, add:bool=default)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("is"),
      C("binary"),
      C("add"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:read", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  bool arg3;
  if (nargs > 2) {
    if (!a[2]) arg3 = (bool)false;
    else if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("read", names[2], "bool", a[2]);
  }
  // Call actual C++ method.
  ::kaldi::MlltAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    c->Read(*arg1, std::move(arg2)); break;
  case 3:
    c->Read(*arg1, std::move(arg2), std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::MlltAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::MlltAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// update(M:MatrixBase) -> (objf_impr_out:float, count_out:float)
static PyObject* wrapUpdate_as_update(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("M"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:update", names, &a[0])) return nullptr;
  ::kaldi::MatrixBase<float> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("update", names[0], "::kaldi::MatrixBase<float> *", a[0]);
  float ret0{};
  float ret1{};
  // Call actual C++ method.
  ::kaldi::MlltAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Update(arg1, &ret0, &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// @classmethod update_static(beta:float, G:list<DoubleSpMatrix>, M:MatrixBase) -> (objf_impr_out:float, count_out:float)
static PyObject* wrapUpdate_as_update_static(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("beta"),
      C("G"),
      C("M"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:update_static", names, &a[0], &a[1], &a[2])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("update_static", names[0], "double", a[0]);
  ::std::vector< ::kaldi::SpMatrix<double> > arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("update_static", names[1], "::std::vector< ::kaldi::SpMatrix<double> >", a[1]);
  ::kaldi::MatrixBase<float> * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("update_static", names[2], "::kaldi::MatrixBase<float> *", a[2]);
  float ret0{};
  float ret1{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::MlltAccs::Update(std::move(arg1), std::move(arg2), arg3, &ret0, &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// accumulate_from_posteriors(gmm:DiagGmm, data:VectorBase, posteriors:VectorBase)
static PyObject* wrapAccumulateFromPosteriors_as_accumulate_from_posteriors(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("gmm"),
      C("data"),
      C("posteriors"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:accumulate_from_posteriors", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::DiagGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_from_posteriors", names[0], "::kaldi::DiagGmm", a[0]);
  ::kaldi::VectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_from_posteriors", names[1], "::kaldi::VectorBase<float>", a[1]);
  ::kaldi::VectorBase<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate_from_posteriors", names[2], "::kaldi::VectorBase<float>", a[2]);
  // Call actual C++ method.
  ::kaldi::MlltAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AccumulateFromPosteriors(*arg1, *arg2, *arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// accumulate_from_gmm(gmm:DiagGmm, data:VectorBase, weight:float) -> float
static PyObject* wrapAccumulateFromGmm_as_accumulate_from_gmm(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("gmm"),
      C("data"),
      C("weight"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:accumulate_from_gmm", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::DiagGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_from_gmm", names[0], "::kaldi::DiagGmm", a[0]);
  ::kaldi::VectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_from_gmm", names[1], "::kaldi::VectorBase<float>", a[1]);
  float arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate_from_gmm", names[2], "float", a[2]);
  // Call actual C++ method.
  ::kaldi::MlltAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->AccumulateFromGmm(*arg1, *arg2, std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// accumulate_from_gmm_preselect(gmm:DiagGmm, gselect:list<int>, data:VectorBase, weight:float) -> float
static PyObject* wrapAccumulateFromGmmPreselect_as_accumulate_from_gmm_preselect(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("gmm"),
      C("gselect"),
      C("data"),
      C("weight"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:accumulate_from_gmm_preselect", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::DiagGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_from_gmm_preselect", names[0], "::kaldi::DiagGmm", a[0]);
  ::std::vector< ::int32> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_from_gmm_preselect", names[1], "::std::vector< ::int32>", a[1]);
  ::kaldi::VectorBase<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate_from_gmm_preselect", names[2], "::kaldi::VectorBase<float>", a[2]);
  float arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("accumulate_from_gmm_preselect", names[3], "float", a[3]);
  // Call actual C++ method.
  ::kaldi::MlltAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->AccumulateFromGmmPreselect(*arg1, std::move(arg2), *arg3, std::move(arg4));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyObject* get_rand_prune_(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->rand_prune_, {});
}

static int set_rand_prune_(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the rand_prune_ attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->rand_prune_)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for rand_prune_:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_beta_(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->beta_, {});
}

static int set_beta_(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the beta_ attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->beta_)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for beta_:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_G_(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->G_, {});
}

static int set_G_(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the G_ attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->G_)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for G_:list<DoubleSpMatrix>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("rand_prune_"), get_rand_prune_, set_rand_prune_, C("C++ ::kaldi::BaseFloat MlltAccs.rand_prune_")},
  {C("beta_"), get_beta_, set_beta_, C("C++ double MlltAccs.beta_")},
  {C("G_"), get_G_, set_G_, C("C++ ::std::vector< ::kaldi::SpMatrix<double> > MlltAccs.G_")},
  {}
};

static PyMethodDef Methods[] = {
  {C("new"), (PyCFunction)wrapMlltAccs_as_new, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new(dim:int, rand_prune:float=default) -> MlltAccs\n  Calls C++ function\n  std::unique_ptr<::kaldi::MlltAccs> ::kaldi::MlltAccs::MlltAccs(int, float)")},
  {C("init"), (PyCFunction)wrapInit_as_init, METH_VARARGS | METH_KEYWORDS, C("init(dim:int, rand_prune:float=default)\n  Calls C++ function\n  void ::kaldi::MlltAccs::Init(int, float)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool, add:bool=default)\n  Calls C++ function\n  void ::kaldi::MlltAccs::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool, bool)")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::MlltAccs::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::MlltAccs::Dim()")},
  {C("update"), (PyCFunction)wrapUpdate_as_update, METH_VARARGS | METH_KEYWORDS, C("update(M:MatrixBase) -> (objf_impr_out:float, count_out:float)\n  Calls C++ function\n  void ::kaldi::MlltAccs::Update(::kaldi::MatrixBase<float> *, float*, float*)")},
  {C("update_static"), (PyCFunction)wrapUpdate_as_update_static, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("update_static(beta:float, G:list<DoubleSpMatrix>, M:MatrixBase) -> (objf_impr_out:float, count_out:float)\n  Calls C++ function\n  void ::kaldi::MlltAccs::Update(double, ::std::vector< ::kaldi::SpMatrix<double> >, ::kaldi::MatrixBase<float> *, float*, float*)")},
  {C("accumulate_from_posteriors"), (PyCFunction)wrapAccumulateFromPosteriors_as_accumulate_from_posteriors, METH_VARARGS | METH_KEYWORDS, C("accumulate_from_posteriors(gmm:DiagGmm, data:VectorBase, posteriors:VectorBase)\n  Calls C++ function\n  void ::kaldi::MlltAccs::AccumulateFromPosteriors(::kaldi::DiagGmm, ::kaldi::VectorBase<float>, ::kaldi::VectorBase<float>)")},
  {C("accumulate_from_gmm"), (PyCFunction)wrapAccumulateFromGmm_as_accumulate_from_gmm, METH_VARARGS | METH_KEYWORDS, C("accumulate_from_gmm(gmm:DiagGmm, data:VectorBase, weight:float) -> float\n  Calls C++ function\n  float ::kaldi::MlltAccs::AccumulateFromGmm(::kaldi::DiagGmm, ::kaldi::VectorBase<float>, float)")},
  {C("accumulate_from_gmm_preselect"), (PyCFunction)wrapAccumulateFromGmmPreselect_as_accumulate_from_gmm_preselect, METH_VARARGS | METH_KEYWORDS, C("accumulate_from_gmm_preselect(gmm:DiagGmm, gselect:list<int>, data:VectorBase, weight:float) -> float\n  Calls C++ function\n  float ::kaldi::MlltAccs::AccumulateFromGmmPreselect(::kaldi::DiagGmm, ::std::vector< ::int32>, ::kaldi::VectorBase<float>, float)")},
  {}
};

// MlltAccs __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// MlltAccs __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// MlltAccs __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_mllt.MlltAccs",                    // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::MlltAccs", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "MlltAccs takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::MlltAccs>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::MlltAccs* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_MlltAccs"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::MlltAccs"));
      if (!PyErr_Occurred()) {
        ::kaldi::MlltAccs* c = static_cast<::kaldi::MlltAccs*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::MlltAccs*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyMlltAccs


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyMlltAccs::wrapper_Type) < 0) return false;
  Py_INCREF(&pyMlltAccs::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_mllt",  // module name
  "CLIF-generated module for transform/mllt.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_sp_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_am_diag_gmm")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_diag_gmm")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "MlltAccs", reinterpret_cast<PyObject*>(&pyMlltAccs::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __mllt_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// MlltAccs to/from ::kaldi::MlltAccs conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::MlltAccs** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::MlltAccs* cpp = __mllt_clifwrap::pyMlltAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::MlltAccs>* c) {
  assert(c != nullptr);
  ::kaldi::MlltAccs* cpp = __mllt_clifwrap::pyMlltAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__mllt_clifwrap::pyMlltAccs::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::MlltAccs>* c) {
  assert(c != nullptr);
  ::kaldi::MlltAccs* cpp = __mllt_clifwrap::pyMlltAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__mllt_clifwrap::pyMlltAccs::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert MlltAccs instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::MlltAccs* c) {
  assert(c != nullptr);
  ::kaldi::MlltAccs* cpp = __mllt_clifwrap::pyMlltAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::MlltAccs>* c) {
  assert(c != nullptr);
  ::kaldi::MlltAccs* cpp = __mllt_clifwrap::pyMlltAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::MlltAccs* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mllt_clifwrap::pyMlltAccs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mllt_clifwrap::pyMlltAccs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MlltAccs>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::MlltAccs> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mllt_clifwrap::pyMlltAccs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mllt_clifwrap::pyMlltAccs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MlltAccs>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::MlltAccs> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mllt_clifwrap::pyMlltAccs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mllt_clifwrap::pyMlltAccs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MlltAccs>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::MlltAccs& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__mllt_clifwrap::pyMlltAccs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mllt_clifwrap::pyMlltAccs::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::MlltAccs>(c);
  return py;
}

}  // namespace kaldi
