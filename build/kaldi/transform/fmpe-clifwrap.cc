//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/transform/fmpe.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "itf/options-itf-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "matrix/matrix-ext.h"
#include "gmm/diag-gmm-clifwrap.h"
#include "gmm/am-diag-gmm-clifwrap.h"
#include "gmm/mle-am-diag-gmm-clifwrap.h"
#include "hmm/transition-model-clifwrap.h"
#include "fmpe-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __fmpe_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyFmpeOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::FmpeOptions> cpp;
};
static ::kaldi::FmpeOptions* ThisPtr(PyObject*);

static PyObject* get_context_expansion(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->context_expansion, _1);
}

static int set_context_expansion(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the context_expansion attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->context_expansion)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for context_expansion:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_post_scale(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->post_scale, {});
}

static int set_post_scale(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the post_scale attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->post_scale)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for post_scale:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::FmpeOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::FmpeOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(is:istream, binary:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::FmpeOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("context_expansion"), get_context_expansion, set_context_expansion, C("C++ ::std::string FmpeOptions.context_expansion")},
  {C("post_scale"), get_post_scale, set_post_scale, C("C++ ::kaldi::BaseFloat FmpeOptions.post_scale")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::FmpeOptions::Register(::kaldi::OptionsItf *)")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::FmpeOptions::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool)\n  Calls C++ function\n  void ::kaldi::FmpeOptions::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool)")},
  {}
};

// FmpeOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// FmpeOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// FmpeOptions __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_fmpe.FmpeOptions",                 // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::FmpeOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "FmpeOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::FmpeOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::FmpeOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_FmpeOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::FmpeOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::FmpeOptions* c = static_cast<::kaldi::FmpeOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::FmpeOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyFmpeOptions

namespace pyFmpeUpdateOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::FmpeUpdateOptions> cpp;
};
static ::kaldi::FmpeUpdateOptions* ThisPtr(PyObject*);

static PyObject* get_learning_rate(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->learning_rate, {});
}

static int set_learning_rate(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the learning_rate attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->learning_rate)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for learning_rate:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_l2_weight(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->l2_weight, {});
}

static int set_l2_weight(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the l2_weight attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->l2_weight)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for l2_weight:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::FmpeUpdateOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("learning_rate"), get_learning_rate, set_learning_rate, C("C++ ::kaldi::BaseFloat FmpeUpdateOptions.learning_rate")},
  {C("l2_weight"), get_l2_weight, set_l2_weight, C("C++ ::kaldi::BaseFloat FmpeUpdateOptions.l2_weight")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::FmpeUpdateOptions::Register(::kaldi::OptionsItf *)")},
  {}
};

// FmpeUpdateOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// FmpeUpdateOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// FmpeUpdateOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_fmpe.FmpeUpdateOptions",           // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::FmpeUpdateOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "FmpeUpdateOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::FmpeUpdateOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::FmpeUpdateOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_FmpeUpdateOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::FmpeUpdateOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::FmpeUpdateOptions* c = static_cast<::kaldi::FmpeUpdateOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::FmpeUpdateOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyFmpeUpdateOptions

namespace pyFmpeStats {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::FmpeStats> cpp;
};
static ::kaldi::FmpeStats* ThisPtr(PyObject*);

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::FmpeStats* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(is:istream, binary:bool, add:bool=default)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("is"),
      C("binary"),
      C("add"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:read", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  bool arg3;
  if (nargs > 2) {
    if (!a[2]) arg3 = (bool)false;
    else if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("read", names[2], "bool", a[2]);
  }
  // Call actual C++ method.
  ::kaldi::FmpeStats* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    c->Read(*arg1, std::move(arg2)); break;
  case 3:
    c->Read(*arg1, std::move(arg2), std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// deriv_plus() -> SubMatrix
static PyObject* wrapDerivPlus_as_deriv_plus(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::FmpeStats* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::gtl::optional<::kaldi::SubMatrix<float>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->DerivPlus();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0.value()), {});
}

// deriv_minus() -> SubMatrix
static PyObject* wrapDerivMinus_as_deriv_minus(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::FmpeStats* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::gtl::optional<::kaldi::SubMatrix<float>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->DerivMinus();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0.value()), {});
}

// accumulate_checks(feats:MatrixBase, direct_deriv:MatrixBase, indirect_deriv:MatrixBase)
static PyObject* wrapAccumulateChecks_as_accumulate_checks(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("feats"),
      C("direct_deriv"),
      C("indirect_deriv"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:accumulate_checks", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_checks", names[0], "::kaldi::MatrixBase<float>", a[0]);
  ::kaldi::MatrixBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_checks", names[1], "::kaldi::MatrixBase<float>", a[1]);
  ::kaldi::MatrixBase<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate_checks", names[2], "::kaldi::MatrixBase<float>", a[2]);
  // Call actual C++ method.
  ::kaldi::FmpeStats* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AccumulateChecks(*arg1, *arg2, *arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// do_checks()
static PyObject* wrapDoChecks_as_do_checks(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::FmpeStats* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DoChecks();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::FmpeStats::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool, add:bool=default)\n  Calls C++ function\n  void ::kaldi::FmpeStats::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool, bool)")},
  {C("deriv_plus"), (PyCFunction)wrapDerivPlus_as_deriv_plus, METH_NOARGS, C("deriv_plus() -> SubMatrix\n  Calls C++ function\n  ::kaldi::SubMatrix<float> ::kaldi::FmpeStats::DerivPlus()")},
  {C("deriv_minus"), (PyCFunction)wrapDerivMinus_as_deriv_minus, METH_NOARGS, C("deriv_minus() -> SubMatrix\n  Calls C++ function\n  ::kaldi::SubMatrix<float> ::kaldi::FmpeStats::DerivMinus()")},
  {C("accumulate_checks"), (PyCFunction)wrapAccumulateChecks_as_accumulate_checks, METH_VARARGS | METH_KEYWORDS, C("accumulate_checks(feats:MatrixBase, direct_deriv:MatrixBase, indirect_deriv:MatrixBase)\n  Calls C++ function\n  void ::kaldi::FmpeStats::AccumulateChecks(::kaldi::MatrixBase<float>, ::kaldi::MatrixBase<float>, ::kaldi::MatrixBase<float>)")},
  {C("do_checks"), (PyCFunction)wrapDoChecks_as_do_checks, METH_NOARGS, C("do_checks()\n  Calls C++ function\n  void ::kaldi::FmpeStats::DoChecks()")},
  {}
};

// FmpeStats __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// FmpeStats __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// FmpeStats __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_fmpe.FmpeStats",                   // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::FmpeStats", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "FmpeStats takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::FmpeStats>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::FmpeStats* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_FmpeStats"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::FmpeStats"));
      if (!PyErr_Occurred()) {
        ::kaldi::FmpeStats* c = static_cast<::kaldi::FmpeStats*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::FmpeStats*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyFmpeStats

namespace pyFmpe {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::Fmpe> cpp;
};
static ::kaldi::Fmpe* ThisPtr(PyObject*);

// @classmethod new(gmm:DiagGmm, config:FmpeOptions) -> Fmpe
static PyObject* wrapFmpe_as_new(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("gmm"),
      C("config"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:new", names, &a[0], &a[1])) return nullptr;
  ::kaldi::DiagGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new", names[0], "::kaldi::DiagGmm", a[0]);
  ::kaldi::FmpeOptions* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("new", names[1], "::kaldi::FmpeOptions", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::Fmpe> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::Fmpe>(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// feat_dim() -> int
static PyObject* wrapFeatDim_as_feat_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::Fmpe* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FeatDim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_gauss() -> int
static PyObject* wrapNumGauss_as_num_gauss(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::Fmpe* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumGauss();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_contexts() -> int
static PyObject* wrapNumContexts_as_num_contexts(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::Fmpe* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumContexts();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// projection_t_num_rows() -> int
static PyObject* wrapProjectionTNumRows_as_projection_t_num_rows(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::Fmpe* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->ProjectionTNumRows();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// projection_t_num_cols() -> int
static PyObject* wrapProjectionTNumCols_as_projection_t_num_cols(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::Fmpe* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->ProjectionTNumCols();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// compute_features(feat_in:MatrixBase, gselect:list<list<int>>) -> Matrix
static PyObject* wrapComputeFeatures_as_compute_features(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("feat_in"),
      C("gselect"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:compute_features", names, &a[0], &a[1])) return nullptr;
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_features", names[0], "::kaldi::MatrixBase<float>", a[0]);
  ::std::vector< ::std::vector< ::int32> > arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute_features", names[1], "::std::vector< ::std::vector< ::int32> >", a[1]);
  ::kaldi::Matrix<float> ret0{};
  // Call actual C++ method.
  ::kaldi::Fmpe* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ComputeFeatures(*arg1, std::move(arg2), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// acc_stats(feat_in:MatrixBase, gselect:list<list<int>>, direct_feat_deriv:MatrixBase, indirect_feat_deriv:MatrixBase, stats:FmpeStats)
static PyObject* wrapAccStats_as_acc_stats(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[5];
  char* names[] = {
      C("feat_in"),
      C("gselect"),
      C("direct_feat_deriv"),
      C("indirect_feat_deriv"),
      C("stats"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOO:acc_stats", names, &a[0], &a[1], &a[2], &a[3], &a[4])) return nullptr;
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("acc_stats", names[0], "::kaldi::MatrixBase<float>", a[0]);
  ::std::vector< ::std::vector< ::int32> > arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("acc_stats", names[1], "::std::vector< ::std::vector< ::int32> >", a[1]);
  ::kaldi::MatrixBase<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("acc_stats", names[2], "::kaldi::MatrixBase<float>", a[2]);
  ::kaldi::MatrixBase<float> * arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("acc_stats", names[3], "::kaldi::MatrixBase<float> *", a[3]);
  ::kaldi::FmpeStats * arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("acc_stats", names[4], "::kaldi::FmpeStats *", a[4]);
  // Call actual C++ method.
  ::kaldi::Fmpe* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AccStats(*arg1, std::move(arg2), *arg3, arg4, arg5);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::Fmpe* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(is:istream, binary:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::Fmpe* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// update(config:FmpeUpdateOptions, stats:FmpeStats) -> float
static PyObject* wrapUpdate_as_update(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("config"),
      C("stats"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:update", names, &a[0], &a[1])) return nullptr;
  ::kaldi::FmpeUpdateOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("update", names[0], "::kaldi::FmpeUpdateOptions", a[0]);
  ::kaldi::FmpeStats* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("update", names[1], "::kaldi::FmpeStats", a[1]);
  // Call actual C++ method.
  ::kaldi::Fmpe* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Update(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("new"), (PyCFunction)wrapFmpe_as_new, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new(gmm:DiagGmm, config:FmpeOptions) -> Fmpe\n  Calls C++ function\n  std::unique_ptr<::kaldi::Fmpe> ::kaldi::Fmpe::Fmpe(::kaldi::DiagGmm, ::kaldi::FmpeOptions)")},
  {C("feat_dim"), (PyCFunction)wrapFeatDim_as_feat_dim, METH_NOARGS, C("feat_dim() -> int\n  Calls C++ function\n  int ::kaldi::Fmpe::FeatDim()")},
  {C("num_gauss"), (PyCFunction)wrapNumGauss_as_num_gauss, METH_NOARGS, C("num_gauss() -> int\n  Calls C++ function\n  int ::kaldi::Fmpe::NumGauss()")},
  {C("num_contexts"), (PyCFunction)wrapNumContexts_as_num_contexts, METH_NOARGS, C("num_contexts() -> int\n  Calls C++ function\n  int ::kaldi::Fmpe::NumContexts()")},
  {C("projection_t_num_rows"), (PyCFunction)wrapProjectionTNumRows_as_projection_t_num_rows, METH_NOARGS, C("projection_t_num_rows() -> int\n  Calls C++ function\n  int ::kaldi::Fmpe::ProjectionTNumRows()")},
  {C("projection_t_num_cols"), (PyCFunction)wrapProjectionTNumCols_as_projection_t_num_cols, METH_NOARGS, C("projection_t_num_cols() -> int\n  Calls C++ function\n  int ::kaldi::Fmpe::ProjectionTNumCols()")},
  {C("compute_features"), (PyCFunction)wrapComputeFeatures_as_compute_features, METH_VARARGS | METH_KEYWORDS, C("compute_features(feat_in:MatrixBase, gselect:list<list<int>>) -> Matrix\n  Calls C++ function\n  void ::kaldi::Fmpe::ComputeFeatures(::kaldi::MatrixBase<float>, ::std::vector< ::std::vector< ::int32> >, ::kaldi::Matrix<float>*)")},
  {C("acc_stats"), (PyCFunction)wrapAccStats_as_acc_stats, METH_VARARGS | METH_KEYWORDS, C("acc_stats(feat_in:MatrixBase, gselect:list<list<int>>, direct_feat_deriv:MatrixBase, indirect_feat_deriv:MatrixBase, stats:FmpeStats)\n  Calls C++ function\n  void ::kaldi::Fmpe::AccStats(::kaldi::MatrixBase<float>, ::std::vector< ::std::vector< ::int32> >, ::kaldi::MatrixBase<float>, ::kaldi::MatrixBase<float> *, ::kaldi::FmpeStats *)")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::Fmpe::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool)\n  Calls C++ function\n  void ::kaldi::Fmpe::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool)")},
  {C("update"), (PyCFunction)wrapUpdate_as_update, METH_VARARGS | METH_KEYWORDS, C("update(config:FmpeUpdateOptions, stats:FmpeStats) -> float\n  Calls C++ function\n  float ::kaldi::Fmpe::Update(::kaldi::FmpeUpdateOptions, ::kaldi::FmpeStats)")},
  {}
};

// Fmpe __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// Fmpe __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// Fmpe __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_fmpe.Fmpe",                        // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::Fmpe",    // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "Fmpe takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::Fmpe>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::Fmpe* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_Fmpe"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::Fmpe"));
      if (!PyErr_Occurred()) {
        ::kaldi::Fmpe* c = static_cast<::kaldi::Fmpe*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::Fmpe*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyFmpe

// compute_am_gmm_feature_deriv(am_gmm:AmDiagGmm, trans_model:TransitionModel, posterior:list<list<tuple<int, float>>>, features:MatrixBase, direct_deriv:Matrix, model_diff:AccumAmDiagGmm=default, indirect_deriv:Matrix=default) -> float
static PyObject* wrapComputeAmGmmFeatureDeriv_as_compute_am_gmm_feature_deriv(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[7]{};
  char* names[] = {
      C("am_gmm"),
      C("trans_model"),
      C("posterior"),
      C("features"),
      C("direct_deriv"),
      C("model_diff"),
      C("indirect_deriv"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOO|OO:compute_am_gmm_feature_deriv", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5], &a[6])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 7; nargs > 5; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::AmDiagGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_am_gmm_feature_deriv", names[0], "::kaldi::AmDiagGmm", a[0]);
  ::kaldi::TransitionModel* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute_am_gmm_feature_deriv", names[1], "::kaldi::TransitionModel", a[1]);
  ::kaldi::Posterior arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("compute_am_gmm_feature_deriv", names[2], "::kaldi::Posterior", a[2]);
  ::kaldi::MatrixBase<float>* arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("compute_am_gmm_feature_deriv", names[3], "::kaldi::MatrixBase<float>", a[3]);
  ::kaldi::Matrix<float> * arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("compute_am_gmm_feature_deriv", names[4], "::kaldi::Matrix<float> *", a[4]);
  ::kaldi::AccumAmDiagGmm * arg6;
  if (nargs > 5) {
    if (!a[5]) arg6 = (::kaldi::AccumAmDiagGmm *)nullptr;
    else if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("compute_am_gmm_feature_deriv", names[5], "::kaldi::AccumAmDiagGmm *", a[5]);
  }
  ::kaldi::Matrix<float> * arg7;
  if (nargs > 6) {
    if (!a[6]) arg7 = (::kaldi::Matrix<float> *)nullptr;
    else if (!Clif_PyObjAs(a[6], &arg7)) return ArgError("compute_am_gmm_feature_deriv", names[6], "::kaldi::Matrix<float> *", a[6]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 5:
    ret0 = ::kaldi::ComputeAmGmmFeatureDeriv(*arg1, *arg2, std::move(arg3), *arg4, arg5); break;
  case 6:
    ret0 = ::kaldi::ComputeAmGmmFeatureDeriv(*arg1, *arg2, std::move(arg3), *arg4, arg5, arg6); break;
  case 7:
    ret0 = ::kaldi::ComputeAmGmmFeatureDeriv(*arg1, *arg2, std::move(arg3), *arg4, arg5, arg6, arg7); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("compute_am_gmm_feature_deriv"), (PyCFunction)wrapComputeAmGmmFeatureDeriv_as_compute_am_gmm_feature_deriv, METH_VARARGS | METH_KEYWORDS, C("compute_am_gmm_feature_deriv(am_gmm:AmDiagGmm, trans_model:TransitionModel, posterior:list<list<tuple<int, float>>>, features:MatrixBase, direct_deriv:Matrix, model_diff:AccumAmDiagGmm=default, indirect_deriv:Matrix=default) -> float\n  Calls C++ function\n  float ::kaldi::ComputeAmGmmFeatureDeriv(::kaldi::AmDiagGmm, ::kaldi::TransitionModel, ::kaldi::Posterior, ::kaldi::MatrixBase<float>, ::kaldi::Matrix<float> *, ::kaldi::AccumAmDiagGmm *, ::kaldi::Matrix<float> *)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyFmpeOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyFmpeOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyFmpeUpdateOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyFmpeUpdateOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyFmpeStats::wrapper_Type) < 0) return false;
  Py_INCREF(&pyFmpeStats::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyFmpe::wrapper_Type) < 0) return false;
  Py_INCREF(&pyFmpe::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_fmpe",  // module name
  "CLIF-generated module for transform/fmpe.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_matrix_ext")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_diag_gmm")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_am_diag_gmm")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_mle_am_diag_gmm")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_transition_model")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "FmpeOptions", reinterpret_cast<PyObject*>(&pyFmpeOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "FmpeUpdateOptions", reinterpret_cast<PyObject*>(&pyFmpeUpdateOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "FmpeStats", reinterpret_cast<PyObject*>(&pyFmpeStats::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "Fmpe", reinterpret_cast<PyObject*>(&pyFmpe::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __fmpe_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// Fmpe to/from ::kaldi::Fmpe conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::Fmpe** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::Fmpe* cpp = __fmpe_clifwrap::pyFmpe::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::Fmpe>* c) {
  assert(c != nullptr);
  ::kaldi::Fmpe* cpp = __fmpe_clifwrap::pyFmpe::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__fmpe_clifwrap::pyFmpe::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::Fmpe>* c) {
  assert(c != nullptr);
  ::kaldi::Fmpe* cpp = __fmpe_clifwrap::pyFmpe::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__fmpe_clifwrap::pyFmpe::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert Fmpe instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::Fmpe* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmpe_clifwrap::pyFmpe::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmpe_clifwrap::pyFmpe::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::Fmpe>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::Fmpe> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmpe_clifwrap::pyFmpe::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmpe_clifwrap::pyFmpe::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::Fmpe>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::Fmpe> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmpe_clifwrap::pyFmpe::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmpe_clifwrap::pyFmpe::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::Fmpe>(std::move(c));
  return py;
}

// FmpeOptions to/from ::kaldi::FmpeOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::FmpeOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::FmpeOptions* cpp = __fmpe_clifwrap::pyFmpeOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::FmpeOptions>* c) {
  assert(c != nullptr);
  ::kaldi::FmpeOptions* cpp = __fmpe_clifwrap::pyFmpeOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__fmpe_clifwrap::pyFmpeOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::FmpeOptions>* c) {
  assert(c != nullptr);
  ::kaldi::FmpeOptions* cpp = __fmpe_clifwrap::pyFmpeOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__fmpe_clifwrap::pyFmpeOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert FmpeOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::FmpeOptions* c) {
  assert(c != nullptr);
  ::kaldi::FmpeOptions* cpp = __fmpe_clifwrap::pyFmpeOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::FmpeOptions>* c) {
  assert(c != nullptr);
  ::kaldi::FmpeOptions* cpp = __fmpe_clifwrap::pyFmpeOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::FmpeOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmpe_clifwrap::pyFmpeOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmpe_clifwrap::pyFmpeOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmpeOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::FmpeOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmpe_clifwrap::pyFmpeOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmpe_clifwrap::pyFmpeOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmpeOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::FmpeOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmpe_clifwrap::pyFmpeOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmpe_clifwrap::pyFmpeOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmpeOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::FmpeOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__fmpe_clifwrap::pyFmpeOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmpe_clifwrap::pyFmpeOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::FmpeOptions>(c);
  return py;
}

// FmpeStats to/from ::kaldi::FmpeStats conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::FmpeStats** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::FmpeStats* cpp = __fmpe_clifwrap::pyFmpeStats::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::FmpeStats>* c) {
  assert(c != nullptr);
  ::kaldi::FmpeStats* cpp = __fmpe_clifwrap::pyFmpeStats::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__fmpe_clifwrap::pyFmpeStats::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::FmpeStats>* c) {
  assert(c != nullptr);
  ::kaldi::FmpeStats* cpp = __fmpe_clifwrap::pyFmpeStats::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__fmpe_clifwrap::pyFmpeStats::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert FmpeStats instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::FmpeStats* c) {
  assert(c != nullptr);
  ::kaldi::FmpeStats* cpp = __fmpe_clifwrap::pyFmpeStats::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::FmpeStats>* c) {
  assert(c != nullptr);
  ::kaldi::FmpeStats* cpp = __fmpe_clifwrap::pyFmpeStats::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::FmpeStats* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmpe_clifwrap::pyFmpeStats::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmpe_clifwrap::pyFmpeStats::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmpeStats>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::FmpeStats> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmpe_clifwrap::pyFmpeStats::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmpe_clifwrap::pyFmpeStats::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmpeStats>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::FmpeStats> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmpe_clifwrap::pyFmpeStats::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmpe_clifwrap::pyFmpeStats::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmpeStats>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::FmpeStats& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__fmpe_clifwrap::pyFmpeStats::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmpe_clifwrap::pyFmpeStats::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::FmpeStats>(c);
  return py;
}

// FmpeUpdateOptions to/from ::kaldi::FmpeUpdateOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::FmpeUpdateOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::FmpeUpdateOptions* cpp = __fmpe_clifwrap::pyFmpeUpdateOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::FmpeUpdateOptions>* c) {
  assert(c != nullptr);
  ::kaldi::FmpeUpdateOptions* cpp = __fmpe_clifwrap::pyFmpeUpdateOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__fmpe_clifwrap::pyFmpeUpdateOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::FmpeUpdateOptions>* c) {
  assert(c != nullptr);
  ::kaldi::FmpeUpdateOptions* cpp = __fmpe_clifwrap::pyFmpeUpdateOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__fmpe_clifwrap::pyFmpeUpdateOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert FmpeUpdateOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::FmpeUpdateOptions* c) {
  assert(c != nullptr);
  ::kaldi::FmpeUpdateOptions* cpp = __fmpe_clifwrap::pyFmpeUpdateOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::FmpeUpdateOptions>* c) {
  assert(c != nullptr);
  ::kaldi::FmpeUpdateOptions* cpp = __fmpe_clifwrap::pyFmpeUpdateOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::FmpeUpdateOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmpe_clifwrap::pyFmpeUpdateOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmpe_clifwrap::pyFmpeUpdateOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmpeUpdateOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::FmpeUpdateOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmpe_clifwrap::pyFmpeUpdateOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmpe_clifwrap::pyFmpeUpdateOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmpeUpdateOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::FmpeUpdateOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmpe_clifwrap::pyFmpeUpdateOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmpe_clifwrap::pyFmpeUpdateOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmpeUpdateOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::FmpeUpdateOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__fmpe_clifwrap::pyFmpeUpdateOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmpe_clifwrap::pyFmpeUpdateOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::FmpeUpdateOptions>(c);
  return py;
}

}  // namespace kaldi
