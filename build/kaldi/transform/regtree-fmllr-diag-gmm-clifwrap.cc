//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/transform/regtree-fmllr-diag-gmm.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "itf/options-itf-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "gmm/am-diag-gmm-clifwrap.h"
#include "transform/transform-common-clifwrap.h"
#include "transform/regression-tree-clifwrap.h"
#include "regtree-fmllr-diag-gmm-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __regtree__fmllr__diag__gmm_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyRegtreeFmllrOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::RegtreeFmllrOptions> cpp;
};
static ::kaldi::RegtreeFmllrOptions* ThisPtr(PyObject*);

static PyObject* get_update_type(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->update_type, _1);
}

static int set_update_type(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the update_type attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->update_type)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for update_type:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_min_count(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->min_count, {});
}

static int set_min_count(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the min_count attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->min_count)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for min_count:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_num_iters(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->num_iters, {});
}

static int set_num_iters(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the num_iters attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->num_iters)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for num_iters:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_use_regtree(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->use_regtree, {});
}

static int set_use_regtree(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the use_regtree attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->use_regtree)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for use_regtree:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("update_type"), get_update_type, set_update_type, C("C++ ::std::string RegtreeFmllrOptions.update_type")},
  {C("min_count"), get_min_count, set_min_count, C("C++ ::kaldi::BaseFloat RegtreeFmllrOptions.min_count")},
  {C("num_iters"), get_num_iters, set_num_iters, C("C++ ::int32 RegtreeFmllrOptions.num_iters")},
  {C("use_regtree"), get_use_regtree, set_use_regtree, C("C++ bool RegtreeFmllrOptions.use_regtree")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::RegtreeFmllrOptions::Register(::kaldi::OptionsItf *)")},
  {}
};

// RegtreeFmllrOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// RegtreeFmllrOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// RegtreeFmllrOptions __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_regtree_fmllr_diag_gmm.RegtreeFmllrOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::RegtreeFmllrOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "RegtreeFmllrOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::RegtreeFmllrOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::RegtreeFmllrOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_RegtreeFmllrOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::RegtreeFmllrOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::RegtreeFmllrOptions* c = static_cast<::kaldi::RegtreeFmllrOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::RegtreeFmllrOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyRegtreeFmllrOptions

namespace pyRegtreeFmllrDiagGmm {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::RegtreeFmllrDiagGmm> cpp;
};
static ::kaldi::RegtreeFmllrDiagGmm* ThisPtr(PyObject*);

// @classmethod new(other:RegtreeFmllrDiagGmm) -> RegtreeFmllrDiagGmm
static PyObject* wrapRegtreeFmllrDiagGmm_as_new(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:new", names, &a[0])) return nullptr;
  ::kaldi::RegtreeFmllrDiagGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new", names[0], "::kaldi::RegtreeFmllrDiagGmm", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::RegtreeFmllrDiagGmm> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::RegtreeFmllrDiagGmm>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// init(num_xforms:int, dim:int)
static PyObject* wrapInit_as_init(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("num_xforms"),
      C("dim"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:init", names, &a[0], &a[1])) return nullptr;
  unsigned long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("init", names[0], "unsigned long", a[0]);
  unsigned long arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("init", names[1], "unsigned long", a[1]);
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Init(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _validate()
static PyObject* wrapValidate_as__validate(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Validate();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_unit()
static PyObject* wrapSetUnit_as_set_unit(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetUnit();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// compute_log_dets()
static PyObject* wrapComputeLogDets_as_compute_log_dets(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ComputeLogDets();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// transform_feature(in:VectorBase) -> list<Vector>
static PyObject* wrapTransformFeature_as_transform_feature(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("in"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:transform_feature", names, &a[0])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("transform_feature", names[0], "::kaldi::VectorBase<float>", a[0]);
  ::std::vector< ::kaldi::Vector< ::kaldi::BaseFloat> > ret0{};
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->TransformFeature(*arg1, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(is:istream, binary:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_base_classes() -> int
static PyObject* wrapNumBaseClasses_as_num_base_classes(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumBaseClasses();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_reg_classes() -> int
static PyObject* wrapNumRegClasses_as_num_reg_classes(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumRegClasses();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_xform_matrix(xform_index:int) -> Matrix
static PyObject* wrapGetXformMatrix_as_get_xform_matrix(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("xform_index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_xform_matrix", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_xform_matrix", names[0], "int", a[0]);
  ::kaldi::Matrix<float> ret0{};
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetXformMatrix(std::move(arg1), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_log_dets(out:VectorBase)
static PyObject* wrapGetLogDets_as_get_log_dets(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("out"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_log_dets", names, &a[0])) return nullptr;
  ::kaldi::VectorBase<float> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_log_dets", names[0], "::kaldi::VectorBase<float> *", a[0]);
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetLogDets(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// base_to_reg_class(bclass:int) -> int
static PyObject* wrapBase2RegClass_as_base_to_reg_class(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("bclass"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:base_to_reg_class", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("base_to_reg_class", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Base2RegClass(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// set_parameters(mat:MatrixBase, regclass:int)
static PyObject* wrapSetParameters_as_set_parameters(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("mat"),
      C("regclass"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:set_parameters", names, &a[0], &a[1])) return nullptr;
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_parameters", names[0], "::kaldi::MatrixBase<float>", a[0]);
  unsigned long arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("set_parameters", names[1], "unsigned long", a[1]);
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetParameters(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_bclass2xforms(in:list<int>)
static PyObject* wrapset_bclass2xforms(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("in"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_bclass2xforms", names, &a[0])) return nullptr;
  ::std::vector< ::int32> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_bclass2xforms", names[0], "::std::vector< ::int32>", a[0]);
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->set_bclass2xforms(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("new"), (PyCFunction)wrapRegtreeFmllrDiagGmm_as_new, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new(other:RegtreeFmllrDiagGmm) -> RegtreeFmllrDiagGmm\n  Calls C++ function\n  std::unique_ptr<::kaldi::RegtreeFmllrDiagGmm> ::kaldi::RegtreeFmllrDiagGmm::RegtreeFmllrDiagGmm(::kaldi::RegtreeFmllrDiagGmm)")},
  {C("init"), (PyCFunction)wrapInit_as_init, METH_VARARGS | METH_KEYWORDS, C("init(num_xforms:int, dim:int)\n  Calls C++ function\n  void ::kaldi::RegtreeFmllrDiagGmm::Init(unsigned long, unsigned long)")},
  {C("_validate"), (PyCFunction)wrapValidate_as__validate, METH_NOARGS, C("_validate()\n  Calls C++ function\n  void ::kaldi::RegtreeFmllrDiagGmm::Validate()")},
  {C("set_unit"), (PyCFunction)wrapSetUnit_as_set_unit, METH_NOARGS, C("set_unit()\n  Calls C++ function\n  void ::kaldi::RegtreeFmllrDiagGmm::SetUnit()")},
  {C("compute_log_dets"), (PyCFunction)wrapComputeLogDets_as_compute_log_dets, METH_NOARGS, C("compute_log_dets()\n  Calls C++ function\n  void ::kaldi::RegtreeFmllrDiagGmm::ComputeLogDets()")},
  {C("transform_feature"), (PyCFunction)wrapTransformFeature_as_transform_feature, METH_VARARGS | METH_KEYWORDS, C("transform_feature(in:VectorBase) -> list<Vector>\n  Calls C++ function\n  void ::kaldi::RegtreeFmllrDiagGmm::TransformFeature(::kaldi::VectorBase<float>, ::std::vector< ::kaldi::Vector< ::kaldi::BaseFloat> >*)")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::RegtreeFmllrDiagGmm::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool)\n  Calls C++ function\n  void ::kaldi::RegtreeFmllrDiagGmm::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool)")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::RegtreeFmllrDiagGmm::Dim()")},
  {C("num_base_classes"), (PyCFunction)wrapNumBaseClasses_as_num_base_classes, METH_NOARGS, C("num_base_classes() -> int\n  Calls C++ function\n  int ::kaldi::RegtreeFmllrDiagGmm::NumBaseClasses()")},
  {C("num_reg_classes"), (PyCFunction)wrapNumRegClasses_as_num_reg_classes, METH_NOARGS, C("num_reg_classes() -> int\n  Calls C++ function\n  int ::kaldi::RegtreeFmllrDiagGmm::NumRegClasses()")},
  {C("get_xform_matrix"), (PyCFunction)wrapGetXformMatrix_as_get_xform_matrix, METH_VARARGS | METH_KEYWORDS, C("get_xform_matrix(xform_index:int) -> Matrix\n  Calls C++ function\n  void ::kaldi::RegtreeFmllrDiagGmm::GetXformMatrix(int, ::kaldi::Matrix<float>*)")},
  {C("get_log_dets"), (PyCFunction)wrapGetLogDets_as_get_log_dets, METH_VARARGS | METH_KEYWORDS, C("get_log_dets(out:VectorBase)\n  Calls C++ function\n  void ::kaldi::RegtreeFmllrDiagGmm::GetLogDets(::kaldi::VectorBase<float> *)")},
  {C("base_to_reg_class"), (PyCFunction)wrapBase2RegClass_as_base_to_reg_class, METH_VARARGS | METH_KEYWORDS, C("base_to_reg_class(bclass:int) -> int\n  Calls C++ function\n  int ::kaldi::RegtreeFmllrDiagGmm::Base2RegClass(int)")},
  {C("set_parameters"), (PyCFunction)wrapSetParameters_as_set_parameters, METH_VARARGS | METH_KEYWORDS, C("set_parameters(mat:MatrixBase, regclass:int)\n  Calls C++ function\n  void ::kaldi::RegtreeFmllrDiagGmm::SetParameters(::kaldi::MatrixBase<float>, unsigned long)")},
  {C("set_bclass2xforms"), (PyCFunction)wrapset_bclass2xforms, METH_VARARGS | METH_KEYWORDS, C("set_bclass2xforms(in:list<int>)\n  Calls C++ function\n  void ::kaldi::RegtreeFmllrDiagGmm::set_bclass2xforms(::std::vector< ::int32>)")},
  {}
};

// RegtreeFmllrDiagGmm __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// RegtreeFmllrDiagGmm __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// RegtreeFmllrDiagGmm __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_regtree_fmllr_diag_gmm.RegtreeFmllrDiagGmm", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::RegtreeFmllrDiagGmm", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "RegtreeFmllrDiagGmm takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::RegtreeFmllrDiagGmm>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::RegtreeFmllrDiagGmm* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_RegtreeFmllrDiagGmm"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::RegtreeFmllrDiagGmm"));
      if (!PyErr_Occurred()) {
        ::kaldi::RegtreeFmllrDiagGmm* c = static_cast<::kaldi::RegtreeFmllrDiagGmm*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::RegtreeFmllrDiagGmm*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyRegtreeFmllrDiagGmm

namespace pyRegtreeFmllrDiagGmmAccs {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::RegtreeFmllrDiagGmmAccs> cpp;
};
static ::kaldi::RegtreeFmllrDiagGmmAccs* ThisPtr(PyObject*);

// init(num_bclass:int, dim:int)
static PyObject* wrapInit_as_init(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("num_bclass"),
      C("dim"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:init", names, &a[0], &a[1])) return nullptr;
  unsigned long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("init", names[0], "unsigned long", a[0]);
  unsigned long arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("init", names[1], "unsigned long", a[1]);
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Init(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_zero()
static PyObject* wrapSetZero_as_set_zero(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetZero();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// accumulate_for_gmm(regtree:RegressionTree, am:AmDiagGmm, data:VectorBase, pdf_index:int, weight:float) -> float
static PyObject* wrapAccumulateForGmm_as_accumulate_for_gmm(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[5];
  char* names[] = {
      C("regtree"),
      C("am"),
      C("data"),
      C("pdf_index"),
      C("weight"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOO:accumulate_for_gmm", names, &a[0], &a[1], &a[2], &a[3], &a[4])) return nullptr;
  ::kaldi::RegressionTree* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_for_gmm", names[0], "::kaldi::RegressionTree", a[0]);
  ::kaldi::AmDiagGmm* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_for_gmm", names[1], "::kaldi::AmDiagGmm", a[1]);
  ::kaldi::VectorBase<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate_for_gmm", names[2], "::kaldi::VectorBase<float>", a[2]);
  unsigned long arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("accumulate_for_gmm", names[3], "unsigned long", a[3]);
  float arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("accumulate_for_gmm", names[4], "float", a[4]);
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->AccumulateForGmm(*arg1, *arg2, *arg3, std::move(arg4), std::move(arg5));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// accumulate_for_gaussian(regtree:RegressionTree, am:AmDiagGmm, data:VectorBase, pdf_index:int, gauss_index:int, weight:float)
static PyObject* wrapAccumulateForGaussian_as_accumulate_for_gaussian(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[6];
  char* names[] = {
      C("regtree"),
      C("am"),
      C("data"),
      C("pdf_index"),
      C("gauss_index"),
      C("weight"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOOO:accumulate_for_gaussian", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5])) return nullptr;
  ::kaldi::RegressionTree* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_for_gaussian", names[0], "::kaldi::RegressionTree", a[0]);
  ::kaldi::AmDiagGmm* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_for_gaussian", names[1], "::kaldi::AmDiagGmm", a[1]);
  ::kaldi::VectorBase<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate_for_gaussian", names[2], "::kaldi::VectorBase<float>", a[2]);
  unsigned long arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("accumulate_for_gaussian", names[3], "unsigned long", a[3]);
  unsigned long arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("accumulate_for_gaussian", names[4], "unsigned long", a[4]);
  float arg6;
  if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("accumulate_for_gaussian", names[5], "float", a[5]);
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AccumulateForGaussian(*arg1, *arg2, *arg3, std::move(arg4), std::move(arg5), std::move(arg6));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// update(regtree:RegressionTree, opts:RegtreeFmllrOptions, out_mllr:RegtreeFmllrDiagGmm) -> (auxf_impr:float, t:float)
static PyObject* wrapUpdate_as_update(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("regtree"),
      C("opts"),
      C("out_mllr"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:update", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::RegressionTree* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("update", names[0], "::kaldi::RegressionTree", a[0]);
  ::kaldi::RegtreeFmllrOptions* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("update", names[1], "::kaldi::RegtreeFmllrOptions", a[1]);
  ::kaldi::RegtreeFmllrDiagGmm * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("update", names[2], "::kaldi::RegtreeFmllrDiagGmm *", a[2]);
  float ret0{};
  float ret1{};
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Update(*arg1, *arg2, arg3, &ret0, &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(is:istream, binary:bool, add:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("is"),
      C("binary"),
      C("add"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:read", names, &a[0], &a[1], &a[2])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  bool arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("read", names[2], "bool", a[2]);
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_base_classes() -> int
static PyObject* wrapNumBaseClasses_as_num_base_classes(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RegtreeFmllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumBaseClasses();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyObject* get_baseclass_stats(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->baseclass_stats(), {});
}

static PyGetSetDef Properties[] = {
  {C("baseclass_stats"), get_baseclass_stats, nullptr, C("C++ clif_type_57 RegtreeFmllrDiagGmmAccs.baseclass_stats()")},
  {}
};

static PyMethodDef Methods[] = {
  {C("init"), (PyCFunction)wrapInit_as_init, METH_VARARGS | METH_KEYWORDS, C("init(num_bclass:int, dim:int)\n  Calls C++ function\n  void ::kaldi::RegtreeFmllrDiagGmmAccs::Init(unsigned long, unsigned long)")},
  {C("set_zero"), (PyCFunction)wrapSetZero_as_set_zero, METH_NOARGS, C("set_zero()\n  Calls C++ function\n  void ::kaldi::RegtreeFmllrDiagGmmAccs::SetZero()")},
  {C("accumulate_for_gmm"), (PyCFunction)wrapAccumulateForGmm_as_accumulate_for_gmm, METH_VARARGS | METH_KEYWORDS, C("accumulate_for_gmm(regtree:RegressionTree, am:AmDiagGmm, data:VectorBase, pdf_index:int, weight:float) -> float\n  Calls C++ function\n  float ::kaldi::RegtreeFmllrDiagGmmAccs::AccumulateForGmm(::kaldi::RegressionTree, ::kaldi::AmDiagGmm, ::kaldi::VectorBase<float>, unsigned long, float)")},
  {C("accumulate_for_gaussian"), (PyCFunction)wrapAccumulateForGaussian_as_accumulate_for_gaussian, METH_VARARGS | METH_KEYWORDS, C("accumulate_for_gaussian(regtree:RegressionTree, am:AmDiagGmm, data:VectorBase, pdf_index:int, gauss_index:int, weight:float)\n  Calls C++ function\n  void ::kaldi::RegtreeFmllrDiagGmmAccs::AccumulateForGaussian(::kaldi::RegressionTree, ::kaldi::AmDiagGmm, ::kaldi::VectorBase<float>, unsigned long, unsigned long, float)")},
  {C("update"), (PyCFunction)wrapUpdate_as_update, METH_VARARGS | METH_KEYWORDS, C("update(regtree:RegressionTree, opts:RegtreeFmllrOptions, out_mllr:RegtreeFmllrDiagGmm) -> (auxf_impr:float, t:float)\n  Calls C++ function\n  void ::kaldi::RegtreeFmllrDiagGmmAccs::Update(::kaldi::RegressionTree, ::kaldi::RegtreeFmllrOptions, ::kaldi::RegtreeFmllrDiagGmm *, float*, float*)")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::RegtreeFmllrDiagGmmAccs::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool, add:bool)\n  Calls C++ function\n  void ::kaldi::RegtreeFmllrDiagGmmAccs::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool, bool)")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::RegtreeFmllrDiagGmmAccs::Dim()")},
  {C("num_base_classes"), (PyCFunction)wrapNumBaseClasses_as_num_base_classes, METH_NOARGS, C("num_base_classes() -> int\n  Calls C++ function\n  int ::kaldi::RegtreeFmllrDiagGmmAccs::NumBaseClasses()")},
  {}
};

// RegtreeFmllrDiagGmmAccs __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// RegtreeFmllrDiagGmmAccs __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// RegtreeFmllrDiagGmmAccs __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_regtree_fmllr_diag_gmm.RegtreeFmllrDiagGmmAccs", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::RegtreeFmllrDiagGmmAccs", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "RegtreeFmllrDiagGmmAccs takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::RegtreeFmllrDiagGmmAccs>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::RegtreeFmllrDiagGmmAccs* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_RegtreeFmllrDiagGmmAccs"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::RegtreeFmllrDiagGmmAccs"));
      if (!PyErr_Occurred()) {
        ::kaldi::RegtreeFmllrDiagGmmAccs* c = static_cast<::kaldi::RegtreeFmllrDiagGmmAccs*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::RegtreeFmllrDiagGmmAccs*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyRegtreeFmllrDiagGmmAccs


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyRegtreeFmllrOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyRegtreeFmllrOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyRegtreeFmllrDiagGmm::wrapper_Type) < 0) return false;
  Py_INCREF(&pyRegtreeFmllrDiagGmm::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyRegtreeFmllrDiagGmmAccs::wrapper_Type) < 0) return false;
  Py_INCREF(&pyRegtreeFmllrDiagGmmAccs::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_regtree_fmllr_diag_gmm",  // module name
  "CLIF-generated module for transform/regtree-fmllr-diag-gmm.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_am_diag_gmm")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_transform_common")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_regression_tree")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "RegtreeFmllrOptions", reinterpret_cast<PyObject*>(&pyRegtreeFmllrOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "RegtreeFmllrDiagGmm", reinterpret_cast<PyObject*>(&pyRegtreeFmllrDiagGmm::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "RegtreeFmllrDiagGmmAccs", reinterpret_cast<PyObject*>(&pyRegtreeFmllrDiagGmmAccs::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __regtree__fmllr__diag__gmm_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// RegtreeFmllrDiagGmm to/from ::kaldi::RegtreeFmllrDiagGmm conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::RegtreeFmllrDiagGmm** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::RegtreeFmllrDiagGmm* cpp = __regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrDiagGmm::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::RegtreeFmllrDiagGmm>* c) {
  assert(c != nullptr);
  ::kaldi::RegtreeFmllrDiagGmm* cpp = __regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrDiagGmm::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrDiagGmm::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::RegtreeFmllrDiagGmm>* c) {
  assert(c != nullptr);
  ::kaldi::RegtreeFmllrDiagGmm* cpp = __regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrDiagGmm::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrDiagGmm::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert RegtreeFmllrDiagGmm instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::RegtreeFmllrDiagGmm* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrDiagGmm::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrDiagGmm::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RegtreeFmllrDiagGmm>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RegtreeFmllrDiagGmm> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrDiagGmm::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrDiagGmm::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RegtreeFmllrDiagGmm>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RegtreeFmllrDiagGmm> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrDiagGmm::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrDiagGmm::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RegtreeFmllrDiagGmm>(std::move(c));
  return py;
}

// RegtreeFmllrDiagGmmAccs to/from ::kaldi::RegtreeFmllrDiagGmmAccs conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::RegtreeFmllrDiagGmmAccs** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::RegtreeFmllrDiagGmmAccs* cpp = __regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrDiagGmmAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::RegtreeFmllrDiagGmmAccs>* c) {
  assert(c != nullptr);
  ::kaldi::RegtreeFmllrDiagGmmAccs* cpp = __regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrDiagGmmAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrDiagGmmAccs::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::RegtreeFmllrDiagGmmAccs>* c) {
  assert(c != nullptr);
  ::kaldi::RegtreeFmllrDiagGmmAccs* cpp = __regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrDiagGmmAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrDiagGmmAccs::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert RegtreeFmllrDiagGmmAccs instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::RegtreeFmllrDiagGmmAccs* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrDiagGmmAccs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrDiagGmmAccs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RegtreeFmllrDiagGmmAccs>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RegtreeFmllrDiagGmmAccs> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrDiagGmmAccs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrDiagGmmAccs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RegtreeFmllrDiagGmmAccs>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RegtreeFmllrDiagGmmAccs> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrDiagGmmAccs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrDiagGmmAccs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RegtreeFmllrDiagGmmAccs>(std::move(c));
  return py;
}

// RegtreeFmllrOptions to/from ::kaldi::RegtreeFmllrOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::RegtreeFmllrOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::RegtreeFmllrOptions* cpp = __regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::RegtreeFmllrOptions>* c) {
  assert(c != nullptr);
  ::kaldi::RegtreeFmllrOptions* cpp = __regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::RegtreeFmllrOptions>* c) {
  assert(c != nullptr);
  ::kaldi::RegtreeFmllrOptions* cpp = __regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert RegtreeFmllrOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::RegtreeFmllrOptions* c) {
  assert(c != nullptr);
  ::kaldi::RegtreeFmllrOptions* cpp = __regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::RegtreeFmllrOptions>* c) {
  assert(c != nullptr);
  ::kaldi::RegtreeFmllrOptions* cpp = __regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::RegtreeFmllrOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RegtreeFmllrOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RegtreeFmllrOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RegtreeFmllrOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RegtreeFmllrOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RegtreeFmllrOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::RegtreeFmllrOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regtree__fmllr__diag__gmm_clifwrap::pyRegtreeFmllrOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::RegtreeFmllrOptions>(c);
  return py;
}

}  // namespace kaldi
