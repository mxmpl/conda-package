//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/fstext/fst.clif

#include <memory>
#include "clif/python/optional.h"
#include "fst/fst.h"
#include "clif/python/postconv.h"

namespace fst {
using namespace ::clif;

// CLIF use `::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >` as CompactLatticeFst
bool Clif_PyObjAs(PyObject* input, ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>* output);
PyObject* Clif_PyObjFrom(::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >&, py::PostConv) = delete;
// CLIF use `::fst::FstHeader` as FstHeader
bool Clif_PyObjAs(PyObject* input, ::fst::FstHeader** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::FstHeader>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::FstHeader>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::FstHeader* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::FstHeader>* output);
PyObject* Clif_PyObjFrom(::fst::FstHeader*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::FstHeader>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::FstHeader>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::FstHeader&, py::PostConv);
// CLIF use `::fst::FstReadOptions` as FstReadOptions
bool Clif_PyObjAs(PyObject* input, ::fst::FstReadOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::FstReadOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::FstReadOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::FstReadOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::FstReadOptions>* output);
PyObject* Clif_PyObjFrom(::fst::FstReadOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::FstReadOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::FstReadOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::FstReadOptions&, py::PostConv);
// CLIF use `::fst::FstReadOptions::FileReadMode` as FstReadOptions.FileReadMode
bool Clif_PyObjAs(PyObject* input, ::fst::FstReadOptions::FileReadMode* output);
PyObject* Clif_PyObjFrom(const ::fst::FstReadOptions::FileReadMode&, py::PostConv);
// CLIF use `::fst::FstWriteOptions` as FstWriteOptions
bool Clif_PyObjAs(PyObject* input, ::fst::FstWriteOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::FstWriteOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::FstWriteOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::FstWriteOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::FstWriteOptions>* output);
PyObject* Clif_PyObjFrom(::fst::FstWriteOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::FstWriteOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::FstWriteOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::FstWriteOptions&, py::PostConv);
// CLIF use `::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >` as KwsIndexFst
bool Clif_PyObjAs(PyObject* input, ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>* output);
PyObject* Clif_PyObjFrom(::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >&, py::PostConv) = delete;
// CLIF use `::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >` as LatticeFst
bool Clif_PyObjAs(PyObject* input, ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>* output);
PyObject* Clif_PyObjFrom(::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >&, py::PostConv) = delete;
// CLIF use `::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >` as LogFst
bool Clif_PyObjAs(PyObject* input, ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>* output);
PyObject* Clif_PyObjFrom(::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >&, py::PostConv) = delete;
// CLIF use `::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >` as StdFst
bool Clif_PyObjAs(PyObject* input, ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* output);
PyObject* Clif_PyObjFrom(::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >&, py::PostConv) = delete;

}  // namespace fst

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_fst")) Py_DECREF(m);
// CLIF init_module else goto err;
