//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/fstext/context-fst.clif

#include <memory>
#include "clif/python/optional.h"
#include "fstext/context-fst.h"
#include "clif/python/postconv.h"

namespace fst {
using namespace ::clif;

// CLIF use `::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>` as StdContextFst
bool Clif_PyObjAs(PyObject* input, ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>>* output);
PyObject* Clif_PyObjFrom(::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>&, py::PostConv) = delete;
// CLIF use `::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >` as StdContextFstArcIterator
bool Clif_PyObjAs(PyObject* input, ::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >>* output);
PyObject* Clif_PyObjFrom(::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >&, py::PostConv) = delete;
// CLIF use `::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >` as StdContextFstStateIterator
bool Clif_PyObjAs(PyObject* input, ::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >>* output);
PyObject* Clif_PyObjFrom(::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >&, py::PostConv) = delete;

}  // namespace fst

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_context_fst")) Py_DECREF(m);
// CLIF init_module else goto err;
