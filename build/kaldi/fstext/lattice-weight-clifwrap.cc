//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/fstext/lattice-weight.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "fstext/weight-clifwrap.h"
#include "fstext/float-weight-clifwrap.h"
#include "lattice-weight-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __lattice__weight_clifwrap {
using namespace clif;
using namespace fst;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyLatticeWeight {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::LatticeWeightTpl<float>> cpp;
};
static ::fst::LatticeWeightTpl<float>* ThisPtr(PyObject*);

// @classmethod from_pair(a:float, b:float) -> LatticeWeight
static PyObject* wrapLatticeWeightTpl_as_from_pair(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("a"),
      C("b"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:from_pair", names, &a[0], &a[1])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_pair", names[0], "float", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_pair", names[1], "float", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::fst::LatticeWeightTpl<float>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::fst::LatticeWeightTpl<float>>(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_other(other:LatticeWeight) -> LatticeWeight
static PyObject* wrapLatticeWeightTpl_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::fst::LatticeWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::fst::LatticeWeightTpl<float>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::fst::LatticeWeightTpl<float>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::fst::LatticeWeightTpl<float>>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// hash() -> int
static PyObject* wrapHash_as_hash(PyObject* self) {
  // Call actual C++ method.
  ::fst::LatticeWeightTpl<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Hash();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyObject* get_value1(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->Value1(), {});
}

static int set_value1(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the value1 attribute");
    return -1;
  }
  float cval;
  if (Clif_PyObjAs(value, &cval)) {
    auto cpp = ThisPtr(self); if (!cpp) return -1;
    cpp->SetValue1(cval);
    return 0;
  }
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for value1:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_value2(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->Value2(), {});
}

static int set_value2(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the value2 attribute");
    return -1;
  }
  float cval;
  if (Clif_PyObjAs(value, &cval)) {
    auto cpp = ThisPtr(self); if (!cpp) return -1;
    cpp->SetValue2(cval);
    return 0;
  }
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for value2:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// __eq__(other:LatticeWeight) -> bool
static PyObject* wrap__eq__(PyObject* self, PyObject* args, PyObject* kw) {
  ::fst::LatticeWeightTpl<float>* arg0;
  if (!Clif_PyObjAs(self, &arg0)) return nullptr;
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__eq__", names, &a[0])) return nullptr;
  ::fst::LatticeWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__eq__", names[0], "::fst::LatticeWeightTpl<float>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::operator==(*arg0, *arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __ne__(other:LatticeWeight) -> bool
static PyObject* wrap__ne__(PyObject* self, PyObject* args, PyObject* kw) {
  ::fst::LatticeWeightTpl<float>* arg0;
  if (!Clif_PyObjAs(self, &arg0)) return nullptr;
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__ne__", names, &a[0])) return nullptr;
  ::fst::LatticeWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__ne__", names[0], "::fst::LatticeWeightTpl<float>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::operator!=(*arg0, *arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod zero() -> LatticeWeight
static PyObject* wrapZero_as_zero(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LatticeWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::LatticeWeightTpl<float>::Zero();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod one() -> LatticeWeight
static PyObject* wrapOne_as_one(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LatticeWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::LatticeWeightTpl<float>::One();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod no_weight() -> LatticeWeight
static PyObject* wrapNoWeight_as_no_weight(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LatticeWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::LatticeWeightTpl<float>::NoWeight();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod type() -> str
static PyObject* wrapType_as_type(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::LatticeWeightTpl<float>::Type();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// @classmethod properties() -> int
static PyObject* wrapProperties_as_properties(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::LatticeWeightTpl<float>::Properties();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// member() -> bool
static PyObject* wrapMember_as_member(PyObject* self) {
  // Call actual C++ method.
  ::fst::LatticeWeightTpl<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Member();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// quantize(delta:float=default) -> LatticeWeight
static PyObject* wrapQuantize_as_quantize(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("delta"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:quantize", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  float arg1;
  if (nargs > 0) {
    if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("quantize", names[0], "float", a[0]);
  }
  // Call actual C++ method.
  ::fst::LatticeWeightTpl<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LatticeWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    ret0 = c->Quantize(); break;
  case 1:
    ret0 = c->Quantize(std::move(arg1)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// reverse() -> LatticeWeight
static PyObject* wrapReverse_as_reverse(PyObject* self) {
  // Call actual C++ method.
  ::fst::LatticeWeightTpl<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LatticeWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Reverse();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyGetSetDef Properties[] = {
  {C("value1"), get_value1, set_value1, C("Float value of the first weight.")},
  {C("value2"), get_value2, set_value2, C("Float value of the second weight.")},
  {}
};

PyObject* slot_richcmp(PyObject* self, PyObject* other, int op) {
  switch (op) {
    case Py_NE: return slot::adapter<wrap__ne__>(self, other);
    case Py_EQ: return slot::adapter<wrap__eq__>(self, other);
    default: Py_RETURN_NOTIMPLEMENTED;
  }
}

static PyMethodDef Methods[] = {
  {C("from_pair"), (PyCFunction)wrapLatticeWeightTpl_as_from_pair, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_pair(a:float, b:float) -> LatticeWeight\n\nCreate a new lattice weight from a pair of floats.")},
  {C("from_other"), (PyCFunction)wrapLatticeWeightTpl_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(other:LatticeWeight) -> LatticeWeight\n\nCreate a new lattice weight from another.")},
  {C("hash"), (PyCFunction)wrapHash_as_hash, METH_NOARGS, C("hash() -> int\n\nReturns the hash for the weight.")},
  {C("zero"), (PyCFunction)wrapZero_as_zero, METH_NOARGS | METH_CLASS, C("zero() -> LatticeWeight\n\nZero in lattice semiring, i.e. (+infinity, +infinity).")},
  {C("one"), (PyCFunction)wrapOne_as_one, METH_NOARGS | METH_CLASS, C("one() -> LatticeWeight\n\nOne in lattice semiring, i.e. (0.0, 0.0).")},
  {C("no_weight"), (PyCFunction)wrapNoWeight_as_no_weight, METH_NOARGS | METH_CLASS, C("no_weight() -> LatticeWeight\n\nNo weight in lattice semiring.")},
  {C("type"), (PyCFunction)wrapType_as_type, METH_NOARGS | METH_CLASS, C("type() -> str\n\nReturns weight type.")},
  {C("properties"), (PyCFunction)wrapProperties_as_properties, METH_NOARGS | METH_CLASS, C("properties() -> int\n\nReturns weight properties.")},
  {C("member"), (PyCFunction)wrapMember_as_member, METH_NOARGS, C("member() -> bool\n\nChecks if weight is a member of the lattice semiring.")},
  {C("quantize"), (PyCFunction)wrapQuantize_as_quantize, METH_VARARGS | METH_KEYWORDS, C("quantize(delta:float=default) -> LatticeWeight\n\nQuantizes the weight.")},
  {C("reverse"), (PyCFunction)wrapReverse_as_reverse, METH_NOARGS, C("reverse() -> LatticeWeight\n\nReverses the weight.")},
  {}
};

// LatticeWeight __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// LatticeWeight __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// LatticeWeight __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_lattice_weight.LatticeWeight",     // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Lattice weight.",                   // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  slot_richcmp,                        // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "LatticeWeight takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::LatticeWeightTpl<float>>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::LatticeWeightTpl<float>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_LatticeWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::LatticeWeightTpl<float>"));
      if (!PyErr_Occurred()) {
        ::fst::LatticeWeightTpl<float>* c = static_cast<::fst::LatticeWeightTpl<float>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::LatticeWeightTpl<float>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyLatticeWeight

// scale_lattice_weight(w:LatticeWeight, scale:list<list<float>>) -> LatticeWeight
static PyObject* wrapScaleTupleWeight_as_scale_lattice_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("w"),
      C("scale"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:scale_lattice_weight", names, &a[0], &a[1])) return nullptr;
  ::fst::LatticeWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("scale_lattice_weight", names[0], "::fst::LatticeWeightTpl<float>", a[0]);
  ::std::vector< ::std::vector<double> > arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("scale_lattice_weight", names[1], "::std::vector< ::std::vector<double> >", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LatticeWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::ScaleTupleWeight(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// compare_lattice_weight(w1:LatticeWeight, w2:LatticeWeight) -> int
static PyObject* wrapCompare_as_compare_lattice_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("w1"),
      C("w2"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:compare_lattice_weight", names, &a[0], &a[1])) return nullptr;
  ::fst::LatticeWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compare_lattice_weight", names[0], "::fst::LatticeWeightTpl<float>", a[0]);
  ::fst::LatticeWeightTpl<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compare_lattice_weight", names[1], "::fst::LatticeWeightTpl<float>", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::Compare(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

namespace pyLatticeNaturalLess {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >> cpp;
};
static ::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >* ThisPtr(PyObject*);

// __call__(w1:LatticeWeight, w2:LatticeWeight) -> bool
static PyObject* wrap__call__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("w1"),
      C("w2"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__call__", names, &a[0], &a[1])) return nullptr;
  ::fst::LatticeWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__call__", names[0], "::fst::LatticeWeightTpl<float>", a[0]);
  ::fst::LatticeWeightTpl<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__call__", names[1], "::fst::LatticeWeightTpl<float>", a[1]);
  // Call actual C++ method.
  ::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->operator()(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("__call__"), (PyCFunction)wrap__call__, METH_VARARGS | METH_KEYWORDS, C("__call__(w1:LatticeWeight, w2:LatticeWeight) -> bool\n  Calls C++ function\n  bool ::fst::NaturalLess<fst::LatticeWeightTpl<float> >::operator()(::fst::LatticeWeightTpl<float>, ::fst::LatticeWeightTpl<float>)")},
  {}
};

// LatticeNaturalLess __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// LatticeNaturalLess __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// LatticeNaturalLess __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_lattice_weight.LatticeNaturalLess", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  (ternaryfunc)wrap__call__,           // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Comparison object in lattice semiring.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "LatticeNaturalLess takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_NaturalLess__fst_LatticeWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >"));
      if (!PyErr_Occurred()) {
        ::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >* c = static_cast<::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyLatticeNaturalLess

// plus_lattice_weight(w1:LatticeWeight, w2:LatticeWeight) -> LatticeWeight
static PyObject* wrapPlus_as_plus_lattice_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("w1"),
      C("w2"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:plus_lattice_weight", names, &a[0], &a[1])) return nullptr;
  ::fst::LatticeWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("plus_lattice_weight", names[0], "::fst::LatticeWeightTpl<float>", a[0]);
  ::fst::LatticeWeightTpl<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("plus_lattice_weight", names[1], "::fst::LatticeWeightTpl<float>", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LatticeWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::Plus(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// times_lattice_weight(w1:LatticeWeight, w2:LatticeWeight) -> LatticeWeight
static PyObject* wrapTimes_as_times_lattice_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("w1"),
      C("w2"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:times_lattice_weight", names, &a[0], &a[1])) return nullptr;
  ::fst::LatticeWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("times_lattice_weight", names[0], "::fst::LatticeWeightTpl<float>", a[0]);
  ::fst::LatticeWeightTpl<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("times_lattice_weight", names[1], "::fst::LatticeWeightTpl<float>", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LatticeWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::Times(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// divide_lattice_weight(w1:LatticeWeight, w2:LatticeWeight, typ:DivideType=default) -> LatticeWeight
static PyObject* wrapDivide_as_divide_lattice_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("w1"),
      C("w2"),
      C("typ"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:divide_lattice_weight", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::LatticeWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("divide_lattice_weight", names[0], "::fst::LatticeWeightTpl<float>", a[0]);
  ::fst::LatticeWeightTpl<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("divide_lattice_weight", names[1], "::fst::LatticeWeightTpl<float>", a[1]);
  ::fst::DivideType arg3;
  if (nargs > 2) {
    if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("divide_lattice_weight", names[2], "::fst::DivideType", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LatticeWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ret0 = ::fst::Divide(*arg1, *arg2); break;
  case 3:
    ret0 = ::fst::Divide(*arg1, *arg2, std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// approx_equal_lattice_weight(w1:LatticeWeight, w2:LatticeWeight, delta:float=default) -> bool
static PyObject* wrapApproxEqual_as_approx_equal_lattice_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("w1"),
      C("w2"),
      C("delta"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:approx_equal_lattice_weight", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::LatticeWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("approx_equal_lattice_weight", names[0], "::fst::LatticeWeightTpl<float>", a[0]);
  ::fst::LatticeWeightTpl<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("approx_equal_lattice_weight", names[1], "::fst::LatticeWeightTpl<float>", a[1]);
  float arg3;
  if (nargs > 2) {
    if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("approx_equal_lattice_weight", names[2], "float", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ret0 = ::fst::ApproxEqual(*arg1, *arg2); break;
  case 3:
    ret0 = ::fst::ApproxEqual(*arg1, *arg2, std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

namespace pyCompactLatticeWeight {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>> cpp;
};
static ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* ThisPtr(PyObject*);

// @classmethod from_pair(w:LatticeWeight, s:list<int>) -> CompactLatticeWeight
static PyObject* wrapCompactLatticeWeightTpl_as_from_pair(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("w"),
      C("s"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:from_pair", names, &a[0], &a[1])) return nullptr;
  ::fst::LatticeWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_pair", names[0], "::fst::LatticeWeightTpl<float>", a[0]);
  ::std::vector<int> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_pair", names[1], "::std::vector<int>", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>>(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_other(other:CompactLatticeWeight) -> CompactLatticeWeight
static PyObject* wrapCompactLatticeWeightTpl_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// hash() -> int
static PyObject* wrapHash_as_hash(PyObject* self) {
  // Call actual C++ method.
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Hash();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyObject* get_weight(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->Weight(), {});
}

static int set_weight(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the weight attribute");
    return -1;
  }
  ::fst::LatticeWeightTpl<float> cval;
  if (Clif_PyObjAs(value, &cval)) {
    auto cpp = ThisPtr(self); if (!cpp) return -1;
    cpp->SetWeight(cval);
    return 0;
  }
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for weight:LatticeWeight", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_string(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->String(), {});
}

static int set_string(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the string attribute");
    return -1;
  }
  ::std::vector<int> cval;
  if (Clif_PyObjAs(value, &cval)) {
    auto cpp = ThisPtr(self); if (!cpp) return -1;
    cpp->SetString(cval);
    return 0;
  }
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for string:list<int>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// __eq__(other:CompactLatticeWeight) -> bool
static PyObject* wrap__eq__(PyObject* self, PyObject* args, PyObject* kw) {
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* arg0;
  if (!Clif_PyObjAs(self, &arg0)) return nullptr;
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__eq__", names, &a[0])) return nullptr;
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__eq__", names[0], "::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::operator==(*arg0, *arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __ne__(other:CompactLatticeWeight) -> bool
static PyObject* wrap__ne__(PyObject* self, PyObject* args, PyObject* kw) {
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* arg0;
  if (!Clif_PyObjAs(self, &arg0)) return nullptr;
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__ne__", names, &a[0])) return nullptr;
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__ne__", names[0], "::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::operator!=(*arg0, *arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod zero() -> CompactLatticeWeight
static PyObject* wrapZero_as_zero(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int>::Zero();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod one() -> CompactLatticeWeight
static PyObject* wrapOne_as_one(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int>::One();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod no_weight() -> CompactLatticeWeight
static PyObject* wrapNoWeight_as_no_weight(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int>::NoWeight();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod type() -> str
static PyObject* wrapType_as_type(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int>::Type();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// @classmethod properties() -> int
static PyObject* wrapProperties_as_properties(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int>::Properties();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod get_int_size_string() -> str
static PyObject* wrapGetIntSizeString_as_get_int_size_string(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int>::GetIntSizeString();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// member() -> bool
static PyObject* wrapMember_as_member(PyObject* self) {
  // Call actual C++ method.
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Member();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// quantize(delta:float=default) -> CompactLatticeWeight
static PyObject* wrapQuantize_as_quantize(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("delta"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:quantize", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  float arg1;
  if (nargs > 0) {
    if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("quantize", names[0], "float", a[0]);
  }
  // Call actual C++ method.
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    ret0 = c->Quantize(); break;
  case 1:
    ret0 = c->Quantize(std::move(arg1)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// reverse() -> CompactLatticeWeight
static PyObject* wrapReverse_as_reverse(PyObject* self) {
  // Call actual C++ method.
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Reverse();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyGetSetDef Properties[] = {
  {C("weight"), get_weight, set_weight, C("The weight.")},
  {C("string"), get_string, set_string, C("The string as a list of integers.")},
  {}
};

PyObject* slot_richcmp(PyObject* self, PyObject* other, int op) {
  switch (op) {
    case Py_NE: return slot::adapter<wrap__ne__>(self, other);
    case Py_EQ: return slot::adapter<wrap__eq__>(self, other);
    default: Py_RETURN_NOTIMPLEMENTED;
  }
}

static PyMethodDef Methods[] = {
  {C("from_pair"), (PyCFunction)wrapCompactLatticeWeightTpl_as_from_pair, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_pair(w:LatticeWeight, s:list<int>) -> CompactLatticeWeight\n\nCreate a new compact lattice weight from a weight string pair.")},
  {C("from_other"), (PyCFunction)wrapCompactLatticeWeightTpl_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(other:CompactLatticeWeight) -> CompactLatticeWeight\n\nCreate a new compact lattice weight from another.")},
  {C("hash"), (PyCFunction)wrapHash_as_hash, METH_NOARGS, C("hash() -> int\n\nReturns the hash for the weight.")},
  {C("zero"), (PyCFunction)wrapZero_as_zero, METH_NOARGS | METH_CLASS, C("zero() -> CompactLatticeWeight\n\nZero in compact lattice semiring.")},
  {C("one"), (PyCFunction)wrapOne_as_one, METH_NOARGS | METH_CLASS, C("one() -> CompactLatticeWeight\n\nOne in compact lattice semiring.")},
  {C("no_weight"), (PyCFunction)wrapNoWeight_as_no_weight, METH_NOARGS | METH_CLASS, C("no_weight() -> CompactLatticeWeight\n\nNo weight in compact lattice semiring.")},
  {C("type"), (PyCFunction)wrapType_as_type, METH_NOARGS | METH_CLASS, C("type() -> str\n\nReturns weight type.")},
  {C("properties"), (PyCFunction)wrapProperties_as_properties, METH_NOARGS | METH_CLASS, C("properties() -> int\n\nReturns weight properties.")},
  {C("get_int_size_string"), (PyCFunction)wrapGetIntSizeString_as_get_int_size_string, METH_NOARGS | METH_CLASS, C("get_int_size_string() -> str\n\nReturns int size string.")},
  {C("member"), (PyCFunction)wrapMember_as_member, METH_NOARGS, C("member() -> bool\n\nChecks if weight is a member of the compact lattice semiring.")},
  {C("quantize"), (PyCFunction)wrapQuantize_as_quantize, METH_VARARGS | METH_KEYWORDS, C("quantize(delta:float=default) -> CompactLatticeWeight\n\nQuantizes the weight.")},
  {C("reverse"), (PyCFunction)wrapReverse_as_reverse, METH_NOARGS, C("reverse() -> CompactLatticeWeight\n\nReverses the weight.")},
  {}
};

// CompactLatticeWeight __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// CompactLatticeWeight __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// CompactLatticeWeight __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_lattice_weight.CompactLatticeWeight", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Compact lattice weight.",           // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  slot_richcmp,                        // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "CompactLatticeWeight takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>"));
      if (!PyErr_Occurred()) {
        ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* c = static_cast<::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyCompactLatticeWeight

// scale_compact_lattice_weight(w:CompactLatticeWeight, scale:list<list<float>>) -> CompactLatticeWeight
static PyObject* wrapScaleTupleWeight_as_scale_compact_lattice_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("w"),
      C("scale"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:scale_compact_lattice_weight", names, &a[0], &a[1])) return nullptr;
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("scale_compact_lattice_weight", names[0], "::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>", a[0]);
  ::std::vector< ::std::vector<double> > arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("scale_compact_lattice_weight", names[1], "::std::vector< ::std::vector<double> >", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::ScaleTupleWeight(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// compare_compact_lattice_weight(w1:CompactLatticeWeight, w2:CompactLatticeWeight) -> int
static PyObject* wrapCompare_as_compare_compact_lattice_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("w1"),
      C("w2"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:compare_compact_lattice_weight", names, &a[0], &a[1])) return nullptr;
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compare_compact_lattice_weight", names[0], "::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>", a[0]);
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compare_compact_lattice_weight", names[1], "::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::Compare(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

namespace pyCompactLatticeNaturalLess {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >> cpp;
};
static ::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >* ThisPtr(PyObject*);

// __call__(w1:CompactLatticeWeight, w2:CompactLatticeWeight) -> bool
static PyObject* wrap__call__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("w1"),
      C("w2"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__call__", names, &a[0], &a[1])) return nullptr;
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__call__", names[0], "::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>", a[0]);
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__call__", names[1], "::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>", a[1]);
  // Call actual C++ method.
  ::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->operator()(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("__call__"), (PyCFunction)wrap__call__, METH_VARARGS | METH_KEYWORDS, C("__call__(w1:CompactLatticeWeight, w2:CompactLatticeWeight) -> bool\n  Calls C++ function\n  bool ::fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> >::operator()(::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>, ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>)")},
  {}
};

// CompactLatticeNaturalLess __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// CompactLatticeNaturalLess __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// CompactLatticeNaturalLess __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_lattice_weight.CompactLatticeNaturalLess", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  (ternaryfunc)wrap__call__,           // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Comparison object in compact lattice semiring.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "CompactLatticeNaturalLess takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_NaturalLess__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >"));
      if (!PyErr_Occurred()) {
        ::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >* c = static_cast<::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyCompactLatticeNaturalLess

// plus_compact_lattice_weight(w1:CompactLatticeWeight, w2:CompactLatticeWeight) -> CompactLatticeWeight
static PyObject* wrapPlus_as_plus_compact_lattice_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("w1"),
      C("w2"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:plus_compact_lattice_weight", names, &a[0], &a[1])) return nullptr;
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("plus_compact_lattice_weight", names[0], "::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>", a[0]);
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("plus_compact_lattice_weight", names[1], "::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::Plus(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// times_compact_lattice_weight(w1:CompactLatticeWeight, w2:CompactLatticeWeight) -> CompactLatticeWeight
static PyObject* wrapTimes_as_times_compact_lattice_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("w1"),
      C("w2"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:times_compact_lattice_weight", names, &a[0], &a[1])) return nullptr;
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("times_compact_lattice_weight", names[0], "::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>", a[0]);
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("times_compact_lattice_weight", names[1], "::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::Times(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// divide_compact_lattice_weight(w1:CompactLatticeWeight, w2:CompactLatticeWeight, typ:DivideType=default) -> CompactLatticeWeight
static PyObject* wrapDivide_as_divide_compact_lattice_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("w1"),
      C("w2"),
      C("typ"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:divide_compact_lattice_weight", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("divide_compact_lattice_weight", names[0], "::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>", a[0]);
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("divide_compact_lattice_weight", names[1], "::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>", a[1]);
  ::fst::DivideType arg3;
  if (nargs > 2) {
    if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("divide_compact_lattice_weight", names[2], "::fst::DivideType", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ret0 = ::fst::Divide(*arg1, *arg2); break;
  case 3:
    ret0 = ::fst::Divide(*arg1, *arg2, std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// approx_equal_compact_lattice_weight(w1:CompactLatticeWeight, w2:CompactLatticeWeight, delta:float=default) -> bool
static PyObject* wrapApproxEqual_as_approx_equal_compact_lattice_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("w1"),
      C("w2"),
      C("delta"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:approx_equal_compact_lattice_weight", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("approx_equal_compact_lattice_weight", names[0], "::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>", a[0]);
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("approx_equal_compact_lattice_weight", names[1], "::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>", a[1]);
  float arg3;
  if (nargs > 2) {
    if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("approx_equal_compact_lattice_weight", names[2], "float", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ret0 = ::fst::ApproxEqual(*arg1, *arg2); break;
  case 3:
    ret0 = ::fst::ApproxEqual(*arg1, *arg2, std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// lattice_weight_to_tropical(w_in:LatticeWeight) -> TropicalWeight
static PyObject* wrapConvertLatticeWeight_as_lattice_weight_to_tropical(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("w_in"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:lattice_weight_to_tropical", names, &a[0])) return nullptr;
  ::fst::LatticeWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("lattice_weight_to_tropical", names[0], "::fst::LatticeWeightTpl<float>", a[0]);
  ::fst::TropicalWeightTpl<float> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::fst::ConvertLatticeWeight(*arg1, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// lattice_weight_to_cost(w:LatticeWeight) -> float
static PyObject* wrapConvertToCost_as_lattice_weight_to_cost(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("w"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:lattice_weight_to_cost", names, &a[0])) return nullptr;
  ::fst::LatticeWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("lattice_weight_to_cost", names[0], "::fst::LatticeWeightTpl<float>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  double ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::ConvertToCost(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// compact_lattice_weight_to_cost(w:CompactLatticeWeight) -> float
static PyObject* wrapConvertToCost_as_compact_lattice_weight_to_cost(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("w"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:compact_lattice_weight_to_cost", names, &a[0])) return nullptr;
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compact_lattice_weight_to_cost", names[0], "::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  double ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::ConvertToCost(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// tropical_weight_to_cost(w:TropicalWeight) -> float
static PyObject* wrapConvertToCost_as_tropical_weight_to_cost(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("w"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:tropical_weight_to_cost", names, &a[0])) return nullptr;
  ::fst::TropicalWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("tropical_weight_to_cost", names[0], "::fst::TropicalWeightTpl<float>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  double ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::ConvertToCost(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("scale_lattice_weight"), (PyCFunction)wrapScaleTupleWeight_as_scale_lattice_weight, METH_VARARGS | METH_KEYWORDS, C("scale_lattice_weight(w:LatticeWeight, scale:list<list<float>>) -> LatticeWeight\n\nScales lattice weight.")},
  {C("compare_lattice_weight"), (PyCFunction)wrapCompare_as_compare_lattice_weight, METH_VARARGS | METH_KEYWORDS, C("compare_lattice_weight(w1:LatticeWeight, w2:LatticeWeight) -> int\n\nCompares input lattice weights.")},
  {C("plus_lattice_weight"), (PyCFunction)wrapPlus_as_plus_lattice_weight, METH_VARARGS | METH_KEYWORDS, C("plus_lattice_weight(w1:LatticeWeight, w2:LatticeWeight) -> LatticeWeight\n\n:math:`\\oplus` operation in the lattice semiring.")},
  {C("times_lattice_weight"), (PyCFunction)wrapTimes_as_times_lattice_weight, METH_VARARGS | METH_KEYWORDS, C("times_lattice_weight(w1:LatticeWeight, w2:LatticeWeight) -> LatticeWeight\n\n:math:`\\otimes` operation in the lattice semiring.")},
  {C("divide_lattice_weight"), (PyCFunction)wrapDivide_as_divide_lattice_weight, METH_VARARGS | METH_KEYWORDS, C("divide_lattice_weight(w1:LatticeWeight, w2:LatticeWeight, typ:DivideType=default) -> LatticeWeight\n\n:math:`\\oslash` operation in the lattice semiring.")},
  {C("approx_equal_lattice_weight"), (PyCFunction)wrapApproxEqual_as_approx_equal_lattice_weight, METH_VARARGS | METH_KEYWORDS, C("approx_equal_lattice_weight(w1:LatticeWeight, w2:LatticeWeight, delta:float=default) -> bool\n\nChecks if given lattice weights are approximately equal.")},
  {C("scale_compact_lattice_weight"), (PyCFunction)wrapScaleTupleWeight_as_scale_compact_lattice_weight, METH_VARARGS | METH_KEYWORDS, C("scale_compact_lattice_weight(w:CompactLatticeWeight, scale:list<list<float>>) -> CompactLatticeWeight\n\nScales compact lattice weight.")},
  {C("compare_compact_lattice_weight"), (PyCFunction)wrapCompare_as_compare_compact_lattice_weight, METH_VARARGS | METH_KEYWORDS, C("compare_compact_lattice_weight(w1:CompactLatticeWeight, w2:CompactLatticeWeight) -> int\n\nCompares input compact lattice weights.")},
  {C("plus_compact_lattice_weight"), (PyCFunction)wrapPlus_as_plus_compact_lattice_weight, METH_VARARGS | METH_KEYWORDS, C("plus_compact_lattice_weight(w1:CompactLatticeWeight, w2:CompactLatticeWeight) -> CompactLatticeWeight\n\n:math:`\\oplus` operation in the compact lattice semiring.")},
  {C("times_compact_lattice_weight"), (PyCFunction)wrapTimes_as_times_compact_lattice_weight, METH_VARARGS | METH_KEYWORDS, C("times_compact_lattice_weight(w1:CompactLatticeWeight, w2:CompactLatticeWeight) -> CompactLatticeWeight\n\n:math:`\\otimes` operation in the compact lattice semiring.")},
  {C("divide_compact_lattice_weight"), (PyCFunction)wrapDivide_as_divide_compact_lattice_weight, METH_VARARGS | METH_KEYWORDS, C("divide_compact_lattice_weight(w1:CompactLatticeWeight, w2:CompactLatticeWeight, typ:DivideType=default) -> CompactLatticeWeight\n\n:math:`\\oslash` operation in the compact lattice semiring.")},
  {C("approx_equal_compact_lattice_weight"), (PyCFunction)wrapApproxEqual_as_approx_equal_compact_lattice_weight, METH_VARARGS | METH_KEYWORDS, C("approx_equal_compact_lattice_weight(w1:CompactLatticeWeight, w2:CompactLatticeWeight, delta:float=default) -> bool\n\nChecks if given compact lattice weights are approximately equal.")},
  {C("lattice_weight_to_tropical"), (PyCFunction)wrapConvertLatticeWeight_as_lattice_weight_to_tropical, METH_VARARGS | METH_KEYWORDS, C("lattice_weight_to_tropical(w_in:LatticeWeight) -> TropicalWeight\n\nConverts lattice weight to tropical weight.")},
  {C("lattice_weight_to_cost"), (PyCFunction)wrapConvertToCost_as_lattice_weight_to_cost, METH_VARARGS | METH_KEYWORDS, C("lattice_weight_to_cost(w:LatticeWeight) -> float\n\nConverts lattice weight to cost.")},
  {C("compact_lattice_weight_to_cost"), (PyCFunction)wrapConvertToCost_as_compact_lattice_weight_to_cost, METH_VARARGS | METH_KEYWORDS, C("compact_lattice_weight_to_cost(w:CompactLatticeWeight) -> float\n\nConverts compact lattice weight to cost.")},
  {C("tropical_weight_to_cost"), (PyCFunction)wrapConvertToCost_as_tropical_weight_to_cost, METH_VARARGS | METH_KEYWORDS, C("tropical_weight_to_cost(w:TropicalWeight) -> float\n\nConverts tropical weight to cost.")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyLatticeWeight::wrapper_Type) < 0) return false;
  Py_INCREF(&pyLatticeWeight::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyLatticeNaturalLess::wrapper_Type) < 0) return false;
  Py_INCREF(&pyLatticeNaturalLess::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyCompactLatticeWeight::wrapper_Type) < 0) return false;
  Py_INCREF(&pyCompactLatticeWeight::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyCompactLatticeNaturalLess::wrapper_Type) < 0) return false;
  Py_INCREF(&pyCompactLatticeNaturalLess::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_lattice_weight",  // module name
  "CLIF-generated module for fstext/lattice-weight.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_float_weight")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "LatticeWeight", reinterpret_cast<PyObject*>(&pyLatticeWeight::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "LatticeNaturalLess", reinterpret_cast<PyObject*>(&pyLatticeNaturalLess::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "CompactLatticeWeight", reinterpret_cast<PyObject*>(&pyCompactLatticeWeight::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "CompactLatticeNaturalLess", reinterpret_cast<PyObject*>(&pyCompactLatticeNaturalLess::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __lattice__weight_clifwrap

namespace fst {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// CompactLatticeNaturalLess to/from ::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >* cpp = __lattice__weight_clifwrap::pyCompactLatticeNaturalLess::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >>* c) {
  assert(c != nullptr);
  ::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >* cpp = __lattice__weight_clifwrap::pyCompactLatticeNaturalLess::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__lattice__weight_clifwrap::pyCompactLatticeNaturalLess::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >>* c) {
  assert(c != nullptr);
  ::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >* cpp = __lattice__weight_clifwrap::pyCompactLatticeNaturalLess::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__lattice__weight_clifwrap::pyCompactLatticeNaturalLess::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert CompactLatticeNaturalLess instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >* c) {
  assert(c != nullptr);
  ::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >* cpp = __lattice__weight_clifwrap::pyCompactLatticeNaturalLess::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >>* c) {
  assert(c != nullptr);
  ::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >* cpp = __lattice__weight_clifwrap::pyCompactLatticeNaturalLess::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lattice__weight_clifwrap::pyCompactLatticeNaturalLess::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__weight_clifwrap::pyCompactLatticeNaturalLess::wrapper*>(py)->cpp = ::clif::Instance<::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lattice__weight_clifwrap::pyCompactLatticeNaturalLess::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__weight_clifwrap::pyCompactLatticeNaturalLess::wrapper*>(py)->cpp = ::clif::Instance<::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lattice__weight_clifwrap::pyCompactLatticeNaturalLess::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__weight_clifwrap::pyCompactLatticeNaturalLess::wrapper*>(py)->cpp = ::clif::Instance<::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__lattice__weight_clifwrap::pyCompactLatticeNaturalLess::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__weight_clifwrap::pyCompactLatticeNaturalLess::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >>(c);
  return py;
}

// CompactLatticeWeight to/from ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> conversion

bool Clif_PyObjAs(PyObject* py, ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* cpp = __lattice__weight_clifwrap::pyCompactLatticeWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>>* c) {
  assert(c != nullptr);
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* cpp = __lattice__weight_clifwrap::pyCompactLatticeWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__lattice__weight_clifwrap::pyCompactLatticeWeight::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>>* c) {
  assert(c != nullptr);
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* cpp = __lattice__weight_clifwrap::pyCompactLatticeWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__lattice__weight_clifwrap::pyCompactLatticeWeight::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert CompactLatticeWeight instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* c) {
  assert(c != nullptr);
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* cpp = __lattice__weight_clifwrap::pyCompactLatticeWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>>* c) {
  assert(c != nullptr);
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* cpp = __lattice__weight_clifwrap::pyCompactLatticeWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lattice__weight_clifwrap::pyCompactLatticeWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__weight_clifwrap::pyCompactLatticeWeight::wrapper*>(py)->cpp = ::clif::Instance<::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lattice__weight_clifwrap::pyCompactLatticeWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__weight_clifwrap::pyCompactLatticeWeight::wrapper*>(py)->cpp = ::clif::Instance<::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lattice__weight_clifwrap::pyCompactLatticeWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__weight_clifwrap::pyCompactLatticeWeight::wrapper*>(py)->cpp = ::clif::Instance<::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__lattice__weight_clifwrap::pyCompactLatticeWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__weight_clifwrap::pyCompactLatticeWeight::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>>(c);
  return py;
}

// LatticeNaturalLess to/from ::fst::NaturalLess< ::fst::LatticeWeightTpl<float> > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >* cpp = __lattice__weight_clifwrap::pyLatticeNaturalLess::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >>* c) {
  assert(c != nullptr);
  ::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >* cpp = __lattice__weight_clifwrap::pyLatticeNaturalLess::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__lattice__weight_clifwrap::pyLatticeNaturalLess::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >>* c) {
  assert(c != nullptr);
  ::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >* cpp = __lattice__weight_clifwrap::pyLatticeNaturalLess::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__lattice__weight_clifwrap::pyLatticeNaturalLess::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert LatticeNaturalLess instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >* c) {
  assert(c != nullptr);
  ::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >* cpp = __lattice__weight_clifwrap::pyLatticeNaturalLess::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >>* c) {
  assert(c != nullptr);
  ::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >* cpp = __lattice__weight_clifwrap::pyLatticeNaturalLess::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lattice__weight_clifwrap::pyLatticeNaturalLess::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__weight_clifwrap::pyLatticeNaturalLess::wrapper*>(py)->cpp = ::clif::Instance<::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lattice__weight_clifwrap::pyLatticeNaturalLess::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__weight_clifwrap::pyLatticeNaturalLess::wrapper*>(py)->cpp = ::clif::Instance<::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lattice__weight_clifwrap::pyLatticeNaturalLess::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__weight_clifwrap::pyLatticeNaturalLess::wrapper*>(py)->cpp = ::clif::Instance<::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__lattice__weight_clifwrap::pyLatticeNaturalLess::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__weight_clifwrap::pyLatticeNaturalLess::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >>(c);
  return py;
}

// LatticeWeight to/from ::fst::LatticeWeightTpl<float> conversion

bool Clif_PyObjAs(PyObject* py, ::fst::LatticeWeightTpl<float>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::LatticeWeightTpl<float>* cpp = __lattice__weight_clifwrap::pyLatticeWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::LatticeWeightTpl<float>>* c) {
  assert(c != nullptr);
  ::fst::LatticeWeightTpl<float>* cpp = __lattice__weight_clifwrap::pyLatticeWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__lattice__weight_clifwrap::pyLatticeWeight::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::LatticeWeightTpl<float>>* c) {
  assert(c != nullptr);
  ::fst::LatticeWeightTpl<float>* cpp = __lattice__weight_clifwrap::pyLatticeWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__lattice__weight_clifwrap::pyLatticeWeight::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert LatticeWeight instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::LatticeWeightTpl<float>* c) {
  assert(c != nullptr);
  ::fst::LatticeWeightTpl<float>* cpp = __lattice__weight_clifwrap::pyLatticeWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::LatticeWeightTpl<float>>* c) {
  assert(c != nullptr);
  ::fst::LatticeWeightTpl<float>* cpp = __lattice__weight_clifwrap::pyLatticeWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::LatticeWeightTpl<float>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lattice__weight_clifwrap::pyLatticeWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__weight_clifwrap::pyLatticeWeight::wrapper*>(py)->cpp = ::clif::Instance<::fst::LatticeWeightTpl<float>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::LatticeWeightTpl<float>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lattice__weight_clifwrap::pyLatticeWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__weight_clifwrap::pyLatticeWeight::wrapper*>(py)->cpp = ::clif::Instance<::fst::LatticeWeightTpl<float>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::LatticeWeightTpl<float>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lattice__weight_clifwrap::pyLatticeWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__weight_clifwrap::pyLatticeWeight::wrapper*>(py)->cpp = ::clif::Instance<::fst::LatticeWeightTpl<float>>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::LatticeWeightTpl<float>& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__lattice__weight_clifwrap::pyLatticeWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__weight_clifwrap::pyLatticeWeight::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::LatticeWeightTpl<float>>(c);
  return py;
}

}  // namespace fst
