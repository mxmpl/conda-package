//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/fstext/symbol-table.clif

#include <memory>
#include "clif/python/optional.h"
#include "fst/symbol-table.h"
#include "clif/python/postconv.h"

namespace fst {
using namespace ::clif;

// CLIF use `::fst::SymbolTable` as SymbolTable
bool Clif_PyObjAs(PyObject* input, ::fst::SymbolTable** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::SymbolTable>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::SymbolTable>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::SymbolTable* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::SymbolTable>* output);
PyObject* Clif_PyObjFrom(::fst::SymbolTable*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::SymbolTable>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::SymbolTable>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::SymbolTable&, py::PostConv);
// CLIF use `::fst::SymbolTableIterator` as SymbolTableIterator
bool Clif_PyObjAs(PyObject* input, ::fst::SymbolTableIterator** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::SymbolTableIterator>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::SymbolTableIterator>* output);
PyObject* Clif_PyObjFrom(::fst::SymbolTableIterator*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::SymbolTableIterator>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::SymbolTableIterator>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::SymbolTableIterator*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::SymbolTableIterator&, py::PostConv) = delete;
// CLIF use `::fst::SymbolTableTextOptions` as SymbolTableTextOptions
bool Clif_PyObjAs(PyObject* input, ::fst::SymbolTableTextOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::SymbolTableTextOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::SymbolTableTextOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::SymbolTableTextOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::SymbolTableTextOptions>* output);
PyObject* Clif_PyObjFrom(::fst::SymbolTableTextOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::SymbolTableTextOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::SymbolTableTextOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::SymbolTableTextOptions&, py::PostConv);

}  // namespace fst

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_symbol_table")) Py_DECREF(m);
// CLIF init_module else goto err;
