//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/fstext/const-fst.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "fstext/lattice-weight-clifwrap.h"
#include "fstext/arc-clifwrap.h"
#include "fstext/fst-clifwrap.h"
#include "const-fst-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __const__fst_clifwrap {
using namespace clif;
using namespace fst;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyStdConstFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>> cpp;
};
static ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>* ThisPtr(PyObject*);

// _copy(safe:bool=default) -> StdConstFst
static PyObject* wrapCopy_as__copy(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("safe"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:_copy", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  bool arg1;
  if (nargs > 0) {
    if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_copy", names[0], "bool", a[0]);
  }
  // Call actual C++ method.
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    ret0 = c->Copy(); break;
  case 1:
    ret0 = c->Copy(std::move(arg1)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.fstext.StdConstFst");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// @classmethod _read(filename:str) -> StdConstFst
static PyObject* wrapRead_as__read(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("filename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_read", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_read", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, unsigned int>::Read(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.fstext.StdConstFst");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// @classmethod _read_from_stream(strm:istream, opts:FstReadOptions) -> StdConstFst
static PyObject* wrapRead_as__read_from_stream(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("strm"),
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_read_from_stream", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_read_from_stream", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  ::fst::FstReadOptions* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_read_from_stream", names[1], "::fst::FstReadOptions", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, unsigned int>::Read(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.fstext.StdConstFst");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// _write(filename:str) -> bool
static PyObject* wrapWrite_as__write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("filename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_write", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_write", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Write(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _write_to_stream(strm:ostream, opts:FstWriteOptions) -> bool
static PyObject* wrapWrite_as__write_to_stream(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("strm"),
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_write_to_stream", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_write_to_stream", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  ::fst::FstWriteOptions* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_write_to_stream", names[1], "::fst::FstWriteOptions", a[1]);
  // Call actual C++ method.
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Write(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::fst::ImplToExpandedFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >*
static PyObject* as_fst_ImplToExpandedFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_TropicalWeightTpl_float___unsignedint(PyObject* self) {
  ::fst::ImplToExpandedFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::ImplToExpandedFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >"), nullptr);
}

// Implicit cast this as ::fst::ImplToFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >*
static PyObject* as_fst_ImplToFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_TropicalWeightTpl_float___unsignedint___fst_ExpandedFst__fst_ArcTpl__fst_TropicalWeightTpl_float(PyObject* self) {
  ::fst::ImplToFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::ImplToFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >"), nullptr);
}

// Implicit cast this as ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*
static PyObject* as_fst_ExpandedFst__fst_ArcTpl__fst_TropicalWeightTpl_float(PyObject* self) {
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >"), nullptr);
}

// Implicit cast this as ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*
static PyObject* as_fst_Fst__fst_ArcTpl__fst_TropicalWeightTpl_float(PyObject* self) {
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("_copy"), (PyCFunction)wrapCopy_as__copy, METH_VARARGS | METH_KEYWORDS, C("_copy(safe:bool=default) -> StdConstFst\n  Calls C++ function\n  ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> * ::fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, unsigned int>::Copy(bool)")},
  {C("_read"), (PyCFunction)wrapRead_as__read, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("_read(filename:str) -> StdConstFst\n  Calls C++ function\n  ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> * ::fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, unsigned int>::Read(::std::string)")},
  {C("_read_from_stream"), (PyCFunction)wrapRead_as__read_from_stream, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("_read_from_stream(strm:istream, opts:FstReadOptions) -> StdConstFst\n  Calls C++ function\n  ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> * ::fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, unsigned int>::Read(::std::basic_istream<char, ::std::char_traits<char> >, ::fst::FstReadOptions)")},
  {C("_write"), (PyCFunction)wrapWrite_as__write, METH_VARARGS | METH_KEYWORDS, C("_write(filename:str) -> bool\n  Calls C++ function\n  bool ::fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, unsigned int>::Write(::std::string)")},
  {C("_write_to_stream"), (PyCFunction)wrapWrite_as__write_to_stream, METH_VARARGS | METH_KEYWORDS, C("_write_to_stream(strm:ostream, opts:FstWriteOptions) -> bool\n  Calls C++ function\n  bool ::fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, unsigned int>::Write(::std::basic_ostream<char, ::std::char_traits<char> >, ::fst::FstWriteOptions)")},
  {C("as_fst_ImplToExpandedFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_TropicalWeightTpl_float___unsignedint"), (PyCFunction)as_fst_ImplToExpandedFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_TropicalWeightTpl_float___unsignedint, METH_NOARGS, C("Upcast to ::fst::ImplToExpandedFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >*")},
  {C("as_fst_ImplToFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_TropicalWeightTpl_float___unsignedint___fst_ExpandedFst__fst_ArcTpl__fst_TropicalWeightTpl_float"), (PyCFunction)as_fst_ImplToFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_TropicalWeightTpl_float___unsignedint___fst_ExpandedFst__fst_ArcTpl__fst_TropicalWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::ImplToFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >*")},
  {C("as_fst_ExpandedFst__fst_ArcTpl__fst_TropicalWeightTpl_float"), (PyCFunction)as_fst_ExpandedFst__fst_ArcTpl__fst_TropicalWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*")},
  {C("as_fst_Fst__fst_ArcTpl__fst_TropicalWeightTpl_float"), (PyCFunction)as_fst_Fst__fst_ArcTpl__fst_TropicalWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*")},
  {}
};

// StdConstFst __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// StdConstFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// StdConstFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_const_fst.StdConstFst",            // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "StdConstFst takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_ConstFst__fst_ArcTpl__fst_TropicalWeightTpl_float___unsignedint"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>"));
      if (!PyErr_Occurred()) {
        ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>* c = static_cast<::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyStdConstFst

namespace pyStdConstFstStateIterator {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >> cpp;
};
static ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* ThisPtr(PyObject*);

// __init__(fst:StdConstFst)
static PyObject* wrapTropicalWeightTpl_float___unsignedint_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("fst"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _done() -> bool
static PyObject* wrapDone_as__done(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Done();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _value() -> int
static PyObject* wrapValue_as__value(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Value();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _next()
static PyObject* wrapNext_as__next(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Next();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _reset()
static PyObject* wrapReset_as__reset(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Reset();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapTropicalWeightTpl_float___unsignedint_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(fst:StdConstFst)\n  Calls C++ function\n  void ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, unsigned int> >::StateIterator(::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>)")},
  {C("_done"), (PyCFunction)wrapDone_as__done, METH_NOARGS, C("_done() -> bool\n  Calls C++ function\n  bool ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, unsigned int> >::Done()")},
  {C("_value"), (PyCFunction)wrapValue_as__value, METH_NOARGS, C("_value() -> int\n  Calls C++ function\n  int ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, unsigned int> >::Value()")},
  {C("_next"), (PyCFunction)wrapNext_as__next, METH_NOARGS, C("_next()\n  Calls C++ function\n  void ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, unsigned int> >::Next()")},
  {C("_reset"), (PyCFunction)wrapReset_as__reset, METH_NOARGS, C("_reset()\n  Calls C++ function\n  void ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, unsigned int> >::Reset()")},
  {}
};

// StdConstFstStateIterator __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// StdConstFstStateIterator __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// StdConstFstStateIterator __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_const_fst.StdConstFstStateIterator", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapTropicalWeightTpl_float___unsignedint_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_StateIterator__fst_ConstFst__fst_ArcTpl__fst_TropicalWeightTpl_float___unsignedint"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >"));
      if (!PyErr_Occurred()) {
        ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* c = static_cast<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyStdConstFstStateIterator

namespace pyStdConstFstArcIterator {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >> cpp;
};
static ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* ThisPtr(PyObject*);

// __init__(fst:StdConstFst, s:int)
static PyObject* wrapTropicalWeightTpl_float___unsignedint_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("fst"),
      C("s"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "int", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _done() -> bool
static PyObject* wrapDone_as__done(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Done();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _value() -> StdArc
static PyObject* wrapValue_as__value(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Value();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _next()
static PyObject* wrapNext_as__next(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Next();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _reset()
static PyObject* wrapReset_as__reset(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Reset();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _seek(a:int)
static PyObject* wrapSeek_as__seek(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("a"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_seek", names, &a[0])) return nullptr;
  unsigned long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_seek", names[0], "unsigned long", a[0]);
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Seek(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _position() -> int
static PyObject* wrapPosition_as__position(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Position();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _flags() -> int
static PyObject* wrapFlags_as__flags(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Flags();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _set_flags(flags:int, mask:int)
static PyObject* wrapSetFlags_as__set_flags(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("flags"),
      C("mask"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_set_flags", names, &a[0], &a[1])) return nullptr;
  unsigned int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_flags", names[0], "unsigned int", a[0]);
  unsigned int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_set_flags", names[1], "unsigned int", a[1]);
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetFlags(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapTropicalWeightTpl_float___unsignedint_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(fst:StdConstFst, s:int)\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, unsigned int> >::ArcIterator(::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>, int)")},
  {C("_done"), (PyCFunction)wrapDone_as__done, METH_NOARGS, C("_done() -> bool\n  Calls C++ function\n  bool ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, unsigned int> >::Done()")},
  {C("_value"), (PyCFunction)wrapValue_as__value, METH_NOARGS, C("_value() -> StdArc\n  Calls C++ function\n  ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, unsigned int> >::Value()")},
  {C("_next"), (PyCFunction)wrapNext_as__next, METH_NOARGS, C("_next()\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, unsigned int> >::Next()")},
  {C("_reset"), (PyCFunction)wrapReset_as__reset, METH_NOARGS, C("_reset()\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, unsigned int> >::Reset()")},
  {C("_seek"), (PyCFunction)wrapSeek_as__seek, METH_VARARGS | METH_KEYWORDS, C("_seek(a:int)\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, unsigned int> >::Seek(unsigned long)")},
  {C("_position"), (PyCFunction)wrapPosition_as__position, METH_NOARGS, C("_position() -> int\n  Calls C++ function\n  unsigned long ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, unsigned int> >::Position()")},
  {C("_flags"), (PyCFunction)wrapFlags_as__flags, METH_NOARGS, C("_flags() -> int\n  Calls C++ function\n  unsigned int ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, unsigned int> >::Flags()")},
  {C("_set_flags"), (PyCFunction)wrapSetFlags_as__set_flags, METH_VARARGS | METH_KEYWORDS, C("_set_flags(flags:int, mask:int)\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, unsigned int> >::SetFlags(unsigned int, unsigned int)")},
  {}
};

// StdConstFstArcIterator __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// StdConstFstArcIterator __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// StdConstFstArcIterator __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_const_fst.StdConstFstArcIterator", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapTropicalWeightTpl_float___unsignedint_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_ArcIterator__fst_ConstFst__fst_ArcTpl__fst_TropicalWeightTpl_float___unsignedint"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >"));
      if (!PyErr_Occurred()) {
        ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* c = static_cast<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyStdConstFstArcIterator

namespace pyLogConstFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>> cpp;
};
static ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>* ThisPtr(PyObject*);

// _copy(safe:bool=default) -> LogConstFst
static PyObject* wrapCopy_as__copy(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("safe"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:_copy", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  bool arg1;
  if (nargs > 0) {
    if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_copy", names[0], "bool", a[0]);
  }
  // Call actual C++ method.
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    ret0 = c->Copy(); break;
  case 1:
    ret0 = c->Copy(std::move(arg1)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.fstext.LogConstFst");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// @classmethod _read(filename:str) -> LogConstFst
static PyObject* wrapRead_as__read(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("filename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_read", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_read", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::ConstFst<fst::ArcTpl<fst::LogWeightTpl<float> >, unsigned int>::Read(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.fstext.LogConstFst");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// @classmethod _read_from_stream(strm:istream, opts:FstReadOptions) -> LogConstFst
static PyObject* wrapRead_as__read_from_stream(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("strm"),
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_read_from_stream", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_read_from_stream", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  ::fst::FstReadOptions* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_read_from_stream", names[1], "::fst::FstReadOptions", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::ConstFst<fst::ArcTpl<fst::LogWeightTpl<float> >, unsigned int>::Read(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.fstext.LogConstFst");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// _write(filename:str) -> bool
static PyObject* wrapWrite_as__write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("filename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_write", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_write", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Write(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::fst::ImplToExpandedFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >*
static PyObject* as_fst_ImplToExpandedFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_LogWeightTpl_float___unsignedint(PyObject* self) {
  ::fst::ImplToExpandedFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::ImplToExpandedFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >"), nullptr);
}

// Implicit cast this as ::fst::ImplToFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >*
static PyObject* as_fst_ImplToFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_LogWeightTpl_float___unsignedint___fst_ExpandedFst__fst_ArcTpl__fst_LogWeightTpl_float(PyObject* self) {
  ::fst::ImplToFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::ImplToFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >"), nullptr);
}

// Implicit cast this as ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*
static PyObject* as_fst_ExpandedFst__fst_ArcTpl__fst_LogWeightTpl_float(PyObject* self) {
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >"), nullptr);
}

// Implicit cast this as ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*
static PyObject* as_fst_Fst__fst_ArcTpl__fst_LogWeightTpl_float(PyObject* self) {
  ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("_copy"), (PyCFunction)wrapCopy_as__copy, METH_VARARGS | METH_KEYWORDS, C("_copy(safe:bool=default) -> LogConstFst\n  Calls C++ function\n  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> * ::fst::ConstFst<fst::ArcTpl<fst::LogWeightTpl<float> >, unsigned int>::Copy(bool)")},
  {C("_read"), (PyCFunction)wrapRead_as__read, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("_read(filename:str) -> LogConstFst\n  Calls C++ function\n  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> * ::fst::ConstFst<fst::ArcTpl<fst::LogWeightTpl<float> >, unsigned int>::Read(::std::string)")},
  {C("_read_from_stream"), (PyCFunction)wrapRead_as__read_from_stream, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("_read_from_stream(strm:istream, opts:FstReadOptions) -> LogConstFst\n  Calls C++ function\n  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> * ::fst::ConstFst<fst::ArcTpl<fst::LogWeightTpl<float> >, unsigned int>::Read(::std::basic_istream<char, ::std::char_traits<char> >, ::fst::FstReadOptions)")},
  {C("_write"), (PyCFunction)wrapWrite_as__write, METH_VARARGS | METH_KEYWORDS, C("_write(filename:str) -> bool\n  Calls C++ function\n  bool ::fst::ConstFst<fst::ArcTpl<fst::LogWeightTpl<float> >, unsigned int>::Write(::std::string)")},
  {C("as_fst_ImplToExpandedFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_LogWeightTpl_float___unsignedint"), (PyCFunction)as_fst_ImplToExpandedFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_LogWeightTpl_float___unsignedint, METH_NOARGS, C("Upcast to ::fst::ImplToExpandedFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >*")},
  {C("as_fst_ImplToFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_LogWeightTpl_float___unsignedint___fst_ExpandedFst__fst_ArcTpl__fst_LogWeightTpl_float"), (PyCFunction)as_fst_ImplToFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_LogWeightTpl_float___unsignedint___fst_ExpandedFst__fst_ArcTpl__fst_LogWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::ImplToFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >*")},
  {C("as_fst_ExpandedFst__fst_ArcTpl__fst_LogWeightTpl_float"), (PyCFunction)as_fst_ExpandedFst__fst_ArcTpl__fst_LogWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*")},
  {C("as_fst_Fst__fst_ArcTpl__fst_LogWeightTpl_float"), (PyCFunction)as_fst_Fst__fst_ArcTpl__fst_LogWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*")},
  {}
};

// LogConstFst __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// LogConstFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// LogConstFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_const_fst.LogConstFst",            // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "LogConstFst takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_ConstFst__fst_ArcTpl__fst_LogWeightTpl_float___unsignedint"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>"));
      if (!PyErr_Occurred()) {
        ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>* c = static_cast<::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyLogConstFst

namespace pyLogConstFstStateIterator {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >> cpp;
};
static ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* ThisPtr(PyObject*);

// __init__(fst:LogConstFst)
static PyObject* wrapLogWeightTpl_float___unsignedint_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("fst"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _done() -> bool
static PyObject* wrapDone_as__done(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Done();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _value() -> int
static PyObject* wrapValue_as__value(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Value();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _next()
static PyObject* wrapNext_as__next(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Next();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _reset()
static PyObject* wrapReset_as__reset(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Reset();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapLogWeightTpl_float___unsignedint_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(fst:LogConstFst)\n  Calls C++ function\n  void ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::LogWeightTpl<float> >, unsigned int> >::StateIterator(::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>)")},
  {C("_done"), (PyCFunction)wrapDone_as__done, METH_NOARGS, C("_done() -> bool\n  Calls C++ function\n  bool ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::LogWeightTpl<float> >, unsigned int> >::Done()")},
  {C("_value"), (PyCFunction)wrapValue_as__value, METH_NOARGS, C("_value() -> int\n  Calls C++ function\n  int ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::LogWeightTpl<float> >, unsigned int> >::Value()")},
  {C("_next"), (PyCFunction)wrapNext_as__next, METH_NOARGS, C("_next()\n  Calls C++ function\n  void ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::LogWeightTpl<float> >, unsigned int> >::Next()")},
  {C("_reset"), (PyCFunction)wrapReset_as__reset, METH_NOARGS, C("_reset()\n  Calls C++ function\n  void ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::LogWeightTpl<float> >, unsigned int> >::Reset()")},
  {}
};

// LogConstFstStateIterator __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// LogConstFstStateIterator __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// LogConstFstStateIterator __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_const_fst.LogConstFstStateIterator", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapLogWeightTpl_float___unsignedint_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_StateIterator__fst_ConstFst__fst_ArcTpl__fst_LogWeightTpl_float___unsignedint"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >"));
      if (!PyErr_Occurred()) {
        ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* c = static_cast<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyLogConstFstStateIterator

namespace pyLogConstFstArcIterator {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >> cpp;
};
static ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* ThisPtr(PyObject*);

// __init__(fst:LogConstFst, s:int)
static PyObject* wrapLogWeightTpl_float___unsignedint_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("fst"),
      C("s"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "int", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _done() -> bool
static PyObject* wrapDone_as__done(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Done();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _value() -> LogArc
static PyObject* wrapValue_as__value(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::ArcTpl< ::fst::LogWeightTpl<float> > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Value();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _next()
static PyObject* wrapNext_as__next(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Next();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _reset()
static PyObject* wrapReset_as__reset(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Reset();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _seek(a:int)
static PyObject* wrapSeek_as__seek(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("a"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_seek", names, &a[0])) return nullptr;
  unsigned long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_seek", names[0], "unsigned long", a[0]);
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Seek(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _position() -> int
static PyObject* wrapPosition_as__position(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Position();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _flags() -> int
static PyObject* wrapFlags_as__flags(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Flags();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _set_flags(flags:int, mask:int)
static PyObject* wrapSetFlags_as__set_flags(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("flags"),
      C("mask"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_set_flags", names, &a[0], &a[1])) return nullptr;
  unsigned int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_flags", names[0], "unsigned int", a[0]);
  unsigned int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_set_flags", names[1], "unsigned int", a[1]);
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetFlags(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapLogWeightTpl_float___unsignedint_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(fst:LogConstFst, s:int)\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LogWeightTpl<float> >, unsigned int> >::ArcIterator(::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>, int)")},
  {C("_done"), (PyCFunction)wrapDone_as__done, METH_NOARGS, C("_done() -> bool\n  Calls C++ function\n  bool ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LogWeightTpl<float> >, unsigned int> >::Done()")},
  {C("_value"), (PyCFunction)wrapValue_as__value, METH_NOARGS, C("_value() -> LogArc\n  Calls C++ function\n  ::fst::ArcTpl< ::fst::LogWeightTpl<float> > ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LogWeightTpl<float> >, unsigned int> >::Value()")},
  {C("_next"), (PyCFunction)wrapNext_as__next, METH_NOARGS, C("_next()\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LogWeightTpl<float> >, unsigned int> >::Next()")},
  {C("_reset"), (PyCFunction)wrapReset_as__reset, METH_NOARGS, C("_reset()\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LogWeightTpl<float> >, unsigned int> >::Reset()")},
  {C("_seek"), (PyCFunction)wrapSeek_as__seek, METH_VARARGS | METH_KEYWORDS, C("_seek(a:int)\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LogWeightTpl<float> >, unsigned int> >::Seek(unsigned long)")},
  {C("_position"), (PyCFunction)wrapPosition_as__position, METH_NOARGS, C("_position() -> int\n  Calls C++ function\n  unsigned long ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LogWeightTpl<float> >, unsigned int> >::Position()")},
  {C("_flags"), (PyCFunction)wrapFlags_as__flags, METH_NOARGS, C("_flags() -> int\n  Calls C++ function\n  unsigned int ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LogWeightTpl<float> >, unsigned int> >::Flags()")},
  {C("_set_flags"), (PyCFunction)wrapSetFlags_as__set_flags, METH_VARARGS | METH_KEYWORDS, C("_set_flags(flags:int, mask:int)\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LogWeightTpl<float> >, unsigned int> >::SetFlags(unsigned int, unsigned int)")},
  {}
};

// LogConstFstArcIterator __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// LogConstFstArcIterator __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// LogConstFstArcIterator __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_const_fst.LogConstFstArcIterator", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapLogWeightTpl_float___unsignedint_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_ArcIterator__fst_ConstFst__fst_ArcTpl__fst_LogWeightTpl_float___unsignedint"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >"));
      if (!PyErr_Occurred()) {
        ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* c = static_cast<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyLogConstFstArcIterator

namespace pyLatticeConstFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>> cpp;
};
static ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>* ThisPtr(PyObject*);

// _copy(safe:bool=default) -> LatticeConstFst
static PyObject* wrapCopy_as__copy(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("safe"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:_copy", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  bool arg1;
  if (nargs > 0) {
    if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_copy", names[0], "bool", a[0]);
  }
  // Call actual C++ method.
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    ret0 = c->Copy(); break;
  case 1:
    ret0 = c->Copy(std::move(arg1)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.fstext.LatticeConstFst");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// @classmethod _read(filename:str) -> LatticeConstFst
static PyObject* wrapRead_as__read(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("filename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_read", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_read", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::ConstFst<fst::ArcTpl<fst::LatticeWeightTpl<float> >, unsigned int>::Read(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.fstext.LatticeConstFst");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// @classmethod _read_from_stream(strm:istream, opts:FstReadOptions) -> LatticeConstFst
static PyObject* wrapRead_as__read_from_stream(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("strm"),
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_read_from_stream", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_read_from_stream", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  ::fst::FstReadOptions* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_read_from_stream", names[1], "::fst::FstReadOptions", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::ConstFst<fst::ArcTpl<fst::LatticeWeightTpl<float> >, unsigned int>::Read(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.fstext.LatticeConstFst");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// _write(filename:str) -> bool
static PyObject* wrapWrite_as__write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("filename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_write", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_write", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Write(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::fst::ImplToExpandedFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >*
static PyObject* as_fst_ImplToExpandedFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_LatticeWeightTpl_float___unsignedint(PyObject* self) {
  ::fst::ImplToExpandedFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::ImplToExpandedFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >"), nullptr);
}

// Implicit cast this as ::fst::ImplToFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > >*
static PyObject* as_fst_ImplToFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_LatticeWeightTpl_float___unsignedint___fst_ExpandedFst__fst_ArcTpl__fst_LatticeWeightTpl_float(PyObject* self) {
  ::fst::ImplToFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::ImplToFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > >"), nullptr);
}

// Implicit cast this as ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*
static PyObject* as_fst_ExpandedFst__fst_ArcTpl__fst_LatticeWeightTpl_float(PyObject* self) {
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >"), nullptr);
}

// Implicit cast this as ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*
static PyObject* as_fst_Fst__fst_ArcTpl__fst_LatticeWeightTpl_float(PyObject* self) {
  ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("_copy"), (PyCFunction)wrapCopy_as__copy, METH_VARARGS | METH_KEYWORDS, C("_copy(safe:bool=default) -> LatticeConstFst\n  Calls C++ function\n  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> * ::fst::ConstFst<fst::ArcTpl<fst::LatticeWeightTpl<float> >, unsigned int>::Copy(bool)")},
  {C("_read"), (PyCFunction)wrapRead_as__read, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("_read(filename:str) -> LatticeConstFst\n  Calls C++ function\n  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> * ::fst::ConstFst<fst::ArcTpl<fst::LatticeWeightTpl<float> >, unsigned int>::Read(::std::string)")},
  {C("_read_from_stream"), (PyCFunction)wrapRead_as__read_from_stream, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("_read_from_stream(strm:istream, opts:FstReadOptions) -> LatticeConstFst\n  Calls C++ function\n  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> * ::fst::ConstFst<fst::ArcTpl<fst::LatticeWeightTpl<float> >, unsigned int>::Read(::std::basic_istream<char, ::std::char_traits<char> >, ::fst::FstReadOptions)")},
  {C("_write"), (PyCFunction)wrapWrite_as__write, METH_VARARGS | METH_KEYWORDS, C("_write(filename:str) -> bool\n  Calls C++ function\n  bool ::fst::ConstFst<fst::ArcTpl<fst::LatticeWeightTpl<float> >, unsigned int>::Write(::std::string)")},
  {C("as_fst_ImplToExpandedFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_LatticeWeightTpl_float___unsignedint"), (PyCFunction)as_fst_ImplToExpandedFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_LatticeWeightTpl_float___unsignedint, METH_NOARGS, C("Upcast to ::fst::ImplToExpandedFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >*")},
  {C("as_fst_ImplToFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_LatticeWeightTpl_float___unsignedint___fst_ExpandedFst__fst_ArcTpl__fst_LatticeWeightTpl_float"), (PyCFunction)as_fst_ImplToFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_LatticeWeightTpl_float___unsignedint___fst_ExpandedFst__fst_ArcTpl__fst_LatticeWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::ImplToFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > >*")},
  {C("as_fst_ExpandedFst__fst_ArcTpl__fst_LatticeWeightTpl_float"), (PyCFunction)as_fst_ExpandedFst__fst_ArcTpl__fst_LatticeWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*")},
  {C("as_fst_Fst__fst_ArcTpl__fst_LatticeWeightTpl_float"), (PyCFunction)as_fst_Fst__fst_ArcTpl__fst_LatticeWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*")},
  {}
};

// LatticeConstFst __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// LatticeConstFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// LatticeConstFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_const_fst.LatticeConstFst",        // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "LatticeConstFst takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_ConstFst__fst_ArcTpl__fst_LatticeWeightTpl_float___unsignedint"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>"));
      if (!PyErr_Occurred()) {
        ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>* c = static_cast<::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyLatticeConstFst

namespace pyLatticeConstFstStateIterator {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >> cpp;
};
static ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* ThisPtr(PyObject*);

// __init__(fst:LatticeConstFst)
static PyObject* wrapLatticeWeightTpl_float___unsignedint_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("fst"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _done() -> bool
static PyObject* wrapDone_as__done(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Done();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _value() -> int
static PyObject* wrapValue_as__value(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Value();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _next()
static PyObject* wrapNext_as__next(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Next();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _reset()
static PyObject* wrapReset_as__reset(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Reset();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapLatticeWeightTpl_float___unsignedint_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(fst:LatticeConstFst)\n  Calls C++ function\n  void ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::LatticeWeightTpl<float> >, unsigned int> >::StateIterator(::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>)")},
  {C("_done"), (PyCFunction)wrapDone_as__done, METH_NOARGS, C("_done() -> bool\n  Calls C++ function\n  bool ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::LatticeWeightTpl<float> >, unsigned int> >::Done()")},
  {C("_value"), (PyCFunction)wrapValue_as__value, METH_NOARGS, C("_value() -> int\n  Calls C++ function\n  int ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::LatticeWeightTpl<float> >, unsigned int> >::Value()")},
  {C("_next"), (PyCFunction)wrapNext_as__next, METH_NOARGS, C("_next()\n  Calls C++ function\n  void ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::LatticeWeightTpl<float> >, unsigned int> >::Next()")},
  {C("_reset"), (PyCFunction)wrapReset_as__reset, METH_NOARGS, C("_reset()\n  Calls C++ function\n  void ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::LatticeWeightTpl<float> >, unsigned int> >::Reset()")},
  {}
};

// LatticeConstFstStateIterator __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// LatticeConstFstStateIterator __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// LatticeConstFstStateIterator __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_const_fst.LatticeConstFstStateIterator", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapLatticeWeightTpl_float___unsignedint_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_StateIterator__fst_ConstFst__fst_ArcTpl__fst_LatticeWeightTpl_float___unsignedint"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >"));
      if (!PyErr_Occurred()) {
        ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* c = static_cast<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyLatticeConstFstStateIterator

namespace pyLatticeConstFstArcIterator {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >> cpp;
};
static ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* ThisPtr(PyObject*);

// __init__(fst:LatticeConstFst, s:int)
static PyObject* wrapLatticeWeightTpl_float___unsignedint_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("fst"),
      C("s"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "int", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _done() -> bool
static PyObject* wrapDone_as__done(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Done();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _value() -> LatticeArc
static PyObject* wrapValue_as__value(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Value();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _next()
static PyObject* wrapNext_as__next(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Next();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _reset()
static PyObject* wrapReset_as__reset(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Reset();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _seek(a:int)
static PyObject* wrapSeek_as__seek(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("a"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_seek", names, &a[0])) return nullptr;
  unsigned long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_seek", names[0], "unsigned long", a[0]);
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Seek(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _position() -> int
static PyObject* wrapPosition_as__position(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Position();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _flags() -> int
static PyObject* wrapFlags_as__flags(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Flags();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _set_flags(flags:int, mask:int)
static PyObject* wrapSetFlags_as__set_flags(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("flags"),
      C("mask"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_set_flags", names, &a[0], &a[1])) return nullptr;
  unsigned int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_flags", names[0], "unsigned int", a[0]);
  unsigned int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_set_flags", names[1], "unsigned int", a[1]);
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetFlags(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapLatticeWeightTpl_float___unsignedint_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(fst:LatticeConstFst, s:int)\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LatticeWeightTpl<float> >, unsigned int> >::ArcIterator(::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>, int)")},
  {C("_done"), (PyCFunction)wrapDone_as__done, METH_NOARGS, C("_done() -> bool\n  Calls C++ function\n  bool ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LatticeWeightTpl<float> >, unsigned int> >::Done()")},
  {C("_value"), (PyCFunction)wrapValue_as__value, METH_NOARGS, C("_value() -> LatticeArc\n  Calls C++ function\n  ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LatticeWeightTpl<float> >, unsigned int> >::Value()")},
  {C("_next"), (PyCFunction)wrapNext_as__next, METH_NOARGS, C("_next()\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LatticeWeightTpl<float> >, unsigned int> >::Next()")},
  {C("_reset"), (PyCFunction)wrapReset_as__reset, METH_NOARGS, C("_reset()\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LatticeWeightTpl<float> >, unsigned int> >::Reset()")},
  {C("_seek"), (PyCFunction)wrapSeek_as__seek, METH_VARARGS | METH_KEYWORDS, C("_seek(a:int)\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LatticeWeightTpl<float> >, unsigned int> >::Seek(unsigned long)")},
  {C("_position"), (PyCFunction)wrapPosition_as__position, METH_NOARGS, C("_position() -> int\n  Calls C++ function\n  unsigned long ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LatticeWeightTpl<float> >, unsigned int> >::Position()")},
  {C("_flags"), (PyCFunction)wrapFlags_as__flags, METH_NOARGS, C("_flags() -> int\n  Calls C++ function\n  unsigned int ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LatticeWeightTpl<float> >, unsigned int> >::Flags()")},
  {C("_set_flags"), (PyCFunction)wrapSetFlags_as__set_flags, METH_VARARGS | METH_KEYWORDS, C("_set_flags(flags:int, mask:int)\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LatticeWeightTpl<float> >, unsigned int> >::SetFlags(unsigned int, unsigned int)")},
  {}
};

// LatticeConstFstArcIterator __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// LatticeConstFstArcIterator __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// LatticeConstFstArcIterator __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_const_fst.LatticeConstFstArcIterator", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapLatticeWeightTpl_float___unsignedint_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_ArcIterator__fst_ConstFst__fst_ArcTpl__fst_LatticeWeightTpl_float___unsignedint"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >"));
      if (!PyErr_Occurred()) {
        ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* c = static_cast<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyLatticeConstFstArcIterator

namespace pyCompactLatticeConstFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>> cpp;
};
static ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>* ThisPtr(PyObject*);

// _copy(safe:bool=default) -> CompactLatticeConstFst
static PyObject* wrapCopy_as__copy(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("safe"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:_copy", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  bool arg1;
  if (nargs > 0) {
    if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_copy", names[0], "bool", a[0]);
  }
  // Call actual C++ method.
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    ret0 = c->Copy(); break;
  case 1:
    ret0 = c->Copy(std::move(arg1)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.fstext.CompactLatticeConstFst");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// @classmethod _read(filename:str) -> CompactLatticeConstFst
static PyObject* wrapRead_as__read(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("filename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_read", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_read", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::ConstFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> >, unsigned int>::Read(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.fstext.CompactLatticeConstFst");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// @classmethod _read_from_stream(strm:istream, opts:FstReadOptions) -> CompactLatticeConstFst
static PyObject* wrapRead_as__read_from_stream(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("strm"),
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_read_from_stream", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_read_from_stream", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  ::fst::FstReadOptions* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_read_from_stream", names[1], "::fst::FstReadOptions", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::ConstFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> >, unsigned int>::Read(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.fstext.CompactLatticeConstFst");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// _write(filename:str) -> bool
static PyObject* wrapWrite_as__write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("filename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_write", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_write", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Write(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::fst::ImplToExpandedFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >*
static PyObject* as_fst_ImplToExpandedFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int___unsignedint(PyObject* self) {
  ::fst::ImplToExpandedFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::ImplToExpandedFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >"), nullptr);
}

// Implicit cast this as ::fst::ImplToFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > >*
static PyObject* as_fst_ImplToFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int___unsignedint___fst_ExpandedFst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int(PyObject* self) {
  ::fst::ImplToFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::ImplToFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > >"), nullptr);
}

// Implicit cast this as ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*
static PyObject* as_fst_ExpandedFst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int(PyObject* self) {
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >"), nullptr);
}

// Implicit cast this as ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*
static PyObject* as_fst_Fst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int(PyObject* self) {
  ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("_copy"), (PyCFunction)wrapCopy_as__copy, METH_VARARGS | METH_KEYWORDS, C("_copy(safe:bool=default) -> CompactLatticeConstFst\n  Calls C++ function\n  ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> * ::fst::ConstFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> >, unsigned int>::Copy(bool)")},
  {C("_read"), (PyCFunction)wrapRead_as__read, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("_read(filename:str) -> CompactLatticeConstFst\n  Calls C++ function\n  ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> * ::fst::ConstFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> >, unsigned int>::Read(::std::string)")},
  {C("_read_from_stream"), (PyCFunction)wrapRead_as__read_from_stream, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("_read_from_stream(strm:istream, opts:FstReadOptions) -> CompactLatticeConstFst\n  Calls C++ function\n  ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> * ::fst::ConstFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> >, unsigned int>::Read(::std::basic_istream<char, ::std::char_traits<char> >, ::fst::FstReadOptions)")},
  {C("_write"), (PyCFunction)wrapWrite_as__write, METH_VARARGS | METH_KEYWORDS, C("_write(filename:str) -> bool\n  Calls C++ function\n  bool ::fst::ConstFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> >, unsigned int>::Write(::std::string)")},
  {C("as_fst_ImplToExpandedFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int___unsignedint"), (PyCFunction)as_fst_ImplToExpandedFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int___unsignedint, METH_NOARGS, C("Upcast to ::fst::ImplToExpandedFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >*")},
  {C("as_fst_ImplToFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int___unsignedint___fst_ExpandedFst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int"), (PyCFunction)as_fst_ImplToFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int___unsignedint___fst_ExpandedFst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int, METH_NOARGS, C("Upcast to ::fst::ImplToFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > >*")},
  {C("as_fst_ExpandedFst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int"), (PyCFunction)as_fst_ExpandedFst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int, METH_NOARGS, C("Upcast to ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*")},
  {C("as_fst_Fst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int"), (PyCFunction)as_fst_Fst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int, METH_NOARGS, C("Upcast to ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*")},
  {}
};

// CompactLatticeConstFst __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// CompactLatticeConstFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// CompactLatticeConstFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_const_fst.CompactLatticeConstFst", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "CompactLatticeConstFst takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_ConstFst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int___unsignedint"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>"));
      if (!PyErr_Occurred()) {
        ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>* c = static_cast<::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyCompactLatticeConstFst

namespace pyCompactLatticeConstFstStateIterator {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >> cpp;
};
static ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* ThisPtr(PyObject*);

// __init__(fst:CompactLatticeConstFst)
static PyObject* wrapLatticeWeightTpl_float__int___unsignedint_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("fst"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _done() -> bool
static PyObject* wrapDone_as__done(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Done();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _value() -> int
static PyObject* wrapValue_as__value(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Value();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _next()
static PyObject* wrapNext_as__next(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Next();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _reset()
static PyObject* wrapReset_as__reset(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Reset();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapLatticeWeightTpl_float__int___unsignedint_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(fst:CompactLatticeConstFst)\n  Calls C++ function\n  void ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> >, unsigned int> >::StateIterator(::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>)")},
  {C("_done"), (PyCFunction)wrapDone_as__done, METH_NOARGS, C("_done() -> bool\n  Calls C++ function\n  bool ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> >, unsigned int> >::Done()")},
  {C("_value"), (PyCFunction)wrapValue_as__value, METH_NOARGS, C("_value() -> int\n  Calls C++ function\n  int ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> >, unsigned int> >::Value()")},
  {C("_next"), (PyCFunction)wrapNext_as__next, METH_NOARGS, C("_next()\n  Calls C++ function\n  void ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> >, unsigned int> >::Next()")},
  {C("_reset"), (PyCFunction)wrapReset_as__reset, METH_NOARGS, C("_reset()\n  Calls C++ function\n  void ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> >, unsigned int> >::Reset()")},
  {}
};

// CompactLatticeConstFstStateIterator __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// CompactLatticeConstFstStateIterator __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// CompactLatticeConstFstStateIterator __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_const_fst.CompactLatticeConstFstStateIterator", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapLatticeWeightTpl_float__int___unsignedint_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_StateIterator__fst_ConstFst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int___unsignedint"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >"));
      if (!PyErr_Occurred()) {
        ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* c = static_cast<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyCompactLatticeConstFstStateIterator

namespace pyCompactLatticeConstFstArcIterator {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >> cpp;
};
static ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* ThisPtr(PyObject*);

// __init__(fst:CompactLatticeConstFst, s:int)
static PyObject* wrapLatticeWeightTpl_float__int___unsignedint_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("fst"),
      C("s"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "int", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _done() -> bool
static PyObject* wrapDone_as__done(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Done();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _value() -> CompactLatticeArc
static PyObject* wrapValue_as__value(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Value();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _next()
static PyObject* wrapNext_as__next(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Next();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _reset()
static PyObject* wrapReset_as__reset(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Reset();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _seek(a:int)
static PyObject* wrapSeek_as__seek(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("a"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_seek", names, &a[0])) return nullptr;
  unsigned long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_seek", names[0], "unsigned long", a[0]);
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Seek(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _position() -> int
static PyObject* wrapPosition_as__position(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Position();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _flags() -> int
static PyObject* wrapFlags_as__flags(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Flags();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _set_flags(flags:int, mask:int)
static PyObject* wrapSetFlags_as__set_flags(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("flags"),
      C("mask"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_set_flags", names, &a[0], &a[1])) return nullptr;
  unsigned int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_flags", names[0], "unsigned int", a[0]);
  unsigned int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_set_flags", names[1], "unsigned int", a[1]);
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetFlags(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapLatticeWeightTpl_float__int___unsignedint_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(fst:CompactLatticeConstFst, s:int)\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> >, unsigned int> >::ArcIterator(::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>, int)")},
  {C("_done"), (PyCFunction)wrapDone_as__done, METH_NOARGS, C("_done() -> bool\n  Calls C++ function\n  bool ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> >, unsigned int> >::Done()")},
  {C("_value"), (PyCFunction)wrapValue_as__value, METH_NOARGS, C("_value() -> CompactLatticeArc\n  Calls C++ function\n  ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> >, unsigned int> >::Value()")},
  {C("_next"), (PyCFunction)wrapNext_as__next, METH_NOARGS, C("_next()\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> >, unsigned int> >::Next()")},
  {C("_reset"), (PyCFunction)wrapReset_as__reset, METH_NOARGS, C("_reset()\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> >, unsigned int> >::Reset()")},
  {C("_seek"), (PyCFunction)wrapSeek_as__seek, METH_VARARGS | METH_KEYWORDS, C("_seek(a:int)\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> >, unsigned int> >::Seek(unsigned long)")},
  {C("_position"), (PyCFunction)wrapPosition_as__position, METH_NOARGS, C("_position() -> int\n  Calls C++ function\n  unsigned long ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> >, unsigned int> >::Position()")},
  {C("_flags"), (PyCFunction)wrapFlags_as__flags, METH_NOARGS, C("_flags() -> int\n  Calls C++ function\n  unsigned int ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> >, unsigned int> >::Flags()")},
  {C("_set_flags"), (PyCFunction)wrapSetFlags_as__set_flags, METH_VARARGS | METH_KEYWORDS, C("_set_flags(flags:int, mask:int)\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> >, unsigned int> >::SetFlags(unsigned int, unsigned int)")},
  {}
};

// CompactLatticeConstFstArcIterator __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// CompactLatticeConstFstArcIterator __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// CompactLatticeConstFstArcIterator __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_const_fst.CompactLatticeConstFstArcIterator", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapLatticeWeightTpl_float__int___unsignedint_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_ArcIterator__fst_ConstFst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int___unsignedint"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >"));
      if (!PyErr_Occurred()) {
        ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* c = static_cast<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyCompactLatticeConstFstArcIterator

namespace pyKwsIndexConstFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>> cpp;
};
static ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>* ThisPtr(PyObject*);

// _copy(safe:bool=default) -> KwsIndexConstFst
static PyObject* wrapCopy_as__copy(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("safe"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:_copy", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  bool arg1;
  if (nargs > 0) {
    if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_copy", names[0], "bool", a[0]);
  }
  // Call actual C++ method.
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    ret0 = c->Copy(); break;
  case 1:
    ret0 = c->Copy(std::move(arg1)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.fstext.KwsIndexConstFst");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// @classmethod _read(filename:str) -> KwsIndexConstFst
static PyObject* wrapRead_as__read(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("filename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_read", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_read", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::ConstFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > >, unsigned int>::Read(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.fstext.KwsIndexConstFst");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// @classmethod _read_from_stream(strm:istream, opts:FstReadOptions) -> KwsIndexConstFst
static PyObject* wrapRead_as__read_from_stream(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("strm"),
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_read_from_stream", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_read_from_stream", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  ::fst::FstReadOptions* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_read_from_stream", names[1], "::fst::FstReadOptions", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::ConstFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > >, unsigned int>::Read(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.fstext.KwsIndexConstFst");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// _write(filename:str) -> bool
static PyObject* wrapWrite_as__write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("filename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_write", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_write", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Write(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::fst::ImplToExpandedFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >*
static PyObject* as_fst_ImplToExpandedFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float_____unsignedint(PyObject* self) {
  ::fst::ImplToExpandedFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::ImplToExpandedFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >"), nullptr);
}

// Implicit cast this as ::fst::ImplToFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >*
static PyObject* as_fst_ImplToFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float_____unsignedint___fst_ExpandedFst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float(PyObject* self) {
  ::fst::ImplToFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::ImplToFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >"), nullptr);
}

// Implicit cast this as ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*
static PyObject* as_fst_ExpandedFst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float(PyObject* self) {
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >"), nullptr);
}

// Implicit cast this as ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*
static PyObject* as_fst_Fst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float(PyObject* self) {
  ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("_copy"), (PyCFunction)wrapCopy_as__copy, METH_VARARGS | METH_KEYWORDS, C("_copy(safe:bool=default) -> KwsIndexConstFst\n  Calls C++ function\n  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> * ::fst::ConstFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > >, unsigned int>::Copy(bool)")},
  {C("_read"), (PyCFunction)wrapRead_as__read, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("_read(filename:str) -> KwsIndexConstFst\n  Calls C++ function\n  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> * ::fst::ConstFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > >, unsigned int>::Read(::std::string)")},
  {C("_read_from_stream"), (PyCFunction)wrapRead_as__read_from_stream, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("_read_from_stream(strm:istream, opts:FstReadOptions) -> KwsIndexConstFst\n  Calls C++ function\n  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> * ::fst::ConstFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > >, unsigned int>::Read(::std::basic_istream<char, ::std::char_traits<char> >, ::fst::FstReadOptions)")},
  {C("_write"), (PyCFunction)wrapWrite_as__write, METH_VARARGS | METH_KEYWORDS, C("_write(filename:str) -> bool\n  Calls C++ function\n  bool ::fst::ConstFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > >, unsigned int>::Write(::std::string)")},
  {C("as_fst_ImplToExpandedFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float_____unsignedint"), (PyCFunction)as_fst_ImplToExpandedFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float_____unsignedint, METH_NOARGS, C("Upcast to ::fst::ImplToExpandedFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >*")},
  {C("as_fst_ImplToFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float_____unsignedint___fst_ExpandedFst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float"), (PyCFunction)as_fst_ImplToFst__fst_internal_ConstFstImpl__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float_____unsignedint___fst_ExpandedFst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::ImplToFst< ::fst::internal::ConstFstImpl< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >*")},
  {C("as_fst_ExpandedFst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float"), (PyCFunction)as_fst_ExpandedFst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*")},
  {C("as_fst_Fst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float"), (PyCFunction)as_fst_Fst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*")},
  {}
};

// KwsIndexConstFst __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// KwsIndexConstFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// KwsIndexConstFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_const_fst.KwsIndexConstFst",       // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "KwsIndexConstFst takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_ConstFst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float_____unsignedint"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>"));
      if (!PyErr_Occurred()) {
        ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>* c = static_cast<::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyKwsIndexConstFst

namespace pyKwsIndexConstFstStateIterator {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >> cpp;
};
static ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* ThisPtr(PyObject*);

// __init__(fst:KwsIndexConstFst)
static PyObject* wrapTropicalWeightTpl_float_____unsignedint_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("fst"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _done() -> bool
static PyObject* wrapDone_as__done(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Done();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _value() -> int
static PyObject* wrapValue_as__value(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Value();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _next()
static PyObject* wrapNext_as__next(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Next();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _reset()
static PyObject* wrapReset_as__reset(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Reset();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapTropicalWeightTpl_float_____unsignedint_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(fst:KwsIndexConstFst)\n  Calls C++ function\n  void ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > >, unsigned int> >::StateIterator(::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>)")},
  {C("_done"), (PyCFunction)wrapDone_as__done, METH_NOARGS, C("_done() -> bool\n  Calls C++ function\n  bool ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > >, unsigned int> >::Done()")},
  {C("_value"), (PyCFunction)wrapValue_as__value, METH_NOARGS, C("_value() -> int\n  Calls C++ function\n  int ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > >, unsigned int> >::Value()")},
  {C("_next"), (PyCFunction)wrapNext_as__next, METH_NOARGS, C("_next()\n  Calls C++ function\n  void ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > >, unsigned int> >::Next()")},
  {C("_reset"), (PyCFunction)wrapReset_as__reset, METH_NOARGS, C("_reset()\n  Calls C++ function\n  void ::fst::StateIterator<fst::ConstFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > >, unsigned int> >::Reset()")},
  {}
};

// KwsIndexConstFstStateIterator __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// KwsIndexConstFstStateIterator __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// KwsIndexConstFstStateIterator __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_const_fst.KwsIndexConstFstStateIterator", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapTropicalWeightTpl_float_____unsignedint_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_StateIterator__fst_ConstFst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float_____unsignedint"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >"));
      if (!PyErr_Occurred()) {
        ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* c = static_cast<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyKwsIndexConstFstStateIterator

namespace pyKwsIndexConstFstArcIterator {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >> cpp;
};
static ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* ThisPtr(PyObject*);

// __init__(fst:KwsIndexConstFst, s:int)
static PyObject* wrapTropicalWeightTpl_float_____unsignedint_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("fst"),
      C("s"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "int", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _done() -> bool
static PyObject* wrapDone_as__done(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Done();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _value() -> KwsIndexArc
static PyObject* wrapValue_as__value(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Value();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _next()
static PyObject* wrapNext_as__next(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Next();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _reset()
static PyObject* wrapReset_as__reset(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Reset();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _seek(a:int)
static PyObject* wrapSeek_as__seek(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("a"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_seek", names, &a[0])) return nullptr;
  unsigned long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_seek", names[0], "unsigned long", a[0]);
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Seek(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _position() -> int
static PyObject* wrapPosition_as__position(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Position();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _flags() -> int
static PyObject* wrapFlags_as__flags(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Flags();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _set_flags(flags:int, mask:int)
static PyObject* wrapSetFlags_as__set_flags(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("flags"),
      C("mask"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_set_flags", names, &a[0], &a[1])) return nullptr;
  unsigned int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_flags", names[0], "unsigned int", a[0]);
  unsigned int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_set_flags", names[1], "unsigned int", a[1]);
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetFlags(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapTropicalWeightTpl_float_____unsignedint_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(fst:KwsIndexConstFst, s:int)\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > >, unsigned int> >::ArcIterator(::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>, int)")},
  {C("_done"), (PyCFunction)wrapDone_as__done, METH_NOARGS, C("_done() -> bool\n  Calls C++ function\n  bool ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > >, unsigned int> >::Done()")},
  {C("_value"), (PyCFunction)wrapValue_as__value, METH_NOARGS, C("_value() -> KwsIndexArc\n  Calls C++ function\n  ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > >, unsigned int> >::Value()")},
  {C("_next"), (PyCFunction)wrapNext_as__next, METH_NOARGS, C("_next()\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > >, unsigned int> >::Next()")},
  {C("_reset"), (PyCFunction)wrapReset_as__reset, METH_NOARGS, C("_reset()\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > >, unsigned int> >::Reset()")},
  {C("_seek"), (PyCFunction)wrapSeek_as__seek, METH_VARARGS | METH_KEYWORDS, C("_seek(a:int)\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > >, unsigned int> >::Seek(unsigned long)")},
  {C("_position"), (PyCFunction)wrapPosition_as__position, METH_NOARGS, C("_position() -> int\n  Calls C++ function\n  unsigned long ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > >, unsigned int> >::Position()")},
  {C("_flags"), (PyCFunction)wrapFlags_as__flags, METH_NOARGS, C("_flags() -> int\n  Calls C++ function\n  unsigned int ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > >, unsigned int> >::Flags()")},
  {C("_set_flags"), (PyCFunction)wrapSetFlags_as__set_flags, METH_VARARGS | METH_KEYWORDS, C("_set_flags(flags:int, mask:int)\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > >, unsigned int> >::SetFlags(unsigned int, unsigned int)")},
  {}
};

// KwsIndexConstFstArcIterator __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// KwsIndexConstFstArcIterator __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// KwsIndexConstFstArcIterator __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_const_fst.KwsIndexConstFstArcIterator", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapTropicalWeightTpl_float_____unsignedint_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_ArcIterator__fst_ConstFst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float_____unsignedint"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >"));
      if (!PyErr_Occurred()) {
        ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* c = static_cast<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyKwsIndexConstFstArcIterator


// Initialize module

bool Ready() {
  PyObject* base_cls = ImportFQName("kaldi.fstext._expanded_fst.StdExpandedFst");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._expanded_fst.StdExpandedFst is not a new style class inheriting from object.");
    return false;
  }
  pyStdConstFst::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyStdConstFst::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._expanded_fst.StdExpandedFst is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyStdConstFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyStdConstFst::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyStdConstFstStateIterator::wrapper_Type) < 0) return false;
  Py_INCREF(&pyStdConstFstStateIterator::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyStdConstFstArcIterator::wrapper_Type) < 0) return false;
  Py_INCREF(&pyStdConstFstArcIterator::wrapper_Type);  // For PyModule_AddObject to steal.
  base_cls = ImportFQName("kaldi.fstext._expanded_fst.LogExpandedFst");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._expanded_fst.LogExpandedFst is not a new style class inheriting from object.");
    return false;
  }
  pyLogConstFst::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyLogConstFst::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._expanded_fst.LogExpandedFst is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyLogConstFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyLogConstFst::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyLogConstFstStateIterator::wrapper_Type) < 0) return false;
  Py_INCREF(&pyLogConstFstStateIterator::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyLogConstFstArcIterator::wrapper_Type) < 0) return false;
  Py_INCREF(&pyLogConstFstArcIterator::wrapper_Type);  // For PyModule_AddObject to steal.
  base_cls = ImportFQName("kaldi.fstext._expanded_fst.LatticeExpandedFst");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._expanded_fst.LatticeExpandedFst is not a new style class inheriting from object.");
    return false;
  }
  pyLatticeConstFst::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyLatticeConstFst::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._expanded_fst.LatticeExpandedFst is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyLatticeConstFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyLatticeConstFst::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyLatticeConstFstStateIterator::wrapper_Type) < 0) return false;
  Py_INCREF(&pyLatticeConstFstStateIterator::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyLatticeConstFstArcIterator::wrapper_Type) < 0) return false;
  Py_INCREF(&pyLatticeConstFstArcIterator::wrapper_Type);  // For PyModule_AddObject to steal.
  base_cls = ImportFQName("kaldi.fstext._expanded_fst.CompactLatticeExpandedFst");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._expanded_fst.CompactLatticeExpandedFst is not a new style class inheriting from object.");
    return false;
  }
  pyCompactLatticeConstFst::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyCompactLatticeConstFst::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._expanded_fst.CompactLatticeExpandedFst is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyCompactLatticeConstFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyCompactLatticeConstFst::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyCompactLatticeConstFstStateIterator::wrapper_Type) < 0) return false;
  Py_INCREF(&pyCompactLatticeConstFstStateIterator::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyCompactLatticeConstFstArcIterator::wrapper_Type) < 0) return false;
  Py_INCREF(&pyCompactLatticeConstFstArcIterator::wrapper_Type);  // For PyModule_AddObject to steal.
  base_cls = ImportFQName("kaldi.fstext._expanded_fst.KwsIndexExpandedFst");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._expanded_fst.KwsIndexExpandedFst is not a new style class inheriting from object.");
    return false;
  }
  pyKwsIndexConstFst::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyKwsIndexConstFst::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._expanded_fst.KwsIndexExpandedFst is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyKwsIndexConstFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyKwsIndexConstFst::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyKwsIndexConstFstStateIterator::wrapper_Type) < 0) return false;
  Py_INCREF(&pyKwsIndexConstFstStateIterator::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyKwsIndexConstFstArcIterator::wrapper_Type) < 0) return false;
  Py_INCREF(&pyKwsIndexConstFstArcIterator::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_const_fst",  // module name
  "CLIF-generated module for fstext/const-fst-ext.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_lattice_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_arc")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_fst")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "StdConstFst", reinterpret_cast<PyObject*>(&pyStdConstFst::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "StdConstFstStateIterator", reinterpret_cast<PyObject*>(&pyStdConstFstStateIterator::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "StdConstFstArcIterator", reinterpret_cast<PyObject*>(&pyStdConstFstArcIterator::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "LogConstFst", reinterpret_cast<PyObject*>(&pyLogConstFst::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "LogConstFstStateIterator", reinterpret_cast<PyObject*>(&pyLogConstFstStateIterator::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "LogConstFstArcIterator", reinterpret_cast<PyObject*>(&pyLogConstFstArcIterator::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "LatticeConstFst", reinterpret_cast<PyObject*>(&pyLatticeConstFst::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "LatticeConstFstStateIterator", reinterpret_cast<PyObject*>(&pyLatticeConstFstStateIterator::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "LatticeConstFstArcIterator", reinterpret_cast<PyObject*>(&pyLatticeConstFstArcIterator::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "CompactLatticeConstFst", reinterpret_cast<PyObject*>(&pyCompactLatticeConstFst::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "CompactLatticeConstFstStateIterator", reinterpret_cast<PyObject*>(&pyCompactLatticeConstFstStateIterator::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "CompactLatticeConstFstArcIterator", reinterpret_cast<PyObject*>(&pyCompactLatticeConstFstArcIterator::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "KwsIndexConstFst", reinterpret_cast<PyObject*>(&pyKwsIndexConstFst::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "KwsIndexConstFstStateIterator", reinterpret_cast<PyObject*>(&pyKwsIndexConstFstStateIterator::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "KwsIndexConstFstArcIterator", reinterpret_cast<PyObject*>(&pyKwsIndexConstFstArcIterator::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __const__fst_clifwrap

namespace fst {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// CompactLatticeConstFst to/from ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> conversion

bool Clif_PyObjAs(PyObject* py, ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>* cpp = __const__fst_clifwrap::pyCompactLatticeConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>>* c) {
  assert(c != nullptr);
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>* cpp = __const__fst_clifwrap::pyCompactLatticeConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__const__fst_clifwrap::pyCompactLatticeConstFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>>* c) {
  assert(c != nullptr);
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>* cpp = __const__fst_clifwrap::pyCompactLatticeConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__const__fst_clifwrap::pyCompactLatticeConstFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert CompactLatticeConstFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>* c) {
  assert(c != nullptr);
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>* cpp = __const__fst_clifwrap::pyCompactLatticeConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>>* c) {
  assert(c != nullptr);
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>* cpp = __const__fst_clifwrap::pyCompactLatticeConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyCompactLatticeConstFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyCompactLatticeConstFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyCompactLatticeConstFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyCompactLatticeConstFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyCompactLatticeConstFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyCompactLatticeConstFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyCompactLatticeConstFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyCompactLatticeConstFst::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>>(c);
  return py;
}

// CompactLatticeConstFstArcIterator to/from ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* cpp = __const__fst_clifwrap::pyCompactLatticeConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* cpp = __const__fst_clifwrap::pyCompactLatticeConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__const__fst_clifwrap::pyCompactLatticeConstFstArcIterator::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* cpp = __const__fst_clifwrap::pyCompactLatticeConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__const__fst_clifwrap::pyCompactLatticeConstFstArcIterator::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert CompactLatticeConstFstArcIterator instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* c) {
  assert(c != nullptr);
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* cpp = __const__fst_clifwrap::pyCompactLatticeConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* cpp = __const__fst_clifwrap::pyCompactLatticeConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyCompactLatticeConstFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyCompactLatticeConstFstArcIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyCompactLatticeConstFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyCompactLatticeConstFstArcIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyCompactLatticeConstFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyCompactLatticeConstFstArcIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyCompactLatticeConstFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyCompactLatticeConstFstArcIterator::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>(c);
  return py;
}

// CompactLatticeConstFstStateIterator to/from ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* cpp = __const__fst_clifwrap::pyCompactLatticeConstFstStateIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* cpp = __const__fst_clifwrap::pyCompactLatticeConstFstStateIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__const__fst_clifwrap::pyCompactLatticeConstFstStateIterator::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* cpp = __const__fst_clifwrap::pyCompactLatticeConstFstStateIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__const__fst_clifwrap::pyCompactLatticeConstFstStateIterator::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert CompactLatticeConstFstStateIterator instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyCompactLatticeConstFstStateIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyCompactLatticeConstFstStateIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyCompactLatticeConstFstStateIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyCompactLatticeConstFstStateIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyCompactLatticeConstFstStateIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyCompactLatticeConstFstStateIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>(std::move(c));
  return py;
}

// KwsIndexConstFst to/from ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> conversion

bool Clif_PyObjAs(PyObject* py, ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>* cpp = __const__fst_clifwrap::pyKwsIndexConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>>* c) {
  assert(c != nullptr);
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>* cpp = __const__fst_clifwrap::pyKwsIndexConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__const__fst_clifwrap::pyKwsIndexConstFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>>* c) {
  assert(c != nullptr);
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>* cpp = __const__fst_clifwrap::pyKwsIndexConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__const__fst_clifwrap::pyKwsIndexConstFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert KwsIndexConstFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>* c) {
  assert(c != nullptr);
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>* cpp = __const__fst_clifwrap::pyKwsIndexConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>>* c) {
  assert(c != nullptr);
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>* cpp = __const__fst_clifwrap::pyKwsIndexConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyKwsIndexConstFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyKwsIndexConstFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyKwsIndexConstFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyKwsIndexConstFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyKwsIndexConstFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyKwsIndexConstFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyKwsIndexConstFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyKwsIndexConstFst::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>>(c);
  return py;
}

// KwsIndexConstFstArcIterator to/from ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* cpp = __const__fst_clifwrap::pyKwsIndexConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* cpp = __const__fst_clifwrap::pyKwsIndexConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__const__fst_clifwrap::pyKwsIndexConstFstArcIterator::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* cpp = __const__fst_clifwrap::pyKwsIndexConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__const__fst_clifwrap::pyKwsIndexConstFstArcIterator::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert KwsIndexConstFstArcIterator instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* c) {
  assert(c != nullptr);
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* cpp = __const__fst_clifwrap::pyKwsIndexConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* cpp = __const__fst_clifwrap::pyKwsIndexConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyKwsIndexConstFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyKwsIndexConstFstArcIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyKwsIndexConstFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyKwsIndexConstFstArcIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyKwsIndexConstFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyKwsIndexConstFstArcIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyKwsIndexConstFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyKwsIndexConstFstArcIterator::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>(c);
  return py;
}

// KwsIndexConstFstStateIterator to/from ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* cpp = __const__fst_clifwrap::pyKwsIndexConstFstStateIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* cpp = __const__fst_clifwrap::pyKwsIndexConstFstStateIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__const__fst_clifwrap::pyKwsIndexConstFstStateIterator::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* cpp = __const__fst_clifwrap::pyKwsIndexConstFstStateIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__const__fst_clifwrap::pyKwsIndexConstFstStateIterator::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert KwsIndexConstFstStateIterator instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyKwsIndexConstFstStateIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyKwsIndexConstFstStateIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyKwsIndexConstFstStateIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyKwsIndexConstFstStateIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyKwsIndexConstFstStateIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyKwsIndexConstFstStateIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>(std::move(c));
  return py;
}

// LatticeConstFst to/from ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> conversion

bool Clif_PyObjAs(PyObject* py, ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>* cpp = __const__fst_clifwrap::pyLatticeConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>>* c) {
  assert(c != nullptr);
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>* cpp = __const__fst_clifwrap::pyLatticeConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__const__fst_clifwrap::pyLatticeConstFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>>* c) {
  assert(c != nullptr);
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>* cpp = __const__fst_clifwrap::pyLatticeConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__const__fst_clifwrap::pyLatticeConstFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert LatticeConstFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>* c) {
  assert(c != nullptr);
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>* cpp = __const__fst_clifwrap::pyLatticeConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>>* c) {
  assert(c != nullptr);
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>* cpp = __const__fst_clifwrap::pyLatticeConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyLatticeConstFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyLatticeConstFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyLatticeConstFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyLatticeConstFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyLatticeConstFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyLatticeConstFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyLatticeConstFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyLatticeConstFst::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>>(c);
  return py;
}

// LatticeConstFstArcIterator to/from ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyLatticeConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyLatticeConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__const__fst_clifwrap::pyLatticeConstFstArcIterator::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyLatticeConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__const__fst_clifwrap::pyLatticeConstFstArcIterator::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert LatticeConstFstArcIterator instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* c) {
  assert(c != nullptr);
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyLatticeConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyLatticeConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyLatticeConstFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyLatticeConstFstArcIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyLatticeConstFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyLatticeConstFstArcIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyLatticeConstFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyLatticeConstFstArcIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyLatticeConstFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyLatticeConstFstArcIterator::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>(c);
  return py;
}

// LatticeConstFstStateIterator to/from ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyLatticeConstFstStateIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyLatticeConstFstStateIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__const__fst_clifwrap::pyLatticeConstFstStateIterator::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyLatticeConstFstStateIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__const__fst_clifwrap::pyLatticeConstFstStateIterator::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert LatticeConstFstStateIterator instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyLatticeConstFstStateIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyLatticeConstFstStateIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyLatticeConstFstStateIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyLatticeConstFstStateIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyLatticeConstFstStateIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyLatticeConstFstStateIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>(std::move(c));
  return py;
}

// LogConstFst to/from ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> conversion

bool Clif_PyObjAs(PyObject* py, ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>* cpp = __const__fst_clifwrap::pyLogConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>>* c) {
  assert(c != nullptr);
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>* cpp = __const__fst_clifwrap::pyLogConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__const__fst_clifwrap::pyLogConstFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>>* c) {
  assert(c != nullptr);
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>* cpp = __const__fst_clifwrap::pyLogConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__const__fst_clifwrap::pyLogConstFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert LogConstFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>* c) {
  assert(c != nullptr);
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>* cpp = __const__fst_clifwrap::pyLogConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>>* c) {
  assert(c != nullptr);
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>* cpp = __const__fst_clifwrap::pyLogConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyLogConstFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyLogConstFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyLogConstFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyLogConstFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyLogConstFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyLogConstFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyLogConstFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyLogConstFst::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>>(c);
  return py;
}

// LogConstFstArcIterator to/from ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyLogConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyLogConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__const__fst_clifwrap::pyLogConstFstArcIterator::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyLogConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__const__fst_clifwrap::pyLogConstFstArcIterator::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert LogConstFstArcIterator instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* c) {
  assert(c != nullptr);
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyLogConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyLogConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyLogConstFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyLogConstFstArcIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyLogConstFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyLogConstFstArcIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyLogConstFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyLogConstFstArcIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyLogConstFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyLogConstFstArcIterator::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>(c);
  return py;
}

// LogConstFstStateIterator to/from ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyLogConstFstStateIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyLogConstFstStateIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__const__fst_clifwrap::pyLogConstFstStateIterator::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyLogConstFstStateIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__const__fst_clifwrap::pyLogConstFstStateIterator::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert LogConstFstStateIterator instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyLogConstFstStateIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyLogConstFstStateIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyLogConstFstStateIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyLogConstFstStateIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyLogConstFstStateIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyLogConstFstStateIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>(std::move(c));
  return py;
}

// StdConstFst to/from ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> conversion

bool Clif_PyObjAs(PyObject* py, ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>* cpp = __const__fst_clifwrap::pyStdConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>>* c) {
  assert(c != nullptr);
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>* cpp = __const__fst_clifwrap::pyStdConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__const__fst_clifwrap::pyStdConstFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>>* c) {
  assert(c != nullptr);
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>* cpp = __const__fst_clifwrap::pyStdConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__const__fst_clifwrap::pyStdConstFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert StdConstFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>* c) {
  assert(c != nullptr);
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>* cpp = __const__fst_clifwrap::pyStdConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>>* c) {
  assert(c != nullptr);
  ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>* cpp = __const__fst_clifwrap::pyStdConstFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyStdConstFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyStdConstFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyStdConstFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyStdConstFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyStdConstFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyStdConstFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyStdConstFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyStdConstFst::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>>(c);
  return py;
}

// StdConstFstArcIterator to/from ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyStdConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyStdConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__const__fst_clifwrap::pyStdConstFstArcIterator::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyStdConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__const__fst_clifwrap::pyStdConstFstArcIterator::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert StdConstFstArcIterator instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* c) {
  assert(c != nullptr);
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyStdConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyStdConstFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyStdConstFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyStdConstFstArcIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyStdConstFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyStdConstFstArcIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyStdConstFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyStdConstFstArcIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyStdConstFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyStdConstFstArcIterator::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>(c);
  return py;
}

// StdConstFstStateIterator to/from ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyStdConstFstStateIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyStdConstFstStateIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__const__fst_clifwrap::pyStdConstFstStateIterator::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>* c) {
  assert(c != nullptr);
  ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* cpp = __const__fst_clifwrap::pyStdConstFstStateIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__const__fst_clifwrap::pyStdConstFstStateIterator::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert StdConstFstStateIterator instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyStdConstFstStateIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyStdConstFstStateIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyStdConstFstStateIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyStdConstFstStateIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__const__fst_clifwrap::pyStdConstFstStateIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__const__fst_clifwrap::pyStdConstFstStateIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>(std::move(c));
  return py;
}

}  // namespace fst
