//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/fstext/printer.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "fstext/lattice-weight-clifwrap.h"
#include "fstext/symbol-table-clifwrap.h"
#include "fstext/fst-clifwrap.h"
#include "base/iostream-clifwrap.h"
#include "printer-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __printer_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyStdFstPrinter {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >> cpp;
};
static ::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* ThisPtr(PyObject*);

// __init__(fst:StdFst, isyms:SymbolTable, osyms:SymbolTable, ssyms:SymbolTable, accep:bool, show_weight_one:bool, field_separator:str, missing_symbol:str=default)
static PyObject* wrapTropicalWeightTpl_float_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[8]{};
  char* names[] = {
      C("fst"),
      C("isyms"),
      C("osyms"),
      C("ssyms"),
      C("accep"),
      C("show_weight_one"),
      C("field_separator"),
      C("missing_symbol"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOOOO|O:__init__", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5], &a[6], &a[7])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 8; nargs > 7; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >", a[0]);
  ::fst::SymbolTable * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::fst::SymbolTable *", a[1]);
  ::fst::SymbolTable * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::fst::SymbolTable *", a[2]);
  ::fst::SymbolTable * arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "::fst::SymbolTable *", a[3]);
  bool arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("__init__", names[4], "bool", a[4]);
  bool arg6;
  if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("__init__", names[5], "bool", a[5]);
  ::std::string arg7;
  if (!Clif_PyObjAs(a[6], &arg7)) return ArgError("__init__", names[6], "::std::string", a[6]);
  ::std::string arg8;
  if (nargs > 7) {
    if (!Clif_PyObjAs(a[7], &arg8)) return ArgError("__init__", names[7], "::std::string", a[7]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 7:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>(*arg1, arg2, arg3, arg4, std::move(arg5), std::move(arg6), std::move(arg7)); break;
  case 8:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>(*arg1, arg2, arg3, arg4, std::move(arg5), std::move(arg6), std::move(arg7), std::move(arg8)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// print_fst(strm:ostream, dest:str)
static PyObject* wrapPrint_as_print_fst(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("strm"),
      C("dest"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:print_fst", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> > * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("print_fst", names[0], "::std::basic_ostream<char, ::std::char_traits<char> > *", a[0]);
  ::std::string arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("print_fst", names[1], "::std::string", a[1]);
  // Call actual C++ method.
  ::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Print(arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapTropicalWeightTpl_float_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(fst:StdFst, isyms:SymbolTable, osyms:SymbolTable, ssyms:SymbolTable, accep:bool, show_weight_one:bool, field_separator:str, missing_symbol:str=default)\n  Calls C++ function\n  void ::fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::FstPrinter(::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >, ::fst::SymbolTable *, ::fst::SymbolTable *, ::fst::SymbolTable *, bool, bool, ::std::string, ::std::string)")},
  {C("print_fst"), (PyCFunction)wrapPrint_as_print_fst, METH_VARARGS | METH_KEYWORDS, C("print_fst(strm:ostream, dest:str)\n  Calls C++ function\n  void ::fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::Print(::std::basic_ostream<char, ::std::char_traits<char> > *, ::std::string)")},
  {}
};

// StdFstPrinter __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// StdFstPrinter __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// StdFstPrinter __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_printer.StdFstPrinter",            // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapTropicalWeightTpl_float_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_FstPrinter__fst_ArcTpl__fst_TropicalWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >"));
      if (!PyErr_Occurred()) {
        ::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = static_cast<::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyStdFstPrinter

namespace pyLogFstPrinter {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >> cpp;
};
static ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* ThisPtr(PyObject*);

// __init__(fst:LogFst, isyms:SymbolTable, osyms:SymbolTable, ssyms:SymbolTable, accep:bool, show_weight_one:bool, field_separator:str, missing_symbol:str=default)
static PyObject* wrapLogWeightTpl_float_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[8]{};
  char* names[] = {
      C("fst"),
      C("isyms"),
      C("osyms"),
      C("ssyms"),
      C("accep"),
      C("show_weight_one"),
      C("field_separator"),
      C("missing_symbol"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOOOO|O:__init__", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5], &a[6], &a[7])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 8; nargs > 7; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >", a[0]);
  ::fst::SymbolTable * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::fst::SymbolTable *", a[1]);
  ::fst::SymbolTable * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::fst::SymbolTable *", a[2]);
  ::fst::SymbolTable * arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "::fst::SymbolTable *", a[3]);
  bool arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("__init__", names[4], "bool", a[4]);
  bool arg6;
  if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("__init__", names[5], "bool", a[5]);
  ::std::string arg7;
  if (!Clif_PyObjAs(a[6], &arg7)) return ArgError("__init__", names[6], "::std::string", a[6]);
  ::std::string arg8;
  if (nargs > 7) {
    if (!Clif_PyObjAs(a[7], &arg8)) return ArgError("__init__", names[7], "::std::string", a[7]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 7:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>(*arg1, arg2, arg3, arg4, std::move(arg5), std::move(arg6), std::move(arg7)); break;
  case 8:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>(*arg1, arg2, arg3, arg4, std::move(arg5), std::move(arg6), std::move(arg7), std::move(arg8)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// print_fst(strm:ostream, dest:str)
static PyObject* wrapPrint_as_print_fst(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("strm"),
      C("dest"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:print_fst", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> > * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("print_fst", names[0], "::std::basic_ostream<char, ::std::char_traits<char> > *", a[0]);
  ::std::string arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("print_fst", names[1], "::std::string", a[1]);
  // Call actual C++ method.
  ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Print(arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapLogWeightTpl_float_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(fst:LogFst, isyms:SymbolTable, osyms:SymbolTable, ssyms:SymbolTable, accep:bool, show_weight_one:bool, field_separator:str, missing_symbol:str=default)\n  Calls C++ function\n  void ::fst::FstPrinter<fst::ArcTpl<fst::LogWeightTpl<float> > >::FstPrinter(::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >, ::fst::SymbolTable *, ::fst::SymbolTable *, ::fst::SymbolTable *, bool, bool, ::std::string, ::std::string)")},
  {C("print_fst"), (PyCFunction)wrapPrint_as_print_fst, METH_VARARGS | METH_KEYWORDS, C("print_fst(strm:ostream, dest:str)\n  Calls C++ function\n  void ::fst::FstPrinter<fst::ArcTpl<fst::LogWeightTpl<float> > >::Print(::std::basic_ostream<char, ::std::char_traits<char> > *, ::std::string)")},
  {}
};

// LogFstPrinter __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// LogFstPrinter __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// LogFstPrinter __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_printer.LogFstPrinter",            // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapLogWeightTpl_float_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_FstPrinter__fst_ArcTpl__fst_LogWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >"));
      if (!PyErr_Occurred()) {
        ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = static_cast<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyLogFstPrinter

namespace pyLatticeFstPrinter {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >> cpp;
};
static ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* ThisPtr(PyObject*);

// __init__(fst:LatticeFst, isyms:SymbolTable, osyms:SymbolTable, ssyms:SymbolTable, accep:bool, show_weight_one:bool, field_separator:str, missing_symbol:str=default)
static PyObject* wrapLatticeWeightTpl_float_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[8]{};
  char* names[] = {
      C("fst"),
      C("isyms"),
      C("osyms"),
      C("ssyms"),
      C("accep"),
      C("show_weight_one"),
      C("field_separator"),
      C("missing_symbol"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOOOO|O:__init__", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5], &a[6], &a[7])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 8; nargs > 7; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >", a[0]);
  ::fst::SymbolTable * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::fst::SymbolTable *", a[1]);
  ::fst::SymbolTable * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::fst::SymbolTable *", a[2]);
  ::fst::SymbolTable * arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "::fst::SymbolTable *", a[3]);
  bool arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("__init__", names[4], "bool", a[4]);
  bool arg6;
  if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("__init__", names[5], "bool", a[5]);
  ::std::string arg7;
  if (!Clif_PyObjAs(a[6], &arg7)) return ArgError("__init__", names[6], "::std::string", a[6]);
  ::std::string arg8;
  if (nargs > 7) {
    if (!Clif_PyObjAs(a[7], &arg8)) return ArgError("__init__", names[7], "::std::string", a[7]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 7:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>(*arg1, arg2, arg3, arg4, std::move(arg5), std::move(arg6), std::move(arg7)); break;
  case 8:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>(*arg1, arg2, arg3, arg4, std::move(arg5), std::move(arg6), std::move(arg7), std::move(arg8)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// print_fst(strm:ostream, dest:str)
static PyObject* wrapPrint_as_print_fst(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("strm"),
      C("dest"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:print_fst", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> > * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("print_fst", names[0], "::std::basic_ostream<char, ::std::char_traits<char> > *", a[0]);
  ::std::string arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("print_fst", names[1], "::std::string", a[1]);
  // Call actual C++ method.
  ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Print(arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapLatticeWeightTpl_float_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(fst:LatticeFst, isyms:SymbolTable, osyms:SymbolTable, ssyms:SymbolTable, accep:bool, show_weight_one:bool, field_separator:str, missing_symbol:str=default)\n  Calls C++ function\n  void ::fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::FstPrinter(::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >, ::fst::SymbolTable *, ::fst::SymbolTable *, ::fst::SymbolTable *, bool, bool, ::std::string, ::std::string)")},
  {C("print_fst"), (PyCFunction)wrapPrint_as_print_fst, METH_VARARGS | METH_KEYWORDS, C("print_fst(strm:ostream, dest:str)\n  Calls C++ function\n  void ::fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::Print(::std::basic_ostream<char, ::std::char_traits<char> > *, ::std::string)")},
  {}
};

// LatticeFstPrinter __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// LatticeFstPrinter __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// LatticeFstPrinter __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_printer.LatticeFstPrinter",        // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapLatticeWeightTpl_float_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_FstPrinter__fst_ArcTpl__fst_LatticeWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >"));
      if (!PyErr_Occurred()) {
        ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = static_cast<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyLatticeFstPrinter

namespace pyCompactLatticeFstPrinter {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >> cpp;
};
static ::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* ThisPtr(PyObject*);

// __init__(fst:CompactLatticeFst, isyms:SymbolTable, osyms:SymbolTable, ssyms:SymbolTable, accep:bool, show_weight_one:bool, field_separator:str, missing_symbol:str=default)
static PyObject* wrapLatticeWeightTpl_float__int_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[8]{};
  char* names[] = {
      C("fst"),
      C("isyms"),
      C("osyms"),
      C("ssyms"),
      C("accep"),
      C("show_weight_one"),
      C("field_separator"),
      C("missing_symbol"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOOOO|O:__init__", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5], &a[6], &a[7])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 8; nargs > 7; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >", a[0]);
  ::fst::SymbolTable * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::fst::SymbolTable *", a[1]);
  ::fst::SymbolTable * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::fst::SymbolTable *", a[2]);
  ::fst::SymbolTable * arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "::fst::SymbolTable *", a[3]);
  bool arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("__init__", names[4], "bool", a[4]);
  bool arg6;
  if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("__init__", names[5], "bool", a[5]);
  ::std::string arg7;
  if (!Clif_PyObjAs(a[6], &arg7)) return ArgError("__init__", names[6], "::std::string", a[6]);
  ::std::string arg8;
  if (nargs > 7) {
    if (!Clif_PyObjAs(a[7], &arg8)) return ArgError("__init__", names[7], "::std::string", a[7]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 7:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>(*arg1, arg2, arg3, arg4, std::move(arg5), std::move(arg6), std::move(arg7)); break;
  case 8:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>(*arg1, arg2, arg3, arg4, std::move(arg5), std::move(arg6), std::move(arg7), std::move(arg8)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// print_fst(strm:ostream, dest:str)
static PyObject* wrapPrint_as_print_fst(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("strm"),
      C("dest"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:print_fst", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> > * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("print_fst", names[0], "::std::basic_ostream<char, ::std::char_traits<char> > *", a[0]);
  ::std::string arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("print_fst", names[1], "::std::string", a[1]);
  // Call actual C++ method.
  ::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Print(arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapLatticeWeightTpl_float__int_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(fst:CompactLatticeFst, isyms:SymbolTable, osyms:SymbolTable, ssyms:SymbolTable, accep:bool, show_weight_one:bool, field_separator:str, missing_symbol:str=default)\n  Calls C++ function\n  void ::fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::FstPrinter(::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >, ::fst::SymbolTable *, ::fst::SymbolTable *, ::fst::SymbolTable *, bool, bool, ::std::string, ::std::string)")},
  {C("print_fst"), (PyCFunction)wrapPrint_as_print_fst, METH_VARARGS | METH_KEYWORDS, C("print_fst(strm:ostream, dest:str)\n  Calls C++ function\n  void ::fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::Print(::std::basic_ostream<char, ::std::char_traits<char> > *, ::std::string)")},
  {}
};

// CompactLatticeFstPrinter __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// CompactLatticeFstPrinter __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// CompactLatticeFstPrinter __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_printer.CompactLatticeFstPrinter", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapLatticeWeightTpl_float__int_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_FstPrinter__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >"));
      if (!PyErr_Occurred()) {
        ::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = static_cast<::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyCompactLatticeFstPrinter

namespace pyKwsIndexFstPrinter {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >> cpp;
};
static ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* ThisPtr(PyObject*);

// __init__(fst:KwsIndexFst, isyms:SymbolTable, osyms:SymbolTable, ssyms:SymbolTable, accep:bool, show_weight_one:bool, field_separator:str, missing_symbol:str=default)
static PyObject* wrapTropicalWeightTpl_float_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[8]{};
  char* names[] = {
      C("fst"),
      C("isyms"),
      C("osyms"),
      C("ssyms"),
      C("accep"),
      C("show_weight_one"),
      C("field_separator"),
      C("missing_symbol"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOOOO|O:__init__", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5], &a[6], &a[7])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 8; nargs > 7; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >", a[0]);
  ::fst::SymbolTable * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::fst::SymbolTable *", a[1]);
  ::fst::SymbolTable * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::fst::SymbolTable *", a[2]);
  ::fst::SymbolTable * arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "::fst::SymbolTable *", a[3]);
  bool arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("__init__", names[4], "bool", a[4]);
  bool arg6;
  if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("__init__", names[5], "bool", a[5]);
  ::std::string arg7;
  if (!Clif_PyObjAs(a[6], &arg7)) return ArgError("__init__", names[6], "::std::string", a[6]);
  ::std::string arg8;
  if (nargs > 7) {
    if (!Clif_PyObjAs(a[7], &arg8)) return ArgError("__init__", names[7], "::std::string", a[7]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 7:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>(*arg1, arg2, arg3, arg4, std::move(arg5), std::move(arg6), std::move(arg7)); break;
  case 8:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>(*arg1, arg2, arg3, arg4, std::move(arg5), std::move(arg6), std::move(arg7), std::move(arg8)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// print_fst(strm:ostream, dest:str)
static PyObject* wrapPrint_as_print_fst(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("strm"),
      C("dest"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:print_fst", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> > * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("print_fst", names[0], "::std::basic_ostream<char, ::std::char_traits<char> > *", a[0]);
  ::std::string arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("print_fst", names[1], "::std::string", a[1]);
  // Call actual C++ method.
  ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Print(arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapTropicalWeightTpl_float_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(fst:KwsIndexFst, isyms:SymbolTable, osyms:SymbolTable, ssyms:SymbolTable, accep:bool, show_weight_one:bool, field_separator:str, missing_symbol:str=default)\n  Calls C++ function\n  void ::fst::FstPrinter<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::FstPrinter(::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >, ::fst::SymbolTable *, ::fst::SymbolTable *, ::fst::SymbolTable *, bool, bool, ::std::string, ::std::string)")},
  {C("print_fst"), (PyCFunction)wrapPrint_as_print_fst, METH_VARARGS | METH_KEYWORDS, C("print_fst(strm:ostream, dest:str)\n  Calls C++ function\n  void ::fst::FstPrinter<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::Print(::std::basic_ostream<char, ::std::char_traits<char> > *, ::std::string)")},
  {}
};

// KwsIndexFstPrinter __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// KwsIndexFstPrinter __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// KwsIndexFstPrinter __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_printer.KwsIndexFstPrinter",       // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapTropicalWeightTpl_float_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_FstPrinter__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >"));
      if (!PyErr_Occurred()) {
        ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = static_cast<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyKwsIndexFstPrinter


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyStdFstPrinter::wrapper_Type) < 0) return false;
  Py_INCREF(&pyStdFstPrinter::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyLogFstPrinter::wrapper_Type) < 0) return false;
  Py_INCREF(&pyLogFstPrinter::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyLatticeFstPrinter::wrapper_Type) < 0) return false;
  Py_INCREF(&pyLatticeFstPrinter::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyCompactLatticeFstPrinter::wrapper_Type) < 0) return false;
  Py_INCREF(&pyCompactLatticeFstPrinter::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyKwsIndexFstPrinter::wrapper_Type) < 0) return false;
  Py_INCREF(&pyKwsIndexFstPrinter::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_printer",  // module name
  "CLIF-generated module for fst/script/print-impl.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_lattice_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_symbol_table")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_fst")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "StdFstPrinter", reinterpret_cast<PyObject*>(&pyStdFstPrinter::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "LogFstPrinter", reinterpret_cast<PyObject*>(&pyLogFstPrinter::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "LatticeFstPrinter", reinterpret_cast<PyObject*>(&pyLatticeFstPrinter::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "CompactLatticeFstPrinter", reinterpret_cast<PyObject*>(&pyCompactLatticeFstPrinter::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "KwsIndexFstPrinter", reinterpret_cast<PyObject*>(&pyKwsIndexFstPrinter::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __printer_clifwrap

namespace fst {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// CompactLatticeFstPrinter to/from ::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* cpp = __printer_clifwrap::pyCompactLatticeFstPrinter::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>* c) {
  assert(c != nullptr);
  ::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* cpp = __printer_clifwrap::pyCompactLatticeFstPrinter::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__printer_clifwrap::pyCompactLatticeFstPrinter::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>* c) {
  assert(c != nullptr);
  ::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* cpp = __printer_clifwrap::pyCompactLatticeFstPrinter::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__printer_clifwrap::pyCompactLatticeFstPrinter::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert CompactLatticeFstPrinter instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__printer_clifwrap::pyCompactLatticeFstPrinter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__printer_clifwrap::pyCompactLatticeFstPrinter::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__printer_clifwrap::pyCompactLatticeFstPrinter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__printer_clifwrap::pyCompactLatticeFstPrinter::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__printer_clifwrap::pyCompactLatticeFstPrinter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__printer_clifwrap::pyCompactLatticeFstPrinter::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstPrinter< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>(std::move(c));
  return py;
}

// KwsIndexFstPrinter to/from ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* cpp = __printer_clifwrap::pyKwsIndexFstPrinter::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>* c) {
  assert(c != nullptr);
  ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* cpp = __printer_clifwrap::pyKwsIndexFstPrinter::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__printer_clifwrap::pyKwsIndexFstPrinter::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>* c) {
  assert(c != nullptr);
  ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* cpp = __printer_clifwrap::pyKwsIndexFstPrinter::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__printer_clifwrap::pyKwsIndexFstPrinter::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert KwsIndexFstPrinter instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__printer_clifwrap::pyKwsIndexFstPrinter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__printer_clifwrap::pyKwsIndexFstPrinter::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__printer_clifwrap::pyKwsIndexFstPrinter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__printer_clifwrap::pyKwsIndexFstPrinter::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__printer_clifwrap::pyKwsIndexFstPrinter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__printer_clifwrap::pyKwsIndexFstPrinter::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>(std::move(c));
  return py;
}

// LatticeFstPrinter to/from ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* cpp = __printer_clifwrap::pyLatticeFstPrinter::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* cpp = __printer_clifwrap::pyLatticeFstPrinter::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__printer_clifwrap::pyLatticeFstPrinter::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* cpp = __printer_clifwrap::pyLatticeFstPrinter::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__printer_clifwrap::pyLatticeFstPrinter::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert LatticeFstPrinter instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__printer_clifwrap::pyLatticeFstPrinter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__printer_clifwrap::pyLatticeFstPrinter::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__printer_clifwrap::pyLatticeFstPrinter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__printer_clifwrap::pyLatticeFstPrinter::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__printer_clifwrap::pyLatticeFstPrinter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__printer_clifwrap::pyLatticeFstPrinter::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>(std::move(c));
  return py;
}

// LogFstPrinter to/from ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* cpp = __printer_clifwrap::pyLogFstPrinter::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* cpp = __printer_clifwrap::pyLogFstPrinter::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__printer_clifwrap::pyLogFstPrinter::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* cpp = __printer_clifwrap::pyLogFstPrinter::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__printer_clifwrap::pyLogFstPrinter::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert LogFstPrinter instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__printer_clifwrap::pyLogFstPrinter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__printer_clifwrap::pyLogFstPrinter::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__printer_clifwrap::pyLogFstPrinter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__printer_clifwrap::pyLogFstPrinter::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__printer_clifwrap::pyLogFstPrinter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__printer_clifwrap::pyLogFstPrinter::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstPrinter< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>(std::move(c));
  return py;
}

// StdFstPrinter to/from ::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* cpp = __printer_clifwrap::pyStdFstPrinter::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* cpp = __printer_clifwrap::pyStdFstPrinter::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__printer_clifwrap::pyStdFstPrinter::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* cpp = __printer_clifwrap::pyStdFstPrinter::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__printer_clifwrap::pyStdFstPrinter::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert StdFstPrinter instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__printer_clifwrap::pyStdFstPrinter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__printer_clifwrap::pyStdFstPrinter::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__printer_clifwrap::pyStdFstPrinter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__printer_clifwrap::pyStdFstPrinter::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__printer_clifwrap::pyStdFstPrinter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__printer_clifwrap::pyStdFstPrinter::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstPrinter< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>(std::move(c));
  return py;
}

}  // namespace fst
