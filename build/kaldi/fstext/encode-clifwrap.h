//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/fstext/encode.clif

#include <memory>
#include "clif/python/optional.h"
#include "fst/encode.h"
#include "clif/python/postconv.h"

namespace fst {
using namespace ::clif;

// CLIF use `::fst::EncodeMapper< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >` as CompactLatticeEncodeMapper
bool Clif_PyObjAs(PyObject* input, ::fst::EncodeMapper< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::EncodeMapper< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::EncodeMapper< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>* output);
PyObject* Clif_PyObjFrom(::fst::EncodeMapper< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::EncodeMapper< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::EncodeMapper< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::EncodeMapper< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::EncodeMapper< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >&, py::PostConv) = delete;
// CLIF use `::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >` as KwsIndexEncodeMapper
bool Clif_PyObjAs(PyObject* input, ::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>* output);
PyObject* Clif_PyObjFrom(::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >&, py::PostConv) = delete;
// CLIF use `::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >` as LatticeEncodeMapper
bool Clif_PyObjAs(PyObject* input, ::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>* output);
PyObject* Clif_PyObjFrom(::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >&, py::PostConv) = delete;
// CLIF use `::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >` as LogEncodeMapper
bool Clif_PyObjAs(PyObject* input, ::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>* output);
PyObject* Clif_PyObjFrom(::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::EncodeMapper< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >&, py::PostConv) = delete;
// CLIF use `::fst::EncodeMapper< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >` as StdEncodeMapper
bool Clif_PyObjAs(PyObject* input, ::fst::EncodeMapper< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::EncodeMapper< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::EncodeMapper< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* output);
PyObject* Clif_PyObjFrom(::fst::EncodeMapper< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::EncodeMapper< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::EncodeMapper< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::EncodeMapper< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::EncodeMapper< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >&, py::PostConv) = delete;

}  // namespace fst

namespace fst { namespace internal {
using namespace ::clif;

// CLIF use `::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >` as CompactLatticeEncodeTable
bool Clif_PyObjAs(PyObject* input, ::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>* output);
PyObject* Clif_PyObjFrom(::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >&, py::PostConv) = delete;
// CLIF use `::fst::internal::EncodeTable<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>, int> > >::Tuple` as CompactLatticeEncodeTable.Tuple
bool Clif_PyObjAs(PyObject* input, ::fst::internal::EncodeTable<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>, int> > >::Tuple** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::internal::EncodeTable<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>, int> > >::Tuple>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::internal::EncodeTable<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>, int> > >::Tuple>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::internal::EncodeTable<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>, int> > >::Tuple* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::internal::EncodeTable<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>, int> > >::Tuple>* output);
PyObject* Clif_PyObjFrom(::fst::internal::EncodeTable<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>, int> > >::Tuple*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::internal::EncodeTable<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>, int> > >::Tuple>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::internal::EncodeTable<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>, int> > >::Tuple>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::internal::EncodeTable<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>, int> > >::Tuple&, py::PostConv);
// CLIF use `::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >` as KwsIndexEncodeTable
bool Clif_PyObjAs(PyObject* input, ::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>* output);
PyObject* Clif_PyObjFrom(::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >&, py::PostConv) = delete;
// CLIF use `::fst::internal::EncodeTable<ArcTpl<LexicographicWeight<TropicalWeightTpl<float>, LexicographicWeight<TropicalWeightTpl<float>, TropicalWeightTpl<float> > > > >::Tuple` as KwsIndexEncodeTable.Tuple
bool Clif_PyObjAs(PyObject* input, ::fst::internal::EncodeTable<ArcTpl<LexicographicWeight<TropicalWeightTpl<float>, LexicographicWeight<TropicalWeightTpl<float>, TropicalWeightTpl<float> > > > >::Tuple** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::internal::EncodeTable<ArcTpl<LexicographicWeight<TropicalWeightTpl<float>, LexicographicWeight<TropicalWeightTpl<float>, TropicalWeightTpl<float> > > > >::Tuple>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::internal::EncodeTable<ArcTpl<LexicographicWeight<TropicalWeightTpl<float>, LexicographicWeight<TropicalWeightTpl<float>, TropicalWeightTpl<float> > > > >::Tuple>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::internal::EncodeTable<ArcTpl<LexicographicWeight<TropicalWeightTpl<float>, LexicographicWeight<TropicalWeightTpl<float>, TropicalWeightTpl<float> > > > >::Tuple* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::internal::EncodeTable<ArcTpl<LexicographicWeight<TropicalWeightTpl<float>, LexicographicWeight<TropicalWeightTpl<float>, TropicalWeightTpl<float> > > > >::Tuple>* output);
PyObject* Clif_PyObjFrom(::fst::internal::EncodeTable<ArcTpl<LexicographicWeight<TropicalWeightTpl<float>, LexicographicWeight<TropicalWeightTpl<float>, TropicalWeightTpl<float> > > > >::Tuple*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::internal::EncodeTable<ArcTpl<LexicographicWeight<TropicalWeightTpl<float>, LexicographicWeight<TropicalWeightTpl<float>, TropicalWeightTpl<float> > > > >::Tuple>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::internal::EncodeTable<ArcTpl<LexicographicWeight<TropicalWeightTpl<float>, LexicographicWeight<TropicalWeightTpl<float>, TropicalWeightTpl<float> > > > >::Tuple>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::internal::EncodeTable<ArcTpl<LexicographicWeight<TropicalWeightTpl<float>, LexicographicWeight<TropicalWeightTpl<float>, TropicalWeightTpl<float> > > > >::Tuple&, py::PostConv);
// CLIF use `::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >` as LatticeEncodeTable
bool Clif_PyObjAs(PyObject* input, ::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>* output);
PyObject* Clif_PyObjFrom(::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >&, py::PostConv) = delete;
// CLIF use `::fst::internal::EncodeTable<ArcTpl<LatticeWeightTpl<float> > >::Tuple` as LatticeEncodeTable.Tuple
bool Clif_PyObjAs(PyObject* input, ::fst::internal::EncodeTable<ArcTpl<LatticeWeightTpl<float> > >::Tuple** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::internal::EncodeTable<ArcTpl<LatticeWeightTpl<float> > >::Tuple>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::internal::EncodeTable<ArcTpl<LatticeWeightTpl<float> > >::Tuple>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::internal::EncodeTable<ArcTpl<LatticeWeightTpl<float> > >::Tuple* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::internal::EncodeTable<ArcTpl<LatticeWeightTpl<float> > >::Tuple>* output);
PyObject* Clif_PyObjFrom(::fst::internal::EncodeTable<ArcTpl<LatticeWeightTpl<float> > >::Tuple*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::internal::EncodeTable<ArcTpl<LatticeWeightTpl<float> > >::Tuple>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::internal::EncodeTable<ArcTpl<LatticeWeightTpl<float> > >::Tuple>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::internal::EncodeTable<ArcTpl<LatticeWeightTpl<float> > >::Tuple&, py::PostConv);
// CLIF use `::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >` as LogEncodeTable
bool Clif_PyObjAs(PyObject* input, ::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>* output);
PyObject* Clif_PyObjFrom(::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >&, py::PostConv) = delete;
// CLIF use `::fst::internal::EncodeTable<ArcTpl<LogWeightTpl<float> > >::Tuple` as LogEncodeTable.Tuple
bool Clif_PyObjAs(PyObject* input, ::fst::internal::EncodeTable<ArcTpl<LogWeightTpl<float> > >::Tuple** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::internal::EncodeTable<ArcTpl<LogWeightTpl<float> > >::Tuple>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::internal::EncodeTable<ArcTpl<LogWeightTpl<float> > >::Tuple>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::internal::EncodeTable<ArcTpl<LogWeightTpl<float> > >::Tuple* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::internal::EncodeTable<ArcTpl<LogWeightTpl<float> > >::Tuple>* output);
PyObject* Clif_PyObjFrom(::fst::internal::EncodeTable<ArcTpl<LogWeightTpl<float> > >::Tuple*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::internal::EncodeTable<ArcTpl<LogWeightTpl<float> > >::Tuple>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::internal::EncodeTable<ArcTpl<LogWeightTpl<float> > >::Tuple>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::internal::EncodeTable<ArcTpl<LogWeightTpl<float> > >::Tuple&, py::PostConv);
// CLIF use `::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >` as StdEncodeTable
bool Clif_PyObjAs(PyObject* input, ::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* output);
PyObject* Clif_PyObjFrom(::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::internal::EncodeTable< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >&, py::PostConv) = delete;
// CLIF use `::fst::internal::EncodeTable<ArcTpl<TropicalWeightTpl<float> > >::Tuple` as StdEncodeTable.Tuple
bool Clif_PyObjAs(PyObject* input, ::fst::internal::EncodeTable<ArcTpl<TropicalWeightTpl<float> > >::Tuple** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::internal::EncodeTable<ArcTpl<TropicalWeightTpl<float> > >::Tuple>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::internal::EncodeTable<ArcTpl<TropicalWeightTpl<float> > >::Tuple>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::internal::EncodeTable<ArcTpl<TropicalWeightTpl<float> > >::Tuple* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::internal::EncodeTable<ArcTpl<TropicalWeightTpl<float> > >::Tuple>* output);
PyObject* Clif_PyObjFrom(::fst::internal::EncodeTable<ArcTpl<TropicalWeightTpl<float> > >::Tuple*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::internal::EncodeTable<ArcTpl<TropicalWeightTpl<float> > >::Tuple>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::internal::EncodeTable<ArcTpl<TropicalWeightTpl<float> > >::Tuple>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::internal::EncodeTable<ArcTpl<TropicalWeightTpl<float> > >::Tuple&, py::PostConv);

} }  // namespace fst::internal

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_encode")) Py_DECREF(m);
// CLIF init_module else goto err;
