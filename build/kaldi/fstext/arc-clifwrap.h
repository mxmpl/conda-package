//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/fstext/arc.clif

#include <memory>
#include "clif/python/optional.h"
#include "fst/arc.h"
#include "clif/python/postconv.h"

namespace fst {
using namespace ::clif;

// CLIF use `::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >` as CompactLatticeArc
bool Clif_PyObjAs(PyObject* input, ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >>* output);
PyObject* Clif_PyObjFrom(::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >&, py::PostConv);
// CLIF use `::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >` as KwsIndexArc
bool Clif_PyObjAs(PyObject* input, ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >>* output);
PyObject* Clif_PyObjFrom(::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >&, py::PostConv);
// CLIF use `::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >` as LatticeArc
bool Clif_PyObjAs(PyObject* input, ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >>* output);
PyObject* Clif_PyObjFrom(::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >&, py::PostConv);
// CLIF use `::fst::ArcTpl< ::fst::LogWeightTpl<float> >` as LogArc
bool Clif_PyObjAs(PyObject* input, ::fst::ArcTpl< ::fst::LogWeightTpl<float> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::ArcTpl< ::fst::LogWeightTpl<float> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::ArcTpl< ::fst::LogWeightTpl<float> >>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::ArcTpl< ::fst::LogWeightTpl<float> >* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::ArcTpl< ::fst::LogWeightTpl<float> >>* output);
PyObject* Clif_PyObjFrom(::fst::ArcTpl< ::fst::LogWeightTpl<float> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ArcTpl< ::fst::LogWeightTpl<float> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ArcTpl< ::fst::LogWeightTpl<float> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::ArcTpl< ::fst::LogWeightTpl<float> >&, py::PostConv);
// CLIF use `::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >` as StdArc
bool Clif_PyObjAs(PyObject* input, ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >>* output);
PyObject* Clif_PyObjFrom(::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >&, py::PostConv);

}  // namespace fst

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_arc")) Py_DECREF(m);
// CLIF init_module else goto err;
