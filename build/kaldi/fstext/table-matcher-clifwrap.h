//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/fstext/table-matcher.clif

#include <memory>
#include "clif/python/optional.h"
#include "fstext/table-matcher.h"
#include "clif/python/postconv.h"

namespace fst {
using namespace ::clif;

// CLIF use `::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >` as TableComposeCache
bool Clif_PyObjAs(PyObject* input, ::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>* output);
PyObject* Clif_PyObjFrom(::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >&, py::PostConv);
// CLIF use `::fst::TableComposeOptions` as TableComposeOptions
bool Clif_PyObjAs(PyObject* input, ::fst::TableComposeOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::TableComposeOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::TableComposeOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::TableComposeOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::TableComposeOptions>* output);
PyObject* Clif_PyObjFrom(::fst::TableComposeOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::TableComposeOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::TableComposeOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::TableComposeOptions&, py::PostConv);
// CLIF use `::fst::TableMatcherOptions` as TableMatcherOptions
bool Clif_PyObjAs(PyObject* input, ::fst::TableMatcherOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::TableMatcherOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::TableMatcherOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::TableMatcherOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::TableMatcherOptions>* output);
PyObject* Clif_PyObjFrom(::fst::TableMatcherOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::TableMatcherOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::TableMatcherOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::TableMatcherOptions&, py::PostConv);

}  // namespace fst

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_table_matcher")) Py_DECREF(m);
// CLIF init_module else goto err;
