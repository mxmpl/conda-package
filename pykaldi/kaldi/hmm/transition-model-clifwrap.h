//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/hmm/transition-model.clif

#include <memory>
#include "clif/python/optional.h"
#include "hmm/transition-model.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::MapTransitionUpdateConfig` as MapTransitionUpdateConfig
bool Clif_PyObjAs(PyObject* input, ::kaldi::MapTransitionUpdateConfig** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::MapTransitionUpdateConfig>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::MapTransitionUpdateConfig>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::MapTransitionUpdateConfig* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::MapTransitionUpdateConfig>* output);
PyObject* Clif_PyObjFrom(::kaldi::MapTransitionUpdateConfig*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::MapTransitionUpdateConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::MapTransitionUpdateConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::MapTransitionUpdateConfig&, py::PostConv);
// CLIF use `::kaldi::MleTransitionUpdateConfig` as MleTransitionUpdateConfig
bool Clif_PyObjAs(PyObject* input, ::kaldi::MleTransitionUpdateConfig** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::MleTransitionUpdateConfig>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::MleTransitionUpdateConfig>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::MleTransitionUpdateConfig* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::MleTransitionUpdateConfig>* output);
PyObject* Clif_PyObjFrom(::kaldi::MleTransitionUpdateConfig*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::MleTransitionUpdateConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::MleTransitionUpdateConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::MleTransitionUpdateConfig&, py::PostConv);
// CLIF use `::kaldi::TransitionModel` as TransitionModel
bool Clif_PyObjAs(PyObject* input, ::kaldi::TransitionModel** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TransitionModel>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TransitionModel>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::TransitionModel* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::TransitionModel>* output);
PyObject* Clif_PyObjFrom(::kaldi::TransitionModel*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TransitionModel>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TransitionModel>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TransitionModel&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_transition_model")) Py_DECREF(m);
// CLIF init_module else goto err;
