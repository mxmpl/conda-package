//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/hmm/hmm-topology.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "hmm-topology-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __hmm__topology_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyHmmTopology {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::HmmTopology> cpp;
};
static ::kaldi::HmmTopology* ThisPtr(PyObject*);

namespace pyHmmState {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::HmmTopology::HmmState> cpp;
};
static ::kaldi::HmmTopology::HmmState* ThisPtr(PyObject*);

static PyObject* get_forward_pdf_class(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->forward_pdf_class, {});
}

static int set_forward_pdf_class(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the forward_pdf_class attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->forward_pdf_class)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for forward_pdf_class:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_self_loop_pdf_class(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->self_loop_pdf_class, {});
}

static int set_self_loop_pdf_class(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the self_loop_pdf_class attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->self_loop_pdf_class)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for self_loop_pdf_class:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_transitions(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->transitions, {});
}

static int set_transitions(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the transitions attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->transitions)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for transitions:list<tuple<int, float>>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// @classmethod with_pdf(pdf_class:int) -> HmmState
static PyObject* wrapHmmState_as_with_pdf(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("pdf_class"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:with_pdf", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("with_pdf", names[0], "int", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::HmmTopology::HmmState> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::HmmTopology::HmmState>(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod with_forward_and_self_pdf(forward_pdf_class:int, self_loop_pdf_class:int) -> HmmState
static PyObject* wrapHmmState_as_with_forward_and_self_pdf(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("forward_pdf_class"),
      C("self_loop_pdf_class"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:with_forward_and_self_pdf", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("with_forward_and_self_pdf", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("with_forward_and_self_pdf", names[1], "int", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::HmmTopology::HmmState> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::HmmTopology::HmmState>(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __eq__(other:HmmState) -> bool
static PyObject* wrap__eq__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__eq__", names, &a[0])) return nullptr;
  ::kaldi::HmmTopology::HmmState* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__eq__", names[0], "::kaldi::HmmTopology::HmmState", a[0]);
  // Call actual C++ method.
  ::kaldi::HmmTopology::HmmState* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->operator==(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyGetSetDef Properties[] = {
  {C("forward_pdf_class"), get_forward_pdf_class, set_forward_pdf_class, C("C++ ::int32 HmmTopology::HmmState.forward_pdf_class")},
  {C("self_loop_pdf_class"), get_self_loop_pdf_class, set_self_loop_pdf_class, C("C++ ::int32 HmmTopology::HmmState.self_loop_pdf_class")},
  {C("transitions"), get_transitions, set_transitions, C("C++ ::std::vector< ::std::pair< ::int32, ::kaldi::BaseFloat> > HmmTopology::HmmState.transitions")},
  {}
};

PyObject* slot_richcmp(PyObject* self, PyObject* other, int op) {
  switch (op) {
    case Py_EQ: return slot::adapter<wrap__eq__>(self, other);
    default: Py_RETURN_NOTIMPLEMENTED;
  }
}

static PyMethodDef Methods[] = {
  {C("with_pdf"), (PyCFunction)wrapHmmState_as_with_pdf, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("with_pdf(pdf_class:int) -> HmmState\n  Calls C++ function\n  std::unique_ptr<::kaldi::HmmTopology::HmmState> ::kaldi::HmmTopology::HmmState::HmmState(int)")},
  {C("with_forward_and_self_pdf"), (PyCFunction)wrapHmmState_as_with_forward_and_self_pdf, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("with_forward_and_self_pdf(forward_pdf_class:int, self_loop_pdf_class:int) -> HmmState\n  Calls C++ function\n  std::unique_ptr<::kaldi::HmmTopology::HmmState> ::kaldi::HmmTopology::HmmState::HmmState(int, int)")},
  {}
};

// HmmState __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// HmmState __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// HmmState __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_hmm_topology.HmmTopology.HmmState", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::HmmTopology::HmmState", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  slot_richcmp,                        // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "HmmState takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::HmmTopology::HmmState>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::HmmTopology::HmmState* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_HmmTopology_HmmState"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::HmmTopology::HmmState"));
      if (!PyErr_Occurred()) {
        ::kaldi::HmmTopology::HmmState* c = static_cast<::kaldi::HmmTopology::HmmState*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::HmmTopology::HmmState*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyHmmState

// read(is:istream, binary:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::HmmTopology* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::HmmTopology* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// check()
static PyObject* wrapCheck_as_check(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::HmmTopology* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Check();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// is_hmm() -> bool
static PyObject* wrapIsHmm_as_is_hmm(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::HmmTopology* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsHmm();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// topology_for_phone(phone:int) -> list<HmmState>
static PyObject* wrapTopologyForPhone_as_topology_for_phone(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("phone"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:topology_for_phone", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("topology_for_phone", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::HmmTopology* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::HmmTopology::TopologyEntry ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->TopologyForPhone(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_pdf_classes(phone:int) -> int
static PyObject* wrapNumPdfClasses_as_num_pdf_classes(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("phone"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:num_pdf_classes", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("num_pdf_classes", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::HmmTopology* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumPdfClasses(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_phones() -> list<int>
static PyObject* wrapGetPhones_as_get_phones(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::HmmTopology* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::vector< ::int32> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetPhones();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_phone_to_num_pdf_classes() -> list<int>
static PyObject* wrapGetPhoneToNumPdfClasses_as_get_phone_to_num_pdf_classes(PyObject* self) {
  ::std::vector< ::int32> ret0{};
  // Call actual C++ method.
  ::kaldi::HmmTopology* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetPhoneToNumPdfClasses(&ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// min_length(phone:int) -> int
static PyObject* wrapMinLength_as_min_length(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("phone"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:min_length", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("min_length", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::HmmTopology* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->MinLength(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __eq__(other:HmmTopology) -> bool
static PyObject* wrap__eq__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__eq__", names, &a[0])) return nullptr;
  ::kaldi::HmmTopology* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__eq__", names[0], "::kaldi::HmmTopology", a[0]);
  // Call actual C++ method.
  ::kaldi::HmmTopology* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->operator==(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

PyObject* slot_richcmp(PyObject* self, PyObject* other, int op) {
  switch (op) {
    case Py_EQ: return slot::adapter<wrap__eq__>(self, other);
    default: Py_RETURN_NOTIMPLEMENTED;
  }
}

static PyMethodDef Methods[] = {
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool)\n  Calls C++ function\n  void ::kaldi::HmmTopology::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool)")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::HmmTopology::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("check"), (PyCFunction)wrapCheck_as_check, METH_NOARGS, C("check()\n  Calls C++ function\n  void ::kaldi::HmmTopology::Check()")},
  {C("is_hmm"), (PyCFunction)wrapIsHmm_as_is_hmm, METH_NOARGS, C("is_hmm() -> bool\n  Calls C++ function\n  bool ::kaldi::HmmTopology::IsHmm()")},
  {C("topology_for_phone"), (PyCFunction)wrapTopologyForPhone_as_topology_for_phone, METH_VARARGS | METH_KEYWORDS, C("topology_for_phone(phone:int) -> list<HmmState>\n  Calls C++ function\n  ::kaldi::HmmTopology::TopologyEntry ::kaldi::HmmTopology::TopologyForPhone(int)")},
  {C("num_pdf_classes"), (PyCFunction)wrapNumPdfClasses_as_num_pdf_classes, METH_VARARGS | METH_KEYWORDS, C("num_pdf_classes(phone:int) -> int\n  Calls C++ function\n  int ::kaldi::HmmTopology::NumPdfClasses(int)")},
  {C("get_phones"), (PyCFunction)wrapGetPhones_as_get_phones, METH_NOARGS, C("get_phones() -> list<int>\n  Calls C++ function\n  ::std::vector< ::int32> ::kaldi::HmmTopology::GetPhones()")},
  {C("get_phone_to_num_pdf_classes"), (PyCFunction)wrapGetPhoneToNumPdfClasses_as_get_phone_to_num_pdf_classes, METH_NOARGS, C("get_phone_to_num_pdf_classes() -> list<int>\n  Calls C++ function\n  void ::kaldi::HmmTopology::GetPhoneToNumPdfClasses(::std::vector< ::int32>*)")},
  {C("min_length"), (PyCFunction)wrapMinLength_as_min_length, METH_VARARGS | METH_KEYWORDS, C("min_length(phone:int) -> int\n  Calls C++ function\n  int ::kaldi::HmmTopology::MinLength(int)")},
  {}
};

// HmmTopology __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// HmmTopology __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// HmmTopology __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_hmm_topology.HmmTopology",         // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::HmmTopology", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  slot_richcmp,                        // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "HmmTopology takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::HmmTopology>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::HmmTopology* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_HmmTopology"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::HmmTopology"));
      if (!PyErr_Occurred()) {
        ::kaldi::HmmTopology* c = static_cast<::kaldi::HmmTopology*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::HmmTopology*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyHmmTopology


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyHmmTopology::pyHmmState::wrapper_Type) < 0) return false;
  Py_INCREF(&pyHmmTopology::pyHmmState::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyHmmTopology::wrapper_Type) < 0) return false;
  Py_INCREF(&pyHmmTopology::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_hmm_topology",  // module name
  "CLIF-generated module for hmm/hmm-topology.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyDict_SetItemString(pyHmmTopology::wrapper_Type.tp_dict, "HmmState", reinterpret_cast<PyObject*>(&pyHmmTopology::pyHmmState::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "NO_PDF", Clif_PyObjFrom(static_cast<::int32>(::kaldi::kNoPdf), {})) < 0) goto err;
  if (PyModule_AddObject(module, "HmmTopology", reinterpret_cast<PyObject*>(&pyHmmTopology::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __hmm__topology_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// HmmTopology to/from ::kaldi::HmmTopology conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::HmmTopology** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::HmmTopology* cpp = __hmm__topology_clifwrap::pyHmmTopology::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::HmmTopology>* c) {
  assert(c != nullptr);
  ::kaldi::HmmTopology* cpp = __hmm__topology_clifwrap::pyHmmTopology::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__hmm__topology_clifwrap::pyHmmTopology::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::HmmTopology>* c) {
  assert(c != nullptr);
  ::kaldi::HmmTopology* cpp = __hmm__topology_clifwrap::pyHmmTopology::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__hmm__topology_clifwrap::pyHmmTopology::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert HmmTopology instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::HmmTopology* c) {
  assert(c != nullptr);
  ::kaldi::HmmTopology* cpp = __hmm__topology_clifwrap::pyHmmTopology::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::HmmTopology>* c) {
  assert(c != nullptr);
  ::kaldi::HmmTopology* cpp = __hmm__topology_clifwrap::pyHmmTopology::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::HmmTopology* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__hmm__topology_clifwrap::pyHmmTopology::wrapper_Type, NULL, NULL);
  reinterpret_cast<__hmm__topology_clifwrap::pyHmmTopology::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::HmmTopology>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::HmmTopology> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__hmm__topology_clifwrap::pyHmmTopology::wrapper_Type, NULL, NULL);
  reinterpret_cast<__hmm__topology_clifwrap::pyHmmTopology::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::HmmTopology>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::HmmTopology> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__hmm__topology_clifwrap::pyHmmTopology::wrapper_Type, NULL, NULL);
  reinterpret_cast<__hmm__topology_clifwrap::pyHmmTopology::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::HmmTopology>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::HmmTopology& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__hmm__topology_clifwrap::pyHmmTopology::wrapper_Type, NULL, NULL);
  reinterpret_cast<__hmm__topology_clifwrap::pyHmmTopology::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::HmmTopology>(c);
  return py;
}

// HmmTopology.HmmState to/from ::kaldi::HmmTopology::HmmState conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::HmmTopology::HmmState** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::HmmTopology::HmmState* cpp = __hmm__topology_clifwrap::pyHmmTopology::pyHmmState::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::HmmTopology::HmmState>* c) {
  assert(c != nullptr);
  ::kaldi::HmmTopology::HmmState* cpp = __hmm__topology_clifwrap::pyHmmTopology::pyHmmState::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__hmm__topology_clifwrap::pyHmmTopology::pyHmmState::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::HmmTopology::HmmState>* c) {
  assert(c != nullptr);
  ::kaldi::HmmTopology::HmmState* cpp = __hmm__topology_clifwrap::pyHmmTopology::pyHmmState::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__hmm__topology_clifwrap::pyHmmTopology::pyHmmState::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert HmmTopology.HmmState instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::HmmTopology::HmmState* c) {
  assert(c != nullptr);
  ::kaldi::HmmTopology::HmmState* cpp = __hmm__topology_clifwrap::pyHmmTopology::pyHmmState::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::HmmTopology::HmmState>* c) {
  assert(c != nullptr);
  ::kaldi::HmmTopology::HmmState* cpp = __hmm__topology_clifwrap::pyHmmTopology::pyHmmState::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::HmmTopology::HmmState* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__hmm__topology_clifwrap::pyHmmTopology::pyHmmState::wrapper_Type, NULL, NULL);
  reinterpret_cast<__hmm__topology_clifwrap::pyHmmTopology::pyHmmState::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::HmmTopology::HmmState>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::HmmTopology::HmmState> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__hmm__topology_clifwrap::pyHmmTopology::pyHmmState::wrapper_Type, NULL, NULL);
  reinterpret_cast<__hmm__topology_clifwrap::pyHmmTopology::pyHmmState::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::HmmTopology::HmmState>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::HmmTopology::HmmState> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__hmm__topology_clifwrap::pyHmmTopology::pyHmmState::wrapper_Type, NULL, NULL);
  reinterpret_cast<__hmm__topology_clifwrap::pyHmmTopology::pyHmmState::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::HmmTopology::HmmState>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::HmmTopology::HmmState& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__hmm__topology_clifwrap::pyHmmTopology::pyHmmState::wrapper_Type, NULL, NULL);
  reinterpret_cast<__hmm__topology_clifwrap::pyHmmTopology::pyHmmState::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::HmmTopology::HmmState>(c);
  return py;
}

}  // namespace kaldi
