//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/rnnlm/sampling-lm.clif

#include <memory>
#include "clif/python/optional.h"
#include "rnnlm/sampling-lm.h"
#include "clif/python/postconv.h"

namespace kaldi { namespace rnnlm {
using namespace ::clif;

// CLIF use `::kaldi::rnnlm::SamplingLm` as SamplingLm
bool Clif_PyObjAs(PyObject* input, ::kaldi::rnnlm::SamplingLm** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::rnnlm::SamplingLm>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::rnnlm::SamplingLm>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::rnnlm::SamplingLm* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::rnnlm::SamplingLm>* output);
PyObject* Clif_PyObjFrom(::kaldi::rnnlm::SamplingLm*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::rnnlm::SamplingLm>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::rnnlm::SamplingLm>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::rnnlm::SamplingLm&, py::PostConv);

} }  // namespace kaldi::rnnlm

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_sampling_lm")) Py_DECREF(m);
// CLIF init_module else goto err;
