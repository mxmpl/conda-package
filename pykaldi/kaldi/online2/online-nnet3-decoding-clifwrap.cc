//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/online2/online-nnet3-decoding.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "decoder/lattice-faster-decoder-clifwrap.h"
#include "decoder/lattice-faster-online-decoder-clifwrap.h"
#include "hmm/transition-model-clifwrap.h"
#include "nnet3/decodable-simple-looped-clifwrap.h"
#include "fstext/fst-clifwrap.h"
#include "fstext/vector-fst-clifwrap.h"
#include "online2/online-nnet2-feature-pipeline-clifwrap.h"
#include "online2/online-endpoint-clifwrap.h"
#include "online-nnet3-decoding-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __online__nnet3__decoding_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pySingleUtteranceNnet3Decoder {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::SingleUtteranceNnet3Decoder> cpp;
};
static ::kaldi::SingleUtteranceNnet3Decoder* ThisPtr(PyObject*);

// __init__(decoder_opts:LatticeFasterDecoderOptions, trans_model:TransitionModel, info:DecodableNnetSimpleLoopedInfo, fst:StdFst, features:OnlineNnet2FeaturePipeline)
static PyObject* wrapSingleUtteranceNnet3Decoder_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[5];
  char* names[] = {
      C("decoder_opts"),
      C("trans_model"),
      C("info"),
      C("fst"),
      C("features"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOO:__init__", names, &a[0], &a[1], &a[2], &a[3], &a[4])) return nullptr;
  ::kaldi::LatticeFasterDecoderConfig* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::LatticeFasterDecoderConfig", a[0]);
  ::kaldi::TransitionModel* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::TransitionModel", a[1]);
  ::kaldi::nnet3::DecodableNnetSimpleLoopedInfo* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::kaldi::nnet3::DecodableNnetSimpleLoopedInfo", a[2]);
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >", a[3]);
  ::kaldi::OnlineNnet2FeaturePipeline * arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("__init__", names[4], "::kaldi::OnlineNnet2FeaturePipeline *", a[4]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::SingleUtteranceNnet3Decoder>(*arg1, *arg2, *arg3, *arg4, arg5);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// advance_decoding()
static PyObject* wrapAdvanceDecoding_as_advance_decoding(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SingleUtteranceNnet3Decoder* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AdvanceDecoding();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// num_frames_decoded() -> int
static PyObject* wrapNumFramesDecoded_as_num_frames_decoded(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SingleUtteranceNnet3Decoder* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFramesDecoded();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_lattice(end_of_utterance:bool) -> CompactLatticeVectorFst
static PyObject* wrapGetLattice_as_get_lattice(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("end_of_utterance"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_lattice", names, &a[0])) return nullptr;
  bool arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_lattice", names[0], "bool", a[0]);
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > > ret0{};
  // Call actual C++ method.
  ::kaldi::SingleUtteranceNnet3Decoder* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetLattice(std::move(arg1), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_best_path(end_of_utterance:bool) -> LatticeVectorFst
static PyObject* wrapGetBestPath_as_get_best_path(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("end_of_utterance"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_best_path", names, &a[0])) return nullptr;
  bool arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_best_path", names[0], "bool", a[0]);
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > > > ret0{};
  // Call actual C++ method.
  ::kaldi::SingleUtteranceNnet3Decoder* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetBestPath(std::move(arg1), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// endpoint_detected(config:OnlineEndpointConfig) -> bool
static PyObject* wrapEndpointDetected_as_endpoint_detected(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("config"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:endpoint_detected", names, &a[0])) return nullptr;
  ::kaldi::OnlineEndpointConfig* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("endpoint_detected", names[0], "::kaldi::OnlineEndpointConfig", a[0]);
  // Call actual C++ method.
  ::kaldi::SingleUtteranceNnet3Decoder* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->EndpointDetected(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapSingleUtteranceNnet3Decoder_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(decoder_opts:LatticeFasterDecoderOptions, trans_model:TransitionModel, info:DecodableNnetSimpleLoopedInfo, fst:StdFst, features:OnlineNnet2FeaturePipeline)\n  Calls C++ function\n  void ::kaldi::SingleUtteranceNnet3Decoder::SingleUtteranceNnet3Decoder(::kaldi::LatticeFasterDecoderConfig, ::kaldi::TransitionModel, ::kaldi::nnet3::DecodableNnetSimpleLoopedInfo, ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >, ::kaldi::OnlineNnet2FeaturePipeline *)")},
  {C("advance_decoding"), (PyCFunction)wrapAdvanceDecoding_as_advance_decoding, METH_NOARGS, C("advance_decoding()\n  Calls C++ function\n  void ::kaldi::SingleUtteranceNnet3Decoder::AdvanceDecoding()")},
  {C("num_frames_decoded"), (PyCFunction)wrapNumFramesDecoded_as_num_frames_decoded, METH_NOARGS, C("num_frames_decoded() -> int\n  Calls C++ function\n  int ::kaldi::SingleUtteranceNnet3Decoder::NumFramesDecoded()")},
  {C("get_lattice"), (PyCFunction)wrapGetLattice_as_get_lattice, METH_VARARGS | METH_KEYWORDS, C("get_lattice(end_of_utterance:bool) -> CompactLatticeVectorFst\n  Calls C++ function\n  void ::kaldi::SingleUtteranceNnet3Decoder::GetLattice(bool, ::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > >*)")},
  {C("get_best_path"), (PyCFunction)wrapGetBestPath_as_get_best_path, METH_VARARGS | METH_KEYWORDS, C("get_best_path(end_of_utterance:bool) -> LatticeVectorFst\n  Calls C++ function\n  void ::kaldi::SingleUtteranceNnet3Decoder::GetBestPath(bool, ::fst::VectorFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > > >*)")},
  {C("endpoint_detected"), (PyCFunction)wrapEndpointDetected_as_endpoint_detected, METH_VARARGS | METH_KEYWORDS, C("endpoint_detected(config:OnlineEndpointConfig) -> bool\n  Calls C++ function\n  bool ::kaldi::SingleUtteranceNnet3Decoder::EndpointDetected(::kaldi::OnlineEndpointConfig)")},
  {}
};

// SingleUtteranceNnet3Decoder __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// SingleUtteranceNnet3Decoder __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// SingleUtteranceNnet3Decoder __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_nnet3_decoding.SingleUtteranceNnet3Decoder", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::SingleUtteranceNnet3Decoder", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapSingleUtteranceNnet3Decoder_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::SingleUtteranceNnet3Decoder* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_SingleUtteranceNnet3Decoder"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::SingleUtteranceNnet3Decoder"));
      if (!PyErr_Occurred()) {
        ::kaldi::SingleUtteranceNnet3Decoder* c = static_cast<::kaldi::SingleUtteranceNnet3Decoder*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::SingleUtteranceNnet3Decoder*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pySingleUtteranceNnet3Decoder


// Initialize module

bool Ready() {
  if (PyType_Ready(&pySingleUtteranceNnet3Decoder::wrapper_Type) < 0) return false;
  Py_INCREF(&pySingleUtteranceNnet3Decoder::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_online_nnet3_decoding",  // module name
  "CLIF-generated module for online2/online-nnet3-decoding.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_lattice_faster_decoder")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_lattice_faster_online_decoder")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_transition_model")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_decodable_simple_looped")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_fst")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_vector_fst")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_online_nnet2_feature_pipeline")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_online_endpoint")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "SingleUtteranceNnet3Decoder", reinterpret_cast<PyObject*>(&pySingleUtteranceNnet3Decoder::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __online__nnet3__decoding_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// SingleUtteranceNnet3Decoder to/from ::kaldi::SingleUtteranceNnet3Decoder conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::SingleUtteranceNnet3Decoder** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::SingleUtteranceNnet3Decoder* cpp = __online__nnet3__decoding_clifwrap::pySingleUtteranceNnet3Decoder::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::SingleUtteranceNnet3Decoder>* c) {
  assert(c != nullptr);
  ::kaldi::SingleUtteranceNnet3Decoder* cpp = __online__nnet3__decoding_clifwrap::pySingleUtteranceNnet3Decoder::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__nnet3__decoding_clifwrap::pySingleUtteranceNnet3Decoder::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::SingleUtteranceNnet3Decoder>* c) {
  assert(c != nullptr);
  ::kaldi::SingleUtteranceNnet3Decoder* cpp = __online__nnet3__decoding_clifwrap::pySingleUtteranceNnet3Decoder::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__nnet3__decoding_clifwrap::pySingleUtteranceNnet3Decoder::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert SingleUtteranceNnet3Decoder instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::SingleUtteranceNnet3Decoder* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__nnet3__decoding_clifwrap::pySingleUtteranceNnet3Decoder::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__nnet3__decoding_clifwrap::pySingleUtteranceNnet3Decoder::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::SingleUtteranceNnet3Decoder>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SingleUtteranceNnet3Decoder> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__nnet3__decoding_clifwrap::pySingleUtteranceNnet3Decoder::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__nnet3__decoding_clifwrap::pySingleUtteranceNnet3Decoder::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::SingleUtteranceNnet3Decoder>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SingleUtteranceNnet3Decoder> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__nnet3__decoding_clifwrap::pySingleUtteranceNnet3Decoder::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__nnet3__decoding_clifwrap::pySingleUtteranceNnet3Decoder::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::SingleUtteranceNnet3Decoder>(std::move(c));
  return py;
}

}  // namespace kaldi
