//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/online2/online-ivector-feature.clif

#include <memory>
#include "clif/python/optional.h"
#include "online2/online-ivector-feature.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::OnlineIvectorExtractionConfig` as OnlineIvectorExtractionConfig
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineIvectorExtractionConfig** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineIvectorExtractionConfig>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineIvectorExtractionConfig>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineIvectorExtractionConfig* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::OnlineIvectorExtractionConfig>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineIvectorExtractionConfig*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineIvectorExtractionConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineIvectorExtractionConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineIvectorExtractionConfig&, py::PostConv);
// CLIF use `::kaldi::OnlineIvectorExtractorAdaptationState` as OnlineIvectorExtractorAdaptationState
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineIvectorExtractorAdaptationState** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineIvectorExtractorAdaptationState>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineIvectorExtractorAdaptationState>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineIvectorExtractorAdaptationState* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::OnlineIvectorExtractorAdaptationState>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineIvectorExtractorAdaptationState*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineIvectorExtractorAdaptationState>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineIvectorExtractorAdaptationState>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineIvectorExtractorAdaptationState&, py::PostConv);
// CLIF use `::kaldi::OnlineIvectorFeature` as OnlineIvectorFeature
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineIvectorFeature** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineIvectorFeature>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineIvectorFeature>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineIvectorFeature*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineIvectorFeature>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineIvectorFeature>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineIvectorFeature*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineIvectorFeature&, py::PostConv) = delete;
// CLIF use `::kaldi::OnlineSilenceWeighting` as OnlineSilenceWeighting
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineSilenceWeighting** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineSilenceWeighting>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineSilenceWeighting>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineSilenceWeighting*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineSilenceWeighting>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineSilenceWeighting>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineSilenceWeighting*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineSilenceWeighting&, py::PostConv) = delete;
// CLIF use `::kaldi::OnlineSilenceWeightingConfig` as OnlineSilenceWeightingConfig
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineSilenceWeightingConfig** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineSilenceWeightingConfig>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineSilenceWeightingConfig>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineSilenceWeightingConfig* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::OnlineSilenceWeightingConfig>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineSilenceWeightingConfig*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineSilenceWeightingConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineSilenceWeightingConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineSilenceWeightingConfig&, py::PostConv);
// CLIF use `::kaldi::OnlineIvectorExtractionInfo` as _OnlineIvectorExtractionInfo
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineIvectorExtractionInfo** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineIvectorExtractionInfo>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineIvectorExtractionInfo>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineIvectorExtractionInfo*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineIvectorExtractionInfo>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineIvectorExtractionInfo>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineIvectorExtractionInfo*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineIvectorExtractionInfo&, py::PostConv) = delete;

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_online_ivector_feature")) Py_DECREF(m);
// CLIF init_module else goto err;
