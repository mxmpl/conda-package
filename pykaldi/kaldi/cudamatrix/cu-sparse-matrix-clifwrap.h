//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/cudamatrix/cu-sparse-matrix.clif

#include <memory>
#include "clif/python/optional.h"
#include "cudamatrix/cu-sparse-matrix.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::CuSparseMatrix<float>` as CuSparseMatrix
bool Clif_PyObjAs(PyObject* input, ::kaldi::CuSparseMatrix<float>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::CuSparseMatrix<float>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::CuSparseMatrix<float>>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::CuSparseMatrix<float>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::CuSparseMatrix<float>>* output);
PyObject* Clif_PyObjFrom(::kaldi::CuSparseMatrix<float>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::CuSparseMatrix<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::CuSparseMatrix<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::CuSparseMatrix<float>&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_cu_sparse_matrix")) Py_DECREF(m);
// CLIF init_module else goto err;
