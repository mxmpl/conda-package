//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/chain/chain-supervision.clif

#include <memory>
#include "clif/python/optional.h"
#include "chain/chain-supervision.h"
#include "clif/python/postconv.h"

namespace kaldi { namespace chain {
using namespace ::clif;

// CLIF use `::kaldi::chain::ProtoSupervision` as ProtoSupervision
bool Clif_PyObjAs(PyObject* input, ::kaldi::chain::ProtoSupervision** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::chain::ProtoSupervision>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::chain::ProtoSupervision>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::chain::ProtoSupervision* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::chain::ProtoSupervision>* output);
PyObject* Clif_PyObjFrom(::kaldi::chain::ProtoSupervision*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::chain::ProtoSupervision>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::chain::ProtoSupervision>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::chain::ProtoSupervision&, py::PostConv);
// CLIF use `::kaldi::chain::Supervision` as Supervision
bool Clif_PyObjAs(PyObject* input, ::kaldi::chain::Supervision** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::chain::Supervision>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::chain::Supervision>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::chain::Supervision* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::chain::Supervision>* output);
PyObject* Clif_PyObjFrom(::kaldi::chain::Supervision*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::chain::Supervision>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::chain::Supervision>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::chain::Supervision&, py::PostConv);
// CLIF use `::kaldi::chain::SupervisionOptions` as SupervisionOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::chain::SupervisionOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::chain::SupervisionOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::chain::SupervisionOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::chain::SupervisionOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::chain::SupervisionOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::chain::SupervisionOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::chain::SupervisionOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::chain::SupervisionOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::chain::SupervisionOptions&, py::PostConv);
// CLIF use `::kaldi::chain::SupervisionSplitter` as SupervisionSplitter
bool Clif_PyObjAs(PyObject* input, ::kaldi::chain::SupervisionSplitter** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::chain::SupervisionSplitter>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::chain::SupervisionSplitter>* output);
PyObject* Clif_PyObjFrom(::kaldi::chain::SupervisionSplitter*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::chain::SupervisionSplitter>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::chain::SupervisionSplitter>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::chain::SupervisionSplitter*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::chain::SupervisionSplitter&, py::PostConv) = delete;
// CLIF use `::kaldi::chain::TimeEnforcerFst` as TimeEnforcerFst
bool Clif_PyObjAs(PyObject* input, ::kaldi::chain::TimeEnforcerFst** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::chain::TimeEnforcerFst>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::chain::TimeEnforcerFst>* output);
PyObject* Clif_PyObjFrom(::kaldi::chain::TimeEnforcerFst*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::chain::TimeEnforcerFst>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::chain::TimeEnforcerFst>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::chain::TimeEnforcerFst*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::chain::TimeEnforcerFst&, py::PostConv) = delete;

} }  // namespace kaldi::chain

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_chain_supervision")) Py_DECREF(m);
// CLIF init_module else goto err;
