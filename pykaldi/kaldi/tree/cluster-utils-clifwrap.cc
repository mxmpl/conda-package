//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/tree/cluster-utils.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "itf/clusterable-itf-clifwrap.h"
#include "cluster-utils-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __cluster__utils_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


// sum_clusterable_objf(vec:list<Clusterable>) -> float
static PyObject* wrapSumClusterableObjf_as_sum_clusterable_objf(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("vec"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:sum_clusterable_objf", names, &a[0])) return nullptr;
  ::std::vector< ::kaldi::Clusterable *> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("sum_clusterable_objf", names[0], "::std::vector< ::kaldi::Clusterable *>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::SumClusterableObjf(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// sum_clusterable_normalizer(vec:list<Clusterable>) -> float
static PyObject* wrapSumClusterableNormalizer_as_sum_clusterable_normalizer(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("vec"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:sum_clusterable_normalizer", names, &a[0])) return nullptr;
  ::std::vector< ::kaldi::Clusterable *> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("sum_clusterable_normalizer", names[0], "::std::vector< ::kaldi::Clusterable *>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::SumClusterableNormalizer(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// sum_clusterable(vec:list<Clusterable>) -> Clusterable
static PyObject* wrapSumClusterable_as_sum_clusterable(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("vec"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:sum_clusterable", names, &a[0])) return nullptr;
  ::std::vector< ::kaldi::Clusterable *> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("sum_clusterable", names[0], "::std::vector< ::kaldi::Clusterable *>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::Clusterable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::SumClusterable(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// add_to_clusters(stats:list<Clusterable>, assignments:list<int>) -> list<Clusterable>
static PyObject* wrapAddToClusters_as_add_to_clusters(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("stats"),
      C("assignments"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:add_to_clusters", names, &a[0], &a[1])) return nullptr;
  ::std::vector< ::kaldi::Clusterable *> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add_to_clusters", names[0], "::std::vector< ::kaldi::Clusterable *>", a[0]);
  ::std::vector< ::int32> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("add_to_clusters", names[1], "::std::vector< ::int32>", a[1]);
  ::std::vector< ::kaldi::Clusterable *> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::AddToClusters(std::move(arg1), std::move(arg2), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// add_to_clusters_optimized(stats:list<Clusterable>, assignments:list<int>, total:Clusterable) -> list<Clusterable>
static PyObject* wrapAddToClustersOptimized_as_add_to_clusters_optimized(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("stats"),
      C("assignments"),
      C("total"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:add_to_clusters_optimized", names, &a[0], &a[1], &a[2])) return nullptr;
  ::std::vector< ::kaldi::Clusterable *> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add_to_clusters_optimized", names[0], "::std::vector< ::kaldi::Clusterable *>", a[0]);
  ::std::vector< ::int32> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("add_to_clusters_optimized", names[1], "::std::vector< ::int32>", a[1]);
  ::kaldi::Clusterable* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("add_to_clusters_optimized", names[2], "::kaldi::Clusterable", a[2]);
  ::std::vector< ::kaldi::Clusterable *> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::AddToClustersOptimized(std::move(arg1), std::move(arg2), *arg3, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// cluster_bottom_up(points:list<Clusterable>, thresh:float, min_clust:int) -> (objf_change:float, clusters_out:list<Clusterable>, assignments_out:list<int>)
static PyObject* wrapClusterBottomUp_as_cluster_bottom_up(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("points"),
      C("thresh"),
      C("min_clust"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:cluster_bottom_up", names, &a[0], &a[1], &a[2])) return nullptr;
  ::std::vector< ::kaldi::Clusterable *> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("cluster_bottom_up", names[0], "::std::vector< ::kaldi::Clusterable *>", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("cluster_bottom_up", names[1], "float", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("cluster_bottom_up", names[2], "int", a[2]);
  ::std::vector< ::kaldi::Clusterable *> ret1{};
  ::std::vector< ::int32> ret2{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::ClusterBottomUp(std::move(arg1), std::move(arg2), std::move(arg3), &ret1, &ret2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(3);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  if ((p=Clif_PyObjFrom(std::move(ret2), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 2, p);
  return result_tuple;
}

// cluster_bottom_up_compartmentalized(points:list<list<Clusterable>>, thresh:float, min_clust:int) -> (objf_change:float, clusters_out:list<list<Clusterable>>, assignments_out:list<list<int>>)
static PyObject* wrapClusterBottomUpCompartmentalized_as_cluster_bottom_up_compartmentalized(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("points"),
      C("thresh"),
      C("min_clust"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:cluster_bottom_up_compartmentalized", names, &a[0], &a[1], &a[2])) return nullptr;
  ::std::vector< ::std::vector< ::kaldi::Clusterable *> > arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("cluster_bottom_up_compartmentalized", names[0], "::std::vector< ::std::vector< ::kaldi::Clusterable *> >", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("cluster_bottom_up_compartmentalized", names[1], "float", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("cluster_bottom_up_compartmentalized", names[2], "int", a[2]);
  ::std::vector< ::std::vector< ::kaldi::Clusterable *> > ret1{};
  ::std::vector< ::std::vector< ::int32> > ret2{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::ClusterBottomUpCompartmentalized(std::move(arg1), std::move(arg2), std::move(arg3), &ret1, &ret2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(3);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  if ((p=Clif_PyObjFrom(std::move(ret2), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 2, p);
  return result_tuple;
}

namespace pyRefineClustersOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::RefineClustersOptions> cpp;
};
static ::kaldi::RefineClustersOptions* ThisPtr(PyObject*);

static PyObject* get_num_iters(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->num_iters, {});
}

static int set_num_iters(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the num_iters attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->num_iters)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for num_iters:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_top_n(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->top_n, {});
}

static int set_top_n(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the top_n attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->top_n)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for top_n:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// @classmethod new(num_iters_in:int, top_n_in:int) -> RefineClustersOptions
static PyObject* wrapRefineClustersOptions_as_new(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("num_iters_in"),
      C("top_n_in"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:new", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("new", names[1], "int", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::RefineClustersOptions> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::RefineClustersOptions>(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::RefineClustersOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(is:istream, binary:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::RefineClustersOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("num_iters"), get_num_iters, set_num_iters, C("C++ ::int32 RefineClustersOptions.num_iters")},
  {C("top_n"), get_top_n, set_top_n, C("C++ ::int32 RefineClustersOptions.top_n")},
  {}
};

static PyMethodDef Methods[] = {
  {C("new"), (PyCFunction)wrapRefineClustersOptions_as_new, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new(num_iters_in:int, top_n_in:int) -> RefineClustersOptions\n  Calls C++ function\n  std::unique_ptr<::kaldi::RefineClustersOptions> ::kaldi::RefineClustersOptions::RefineClustersOptions(int, int)")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::RefineClustersOptions::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool)\n  Calls C++ function\n  void ::kaldi::RefineClustersOptions::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool)")},
  {}
};

// RefineClustersOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// RefineClustersOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// RefineClustersOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_cluster_utils.RefineClustersOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::RefineClustersOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "RefineClustersOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::RefineClustersOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::RefineClustersOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_RefineClustersOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::RefineClustersOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::RefineClustersOptions* c = static_cast<::kaldi::RefineClustersOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::RefineClustersOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyRefineClustersOptions

namespace pyClusterKMeansOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::ClusterKMeansOptions> cpp;
};
static ::kaldi::ClusterKMeansOptions* ThisPtr(PyObject*);

static PyObject* get_refine_cfg(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->refine_cfg), {});
}

static int set_refine_cfg(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the refine_cfg attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->refine_cfg)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for refine_cfg:RefineClustersOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_num_iters(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->num_iters, {});
}

static int set_num_iters(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the num_iters attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->num_iters)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for num_iters:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_num_tries(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->num_tries, {});
}

static int set_num_tries(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the num_tries attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->num_tries)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for num_tries:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_verbose(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->verbose, {});
}

static int set_verbose(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the verbose attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->verbose)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for verbose:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("refine_cfg"), get_refine_cfg, set_refine_cfg, C("C++ ::kaldi::RefineClustersOptions ClusterKMeansOptions.refine_cfg")},
  {C("num_iters"), get_num_iters, set_num_iters, C("C++ ::int32 ClusterKMeansOptions.num_iters")},
  {C("num_tries"), get_num_tries, set_num_tries, C("C++ ::int32 ClusterKMeansOptions.num_tries")},
  {C("verbose"), get_verbose, set_verbose, C("C++ bool ClusterKMeansOptions.verbose")},
  {}
};

// ClusterKMeansOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ClusterKMeansOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ClusterKMeansOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_cluster_utils.ClusterKMeansOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::ClusterKMeansOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  nullptr,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "ClusterKMeansOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::ClusterKMeansOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::ClusterKMeansOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_ClusterKMeansOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::ClusterKMeansOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::ClusterKMeansOptions* c = static_cast<::kaldi::ClusterKMeansOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::ClusterKMeansOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyClusterKMeansOptions

namespace pyTreeClusterOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::TreeClusterOptions> cpp;
};
static ::kaldi::TreeClusterOptions* ThisPtr(PyObject*);

static PyObject* get_kmeans_cfg(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->kmeans_cfg), {});
}

static int set_kmeans_cfg(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the kmeans_cfg attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->kmeans_cfg)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for kmeans_cfg:ClusterKMeansOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_branch_factor(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->branch_factor, {});
}

static int set_branch_factor(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the branch_factor attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->branch_factor)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for branch_factor:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_thresh(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->thresh, {});
}

static int set_thresh(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the thresh attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->thresh)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for thresh:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("kmeans_cfg"), get_kmeans_cfg, set_kmeans_cfg, C("C++ ::kaldi::ClusterKMeansOptions TreeClusterOptions.kmeans_cfg")},
  {C("branch_factor"), get_branch_factor, set_branch_factor, C("C++ ::int32 TreeClusterOptions.branch_factor")},
  {C("thresh"), get_thresh, set_thresh, C("C++ ::kaldi::BaseFloat TreeClusterOptions.thresh")},
  {}
};

// TreeClusterOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// TreeClusterOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// TreeClusterOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_cluster_utils.TreeClusterOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::TreeClusterOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  nullptr,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "TreeClusterOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::TreeClusterOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::TreeClusterOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_TreeClusterOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::TreeClusterOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::TreeClusterOptions* c = static_cast<::kaldi::TreeClusterOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::TreeClusterOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyTreeClusterOptions


// Initialize module

static PyMethodDef Methods[] = {
  {C("sum_clusterable_objf"), (PyCFunction)wrapSumClusterableObjf_as_sum_clusterable_objf, METH_VARARGS | METH_KEYWORDS, C("sum_clusterable_objf(vec:list<Clusterable>) -> float\n  Calls C++ function\n  float ::kaldi::SumClusterableObjf(::std::vector< ::kaldi::Clusterable *>)")},
  {C("sum_clusterable_normalizer"), (PyCFunction)wrapSumClusterableNormalizer_as_sum_clusterable_normalizer, METH_VARARGS | METH_KEYWORDS, C("sum_clusterable_normalizer(vec:list<Clusterable>) -> float\n  Calls C++ function\n  float ::kaldi::SumClusterableNormalizer(::std::vector< ::kaldi::Clusterable *>)")},
  {C("sum_clusterable"), (PyCFunction)wrapSumClusterable_as_sum_clusterable, METH_VARARGS | METH_KEYWORDS, C("sum_clusterable(vec:list<Clusterable>) -> Clusterable\n  Calls C++ function\n  ::kaldi::Clusterable * ::kaldi::SumClusterable(::std::vector< ::kaldi::Clusterable *>)")},
  {C("add_to_clusters"), (PyCFunction)wrapAddToClusters_as_add_to_clusters, METH_VARARGS | METH_KEYWORDS, C("add_to_clusters(stats:list<Clusterable>, assignments:list<int>) -> list<Clusterable>\n  Calls C++ function\n  void ::kaldi::AddToClusters(::std::vector< ::kaldi::Clusterable *>, ::std::vector< ::int32>, ::std::vector< ::kaldi::Clusterable *>*)")},
  {C("add_to_clusters_optimized"), (PyCFunction)wrapAddToClustersOptimized_as_add_to_clusters_optimized, METH_VARARGS | METH_KEYWORDS, C("add_to_clusters_optimized(stats:list<Clusterable>, assignments:list<int>, total:Clusterable) -> list<Clusterable>\n  Calls C++ function\n  void ::kaldi::AddToClustersOptimized(::std::vector< ::kaldi::Clusterable *>, ::std::vector< ::int32>, ::kaldi::Clusterable, ::std::vector< ::kaldi::Clusterable *>*)")},
  {C("cluster_bottom_up"), (PyCFunction)wrapClusterBottomUp_as_cluster_bottom_up, METH_VARARGS | METH_KEYWORDS, C("cluster_bottom_up(points:list<Clusterable>, thresh:float, min_clust:int) -> (objf_change:float, clusters_out:list<Clusterable>, assignments_out:list<int>)\n  Calls C++ function\n  float ::kaldi::ClusterBottomUp(::std::vector< ::kaldi::Clusterable *>, float, int, ::std::vector< ::kaldi::Clusterable *>*, ::std::vector< ::int32>*)")},
  {C("cluster_bottom_up_compartmentalized"), (PyCFunction)wrapClusterBottomUpCompartmentalized_as_cluster_bottom_up_compartmentalized, METH_VARARGS | METH_KEYWORDS, C("cluster_bottom_up_compartmentalized(points:list<list<Clusterable>>, thresh:float, min_clust:int) -> (objf_change:float, clusters_out:list<list<Clusterable>>, assignments_out:list<list<int>>)\n  Calls C++ function\n  float ::kaldi::ClusterBottomUpCompartmentalized(::std::vector< ::std::vector< ::kaldi::Clusterable *> >, float, int, ::std::vector< ::std::vector< ::kaldi::Clusterable *> >*, ::std::vector< ::std::vector< ::int32> >*)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyRefineClustersOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyRefineClustersOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyClusterKMeansOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyClusterKMeansOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyTreeClusterOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyTreeClusterOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_cluster_utils",  // module name
  "CLIF-generated module for tree/cluster-utils.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_clusterable_itf")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "RefineClustersOptions", reinterpret_cast<PyObject*>(&pyRefineClustersOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "ClusterKMeansOptions", reinterpret_cast<PyObject*>(&pyClusterKMeansOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "TreeClusterOptions", reinterpret_cast<PyObject*>(&pyTreeClusterOptions::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __cluster__utils_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// ClusterKMeansOptions to/from ::kaldi::ClusterKMeansOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::ClusterKMeansOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::ClusterKMeansOptions* cpp = __cluster__utils_clifwrap::pyClusterKMeansOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::ClusterKMeansOptions>* c) {
  assert(c != nullptr);
  ::kaldi::ClusterKMeansOptions* cpp = __cluster__utils_clifwrap::pyClusterKMeansOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__cluster__utils_clifwrap::pyClusterKMeansOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::ClusterKMeansOptions>* c) {
  assert(c != nullptr);
  ::kaldi::ClusterKMeansOptions* cpp = __cluster__utils_clifwrap::pyClusterKMeansOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__cluster__utils_clifwrap::pyClusterKMeansOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ClusterKMeansOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::ClusterKMeansOptions* c) {
  assert(c != nullptr);
  ::kaldi::ClusterKMeansOptions* cpp = __cluster__utils_clifwrap::pyClusterKMeansOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::ClusterKMeansOptions>* c) {
  assert(c != nullptr);
  ::kaldi::ClusterKMeansOptions* cpp = __cluster__utils_clifwrap::pyClusterKMeansOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::ClusterKMeansOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cluster__utils_clifwrap::pyClusterKMeansOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cluster__utils_clifwrap::pyClusterKMeansOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ClusterKMeansOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::ClusterKMeansOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cluster__utils_clifwrap::pyClusterKMeansOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cluster__utils_clifwrap::pyClusterKMeansOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ClusterKMeansOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::ClusterKMeansOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cluster__utils_clifwrap::pyClusterKMeansOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cluster__utils_clifwrap::pyClusterKMeansOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ClusterKMeansOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::ClusterKMeansOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__cluster__utils_clifwrap::pyClusterKMeansOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cluster__utils_clifwrap::pyClusterKMeansOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::ClusterKMeansOptions>(c);
  return py;
}

// RefineClustersOptions to/from ::kaldi::RefineClustersOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::RefineClustersOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::RefineClustersOptions* cpp = __cluster__utils_clifwrap::pyRefineClustersOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::RefineClustersOptions>* c) {
  assert(c != nullptr);
  ::kaldi::RefineClustersOptions* cpp = __cluster__utils_clifwrap::pyRefineClustersOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__cluster__utils_clifwrap::pyRefineClustersOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::RefineClustersOptions>* c) {
  assert(c != nullptr);
  ::kaldi::RefineClustersOptions* cpp = __cluster__utils_clifwrap::pyRefineClustersOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__cluster__utils_clifwrap::pyRefineClustersOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert RefineClustersOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::RefineClustersOptions* c) {
  assert(c != nullptr);
  ::kaldi::RefineClustersOptions* cpp = __cluster__utils_clifwrap::pyRefineClustersOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::RefineClustersOptions>* c) {
  assert(c != nullptr);
  ::kaldi::RefineClustersOptions* cpp = __cluster__utils_clifwrap::pyRefineClustersOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::RefineClustersOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cluster__utils_clifwrap::pyRefineClustersOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cluster__utils_clifwrap::pyRefineClustersOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RefineClustersOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RefineClustersOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cluster__utils_clifwrap::pyRefineClustersOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cluster__utils_clifwrap::pyRefineClustersOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RefineClustersOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RefineClustersOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cluster__utils_clifwrap::pyRefineClustersOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cluster__utils_clifwrap::pyRefineClustersOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RefineClustersOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::RefineClustersOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__cluster__utils_clifwrap::pyRefineClustersOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cluster__utils_clifwrap::pyRefineClustersOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::RefineClustersOptions>(c);
  return py;
}

// TreeClusterOptions to/from ::kaldi::TreeClusterOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::TreeClusterOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::TreeClusterOptions* cpp = __cluster__utils_clifwrap::pyTreeClusterOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::TreeClusterOptions>* c) {
  assert(c != nullptr);
  ::kaldi::TreeClusterOptions* cpp = __cluster__utils_clifwrap::pyTreeClusterOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__cluster__utils_clifwrap::pyTreeClusterOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::TreeClusterOptions>* c) {
  assert(c != nullptr);
  ::kaldi::TreeClusterOptions* cpp = __cluster__utils_clifwrap::pyTreeClusterOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__cluster__utils_clifwrap::pyTreeClusterOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert TreeClusterOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::TreeClusterOptions* c) {
  assert(c != nullptr);
  ::kaldi::TreeClusterOptions* cpp = __cluster__utils_clifwrap::pyTreeClusterOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::TreeClusterOptions>* c) {
  assert(c != nullptr);
  ::kaldi::TreeClusterOptions* cpp = __cluster__utils_clifwrap::pyTreeClusterOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::TreeClusterOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cluster__utils_clifwrap::pyTreeClusterOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cluster__utils_clifwrap::pyTreeClusterOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::TreeClusterOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TreeClusterOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cluster__utils_clifwrap::pyTreeClusterOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cluster__utils_clifwrap::pyTreeClusterOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::TreeClusterOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TreeClusterOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__cluster__utils_clifwrap::pyTreeClusterOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cluster__utils_clifwrap::pyTreeClusterOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::TreeClusterOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::TreeClusterOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__cluster__utils_clifwrap::pyTreeClusterOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__cluster__utils_clifwrap::pyTreeClusterOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::TreeClusterOptions>(c);
  return py;
}

}  // namespace kaldi
