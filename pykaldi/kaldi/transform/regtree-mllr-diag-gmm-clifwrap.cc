//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/transform/regtree-mllr-diag-gmm.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "itf/options-itf-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "gmm/am-diag-gmm-clifwrap.h"
#include "transform/transform-common-clifwrap.h"
#include "transform/regression-tree-clifwrap.h"
#include "regtree-mllr-diag-gmm-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __regtree__mllr__diag__gmm_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyRegtreeMllrOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::RegtreeMllrOptions> cpp;
};
static ::kaldi::RegtreeMllrOptions* ThisPtr(PyObject*);

static PyObject* get_min_count(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->min_count, {});
}

static int set_min_count(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the min_count attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->min_count)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for min_count:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_use_regtree(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->use_regtree, {});
}

static int set_use_regtree(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the use_regtree attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->use_regtree)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for use_regtree:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::RegtreeMllrOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("min_count"), get_min_count, set_min_count, C("C++ ::kaldi::BaseFloat RegtreeMllrOptions.min_count")},
  {C("use_regtree"), get_use_regtree, set_use_regtree, C("C++ bool RegtreeMllrOptions.use_regtree")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::RegtreeMllrOptions::Register(::kaldi::OptionsItf *)")},
  {}
};

// RegtreeMllrOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// RegtreeMllrOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// RegtreeMllrOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_regtree_mllr_diag_gmm.RegtreeMllrOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::RegtreeMllrOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "RegtreeMllrOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::RegtreeMllrOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::RegtreeMllrOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_RegtreeMllrOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::RegtreeMllrOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::RegtreeMllrOptions* c = static_cast<::kaldi::RegtreeMllrOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::RegtreeMllrOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyRegtreeMllrOptions

namespace pyRegtreeMllrDiagGmm {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::RegtreeMllrDiagGmm> cpp;
};
static ::kaldi::RegtreeMllrDiagGmm* ThisPtr(PyObject*);

// init(num_xforms:int, dim:int)
static PyObject* wrapInit_as_init(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("num_xforms"),
      C("dim"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:init", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("init", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("init", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::RegtreeMllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Init(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_unit()
static PyObject* wrapSetUnit_as_set_unit(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RegtreeMllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetUnit();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// transform_model(regtree:RegressionTree, am:AmDiagGmm)
static PyObject* wrapTransformModel_as_transform_model(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("regtree"),
      C("am"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:transform_model", names, &a[0], &a[1])) return nullptr;
  ::kaldi::RegressionTree* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("transform_model", names[0], "::kaldi::RegressionTree", a[0]);
  ::kaldi::AmDiagGmm * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("transform_model", names[1], "::kaldi::AmDiagGmm *", a[1]);
  // Call actual C++ method.
  ::kaldi::RegtreeMllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->TransformModel(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// get_transformed_means(regtree:RegressionTree, am:AmDiagGmm, pdf_index:int, out:MatrixBase)
static PyObject* wrapGetTransformedMeans_as_get_transformed_means(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("regtree"),
      C("am"),
      C("pdf_index"),
      C("out"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:get_transformed_means", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::RegressionTree* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_transformed_means", names[0], "::kaldi::RegressionTree", a[0]);
  ::kaldi::AmDiagGmm* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_transformed_means", names[1], "::kaldi::AmDiagGmm", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("get_transformed_means", names[2], "int", a[2]);
  ::kaldi::MatrixBase<float> * arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("get_transformed_means", names[3], "::kaldi::MatrixBase<float> *", a[3]);
  // Call actual C++ method.
  ::kaldi::RegtreeMllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetTransformedMeans(*arg1, *arg2, std::move(arg3), arg4);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::RegtreeMllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(is:istream, binary:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::RegtreeMllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_parameters(mat:MatrixBase, regclass:int)
static PyObject* wrapSetParameters_as_set_parameters(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("mat"),
      C("regclass"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:set_parameters", names, &a[0], &a[1])) return nullptr;
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_parameters", names[0], "::kaldi::MatrixBase<float>", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("set_parameters", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::RegtreeMllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetParameters(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_bclass2xforms(in:list<int>)
static PyObject* wrapset_bclass2xforms(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("in"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_bclass2xforms", names, &a[0])) return nullptr;
  ::std::vector< ::int32> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_bclass2xforms", names[0], "::std::vector< ::int32>", a[0]);
  // Call actual C++ method.
  ::kaldi::RegtreeMllrDiagGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->set_bclass2xforms(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyObject* get_xform_matrices(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->xform_matrices(), {});
}

static PyGetSetDef Properties[] = {
  {C("xform_matrices"), get_xform_matrices, nullptr, C("C++ clif_type_22 RegtreeMllrDiagGmm.xform_matrices()")},
  {}
};

static PyMethodDef Methods[] = {
  {C("init"), (PyCFunction)wrapInit_as_init, METH_VARARGS | METH_KEYWORDS, C("init(num_xforms:int, dim:int)\n  Calls C++ function\n  void ::kaldi::RegtreeMllrDiagGmm::Init(int, int)")},
  {C("set_unit"), (PyCFunction)wrapSetUnit_as_set_unit, METH_NOARGS, C("set_unit()\n  Calls C++ function\n  void ::kaldi::RegtreeMllrDiagGmm::SetUnit()")},
  {C("transform_model"), (PyCFunction)wrapTransformModel_as_transform_model, METH_VARARGS | METH_KEYWORDS, C("transform_model(regtree:RegressionTree, am:AmDiagGmm)\n  Calls C++ function\n  void ::kaldi::RegtreeMllrDiagGmm::TransformModel(::kaldi::RegressionTree, ::kaldi::AmDiagGmm *)")},
  {C("get_transformed_means"), (PyCFunction)wrapGetTransformedMeans_as_get_transformed_means, METH_VARARGS | METH_KEYWORDS, C("get_transformed_means(regtree:RegressionTree, am:AmDiagGmm, pdf_index:int, out:MatrixBase)\n  Calls C++ function\n  void ::kaldi::RegtreeMllrDiagGmm::GetTransformedMeans(::kaldi::RegressionTree, ::kaldi::AmDiagGmm, int, ::kaldi::MatrixBase<float> *)")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::RegtreeMllrDiagGmm::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool)\n  Calls C++ function\n  void ::kaldi::RegtreeMllrDiagGmm::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool)")},
  {C("set_parameters"), (PyCFunction)wrapSetParameters_as_set_parameters, METH_VARARGS | METH_KEYWORDS, C("set_parameters(mat:MatrixBase, regclass:int)\n  Calls C++ function\n  void ::kaldi::RegtreeMllrDiagGmm::SetParameters(::kaldi::MatrixBase<float>, int)")},
  {C("set_bclass2xforms"), (PyCFunction)wrapset_bclass2xforms, METH_VARARGS | METH_KEYWORDS, C("set_bclass2xforms(in:list<int>)\n  Calls C++ function\n  void ::kaldi::RegtreeMllrDiagGmm::set_bclass2xforms(::std::vector< ::int32>)")},
  {}
};

// RegtreeMllrDiagGmm __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// RegtreeMllrDiagGmm __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// RegtreeMllrDiagGmm __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_regtree_mllr_diag_gmm.RegtreeMllrDiagGmm", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::RegtreeMllrDiagGmm", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "RegtreeMllrDiagGmm takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::RegtreeMllrDiagGmm>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::RegtreeMllrDiagGmm* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_RegtreeMllrDiagGmm"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::RegtreeMllrDiagGmm"));
      if (!PyErr_Occurred()) {
        ::kaldi::RegtreeMllrDiagGmm* c = static_cast<::kaldi::RegtreeMllrDiagGmm*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::RegtreeMllrDiagGmm*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyRegtreeMllrDiagGmm

namespace pyRegtreeMllrDiagGmmAccs {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::RegtreeMllrDiagGmmAccs> cpp;
};
static ::kaldi::RegtreeMllrDiagGmmAccs* ThisPtr(PyObject*);

// init(num_bclass:int, dim:int)
static PyObject* wrapInit_as_init(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("num_bclass"),
      C("dim"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:init", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("init", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("init", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::RegtreeMllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Init(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_zero()
static PyObject* wrapSetZero_as_set_zero(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RegtreeMllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetZero();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// accumulate_for_gmm(regtree:RegressionTree, am:AmDiagGmm, data:VectorBase, pdf_index:int, weight:float) -> float
static PyObject* wrapAccumulateForGmm_as_accumulate_for_gmm(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[5];
  char* names[] = {
      C("regtree"),
      C("am"),
      C("data"),
      C("pdf_index"),
      C("weight"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOO:accumulate_for_gmm", names, &a[0], &a[1], &a[2], &a[3], &a[4])) return nullptr;
  ::kaldi::RegressionTree* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_for_gmm", names[0], "::kaldi::RegressionTree", a[0]);
  ::kaldi::AmDiagGmm* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_for_gmm", names[1], "::kaldi::AmDiagGmm", a[1]);
  ::kaldi::VectorBase<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate_for_gmm", names[2], "::kaldi::VectorBase<float>", a[2]);
  int arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("accumulate_for_gmm", names[3], "int", a[3]);
  float arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("accumulate_for_gmm", names[4], "float", a[4]);
  // Call actual C++ method.
  ::kaldi::RegtreeMllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->AccumulateForGmm(*arg1, *arg2, *arg3, std::move(arg4), std::move(arg5));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// accumulate_for_gaussian(regtree:RegressionTree, am:AmDiagGmm, data:VectorBase, pdf_index:int, gauss_index:int, weight:float)
static PyObject* wrapAccumulateForGaussian_as_accumulate_for_gaussian(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[6];
  char* names[] = {
      C("regtree"),
      C("am"),
      C("data"),
      C("pdf_index"),
      C("gauss_index"),
      C("weight"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOOO:accumulate_for_gaussian", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5])) return nullptr;
  ::kaldi::RegressionTree* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_for_gaussian", names[0], "::kaldi::RegressionTree", a[0]);
  ::kaldi::AmDiagGmm* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_for_gaussian", names[1], "::kaldi::AmDiagGmm", a[1]);
  ::kaldi::VectorBase<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate_for_gaussian", names[2], "::kaldi::VectorBase<float>", a[2]);
  int arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("accumulate_for_gaussian", names[3], "int", a[3]);
  int arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("accumulate_for_gaussian", names[4], "int", a[4]);
  float arg6;
  if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("accumulate_for_gaussian", names[5], "float", a[5]);
  // Call actual C++ method.
  ::kaldi::RegtreeMllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AccumulateForGaussian(*arg1, *arg2, *arg3, std::move(arg4), std::move(arg5), std::move(arg6));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// update(regtree:RegressionTree, opts:RegtreeMllrOptions, out_mllr:RegtreeMllrDiagGmm) -> (auxf_impr:float, t:float)
static PyObject* wrapUpdate_as_update(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("regtree"),
      C("opts"),
      C("out_mllr"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:update", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::RegressionTree* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("update", names[0], "::kaldi::RegressionTree", a[0]);
  ::kaldi::RegtreeMllrOptions* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("update", names[1], "::kaldi::RegtreeMllrOptions", a[1]);
  ::kaldi::RegtreeMllrDiagGmm * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("update", names[2], "::kaldi::RegtreeMllrDiagGmm *", a[2]);
  float ret0{};
  float ret1{};
  // Call actual C++ method.
  ::kaldi::RegtreeMllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Update(*arg1, *arg2, arg3, &ret0, &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::RegtreeMllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(is:istream, binary:bool, add:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("is"),
      C("binary"),
      C("add"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:read", names, &a[0], &a[1], &a[2])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  bool arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("read", names[2], "bool", a[2]);
  // Call actual C++ method.
  ::kaldi::RegtreeMllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RegtreeMllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_base_classes() -> int
static PyObject* wrapNumBaseClasses_as_num_base_classes(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RegtreeMllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumBaseClasses();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyObject* get_baseclass_stats(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->baseclass_stats(), {});
}

static PyGetSetDef Properties[] = {
  {C("baseclass_stats"), get_baseclass_stats, nullptr, C("C++ clif_type_53 RegtreeMllrDiagGmmAccs.baseclass_stats()")},
  {}
};

static PyMethodDef Methods[] = {
  {C("init"), (PyCFunction)wrapInit_as_init, METH_VARARGS | METH_KEYWORDS, C("init(num_bclass:int, dim:int)\n  Calls C++ function\n  void ::kaldi::RegtreeMllrDiagGmmAccs::Init(int, int)")},
  {C("set_zero"), (PyCFunction)wrapSetZero_as_set_zero, METH_NOARGS, C("set_zero()\n  Calls C++ function\n  void ::kaldi::RegtreeMllrDiagGmmAccs::SetZero()")},
  {C("accumulate_for_gmm"), (PyCFunction)wrapAccumulateForGmm_as_accumulate_for_gmm, METH_VARARGS | METH_KEYWORDS, C("accumulate_for_gmm(regtree:RegressionTree, am:AmDiagGmm, data:VectorBase, pdf_index:int, weight:float) -> float\n  Calls C++ function\n  float ::kaldi::RegtreeMllrDiagGmmAccs::AccumulateForGmm(::kaldi::RegressionTree, ::kaldi::AmDiagGmm, ::kaldi::VectorBase<float>, int, float)")},
  {C("accumulate_for_gaussian"), (PyCFunction)wrapAccumulateForGaussian_as_accumulate_for_gaussian, METH_VARARGS | METH_KEYWORDS, C("accumulate_for_gaussian(regtree:RegressionTree, am:AmDiagGmm, data:VectorBase, pdf_index:int, gauss_index:int, weight:float)\n  Calls C++ function\n  void ::kaldi::RegtreeMllrDiagGmmAccs::AccumulateForGaussian(::kaldi::RegressionTree, ::kaldi::AmDiagGmm, ::kaldi::VectorBase<float>, int, int, float)")},
  {C("update"), (PyCFunction)wrapUpdate_as_update, METH_VARARGS | METH_KEYWORDS, C("update(regtree:RegressionTree, opts:RegtreeMllrOptions, out_mllr:RegtreeMllrDiagGmm) -> (auxf_impr:float, t:float)\n  Calls C++ function\n  void ::kaldi::RegtreeMllrDiagGmmAccs::Update(::kaldi::RegressionTree, ::kaldi::RegtreeMllrOptions, ::kaldi::RegtreeMllrDiagGmm *, float*, float*)")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::RegtreeMllrDiagGmmAccs::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool, add:bool)\n  Calls C++ function\n  void ::kaldi::RegtreeMllrDiagGmmAccs::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool, bool)")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::RegtreeMllrDiagGmmAccs::Dim()")},
  {C("num_base_classes"), (PyCFunction)wrapNumBaseClasses_as_num_base_classes, METH_NOARGS, C("num_base_classes() -> int\n  Calls C++ function\n  int ::kaldi::RegtreeMllrDiagGmmAccs::NumBaseClasses()")},
  {}
};

// RegtreeMllrDiagGmmAccs __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// RegtreeMllrDiagGmmAccs __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// RegtreeMllrDiagGmmAccs __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_regtree_mllr_diag_gmm.RegtreeMllrDiagGmmAccs", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::RegtreeMllrDiagGmmAccs", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "RegtreeMllrDiagGmmAccs takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::RegtreeMllrDiagGmmAccs>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::RegtreeMllrDiagGmmAccs* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_RegtreeMllrDiagGmmAccs"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::RegtreeMllrDiagGmmAccs"));
      if (!PyErr_Occurred()) {
        ::kaldi::RegtreeMllrDiagGmmAccs* c = static_cast<::kaldi::RegtreeMllrDiagGmmAccs*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::RegtreeMllrDiagGmmAccs*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyRegtreeMllrDiagGmmAccs


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyRegtreeMllrOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyRegtreeMllrOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyRegtreeMllrDiagGmm::wrapper_Type) < 0) return false;
  Py_INCREF(&pyRegtreeMllrDiagGmm::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyRegtreeMllrDiagGmmAccs::wrapper_Type) < 0) return false;
  Py_INCREF(&pyRegtreeMllrDiagGmmAccs::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_regtree_mllr_diag_gmm",  // module name
  "CLIF-generated module for transform/regtree-mllr-diag-gmm.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_am_diag_gmm")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_transform_common")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_regression_tree")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "RegtreeMllrOptions", reinterpret_cast<PyObject*>(&pyRegtreeMllrOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "RegtreeMllrDiagGmm", reinterpret_cast<PyObject*>(&pyRegtreeMllrDiagGmm::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "RegtreeMllrDiagGmmAccs", reinterpret_cast<PyObject*>(&pyRegtreeMllrDiagGmmAccs::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __regtree__mllr__diag__gmm_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// RegtreeMllrDiagGmm to/from ::kaldi::RegtreeMllrDiagGmm conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::RegtreeMllrDiagGmm** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::RegtreeMllrDiagGmm* cpp = __regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrDiagGmm::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::RegtreeMllrDiagGmm>* c) {
  assert(c != nullptr);
  ::kaldi::RegtreeMllrDiagGmm* cpp = __regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrDiagGmm::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrDiagGmm::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::RegtreeMllrDiagGmm>* c) {
  assert(c != nullptr);
  ::kaldi::RegtreeMllrDiagGmm* cpp = __regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrDiagGmm::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrDiagGmm::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert RegtreeMllrDiagGmm instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::RegtreeMllrDiagGmm* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrDiagGmm::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrDiagGmm::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RegtreeMllrDiagGmm>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RegtreeMllrDiagGmm> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrDiagGmm::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrDiagGmm::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RegtreeMllrDiagGmm>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RegtreeMllrDiagGmm> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrDiagGmm::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrDiagGmm::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RegtreeMllrDiagGmm>(std::move(c));
  return py;
}

// RegtreeMllrDiagGmmAccs to/from ::kaldi::RegtreeMllrDiagGmmAccs conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::RegtreeMllrDiagGmmAccs** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::RegtreeMllrDiagGmmAccs* cpp = __regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrDiagGmmAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::RegtreeMllrDiagGmmAccs>* c) {
  assert(c != nullptr);
  ::kaldi::RegtreeMllrDiagGmmAccs* cpp = __regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrDiagGmmAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrDiagGmmAccs::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::RegtreeMllrDiagGmmAccs>* c) {
  assert(c != nullptr);
  ::kaldi::RegtreeMllrDiagGmmAccs* cpp = __regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrDiagGmmAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrDiagGmmAccs::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert RegtreeMllrDiagGmmAccs instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::RegtreeMllrDiagGmmAccs* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrDiagGmmAccs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrDiagGmmAccs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RegtreeMllrDiagGmmAccs>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RegtreeMllrDiagGmmAccs> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrDiagGmmAccs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrDiagGmmAccs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RegtreeMllrDiagGmmAccs>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RegtreeMllrDiagGmmAccs> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrDiagGmmAccs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrDiagGmmAccs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RegtreeMllrDiagGmmAccs>(std::move(c));
  return py;
}

// RegtreeMllrOptions to/from ::kaldi::RegtreeMllrOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::RegtreeMllrOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::RegtreeMllrOptions* cpp = __regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::RegtreeMllrOptions>* c) {
  assert(c != nullptr);
  ::kaldi::RegtreeMllrOptions* cpp = __regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::RegtreeMllrOptions>* c) {
  assert(c != nullptr);
  ::kaldi::RegtreeMllrOptions* cpp = __regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert RegtreeMllrOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::RegtreeMllrOptions* c) {
  assert(c != nullptr);
  ::kaldi::RegtreeMllrOptions* cpp = __regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::RegtreeMllrOptions>* c) {
  assert(c != nullptr);
  ::kaldi::RegtreeMllrOptions* cpp = __regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::RegtreeMllrOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RegtreeMllrOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RegtreeMllrOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RegtreeMllrOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RegtreeMllrOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RegtreeMllrOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::RegtreeMllrOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regtree__mllr__diag__gmm_clifwrap::pyRegtreeMllrOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::RegtreeMllrOptions>(c);
  return py;
}

}  // namespace kaldi
