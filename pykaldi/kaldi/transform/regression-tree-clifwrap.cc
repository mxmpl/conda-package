//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/transform/regression-tree.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "gmm/am-diag-gmm-clifwrap.h"
#include "transform/transform-common-clifwrap.h"
#include "regression-tree-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __regression__tree_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyRegressionTree {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::RegressionTree> cpp;
};
static ::kaldi::RegressionTree* ThisPtr(PyObject*);

// build_tree(state_occs:Vector, sil_indices:list<int>, am:AmDiagGmm, max_clusters:int)
static PyObject* wrapBuildTree_as_build_tree(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("state_occs"),
      C("sil_indices"),
      C("am"),
      C("max_clusters"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:build_tree", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::Vector<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("build_tree", names[0], "::kaldi::Vector<float>", a[0]);
  ::std::vector< ::int32> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("build_tree", names[1], "::std::vector< ::int32>", a[1]);
  ::kaldi::AmDiagGmm* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("build_tree", names[2], "::kaldi::AmDiagGmm", a[2]);
  int arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("build_tree", names[3], "int", a[3]);
  // Call actual C++ method.
  ::kaldi::RegressionTree* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->BuildTree(*arg1, std::move(arg2), *arg3, std::move(arg4));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// gather_stats(stats_in:list<AffineXformStats>, min_count:float) -> (success:bool, regclasses_out:list<int>, stats_out:list<AffineXformStats>)
static PyObject* wrapGatherStats_as_gather_stats(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("stats_in"),
      C("min_count"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:gather_stats", names, &a[0], &a[1])) return nullptr;
  ::std::vector< ::kaldi::AffineXformStats *> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("gather_stats", names[0], "::std::vector< ::kaldi::AffineXformStats *>", a[0]);
  double arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("gather_stats", names[1], "double", a[1]);
  ::std::vector< ::int32> ret1{};
  ::std::vector< ::kaldi::AffineXformStats *> ret2{};
  // Call actual C++ method.
  ::kaldi::RegressionTree* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GatherStats(std::move(arg1), std::move(arg2), &ret1, &ret2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(3);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  if ((p=Clif_PyObjFrom(std::move(ret2), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 2, p);
  return result_tuple;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::RegressionTree* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(is:istream, binary:bool, am:AmDiagGmm)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("is"),
      C("binary"),
      C("am"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:read", names, &a[0], &a[1], &a[2])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  ::kaldi::AmDiagGmm* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("read", names[2], "::kaldi::AmDiagGmm", a[2]);
  // Call actual C++ method.
  ::kaldi::RegressionTree* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2), *arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// num_base_classes() -> int
static PyObject* wrapNumBaseclasses_as_num_base_classes(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RegressionTree* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumBaseclasses();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_base_class(bclass:int) -> list<tuple<int, int>>
static PyObject* wrapGetBaseclass_as_get_base_class(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("bclass"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_base_class", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_base_class", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::RegressionTree* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::vector< ::std::pair< ::int32, ::int32> > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetBaseclass(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// gauss_to_base_class_id(pdf_id:int, gauss_id:int) -> int
static PyObject* wrapGauss2BaseclassId_as_gauss_to_base_class_id(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("pdf_id"),
      C("gauss_id"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:gauss_to_base_class_id", names, &a[0], &a[1])) return nullptr;
  unsigned long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("gauss_to_base_class_id", names[0], "unsigned long", a[0]);
  unsigned long arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("gauss_to_base_class_id", names[1], "unsigned long", a[1]);
  // Call actual C++ method.
  ::kaldi::RegressionTree* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Gauss2BaseclassId(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("build_tree"), (PyCFunction)wrapBuildTree_as_build_tree, METH_VARARGS | METH_KEYWORDS, C("build_tree(state_occs:Vector, sil_indices:list<int>, am:AmDiagGmm, max_clusters:int)\n  Calls C++ function\n  void ::kaldi::RegressionTree::BuildTree(::kaldi::Vector<float>, ::std::vector< ::int32>, ::kaldi::AmDiagGmm, int)")},
  {C("gather_stats"), (PyCFunction)wrapGatherStats_as_gather_stats, METH_VARARGS | METH_KEYWORDS, C("gather_stats(stats_in:list<AffineXformStats>, min_count:float) -> (success:bool, regclasses_out:list<int>, stats_out:list<AffineXformStats>)\n  Calls C++ function\n  bool ::kaldi::RegressionTree::GatherStats(::std::vector< ::kaldi::AffineXformStats *>, double, ::std::vector< ::int32>*, ::std::vector< ::kaldi::AffineXformStats *>*)")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::RegressionTree::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool, am:AmDiagGmm)\n  Calls C++ function\n  void ::kaldi::RegressionTree::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool, ::kaldi::AmDiagGmm)")},
  {C("num_base_classes"), (PyCFunction)wrapNumBaseclasses_as_num_base_classes, METH_NOARGS, C("num_base_classes() -> int\n  Calls C++ function\n  int ::kaldi::RegressionTree::NumBaseclasses()")},
  {C("get_base_class"), (PyCFunction)wrapGetBaseclass_as_get_base_class, METH_VARARGS | METH_KEYWORDS, C("get_base_class(bclass:int) -> list<tuple<int, int>>\n  Calls C++ function\n  ::std::vector< ::std::pair< ::int32, ::int32> > ::kaldi::RegressionTree::GetBaseclass(int)")},
  {C("gauss_to_base_class_id"), (PyCFunction)wrapGauss2BaseclassId_as_gauss_to_base_class_id, METH_VARARGS | METH_KEYWORDS, C("gauss_to_base_class_id(pdf_id:int, gauss_id:int) -> int\n  Calls C++ function\n  int ::kaldi::RegressionTree::Gauss2BaseclassId(unsigned long, unsigned long)")},
  {}
};

// RegressionTree __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// RegressionTree __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// RegressionTree __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_regression_tree.RegressionTree",   // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::RegressionTree", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "RegressionTree takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::RegressionTree>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::RegressionTree* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_RegressionTree"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::RegressionTree"));
      if (!PyErr_Occurred()) {
        ::kaldi::RegressionTree* c = static_cast<::kaldi::RegressionTree*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::RegressionTree*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyRegressionTree


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyRegressionTree::wrapper_Type) < 0) return false;
  Py_INCREF(&pyRegressionTree::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_regression_tree",  // module name
  "CLIF-generated module for transform/regression-tree.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_am_diag_gmm")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_transform_common")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "RegressionTree", reinterpret_cast<PyObject*>(&pyRegressionTree::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __regression__tree_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// RegressionTree to/from ::kaldi::RegressionTree conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::RegressionTree** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::RegressionTree* cpp = __regression__tree_clifwrap::pyRegressionTree::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::RegressionTree>* c) {
  assert(c != nullptr);
  ::kaldi::RegressionTree* cpp = __regression__tree_clifwrap::pyRegressionTree::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__regression__tree_clifwrap::pyRegressionTree::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::RegressionTree>* c) {
  assert(c != nullptr);
  ::kaldi::RegressionTree* cpp = __regression__tree_clifwrap::pyRegressionTree::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__regression__tree_clifwrap::pyRegressionTree::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert RegressionTree instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::RegressionTree* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__regression__tree_clifwrap::pyRegressionTree::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regression__tree_clifwrap::pyRegressionTree::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RegressionTree>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RegressionTree> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__regression__tree_clifwrap::pyRegressionTree::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regression__tree_clifwrap::pyRegressionTree::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RegressionTree>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RegressionTree> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__regression__tree_clifwrap::pyRegressionTree::wrapper_Type, NULL, NULL);
  reinterpret_cast<__regression__tree_clifwrap::pyRegressionTree::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RegressionTree>(std::move(c));
  return py;
}

}  // namespace kaldi
