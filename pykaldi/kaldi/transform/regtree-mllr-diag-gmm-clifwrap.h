//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/transform/regtree-mllr-diag-gmm.clif

#include <memory>
#include "clif/python/optional.h"
#include "transform/regtree-mllr-diag-gmm.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::RegtreeMllrDiagGmm` as RegtreeMllrDiagGmm
bool Clif_PyObjAs(PyObject* input, ::kaldi::RegtreeMllrDiagGmm** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RegtreeMllrDiagGmm>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RegtreeMllrDiagGmm>* output);
PyObject* Clif_PyObjFrom(::kaldi::RegtreeMllrDiagGmm*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RegtreeMllrDiagGmm>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RegtreeMllrDiagGmm>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RegtreeMllrDiagGmm*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RegtreeMllrDiagGmm&, py::PostConv) = delete;
// CLIF use `::kaldi::RegtreeMllrDiagGmmAccs` as RegtreeMllrDiagGmmAccs
bool Clif_PyObjAs(PyObject* input, ::kaldi::RegtreeMllrDiagGmmAccs** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RegtreeMllrDiagGmmAccs>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RegtreeMllrDiagGmmAccs>* output);
PyObject* Clif_PyObjFrom(::kaldi::RegtreeMllrDiagGmmAccs*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RegtreeMllrDiagGmmAccs>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RegtreeMllrDiagGmmAccs>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RegtreeMllrDiagGmmAccs*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RegtreeMllrDiagGmmAccs&, py::PostConv) = delete;
// CLIF use `::kaldi::RegtreeMllrOptions` as RegtreeMllrOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::RegtreeMllrOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RegtreeMllrOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RegtreeMllrOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::RegtreeMllrOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::RegtreeMllrOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::RegtreeMllrOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RegtreeMllrOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RegtreeMllrOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RegtreeMllrOptions&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_regtree_mllr_diag_gmm")) Py_DECREF(m);
// CLIF init_module else goto err;
