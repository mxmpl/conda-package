//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/transform/fmllr-diag-gmm.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "itf/options-itf-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "gmm/diag-gmm-clifwrap.h"
#include "gmm/mle-full-gmm-clifwrap.h"
#include "transform/transform-common-clifwrap.h"
#include "fmllr-diag-gmm-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __fmllr__diag__gmm_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyFmllrOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::FmllrOptions> cpp;
};
static ::kaldi::FmllrOptions* ThisPtr(PyObject*);

static PyObject* get_update_type(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->update_type, _1);
}

static int set_update_type(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the update_type attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->update_type)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for update_type:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_min_count(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->min_count, {});
}

static int set_min_count(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the min_count attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->min_count)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for min_count:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_num_iters(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->num_iters, {});
}

static int set_num_iters(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the num_iters attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->num_iters)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for num_iters:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::FmllrOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("update_type"), get_update_type, set_update_type, C("C++ ::std::string FmllrOptions.update_type")},
  {C("min_count"), get_min_count, set_min_count, C("C++ ::kaldi::BaseFloat FmllrOptions.min_count")},
  {C("num_iters"), get_num_iters, set_num_iters, C("C++ ::int32 FmllrOptions.num_iters")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::FmllrOptions::Register(::kaldi::OptionsItf *)")},
  {}
};

// FmllrOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// FmllrOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// FmllrOptions __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_fmllr_diag_gmm.FmllrOptions",      // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::FmllrOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "FmllrOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::FmllrOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::FmllrOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_FmllrOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::FmllrOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::FmllrOptions* c = static_cast<::kaldi::FmllrOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::FmllrOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyFmllrOptions

namespace pyFmllrDiagGmmAccs {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::FmllrDiagGmmAccs> cpp;
};
static ::kaldi::FmllrDiagGmmAccs* ThisPtr(PyObject*);

// __init__(opts:FmllrOptions=default)
static PyObject* wrapFmllrDiagGmmAccs_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:__init__", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::FmllrOptions* arg1;
  if (nargs > 0) {
    if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::FmllrOptions", a[0]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::FmllrDiagGmmAccs>(); break;
  case 1:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::FmllrDiagGmmAccs>(*arg1); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// @classmethod from_other(other:FmllrDiagGmmAccs) -> FmllrDiagGmmAccs
static PyObject* wrapFmllrDiagGmmAccs_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::kaldi::FmllrDiagGmmAccs* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::kaldi::FmllrDiagGmmAccs", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::FmllrDiagGmmAccs> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::FmllrDiagGmmAccs>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_dim(dim:int, opts:FmllrOptions=default) -> FmllrDiagGmmAccs
static PyObject* wrapFmllrDiagGmmAccs_as_from_dim(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("dim"),
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:from_dim", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_dim", names[0], "int", a[0]);
  ::kaldi::FmllrOptions* arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_dim", names[1], "::kaldi::FmllrOptions", a[1]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::FmllrDiagGmmAccs> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    ret0 = ::gtl::MakeUnique<::kaldi::FmllrDiagGmmAccs>(std::move(arg1)); break;
  case 2:
    ret0 = ::gtl::MakeUnique<::kaldi::FmllrDiagGmmAccs>(std::move(arg1), *arg2); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_gmm(gmm:DiagGmm, fgmm_accs:AccumFullGmm) -> FmllrDiagGmmAccs
static PyObject* wrapFmllrDiagGmmAccs_as_from_gmm(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("gmm"),
      C("fgmm_accs"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:from_gmm", names, &a[0], &a[1])) return nullptr;
  ::kaldi::DiagGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_gmm", names[0], "::kaldi::DiagGmm", a[0]);
  ::kaldi::AccumFullGmm* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_gmm", names[1], "::kaldi::AccumFullGmm", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::FmllrDiagGmmAccs> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::FmllrDiagGmmAccs>(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// init(dim:int)
static PyObject* wrapInit_as_init(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("dim"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:init", names, &a[0])) return nullptr;
  unsigned long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("init", names[0], "unsigned long", a[0]);
  // Call actual C++ method.
  ::kaldi::FmllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Init(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// accumulate_for_gmm(gmm:DiagGmm, data:VectorBase, weight:float) -> float
static PyObject* wrapAccumulateForGmm_as_accumulate_for_gmm(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("gmm"),
      C("data"),
      C("weight"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:accumulate_for_gmm", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::DiagGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_for_gmm", names[0], "::kaldi::DiagGmm", a[0]);
  ::kaldi::VectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_for_gmm", names[1], "::kaldi::VectorBase<float>", a[1]);
  float arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate_for_gmm", names[2], "float", a[2]);
  // Call actual C++ method.
  ::kaldi::FmllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->AccumulateForGmm(*arg1, *arg2, std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// accumulate_for_gmm_preselect(gmm:DiagGmm, gselect:list<int>, data:VectorBase, weight:float) -> float
static PyObject* wrapAccumulateForGmmPreselect_as_accumulate_for_gmm_preselect(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("gmm"),
      C("gselect"),
      C("data"),
      C("weight"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:accumulate_for_gmm_preselect", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::DiagGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_for_gmm_preselect", names[0], "::kaldi::DiagGmm", a[0]);
  ::std::vector< ::int32> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_for_gmm_preselect", names[1], "::std::vector< ::int32>", a[1]);
  ::kaldi::VectorBase<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate_for_gmm_preselect", names[2], "::kaldi::VectorBase<float>", a[2]);
  float arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("accumulate_for_gmm_preselect", names[3], "float", a[3]);
  // Call actual C++ method.
  ::kaldi::FmllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->AccumulateForGmmPreselect(*arg1, std::move(arg2), *arg3, std::move(arg4));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// accumulate_from_posteriors(gmm:DiagGmm, data:VectorBase, posteriors:VectorBase)
static PyObject* wrapAccumulateFromPosteriors_as_accumulate_from_posteriors(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("gmm"),
      C("data"),
      C("posteriors"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:accumulate_from_posteriors", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::DiagGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_from_posteriors", names[0], "::kaldi::DiagGmm", a[0]);
  ::kaldi::VectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_from_posteriors", names[1], "::kaldi::VectorBase<float>", a[1]);
  ::kaldi::VectorBase<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate_from_posteriors", names[2], "::kaldi::VectorBase<float>", a[2]);
  // Call actual C++ method.
  ::kaldi::FmllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AccumulateFromPosteriors(*arg1, *arg2, *arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// accumulate_from_posteriors_preselect(gmm:DiagGmm, gselect:list<int>, data:VectorBase, posteriors:VectorBase)
static PyObject* wrapAccumulateFromPosteriorsPreselect_as_accumulate_from_posteriors_preselect(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("gmm"),
      C("gselect"),
      C("data"),
      C("posteriors"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:accumulate_from_posteriors_preselect", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::DiagGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_from_posteriors_preselect", names[0], "::kaldi::DiagGmm", a[0]);
  ::std::vector< ::int32> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_from_posteriors_preselect", names[1], "::std::vector< ::int32>", a[1]);
  ::kaldi::VectorBase<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate_from_posteriors_preselect", names[2], "::kaldi::VectorBase<float>", a[2]);
  ::kaldi::VectorBase<float>* arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("accumulate_from_posteriors_preselect", names[3], "::kaldi::VectorBase<float>", a[3]);
  // Call actual C++ method.
  ::kaldi::FmllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AccumulateFromPosteriorsPreselect(*arg1, std::move(arg2), *arg3, *arg4);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// update(opts:FmllrOptions, fmllr_mat:MatrixBase) -> (objf_impr:float, count:float)
static PyObject* wrapUpdate_as_update(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("opts"),
      C("fmllr_mat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:update", names, &a[0], &a[1])) return nullptr;
  ::kaldi::FmllrOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("update", names[0], "::kaldi::FmllrOptions", a[0]);
  ::kaldi::MatrixBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("update", names[1], "::kaldi::MatrixBase<float> *", a[1]);
  float ret0{};
  float ret1{};
  // Call actual C++ method.
  ::kaldi::FmllrDiagGmmAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Update(*arg1, arg2, &ret0, &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// Implicit cast this as ::kaldi::AffineXformStats*
static PyObject* as_kaldi_AffineXformStats(PyObject* self) {
  ::kaldi::AffineXformStats* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::AffineXformStats"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapFmllrDiagGmmAccs_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(opts:FmllrOptions=default)\n  Calls C++ function\n  void ::kaldi::FmllrDiagGmmAccs::FmllrDiagGmmAccs(::kaldi::FmllrOptions)")},
  {C("from_other"), (PyCFunction)wrapFmllrDiagGmmAccs_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(other:FmllrDiagGmmAccs) -> FmllrDiagGmmAccs\n  Calls C++ function\n  std::unique_ptr<::kaldi::FmllrDiagGmmAccs> ::kaldi::FmllrDiagGmmAccs::FmllrDiagGmmAccs(::kaldi::FmllrDiagGmmAccs)")},
  {C("from_dim"), (PyCFunction)wrapFmllrDiagGmmAccs_as_from_dim, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_dim(dim:int, opts:FmllrOptions=default) -> FmllrDiagGmmAccs\n  Calls C++ function\n  std::unique_ptr<::kaldi::FmllrDiagGmmAccs> ::kaldi::FmllrDiagGmmAccs::FmllrDiagGmmAccs(int, ::kaldi::FmllrOptions)")},
  {C("from_gmm"), (PyCFunction)wrapFmllrDiagGmmAccs_as_from_gmm, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_gmm(gmm:DiagGmm, fgmm_accs:AccumFullGmm) -> FmllrDiagGmmAccs\n  Calls C++ function\n  std::unique_ptr<::kaldi::FmllrDiagGmmAccs> ::kaldi::FmllrDiagGmmAccs::FmllrDiagGmmAccs(::kaldi::DiagGmm, ::kaldi::AccumFullGmm)")},
  {C("init"), (PyCFunction)wrapInit_as_init, METH_VARARGS | METH_KEYWORDS, C("init(dim:int)\n  Calls C++ function\n  void ::kaldi::FmllrDiagGmmAccs::Init(unsigned long)")},
  {C("accumulate_for_gmm"), (PyCFunction)wrapAccumulateForGmm_as_accumulate_for_gmm, METH_VARARGS | METH_KEYWORDS, C("accumulate_for_gmm(gmm:DiagGmm, data:VectorBase, weight:float) -> float\n  Calls C++ function\n  float ::kaldi::FmllrDiagGmmAccs::AccumulateForGmm(::kaldi::DiagGmm, ::kaldi::VectorBase<float>, float)")},
  {C("accumulate_for_gmm_preselect"), (PyCFunction)wrapAccumulateForGmmPreselect_as_accumulate_for_gmm_preselect, METH_VARARGS | METH_KEYWORDS, C("accumulate_for_gmm_preselect(gmm:DiagGmm, gselect:list<int>, data:VectorBase, weight:float) -> float\n  Calls C++ function\n  float ::kaldi::FmllrDiagGmmAccs::AccumulateForGmmPreselect(::kaldi::DiagGmm, ::std::vector< ::int32>, ::kaldi::VectorBase<float>, float)")},
  {C("accumulate_from_posteriors"), (PyCFunction)wrapAccumulateFromPosteriors_as_accumulate_from_posteriors, METH_VARARGS | METH_KEYWORDS, C("accumulate_from_posteriors(gmm:DiagGmm, data:VectorBase, posteriors:VectorBase)\n  Calls C++ function\n  void ::kaldi::FmllrDiagGmmAccs::AccumulateFromPosteriors(::kaldi::DiagGmm, ::kaldi::VectorBase<float>, ::kaldi::VectorBase<float>)")},
  {C("accumulate_from_posteriors_preselect"), (PyCFunction)wrapAccumulateFromPosteriorsPreselect_as_accumulate_from_posteriors_preselect, METH_VARARGS | METH_KEYWORDS, C("accumulate_from_posteriors_preselect(gmm:DiagGmm, gselect:list<int>, data:VectorBase, posteriors:VectorBase)\n  Calls C++ function\n  void ::kaldi::FmllrDiagGmmAccs::AccumulateFromPosteriorsPreselect(::kaldi::DiagGmm, ::std::vector< ::int32>, ::kaldi::VectorBase<float>, ::kaldi::VectorBase<float>)")},
  {C("update"), (PyCFunction)wrapUpdate_as_update, METH_VARARGS | METH_KEYWORDS, C("update(opts:FmllrOptions, fmllr_mat:MatrixBase) -> (objf_impr:float, count:float)\n  Calls C++ function\n  void ::kaldi::FmllrDiagGmmAccs::Update(::kaldi::FmllrOptions, ::kaldi::MatrixBase<float> *, float*, float*)")},
  {C("as_kaldi_AffineXformStats"), (PyCFunction)as_kaldi_AffineXformStats, METH_NOARGS, C("Upcast to ::kaldi::AffineXformStats*")},
  {}
};

// FmllrDiagGmmAccs __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// FmllrDiagGmmAccs __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// FmllrDiagGmmAccs __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_fmllr_diag_gmm.FmllrDiagGmmAccs",  // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::FmllrDiagGmmAccs", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapFmllrDiagGmmAccs_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::FmllrDiagGmmAccs* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_FmllrDiagGmmAccs"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::FmllrDiagGmmAccs"));
      if (!PyErr_Occurred()) {
        ::kaldi::FmllrDiagGmmAccs* c = static_cast<::kaldi::FmllrDiagGmmAccs*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::FmllrDiagGmmAccs*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyFmllrDiagGmmAccs

// init_fmllr(dim:int) -> Matrix
static PyObject* wrapInitFmllr_as_init_fmllr(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("dim"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:init_fmllr", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("init_fmllr", names[0], "int", a[0]);
  ::kaldi::Matrix<float> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::InitFmllr(std::move(arg1), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// compute_fmllr_log_det(fmllr_mat:Matrix) -> float
static PyObject* wrapComputeFmllrLogDet_as_compute_fmllr_log_det(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("fmllr_mat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:compute_fmllr_log_det", names, &a[0])) return nullptr;
  ::kaldi::Matrix<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_fmllr_log_det", names[0], "::kaldi::Matrix<float>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::ComputeFmllrLogDet(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// compute_fmllr_matrix_diag_gmm_full(in_xform:MatrixBase, stats:AffineXformStats, num_iters:int, out_xform:MatrixBase) -> float
static PyObject* wrapComputeFmllrMatrixDiagGmmFull_as_compute_fmllr_matrix_diag_gmm_full(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("in_xform"),
      C("stats"),
      C("num_iters"),
      C("out_xform"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:compute_fmllr_matrix_diag_gmm_full", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_fmllr_matrix_diag_gmm_full", names[0], "::kaldi::MatrixBase<float>", a[0]);
  ::kaldi::AffineXformStats* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute_fmllr_matrix_diag_gmm_full", names[1], "::kaldi::AffineXformStats", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("compute_fmllr_matrix_diag_gmm_full", names[2], "int", a[2]);
  ::kaldi::MatrixBase<float> * arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("compute_fmllr_matrix_diag_gmm_full", names[3], "::kaldi::MatrixBase<float> *", a[3]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::ComputeFmllrMatrixDiagGmmFull(*arg1, *arg2, std::move(arg3), arg4);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// compute_fmllr_matrix_diag_gmm_diagonal(in_xform:MatrixBase, stats:AffineXformStats, out_xform:MatrixBase) -> float
static PyObject* wrapComputeFmllrMatrixDiagGmmDiagonal_as_compute_fmllr_matrix_diag_gmm_diagonal(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("in_xform"),
      C("stats"),
      C("out_xform"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:compute_fmllr_matrix_diag_gmm_diagonal", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_fmllr_matrix_diag_gmm_diagonal", names[0], "::kaldi::MatrixBase<float>", a[0]);
  ::kaldi::AffineXformStats* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute_fmllr_matrix_diag_gmm_diagonal", names[1], "::kaldi::AffineXformStats", a[1]);
  ::kaldi::MatrixBase<float> * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("compute_fmllr_matrix_diag_gmm_diagonal", names[2], "::kaldi::MatrixBase<float> *", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::ComputeFmllrMatrixDiagGmmDiagonal(*arg1, *arg2, arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// compute_fmllr_matrix_diag_gmm_offset(in_xform:MatrixBase, stats:AffineXformStats, out_xform:MatrixBase) -> float
static PyObject* wrapComputeFmllrMatrixDiagGmmOffset_as_compute_fmllr_matrix_diag_gmm_offset(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("in_xform"),
      C("stats"),
      C("out_xform"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:compute_fmllr_matrix_diag_gmm_offset", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_fmllr_matrix_diag_gmm_offset", names[0], "::kaldi::MatrixBase<float>", a[0]);
  ::kaldi::AffineXformStats* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute_fmllr_matrix_diag_gmm_offset", names[1], "::kaldi::AffineXformStats", a[1]);
  ::kaldi::MatrixBase<float> * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("compute_fmllr_matrix_diag_gmm_offset", names[2], "::kaldi::MatrixBase<float> *", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::ComputeFmllrMatrixDiagGmmOffset(*arg1, *arg2, arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// compute_fmllr_matrix_diag_gmm(in_xform:MatrixBase, stats:AffineXformStats, fmllr_type:str, num_iters:int, out_xform:MatrixBase) -> float
static PyObject* wrapComputeFmllrMatrixDiagGmm_as_compute_fmllr_matrix_diag_gmm(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[5];
  char* names[] = {
      C("in_xform"),
      C("stats"),
      C("fmllr_type"),
      C("num_iters"),
      C("out_xform"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOO:compute_fmllr_matrix_diag_gmm", names, &a[0], &a[1], &a[2], &a[3], &a[4])) return nullptr;
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_fmllr_matrix_diag_gmm", names[0], "::kaldi::MatrixBase<float>", a[0]);
  ::kaldi::AffineXformStats* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute_fmllr_matrix_diag_gmm", names[1], "::kaldi::AffineXformStats", a[1]);
  ::std::string arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("compute_fmllr_matrix_diag_gmm", names[2], "::std::string", a[2]);
  int arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("compute_fmllr_matrix_diag_gmm", names[3], "int", a[3]);
  ::kaldi::MatrixBase<float> * arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("compute_fmllr_matrix_diag_gmm", names[4], "::kaldi::MatrixBase<float> *", a[4]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::ComputeFmllrMatrixDiagGmm(*arg1, *arg2, std::move(arg3), std::move(arg4), arg5);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// fmllr_aux_func_diag_gmm(xform:MatrixBase, stats:AffineXformStats) -> float
static PyObject* wrapFmllrAuxFuncDiagGmm_as_fmllr_aux_func_diag_gmm(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("xform"),
      C("stats"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:fmllr_aux_func_diag_gmm", names, &a[0], &a[1])) return nullptr;
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("fmllr_aux_func_diag_gmm", names[0], "::kaldi::MatrixBase<float>", a[0]);
  ::kaldi::AffineXformStats* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("fmllr_aux_func_diag_gmm", names[1], "::kaldi::AffineXformStats", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::FmllrAuxFuncDiagGmm(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// fmllr_aux_func_diag_gmm_double(xform:DoubleMatrixBase, stats:AffineXformStats) -> float
static PyObject* wrapFmllrAuxFuncDiagGmm_as_fmllr_aux_func_diag_gmm_double(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("xform"),
      C("stats"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:fmllr_aux_func_diag_gmm_double", names, &a[0], &a[1])) return nullptr;
  ::kaldi::MatrixBase<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("fmllr_aux_func_diag_gmm_double", names[0], "::kaldi::MatrixBase<double>", a[0]);
  ::kaldi::AffineXformStats* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("fmllr_aux_func_diag_gmm_double", names[1], "::kaldi::AffineXformStats", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  double ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::FmllrAuxFuncDiagGmm(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// fmllr_auxf_gradient(xform:MatrixBase, stats:AffineXformStats, grad_out:MatrixBase) -> float
static PyObject* wrapFmllrAuxfGradient_as_fmllr_auxf_gradient(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("xform"),
      C("stats"),
      C("grad_out"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:fmllr_auxf_gradient", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("fmllr_auxf_gradient", names[0], "::kaldi::MatrixBase<float>", a[0]);
  ::kaldi::AffineXformStats* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("fmllr_auxf_gradient", names[1], "::kaldi::AffineXformStats", a[1]);
  ::kaldi::MatrixBase<float> * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("fmllr_auxf_gradient", names[2], "::kaldi::MatrixBase<float> *", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::FmllrAuxfGradient(*arg1, *arg2, arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// apply_feature_transform_to_stats(xform:MatrixBase, stats:AffineXformStats)
static PyObject* wrapApplyFeatureTransformToStats_as_apply_feature_transform_to_stats(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("xform"),
      C("stats"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:apply_feature_transform_to_stats", names, &a[0], &a[1])) return nullptr;
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("apply_feature_transform_to_stats", names[0], "::kaldi::MatrixBase<float>", a[0]);
  ::kaldi::AffineXformStats * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("apply_feature_transform_to_stats", names[1], "::kaldi::AffineXformStats *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::ApplyFeatureTransformToStats(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// apply_model_transform_to_stats(xform:MatrixBase, stats:AffineXformStats)
static PyObject* wrapApplyModelTransformToStats_as_apply_model_transform_to_stats(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("xform"),
      C("stats"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:apply_model_transform_to_stats", names, &a[0], &a[1])) return nullptr;
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("apply_model_transform_to_stats", names[0], "::kaldi::MatrixBase<float>", a[0]);
  ::kaldi::AffineXformStats * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("apply_model_transform_to_stats", names[1], "::kaldi::AffineXformStats *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::ApplyModelTransformToStats(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("init_fmllr"), (PyCFunction)wrapInitFmllr_as_init_fmllr, METH_VARARGS | METH_KEYWORDS, C("init_fmllr(dim:int) -> Matrix\n  Calls C++ function\n  void ::kaldi::InitFmllr(int, ::kaldi::Matrix<float>*)")},
  {C("compute_fmllr_log_det"), (PyCFunction)wrapComputeFmllrLogDet_as_compute_fmllr_log_det, METH_VARARGS | METH_KEYWORDS, C("compute_fmllr_log_det(fmllr_mat:Matrix) -> float\n  Calls C++ function\n  float ::kaldi::ComputeFmllrLogDet(::kaldi::Matrix<float>)")},
  {C("compute_fmllr_matrix_diag_gmm_full"), (PyCFunction)wrapComputeFmllrMatrixDiagGmmFull_as_compute_fmllr_matrix_diag_gmm_full, METH_VARARGS | METH_KEYWORDS, C("compute_fmllr_matrix_diag_gmm_full(in_xform:MatrixBase, stats:AffineXformStats, num_iters:int, out_xform:MatrixBase) -> float\n  Calls C++ function\n  float ::kaldi::ComputeFmllrMatrixDiagGmmFull(::kaldi::MatrixBase<float>, ::kaldi::AffineXformStats, int, ::kaldi::MatrixBase<float> *)")},
  {C("compute_fmllr_matrix_diag_gmm_diagonal"), (PyCFunction)wrapComputeFmllrMatrixDiagGmmDiagonal_as_compute_fmllr_matrix_diag_gmm_diagonal, METH_VARARGS | METH_KEYWORDS, C("compute_fmllr_matrix_diag_gmm_diagonal(in_xform:MatrixBase, stats:AffineXformStats, out_xform:MatrixBase) -> float\n  Calls C++ function\n  float ::kaldi::ComputeFmllrMatrixDiagGmmDiagonal(::kaldi::MatrixBase<float>, ::kaldi::AffineXformStats, ::kaldi::MatrixBase<float> *)")},
  {C("compute_fmllr_matrix_diag_gmm_offset"), (PyCFunction)wrapComputeFmllrMatrixDiagGmmOffset_as_compute_fmllr_matrix_diag_gmm_offset, METH_VARARGS | METH_KEYWORDS, C("compute_fmllr_matrix_diag_gmm_offset(in_xform:MatrixBase, stats:AffineXformStats, out_xform:MatrixBase) -> float\n  Calls C++ function\n  float ::kaldi::ComputeFmllrMatrixDiagGmmOffset(::kaldi::MatrixBase<float>, ::kaldi::AffineXformStats, ::kaldi::MatrixBase<float> *)")},
  {C("compute_fmllr_matrix_diag_gmm"), (PyCFunction)wrapComputeFmllrMatrixDiagGmm_as_compute_fmllr_matrix_diag_gmm, METH_VARARGS | METH_KEYWORDS, C("compute_fmllr_matrix_diag_gmm(in_xform:MatrixBase, stats:AffineXformStats, fmllr_type:str, num_iters:int, out_xform:MatrixBase) -> float\n  Calls C++ function\n  float ::kaldi::ComputeFmllrMatrixDiagGmm(::kaldi::MatrixBase<float>, ::kaldi::AffineXformStats, ::std::string, int, ::kaldi::MatrixBase<float> *)")},
  {C("fmllr_aux_func_diag_gmm"), (PyCFunction)wrapFmllrAuxFuncDiagGmm_as_fmllr_aux_func_diag_gmm, METH_VARARGS | METH_KEYWORDS, C("fmllr_aux_func_diag_gmm(xform:MatrixBase, stats:AffineXformStats) -> float\n  Calls C++ function\n  float ::kaldi::FmllrAuxFuncDiagGmm(::kaldi::MatrixBase<float>, ::kaldi::AffineXformStats)")},
  {C("fmllr_aux_func_diag_gmm_double"), (PyCFunction)wrapFmllrAuxFuncDiagGmm_as_fmllr_aux_func_diag_gmm_double, METH_VARARGS | METH_KEYWORDS, C("fmllr_aux_func_diag_gmm_double(xform:DoubleMatrixBase, stats:AffineXformStats) -> float\n  Calls C++ function\n  double ::kaldi::FmllrAuxFuncDiagGmm(::kaldi::MatrixBase<double>, ::kaldi::AffineXformStats)")},
  {C("fmllr_auxf_gradient"), (PyCFunction)wrapFmllrAuxfGradient_as_fmllr_auxf_gradient, METH_VARARGS | METH_KEYWORDS, C("fmllr_auxf_gradient(xform:MatrixBase, stats:AffineXformStats, grad_out:MatrixBase) -> float\n  Calls C++ function\n  float ::kaldi::FmllrAuxfGradient(::kaldi::MatrixBase<float>, ::kaldi::AffineXformStats, ::kaldi::MatrixBase<float> *)")},
  {C("apply_feature_transform_to_stats"), (PyCFunction)wrapApplyFeatureTransformToStats_as_apply_feature_transform_to_stats, METH_VARARGS | METH_KEYWORDS, C("apply_feature_transform_to_stats(xform:MatrixBase, stats:AffineXformStats)\n  Calls C++ function\n  void ::kaldi::ApplyFeatureTransformToStats(::kaldi::MatrixBase<float>, ::kaldi::AffineXformStats *)")},
  {C("apply_model_transform_to_stats"), (PyCFunction)wrapApplyModelTransformToStats_as_apply_model_transform_to_stats, METH_VARARGS | METH_KEYWORDS, C("apply_model_transform_to_stats(xform:MatrixBase, stats:AffineXformStats)\n  Calls C++ function\n  void ::kaldi::ApplyModelTransformToStats(::kaldi::MatrixBase<float>, ::kaldi::AffineXformStats *)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyFmllrOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyFmllrOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  PyObject* base_cls = ImportFQName("kaldi.transform._transform_common.AffineXformStats");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.transform._transform_common.AffineXformStats is not a new style class inheriting from object.");
    return false;
  }
  pyFmllrDiagGmmAccs::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyFmllrDiagGmmAccs::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.transform._transform_common.AffineXformStats is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyFmllrDiagGmmAccs::wrapper_Type) < 0) return false;
  Py_INCREF(&pyFmllrDiagGmmAccs::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_fmllr_diag_gmm",  // module name
  "CLIF-generated module for transform/fmllr-diag-gmm.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_diag_gmm")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_mle_full_gmm")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_transform_common")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "FmllrOptions", reinterpret_cast<PyObject*>(&pyFmllrOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "FmllrDiagGmmAccs", reinterpret_cast<PyObject*>(&pyFmllrDiagGmmAccs::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __fmllr__diag__gmm_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// FmllrDiagGmmAccs to/from ::kaldi::FmllrDiagGmmAccs conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::FmllrDiagGmmAccs** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::FmllrDiagGmmAccs* cpp = __fmllr__diag__gmm_clifwrap::pyFmllrDiagGmmAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::FmllrDiagGmmAccs>* c) {
  assert(c != nullptr);
  ::kaldi::FmllrDiagGmmAccs* cpp = __fmllr__diag__gmm_clifwrap::pyFmllrDiagGmmAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__fmllr__diag__gmm_clifwrap::pyFmllrDiagGmmAccs::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::FmllrDiagGmmAccs>* c) {
  assert(c != nullptr);
  ::kaldi::FmllrDiagGmmAccs* cpp = __fmllr__diag__gmm_clifwrap::pyFmllrDiagGmmAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__fmllr__diag__gmm_clifwrap::pyFmllrDiagGmmAccs::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert FmllrDiagGmmAccs instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::FmllrDiagGmmAccs* c) {
  assert(c != nullptr);
  ::kaldi::FmllrDiagGmmAccs* cpp = __fmllr__diag__gmm_clifwrap::pyFmllrDiagGmmAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::FmllrDiagGmmAccs>* c) {
  assert(c != nullptr);
  ::kaldi::FmllrDiagGmmAccs* cpp = __fmllr__diag__gmm_clifwrap::pyFmllrDiagGmmAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::FmllrDiagGmmAccs* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmllr__diag__gmm_clifwrap::pyFmllrDiagGmmAccs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__diag__gmm_clifwrap::pyFmllrDiagGmmAccs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmllrDiagGmmAccs>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::FmllrDiagGmmAccs> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmllr__diag__gmm_clifwrap::pyFmllrDiagGmmAccs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__diag__gmm_clifwrap::pyFmllrDiagGmmAccs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmllrDiagGmmAccs>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::FmllrDiagGmmAccs> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmllr__diag__gmm_clifwrap::pyFmllrDiagGmmAccs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__diag__gmm_clifwrap::pyFmllrDiagGmmAccs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmllrDiagGmmAccs>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::FmllrDiagGmmAccs& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__fmllr__diag__gmm_clifwrap::pyFmllrDiagGmmAccs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__diag__gmm_clifwrap::pyFmllrDiagGmmAccs::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::FmllrDiagGmmAccs>(c);
  return py;
}

// FmllrOptions to/from ::kaldi::FmllrOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::FmllrOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::FmllrOptions* cpp = __fmllr__diag__gmm_clifwrap::pyFmllrOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::FmllrOptions>* c) {
  assert(c != nullptr);
  ::kaldi::FmllrOptions* cpp = __fmllr__diag__gmm_clifwrap::pyFmllrOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__fmllr__diag__gmm_clifwrap::pyFmllrOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::FmllrOptions>* c) {
  assert(c != nullptr);
  ::kaldi::FmllrOptions* cpp = __fmllr__diag__gmm_clifwrap::pyFmllrOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__fmllr__diag__gmm_clifwrap::pyFmllrOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert FmllrOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::FmllrOptions* c) {
  assert(c != nullptr);
  ::kaldi::FmllrOptions* cpp = __fmllr__diag__gmm_clifwrap::pyFmllrOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::FmllrOptions>* c) {
  assert(c != nullptr);
  ::kaldi::FmllrOptions* cpp = __fmllr__diag__gmm_clifwrap::pyFmllrOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::FmllrOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmllr__diag__gmm_clifwrap::pyFmllrOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__diag__gmm_clifwrap::pyFmllrOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmllrOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::FmllrOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmllr__diag__gmm_clifwrap::pyFmllrOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__diag__gmm_clifwrap::pyFmllrOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmllrOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::FmllrOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmllr__diag__gmm_clifwrap::pyFmllrOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__diag__gmm_clifwrap::pyFmllrOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmllrOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::FmllrOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__fmllr__diag__gmm_clifwrap::pyFmllrOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__diag__gmm_clifwrap::pyFmllrOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::FmllrOptions>(c);
  return py;
}

}  // namespace kaldi
