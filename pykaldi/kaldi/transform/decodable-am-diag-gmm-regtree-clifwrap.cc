//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/transform/decodable-am-diag-gmm-regtree.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "gmm/am-diag-gmm-clifwrap.h"
#include "hmm/transition-model-clifwrap.h"
#include "transform/regression-tree-clifwrap.h"
#include "transform/regtree-fmllr-diag-gmm-clifwrap.h"
#include "transform/regtree-mllr-diag-gmm-clifwrap.h"
#include "decodable-am-diag-gmm-regtree-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __decodable__am__diag__gmm__regtree_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyDecodableAmDiagGmmRegtreeFmllr {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::DecodableAmDiagGmmRegtreeFmllr> cpp;
};
static ::kaldi::DecodableAmDiagGmmRegtreeFmllr* ThisPtr(PyObject*);

// __init__(am:AmDiagGmm, tm:TransitionModel, feats:Matrix, fmllr_xform:RegtreeFmllrDiagGmm, regtree:RegressionTree, scale:float, log_sum_exp_prune:float=default)
static PyObject* wrapDecodableAmDiagGmmRegtreeFmllr_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[7]{};
  char* names[] = {
      C("am"),
      C("tm"),
      C("feats"),
      C("fmllr_xform"),
      C("regtree"),
      C("scale"),
      C("log_sum_exp_prune"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOOO|O:__init__", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5], &a[6])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 7; nargs > 6; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::AmDiagGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::AmDiagGmm", a[0]);
  ::kaldi::TransitionModel* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::TransitionModel", a[1]);
  ::kaldi::Matrix<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::kaldi::Matrix<float>", a[2]);
  ::kaldi::RegtreeFmllrDiagGmm* arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "::kaldi::RegtreeFmllrDiagGmm", a[3]);
  ::kaldi::RegressionTree* arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("__init__", names[4], "::kaldi::RegressionTree", a[4]);
  float arg6;
  if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("__init__", names[5], "float", a[5]);
  float arg7;
  if (nargs > 6) {
    if (!a[6]) arg7 = (float)-1.000000e+00;
    else if (!Clif_PyObjAs(a[6], &arg7)) return ArgError("__init__", names[6], "float", a[6]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 6:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::DecodableAmDiagGmmRegtreeFmllr>(*arg1, *arg2, *arg3, *arg4, *arg5, std::move(arg6)); break;
  case 7:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::DecodableAmDiagGmmRegtreeFmllr>(*arg1, *arg2, *arg3, *arg4, *arg5, std::move(arg6), std::move(arg7)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// log_likelihood(frame:int, index:int) -> float
static PyObject* wrapLogLikelihood_as_log_likelihood(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:log_likelihood", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("log_likelihood", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("log_likelihood", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::DecodableAmDiagGmmRegtreeFmllr* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->LogLikelihood(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_frames_ready() -> int
static PyObject* wrapNumFramesReady_as_num_frames_ready(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::DecodableAmDiagGmmRegtreeFmllr* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFramesReady();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_indices() -> int
static PyObject* wrapNumIndices_as_num_indices(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::DecodableAmDiagGmmRegtreeFmllr* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumIndices();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::kaldi::DecodableAmDiagGmmUnmapped*
static PyObject* as_kaldi_DecodableAmDiagGmmUnmapped(PyObject* self) {
  ::kaldi::DecodableAmDiagGmmUnmapped* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::DecodableAmDiagGmmUnmapped"), nullptr);
}

// Implicit cast this as ::kaldi::DecodableInterface*
static PyObject* as_kaldi_DecodableInterface(PyObject* self) {
  ::kaldi::DecodableInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::DecodableInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapDecodableAmDiagGmmRegtreeFmllr_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(am:AmDiagGmm, tm:TransitionModel, feats:Matrix, fmllr_xform:RegtreeFmllrDiagGmm, regtree:RegressionTree, scale:float, log_sum_exp_prune:float=default)\n  Calls C++ function\n  void ::kaldi::DecodableAmDiagGmmRegtreeFmllr::DecodableAmDiagGmmRegtreeFmllr(::kaldi::AmDiagGmm, ::kaldi::TransitionModel, ::kaldi::Matrix<float>, ::kaldi::RegtreeFmllrDiagGmm, ::kaldi::RegressionTree, float, float)")},
  {C("log_likelihood"), (PyCFunction)wrapLogLikelihood_as_log_likelihood, METH_VARARGS | METH_KEYWORDS, C("log_likelihood(frame:int, index:int) -> float\n\nReturns the log-likehood of the given index for the given frame.")},
  {C("num_frames_ready"), (PyCFunction)wrapNumFramesReady_as_num_frames_ready, METH_NOARGS, C("num_frames_ready() -> int\n\nReturns number of frames ready for decoding.")},
  {C("num_indices"), (PyCFunction)wrapNumIndices_as_num_indices, METH_NOARGS, C("num_indices() -> int\n\nReturns number of indices.")},
  {C("as_kaldi_DecodableAmDiagGmmUnmapped"), (PyCFunction)as_kaldi_DecodableAmDiagGmmUnmapped, METH_NOARGS, C("Upcast to ::kaldi::DecodableAmDiagGmmUnmapped*")},
  {C("as_kaldi_DecodableInterface"), (PyCFunction)as_kaldi_DecodableInterface, METH_NOARGS, C("Upcast to ::kaldi::DecodableInterface*")},
  {}
};

// DecodableAmDiagGmmRegtreeFmllr __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// DecodableAmDiagGmmRegtreeFmllr __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// DecodableAmDiagGmmRegtreeFmllr __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_decodable_am_diag_gmm_regtree.DecodableAmDiagGmmRegtreeFmllr", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::DecodableAmDiagGmmRegtreeFmllr", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapDecodableAmDiagGmmRegtreeFmllr_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::DecodableAmDiagGmmRegtreeFmllr* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_DecodableAmDiagGmmRegtreeFmllr"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::DecodableAmDiagGmmRegtreeFmllr"));
      if (!PyErr_Occurred()) {
        ::kaldi::DecodableAmDiagGmmRegtreeFmllr* c = static_cast<::kaldi::DecodableAmDiagGmmRegtreeFmllr*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::DecodableAmDiagGmmRegtreeFmllr*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyDecodableAmDiagGmmRegtreeFmllr

namespace pyDecodableAmDiagGmmRegtreeMllr {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::DecodableAmDiagGmmRegtreeMllr> cpp;
};
static ::kaldi::DecodableAmDiagGmmRegtreeMllr* ThisPtr(PyObject*);

// __init__(am:AmDiagGmm, tm:TransitionModel, feats:Matrix, mllr_xform:RegtreeMllrDiagGmm, regtree:RegressionTree, scale:float, log_sum_exp_prune:float=default)
static PyObject* wrapDecodableAmDiagGmmRegtreeMllr_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[7]{};
  char* names[] = {
      C("am"),
      C("tm"),
      C("feats"),
      C("mllr_xform"),
      C("regtree"),
      C("scale"),
      C("log_sum_exp_prune"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOOO|O:__init__", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5], &a[6])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 7; nargs > 6; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::AmDiagGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::AmDiagGmm", a[0]);
  ::kaldi::TransitionModel* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::TransitionModel", a[1]);
  ::kaldi::Matrix<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::kaldi::Matrix<float>", a[2]);
  ::kaldi::RegtreeMllrDiagGmm* arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "::kaldi::RegtreeMllrDiagGmm", a[3]);
  ::kaldi::RegressionTree* arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("__init__", names[4], "::kaldi::RegressionTree", a[4]);
  float arg6;
  if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("__init__", names[5], "float", a[5]);
  float arg7;
  if (nargs > 6) {
    if (!a[6]) arg7 = (float)-1.000000e+00;
    else if (!Clif_PyObjAs(a[6], &arg7)) return ArgError("__init__", names[6], "float", a[6]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 6:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::DecodableAmDiagGmmRegtreeMllr>(*arg1, *arg2, *arg3, *arg4, *arg5, std::move(arg6)); break;
  case 7:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::DecodableAmDiagGmmRegtreeMllr>(*arg1, *arg2, *arg3, *arg4, *arg5, std::move(arg6), std::move(arg7)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// log_likelihood(frame:int, index:int) -> float
static PyObject* wrapLogLikelihood_as_log_likelihood(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:log_likelihood", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("log_likelihood", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("log_likelihood", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::DecodableAmDiagGmmRegtreeMllr* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->LogLikelihood(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_frames_ready() -> int
static PyObject* wrapNumFramesReady_as_num_frames_ready(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::DecodableAmDiagGmmRegtreeMllr* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFramesReady();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_indices() -> int
static PyObject* wrapNumIndices_as_num_indices(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::DecodableAmDiagGmmRegtreeMllr* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumIndices();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// trans_model() -> TransitionModel
static PyObject* wrapTransModel_as_trans_model(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::DecodableAmDiagGmmRegtreeMllr* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  const ::kaldi::TransitionModel * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->TransModel();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::kaldi::DecodableAmDiagGmmUnmapped*
static PyObject* as_kaldi_DecodableAmDiagGmmUnmapped(PyObject* self) {
  ::kaldi::DecodableAmDiagGmmUnmapped* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::DecodableAmDiagGmmUnmapped"), nullptr);
}

// Implicit cast this as ::kaldi::DecodableInterface*
static PyObject* as_kaldi_DecodableInterface(PyObject* self) {
  ::kaldi::DecodableInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::DecodableInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapDecodableAmDiagGmmRegtreeMllr_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(am:AmDiagGmm, tm:TransitionModel, feats:Matrix, mllr_xform:RegtreeMllrDiagGmm, regtree:RegressionTree, scale:float, log_sum_exp_prune:float=default)\n  Calls C++ function\n  void ::kaldi::DecodableAmDiagGmmRegtreeMllr::DecodableAmDiagGmmRegtreeMllr(::kaldi::AmDiagGmm, ::kaldi::TransitionModel, ::kaldi::Matrix<float>, ::kaldi::RegtreeMllrDiagGmm, ::kaldi::RegressionTree, float, float)")},
  {C("log_likelihood"), (PyCFunction)wrapLogLikelihood_as_log_likelihood, METH_VARARGS | METH_KEYWORDS, C("log_likelihood(frame:int, index:int) -> float\n\nReturns the log-likehood of the given index for the given frame.")},
  {C("num_frames_ready"), (PyCFunction)wrapNumFramesReady_as_num_frames_ready, METH_NOARGS, C("num_frames_ready() -> int\n\nReturns number of frames ready for decoding.")},
  {C("num_indices"), (PyCFunction)wrapNumIndices_as_num_indices, METH_NOARGS, C("num_indices() -> int\n\nReturns number of indices.")},
  {C("trans_model"), (PyCFunction)wrapTransModel_as_trans_model, METH_NOARGS, C("trans_model() -> TransitionModel\n\nReturns the transition model.")},
  {C("as_kaldi_DecodableAmDiagGmmUnmapped"), (PyCFunction)as_kaldi_DecodableAmDiagGmmUnmapped, METH_NOARGS, C("Upcast to ::kaldi::DecodableAmDiagGmmUnmapped*")},
  {C("as_kaldi_DecodableInterface"), (PyCFunction)as_kaldi_DecodableInterface, METH_NOARGS, C("Upcast to ::kaldi::DecodableInterface*")},
  {}
};

// DecodableAmDiagGmmRegtreeMllr __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// DecodableAmDiagGmmRegtreeMllr __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// DecodableAmDiagGmmRegtreeMllr __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_decodable_am_diag_gmm_regtree.DecodableAmDiagGmmRegtreeMllr", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::DecodableAmDiagGmmRegtreeMllr", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapDecodableAmDiagGmmRegtreeMllr_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::DecodableAmDiagGmmRegtreeMllr* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_DecodableAmDiagGmmRegtreeMllr"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::DecodableAmDiagGmmRegtreeMllr"));
      if (!PyErr_Occurred()) {
        ::kaldi::DecodableAmDiagGmmRegtreeMllr* c = static_cast<::kaldi::DecodableAmDiagGmmRegtreeMllr*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::DecodableAmDiagGmmRegtreeMllr*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyDecodableAmDiagGmmRegtreeMllr


// Initialize module

bool Ready() {
  PyObject* base_cls = ImportFQName("kaldi.gmm._decodable_am_diag_gmm.DecodableAmDiagGmmUnmapped");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.gmm._decodable_am_diag_gmm.DecodableAmDiagGmmUnmapped is not a new style class inheriting from object.");
    return false;
  }
  pyDecodableAmDiagGmmRegtreeFmllr::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyDecodableAmDiagGmmRegtreeFmllr::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.gmm._decodable_am_diag_gmm.DecodableAmDiagGmmUnmapped is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyDecodableAmDiagGmmRegtreeFmllr::wrapper_Type) < 0) return false;
  Py_INCREF(&pyDecodableAmDiagGmmRegtreeFmllr::wrapper_Type);  // For PyModule_AddObject to steal.
  Py_INCREF(base_cls);
  pyDecodableAmDiagGmmRegtreeMllr::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  if (PyType_Ready(&pyDecodableAmDiagGmmRegtreeMllr::wrapper_Type) < 0) return false;
  Py_INCREF(&pyDecodableAmDiagGmmRegtreeMllr::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_decodable_am_diag_gmm_regtree",  // module name
  "CLIF-generated module for transform/decodable-am-diag-gmm-regtree.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_am_diag_gmm")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_transition_model")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_regression_tree")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_regtree_fmllr_diag_gmm")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_regtree_mllr_diag_gmm")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "DecodableAmDiagGmmRegtreeFmllr", reinterpret_cast<PyObject*>(&pyDecodableAmDiagGmmRegtreeFmllr::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "DecodableAmDiagGmmRegtreeMllr", reinterpret_cast<PyObject*>(&pyDecodableAmDiagGmmRegtreeMllr::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __decodable__am__diag__gmm__regtree_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// DecodableAmDiagGmmRegtreeFmllr to/from ::kaldi::DecodableAmDiagGmmRegtreeFmllr conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::DecodableAmDiagGmmRegtreeFmllr** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::DecodableAmDiagGmmRegtreeFmllr* cpp = __decodable__am__diag__gmm__regtree_clifwrap::pyDecodableAmDiagGmmRegtreeFmllr::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::DecodableAmDiagGmmRegtreeFmllr>* c) {
  assert(c != nullptr);
  ::kaldi::DecodableAmDiagGmmRegtreeFmllr* cpp = __decodable__am__diag__gmm__regtree_clifwrap::pyDecodableAmDiagGmmRegtreeFmllr::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__decodable__am__diag__gmm__regtree_clifwrap::pyDecodableAmDiagGmmRegtreeFmllr::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::DecodableAmDiagGmmRegtreeFmllr>* c) {
  assert(c != nullptr);
  ::kaldi::DecodableAmDiagGmmRegtreeFmllr* cpp = __decodable__am__diag__gmm__regtree_clifwrap::pyDecodableAmDiagGmmRegtreeFmllr::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__decodable__am__diag__gmm__regtree_clifwrap::pyDecodableAmDiagGmmRegtreeFmllr::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert DecodableAmDiagGmmRegtreeFmllr instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::DecodableAmDiagGmmRegtreeFmllr* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__am__diag__gmm__regtree_clifwrap::pyDecodableAmDiagGmmRegtreeFmllr::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__am__diag__gmm__regtree_clifwrap::pyDecodableAmDiagGmmRegtreeFmllr::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableAmDiagGmmRegtreeFmllr>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::DecodableAmDiagGmmRegtreeFmllr> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__am__diag__gmm__regtree_clifwrap::pyDecodableAmDiagGmmRegtreeFmllr::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__am__diag__gmm__regtree_clifwrap::pyDecodableAmDiagGmmRegtreeFmllr::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableAmDiagGmmRegtreeFmllr>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::DecodableAmDiagGmmRegtreeFmllr> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__am__diag__gmm__regtree_clifwrap::pyDecodableAmDiagGmmRegtreeFmllr::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__am__diag__gmm__regtree_clifwrap::pyDecodableAmDiagGmmRegtreeFmllr::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableAmDiagGmmRegtreeFmllr>(std::move(c));
  return py;
}

// DecodableAmDiagGmmRegtreeMllr to/from ::kaldi::DecodableAmDiagGmmRegtreeMllr conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::DecodableAmDiagGmmRegtreeMllr** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::DecodableAmDiagGmmRegtreeMllr* cpp = __decodable__am__diag__gmm__regtree_clifwrap::pyDecodableAmDiagGmmRegtreeMllr::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::DecodableAmDiagGmmRegtreeMllr>* c) {
  assert(c != nullptr);
  ::kaldi::DecodableAmDiagGmmRegtreeMllr* cpp = __decodable__am__diag__gmm__regtree_clifwrap::pyDecodableAmDiagGmmRegtreeMllr::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__decodable__am__diag__gmm__regtree_clifwrap::pyDecodableAmDiagGmmRegtreeMllr::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::DecodableAmDiagGmmRegtreeMllr>* c) {
  assert(c != nullptr);
  ::kaldi::DecodableAmDiagGmmRegtreeMllr* cpp = __decodable__am__diag__gmm__regtree_clifwrap::pyDecodableAmDiagGmmRegtreeMllr::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__decodable__am__diag__gmm__regtree_clifwrap::pyDecodableAmDiagGmmRegtreeMllr::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert DecodableAmDiagGmmRegtreeMllr instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::DecodableAmDiagGmmRegtreeMllr* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__am__diag__gmm__regtree_clifwrap::pyDecodableAmDiagGmmRegtreeMllr::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__am__diag__gmm__regtree_clifwrap::pyDecodableAmDiagGmmRegtreeMllr::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableAmDiagGmmRegtreeMllr>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::DecodableAmDiagGmmRegtreeMllr> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__am__diag__gmm__regtree_clifwrap::pyDecodableAmDiagGmmRegtreeMllr::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__am__diag__gmm__regtree_clifwrap::pyDecodableAmDiagGmmRegtreeMllr::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableAmDiagGmmRegtreeMllr>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::DecodableAmDiagGmmRegtreeMllr> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__am__diag__gmm__regtree_clifwrap::pyDecodableAmDiagGmmRegtreeMllr::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__am__diag__gmm__regtree_clifwrap::pyDecodableAmDiagGmmRegtreeMllr::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableAmDiagGmmRegtreeMllr>(std::move(c));
  return py;
}

}  // namespace kaldi
