//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/transform/regtree-fmllr-diag-gmm.clif

#include <memory>
#include "clif/python/optional.h"
#include "transform/regtree-fmllr-diag-gmm.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::RegtreeFmllrDiagGmm` as RegtreeFmllrDiagGmm
bool Clif_PyObjAs(PyObject* input, ::kaldi::RegtreeFmllrDiagGmm** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RegtreeFmllrDiagGmm>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RegtreeFmllrDiagGmm>* output);
PyObject* Clif_PyObjFrom(::kaldi::RegtreeFmllrDiagGmm*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RegtreeFmllrDiagGmm>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RegtreeFmllrDiagGmm>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RegtreeFmllrDiagGmm*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RegtreeFmllrDiagGmm&, py::PostConv) = delete;
// CLIF use `::kaldi::RegtreeFmllrDiagGmmAccs` as RegtreeFmllrDiagGmmAccs
bool Clif_PyObjAs(PyObject* input, ::kaldi::RegtreeFmllrDiagGmmAccs** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RegtreeFmllrDiagGmmAccs>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RegtreeFmllrDiagGmmAccs>* output);
PyObject* Clif_PyObjFrom(::kaldi::RegtreeFmllrDiagGmmAccs*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RegtreeFmllrDiagGmmAccs>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RegtreeFmllrDiagGmmAccs>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RegtreeFmllrDiagGmmAccs*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RegtreeFmllrDiagGmmAccs&, py::PostConv) = delete;
// CLIF use `::kaldi::RegtreeFmllrOptions` as RegtreeFmllrOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::RegtreeFmllrOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RegtreeFmllrOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RegtreeFmllrOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::RegtreeFmllrOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::RegtreeFmllrOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::RegtreeFmllrOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RegtreeFmllrOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RegtreeFmllrOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RegtreeFmllrOptions&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_regtree_fmllr_diag_gmm")) Py_DECREF(m);
// CLIF init_module else goto err;
