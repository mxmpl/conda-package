//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/transform/fmllr-raw.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "itf/options-itf-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "gmm/diag-gmm-clifwrap.h"
#include "fmllr-raw-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __fmllr__raw_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyFmllrRawOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::FmllrRawOptions> cpp;
};
static ::kaldi::FmllrRawOptions* ThisPtr(PyObject*);

static PyObject* get_min_count(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->min_count, {});
}

static int set_min_count(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the min_count attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->min_count)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for min_count:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_num_iters(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->num_iters, {});
}

static int set_num_iters(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the num_iters attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->num_iters)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for num_iters:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::FmllrRawOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("min_count"), get_min_count, set_min_count, C("C++ ::kaldi::BaseFloat FmllrRawOptions.min_count")},
  {C("num_iters"), get_num_iters, set_num_iters, C("C++ ::int32 FmllrRawOptions.num_iters")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::FmllrRawOptions::Register(::kaldi::OptionsItf *)")},
  {}
};

// FmllrRawOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// FmllrRawOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// FmllrRawOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_fmllr_raw.FmllrRawOptions",        // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::FmllrRawOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "FmllrRawOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::FmllrRawOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::FmllrRawOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_FmllrRawOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::FmllrRawOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::FmllrRawOptions* c = static_cast<::kaldi::FmllrRawOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::FmllrRawOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyFmllrRawOptions

namespace pyFmllrRawAccs {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::FmllrRawAccs> cpp;
};
static ::kaldi::FmllrRawAccs* ThisPtr(PyObject*);

// raw_dim() -> int
static PyObject* wrapRawDim_as_raw_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::FmllrRawAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->RawDim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// full_dim() -> int
static PyObject* wrapFullDim_as_full_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::FmllrRawAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FullDim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// splice_width() -> int
static PyObject* wrapSpliceWidth_as_splice_width(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::FmllrRawAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->SpliceWidth();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// model_dim() -> int
static PyObject* wrapModelDim_as_model_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::FmllrRawAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->ModelDim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod new(raw_dim:int, model_dim:int, full_transform:Matrix) -> FmllrRawAccs
static PyObject* wrapFmllrRawAccs_as_new(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("raw_dim"),
      C("model_dim"),
      C("full_transform"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:new", names, &a[0], &a[1], &a[2])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("new", names[1], "int", a[1]);
  ::kaldi::Matrix<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("new", names[2], "::kaldi::Matrix<float>", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::FmllrRawAccs> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::FmllrRawAccs>(std::move(arg1), std::move(arg2), *arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// accumulate_for_gmm(gmm:DiagGmm, data:VectorBase, weight:float) -> float
static PyObject* wrapAccumulateForGmm_as_accumulate_for_gmm(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("gmm"),
      C("data"),
      C("weight"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:accumulate_for_gmm", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::DiagGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_for_gmm", names[0], "::kaldi::DiagGmm", a[0]);
  ::kaldi::VectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_for_gmm", names[1], "::kaldi::VectorBase<float>", a[1]);
  float arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate_for_gmm", names[2], "float", a[2]);
  // Call actual C++ method.
  ::kaldi::FmllrRawAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->AccumulateForGmm(*arg1, *arg2, std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// accumulate_from_posteriors(gmm:DiagGmm, data:VectorBase, posteriors:VectorBase)
static PyObject* wrapAccumulateFromPosteriors_as_accumulate_from_posteriors(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("gmm"),
      C("data"),
      C("posteriors"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:accumulate_from_posteriors", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::DiagGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_from_posteriors", names[0], "::kaldi::DiagGmm", a[0]);
  ::kaldi::VectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_from_posteriors", names[1], "::kaldi::VectorBase<float>", a[1]);
  ::kaldi::VectorBase<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate_from_posteriors", names[2], "::kaldi::VectorBase<float>", a[2]);
  // Call actual C++ method.
  ::kaldi::FmllrRawAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AccumulateFromPosteriors(*arg1, *arg2, *arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// update(opts:FmllrRawOptions, raw_fmllr_mat:MatrixBase) -> (objf_impr:float, count:float)
static PyObject* wrapUpdate_as_update(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("opts"),
      C("raw_fmllr_mat"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:update", names, &a[0], &a[1])) return nullptr;
  ::kaldi::FmllrRawOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("update", names[0], "::kaldi::FmllrRawOptions", a[0]);
  ::kaldi::MatrixBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("update", names[1], "::kaldi::MatrixBase<float> *", a[1]);
  float ret0{};
  float ret1{};
  // Call actual C++ method.
  ::kaldi::FmllrRawAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Update(*arg1, arg2, &ret0, &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// set_zero()
static PyObject* wrapSetZero_as_set_zero(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::FmllrRawAccs* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetZero();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("raw_dim"), (PyCFunction)wrapRawDim_as_raw_dim, METH_NOARGS, C("raw_dim() -> int\n  Calls C++ function\n  int ::kaldi::FmllrRawAccs::RawDim()")},
  {C("full_dim"), (PyCFunction)wrapFullDim_as_full_dim, METH_NOARGS, C("full_dim() -> int\n  Calls C++ function\n  int ::kaldi::FmllrRawAccs::FullDim()")},
  {C("splice_width"), (PyCFunction)wrapSpliceWidth_as_splice_width, METH_NOARGS, C("splice_width() -> int\n  Calls C++ function\n  int ::kaldi::FmllrRawAccs::SpliceWidth()")},
  {C("model_dim"), (PyCFunction)wrapModelDim_as_model_dim, METH_NOARGS, C("model_dim() -> int\n  Calls C++ function\n  int ::kaldi::FmllrRawAccs::ModelDim()")},
  {C("new"), (PyCFunction)wrapFmllrRawAccs_as_new, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new(raw_dim:int, model_dim:int, full_transform:Matrix) -> FmllrRawAccs\n  Calls C++ function\n  std::unique_ptr<::kaldi::FmllrRawAccs> ::kaldi::FmllrRawAccs::FmllrRawAccs(int, int, ::kaldi::Matrix<float>)")},
  {C("accumulate_for_gmm"), (PyCFunction)wrapAccumulateForGmm_as_accumulate_for_gmm, METH_VARARGS | METH_KEYWORDS, C("accumulate_for_gmm(gmm:DiagGmm, data:VectorBase, weight:float) -> float\n  Calls C++ function\n  float ::kaldi::FmllrRawAccs::AccumulateForGmm(::kaldi::DiagGmm, ::kaldi::VectorBase<float>, float)")},
  {C("accumulate_from_posteriors"), (PyCFunction)wrapAccumulateFromPosteriors_as_accumulate_from_posteriors, METH_VARARGS | METH_KEYWORDS, C("accumulate_from_posteriors(gmm:DiagGmm, data:VectorBase, posteriors:VectorBase)\n  Calls C++ function\n  void ::kaldi::FmllrRawAccs::AccumulateFromPosteriors(::kaldi::DiagGmm, ::kaldi::VectorBase<float>, ::kaldi::VectorBase<float>)")},
  {C("update"), (PyCFunction)wrapUpdate_as_update, METH_VARARGS | METH_KEYWORDS, C("update(opts:FmllrRawOptions, raw_fmllr_mat:MatrixBase) -> (objf_impr:float, count:float)\n  Calls C++ function\n  void ::kaldi::FmllrRawAccs::Update(::kaldi::FmllrRawOptions, ::kaldi::MatrixBase<float> *, float*, float*)")},
  {C("set_zero"), (PyCFunction)wrapSetZero_as_set_zero, METH_NOARGS, C("set_zero()\n  Calls C++ function\n  void ::kaldi::FmllrRawAccs::SetZero()")},
  {}
};

// FmllrRawAccs __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// FmllrRawAccs __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// FmllrRawAccs __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_fmllr_raw.FmllrRawAccs",           // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::FmllrRawAccs", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "FmllrRawAccs takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::FmllrRawAccs>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::FmllrRawAccs* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_FmllrRawAccs"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::FmllrRawAccs"));
      if (!PyErr_Occurred()) {
        ::kaldi::FmllrRawAccs* c = static_cast<::kaldi::FmllrRawAccs*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::FmllrRawAccs*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyFmllrRawAccs


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyFmllrRawOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyFmllrRawOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyFmllrRawAccs::wrapper_Type) < 0) return false;
  Py_INCREF(&pyFmllrRawAccs::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_fmllr_raw",  // module name
  "CLIF-generated module for transform/fmllr-raw.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_diag_gmm")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "FmllrRawOptions", reinterpret_cast<PyObject*>(&pyFmllrRawOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "FmllrRawAccs", reinterpret_cast<PyObject*>(&pyFmllrRawAccs::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __fmllr__raw_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// FmllrRawAccs to/from ::kaldi::FmllrRawAccs conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::FmllrRawAccs** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::FmllrRawAccs* cpp = __fmllr__raw_clifwrap::pyFmllrRawAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::FmllrRawAccs>* c) {
  assert(c != nullptr);
  ::kaldi::FmllrRawAccs* cpp = __fmllr__raw_clifwrap::pyFmllrRawAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__fmllr__raw_clifwrap::pyFmllrRawAccs::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::FmllrRawAccs>* c) {
  assert(c != nullptr);
  ::kaldi::FmllrRawAccs* cpp = __fmllr__raw_clifwrap::pyFmllrRawAccs::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__fmllr__raw_clifwrap::pyFmllrRawAccs::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert FmllrRawAccs instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::FmllrRawAccs* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmllr__raw_clifwrap::pyFmllrRawAccs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__raw_clifwrap::pyFmllrRawAccs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmllrRawAccs>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::FmllrRawAccs> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmllr__raw_clifwrap::pyFmllrRawAccs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__raw_clifwrap::pyFmllrRawAccs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmllrRawAccs>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::FmllrRawAccs> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmllr__raw_clifwrap::pyFmllrRawAccs::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__raw_clifwrap::pyFmllrRawAccs::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmllrRawAccs>(std::move(c));
  return py;
}

// FmllrRawOptions to/from ::kaldi::FmllrRawOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::FmllrRawOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::FmllrRawOptions* cpp = __fmllr__raw_clifwrap::pyFmllrRawOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::FmllrRawOptions>* c) {
  assert(c != nullptr);
  ::kaldi::FmllrRawOptions* cpp = __fmllr__raw_clifwrap::pyFmllrRawOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__fmllr__raw_clifwrap::pyFmllrRawOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::FmllrRawOptions>* c) {
  assert(c != nullptr);
  ::kaldi::FmllrRawOptions* cpp = __fmllr__raw_clifwrap::pyFmllrRawOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__fmllr__raw_clifwrap::pyFmllrRawOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert FmllrRawOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::FmllrRawOptions* c) {
  assert(c != nullptr);
  ::kaldi::FmllrRawOptions* cpp = __fmllr__raw_clifwrap::pyFmllrRawOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::FmllrRawOptions>* c) {
  assert(c != nullptr);
  ::kaldi::FmllrRawOptions* cpp = __fmllr__raw_clifwrap::pyFmllrRawOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::FmllrRawOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmllr__raw_clifwrap::pyFmllrRawOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__raw_clifwrap::pyFmllrRawOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmllrRawOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::FmllrRawOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmllr__raw_clifwrap::pyFmllrRawOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__raw_clifwrap::pyFmllrRawOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmllrRawOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::FmllrRawOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fmllr__raw_clifwrap::pyFmllrRawOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__raw_clifwrap::pyFmllrRawOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FmllrRawOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::FmllrRawOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__fmllr__raw_clifwrap::pyFmllrRawOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fmllr__raw_clifwrap::pyFmllrRawOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::FmllrRawOptions>(c);
  return py;
}

}  // namespace kaldi
