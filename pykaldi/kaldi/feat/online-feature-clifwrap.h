//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/feat/online-feature.clif

#include <memory>
#include "clif/python/optional.h"
#include "feat/online-feature.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::OnlineAppendFeature` as OnlineAppendFeature
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineAppendFeature** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineAppendFeature>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineAppendFeature>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineAppendFeature* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::OnlineAppendFeature>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineAppendFeature*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineAppendFeature>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineAppendFeature>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineAppendFeature&, py::PostConv);
// CLIF use `::kaldi::OnlineCacheFeature` as OnlineCacheFeature
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineCacheFeature** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineCacheFeature>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineCacheFeature>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineCacheFeature* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::OnlineCacheFeature>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineCacheFeature*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineCacheFeature>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineCacheFeature>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineCacheFeature&, py::PostConv);
// CLIF use `::kaldi::OnlineCmvn` as OnlineCmvn
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineCmvn** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineCmvn>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineCmvn>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineCmvn* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::OnlineCmvn>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineCmvn*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineCmvn>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineCmvn>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineCmvn&, py::PostConv);
// CLIF use `::kaldi::OnlineCmvnOptions` as OnlineCmvnOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineCmvnOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineCmvnOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineCmvnOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineCmvnOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::OnlineCmvnOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineCmvnOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineCmvnOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineCmvnOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineCmvnOptions&, py::PostConv);
// CLIF use `::kaldi::OnlineCmvnState` as OnlineCmvnState
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineCmvnState** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineCmvnState>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineCmvnState>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineCmvnState* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::OnlineCmvnState>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineCmvnState*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineCmvnState>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineCmvnState>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineCmvnState&, py::PostConv);
// CLIF use `::kaldi::OnlineDeltaFeature` as OnlineDeltaFeature
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineDeltaFeature** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineDeltaFeature>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineDeltaFeature>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineDeltaFeature* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::OnlineDeltaFeature>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineDeltaFeature*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineDeltaFeature>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineDeltaFeature>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineDeltaFeature&, py::PostConv);
// CLIF use `::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>` as OnlineFbank
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineGenericBaseFeature< ::kaldi::FbankComputer>&, py::PostConv) = delete;
// CLIF use `::kaldi::OnlineMatrixFeature` as OnlineMatrixFeature
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineMatrixFeature** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineMatrixFeature>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineMatrixFeature>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineMatrixFeature*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineMatrixFeature>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineMatrixFeature>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineMatrixFeature*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineMatrixFeature&, py::PostConv) = delete;
// CLIF use `::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>` as OnlineMfcc
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineGenericBaseFeature< ::kaldi::MfccComputer>&, py::PostConv) = delete;
// CLIF use `::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>` as OnlinePlp
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineGenericBaseFeature< ::kaldi::PlpComputer>&, py::PostConv) = delete;
// CLIF use `::kaldi::OnlineSpliceFrames` as OnlineSpliceFrames
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineSpliceFrames** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineSpliceFrames>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineSpliceFrames>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineSpliceFrames* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::OnlineSpliceFrames>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineSpliceFrames*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineSpliceFrames>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineSpliceFrames>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineSpliceFrames&, py::PostConv);
// CLIF use `::kaldi::OnlineSpliceOptions` as OnlineSpliceOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineSpliceOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineSpliceOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineSpliceOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineSpliceOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::OnlineSpliceOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineSpliceOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineSpliceOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineSpliceOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineSpliceOptions&, py::PostConv);
// CLIF use `::kaldi::OnlineTransform` as OnlineTransform
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineTransform** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineTransform>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineTransform>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineTransform* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::OnlineTransform>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineTransform*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineTransform>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineTransform>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineTransform&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_online_feature")) Py_DECREF(m);
// CLIF init_module else goto err;
