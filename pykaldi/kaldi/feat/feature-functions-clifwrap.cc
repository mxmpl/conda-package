//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/feat/feature-functions.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "matrix/matrix-ext.h"
#include "feature-functions-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __feature__functions_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


// compute_power_spectrum(complex_fft:VectorBase)
static PyObject* wrapComputePowerSpectrum_as_compute_power_spectrum(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("complex_fft"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:compute_power_spectrum", names, &a[0])) return nullptr;
  ::kaldi::VectorBase<float> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_power_spectrum", names[0], "::kaldi::VectorBase<float> *", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::ComputePowerSpectrum(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

namespace pyDeltaFeaturesOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::DeltaFeaturesOptions> cpp;
};
static ::kaldi::DeltaFeaturesOptions* ThisPtr(PyObject*);

static PyObject* get_order(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->order, {});
}

static int set_order(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the order attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->order)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for order:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_window(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->window, {});
}

static int set_window(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the window attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->window)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for window:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// __init__(order:int=default, window:int=default)
static PyObject* wrapDeltaFeaturesOptions_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("order"),
      C("window"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|OO:__init__", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  int arg1;
  if (nargs > 0) {
    if (!a[0]) arg1 = (int)2;
    else if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "int", a[0]);
  }
  int arg2;
  if (nargs > 1) {
    if (!a[1]) arg2 = (int)2;
    else if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "int", a[1]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::DeltaFeaturesOptions>(); break;
  case 1:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::DeltaFeaturesOptions>(std::move(arg1)); break;
  case 2:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::DeltaFeaturesOptions>(std::move(arg1), std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("order"), get_order, set_order, C("C++ ::int32 DeltaFeaturesOptions.order")},
  {C("window"), get_window, set_window, C("C++ ::int32 DeltaFeaturesOptions.window")},
  {}
};

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapDeltaFeaturesOptions_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(order:int=default, window:int=default)\n  Calls C++ function\n  void ::kaldi::DeltaFeaturesOptions::DeltaFeaturesOptions(int, int)")},
  {}
};

// DeltaFeaturesOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// DeltaFeaturesOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// DeltaFeaturesOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_feature_functions.DeltaFeaturesOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::DeltaFeaturesOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapDeltaFeaturesOptions_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::DeltaFeaturesOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_DeltaFeaturesOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::DeltaFeaturesOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::DeltaFeaturesOptions* c = static_cast<::kaldi::DeltaFeaturesOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::DeltaFeaturesOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyDeltaFeaturesOptions

namespace pyDeltaFeatures {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::DeltaFeatures> cpp;
};
static ::kaldi::DeltaFeatures* ThisPtr(PyObject*);

// __init__(opts:DeltaFeaturesOptions)
static PyObject* wrapDeltaFeatures_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::kaldi::DeltaFeaturesOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::DeltaFeaturesOptions", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::DeltaFeatures>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// process(input_feats:MatrixBase, frame:int, output_frame:VectorBase)
static PyObject* wrapProcess_as_process(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("input_feats"),
      C("frame"),
      C("output_frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:process", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("process", names[0], "::kaldi::MatrixBase<float>", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("process", names[1], "int", a[1]);
  ::kaldi::VectorBase<float> * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("process", names[2], "::kaldi::VectorBase<float> *", a[2]);
  // Call actual C++ method.
  ::kaldi::DeltaFeatures* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Process(*arg1, std::move(arg2), arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapDeltaFeatures_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(opts:DeltaFeaturesOptions)\n  Calls C++ function\n  void ::kaldi::DeltaFeatures::DeltaFeatures(::kaldi::DeltaFeaturesOptions)")},
  {C("process"), (PyCFunction)wrapProcess_as_process, METH_VARARGS | METH_KEYWORDS, C("process(input_feats:MatrixBase, frame:int, output_frame:VectorBase)\n  Calls C++ function\n  void ::kaldi::DeltaFeatures::Process(::kaldi::MatrixBase<float>, int, ::kaldi::VectorBase<float> *)")},
  {}
};

// DeltaFeatures __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// DeltaFeatures __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// DeltaFeatures __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_feature_functions.DeltaFeatures",  // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::DeltaFeatures", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapDeltaFeatures_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::DeltaFeatures* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_DeltaFeatures"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::DeltaFeatures"));
      if (!PyErr_Occurred()) {
        ::kaldi::DeltaFeatures* c = static_cast<::kaldi::DeltaFeatures*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::DeltaFeatures*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyDeltaFeatures

namespace pyShiftedDeltaFeaturesOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::ShiftedDeltaFeaturesOptions> cpp;
};
static ::kaldi::ShiftedDeltaFeaturesOptions* ThisPtr(PyObject*);

static PyObject* get_window(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->window, {});
}

static int set_window(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the window attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->window)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for window:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_num_blocks(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->num_blocks, {});
}

static int set_num_blocks(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the num_blocks attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->num_blocks)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for num_blocks:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_block_shift(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->block_shift, {});
}

static int set_block_shift(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the block_shift attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->block_shift)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for block_shift:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("window"), get_window, set_window, C("C++ ::int32 ShiftedDeltaFeaturesOptions.window")},
  {C("num_blocks"), get_num_blocks, set_num_blocks, C("C++ ::int32 ShiftedDeltaFeaturesOptions.num_blocks")},
  {C("block_shift"), get_block_shift, set_block_shift, C("C++ ::int32 ShiftedDeltaFeaturesOptions.block_shift")},
  {}
};

// ShiftedDeltaFeaturesOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ShiftedDeltaFeaturesOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ShiftedDeltaFeaturesOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_feature_functions.ShiftedDeltaFeaturesOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::ShiftedDeltaFeaturesOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  nullptr,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "ShiftedDeltaFeaturesOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::ShiftedDeltaFeaturesOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::ShiftedDeltaFeaturesOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_ShiftedDeltaFeaturesOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::ShiftedDeltaFeaturesOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::ShiftedDeltaFeaturesOptions* c = static_cast<::kaldi::ShiftedDeltaFeaturesOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::ShiftedDeltaFeaturesOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyShiftedDeltaFeaturesOptions

namespace pyShiftedDeltaFeatures {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::ShiftedDeltaFeatures> cpp;
};
static ::kaldi::ShiftedDeltaFeatures* ThisPtr(PyObject*);

// __init__(opts:ShiftedDeltaFeaturesOptions)
static PyObject* wrapShiftedDeltaFeatures_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::kaldi::ShiftedDeltaFeaturesOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::ShiftedDeltaFeaturesOptions", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::ShiftedDeltaFeatures>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// process(input_feats:MatrixBase, frame:int, output_frame:SubVector)
static PyObject* wrapProcess_as_process(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("input_feats"),
      C("frame"),
      C("output_frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:process", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("process", names[0], "::kaldi::MatrixBase<float>", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("process", names[1], "int", a[1]);
  ::kaldi::SubVector<float> * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("process", names[2], "::kaldi::SubVector<float> *", a[2]);
  // Call actual C++ method.
  ::kaldi::ShiftedDeltaFeatures* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Process(*arg1, std::move(arg2), arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapShiftedDeltaFeatures_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(opts:ShiftedDeltaFeaturesOptions)\n  Calls C++ function\n  void ::kaldi::ShiftedDeltaFeatures::ShiftedDeltaFeatures(::kaldi::ShiftedDeltaFeaturesOptions)")},
  {C("process"), (PyCFunction)wrapProcess_as_process, METH_VARARGS | METH_KEYWORDS, C("process(input_feats:MatrixBase, frame:int, output_frame:SubVector)\n  Calls C++ function\n  void ::kaldi::ShiftedDeltaFeatures::Process(::kaldi::MatrixBase<float>, int, ::kaldi::SubVector<float> *)")},
  {}
};

// ShiftedDeltaFeatures __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ShiftedDeltaFeatures __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ShiftedDeltaFeatures __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_feature_functions.ShiftedDeltaFeatures", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::ShiftedDeltaFeatures", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapShiftedDeltaFeatures_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::ShiftedDeltaFeatures* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_ShiftedDeltaFeatures"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::ShiftedDeltaFeatures"));
      if (!PyErr_Occurred()) {
        ::kaldi::ShiftedDeltaFeatures* c = static_cast<::kaldi::ShiftedDeltaFeatures*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::ShiftedDeltaFeatures*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyShiftedDeltaFeatures

// compute_deltas(delta_opts:DeltaFeaturesOptions, input_features:MatrixBase) -> Matrix
static PyObject* wrapComputeDeltas_as_compute_deltas(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("delta_opts"),
      C("input_features"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:compute_deltas", names, &a[0], &a[1])) return nullptr;
  ::kaldi::DeltaFeaturesOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_deltas", names[0], "::kaldi::DeltaFeaturesOptions", a[0]);
  ::kaldi::MatrixBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute_deltas", names[1], "::kaldi::MatrixBase<float>", a[1]);
  ::kaldi::Matrix<float> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::ComputeDeltas(*arg1, *arg2, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// compute_shift_deltas(delta_opts:ShiftedDeltaFeaturesOptions, input_features:MatrixBase) -> Matrix
static PyObject* wrapComputeShiftedDeltas_as_compute_shift_deltas(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("delta_opts"),
      C("input_features"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:compute_shift_deltas", names, &a[0], &a[1])) return nullptr;
  ::kaldi::ShiftedDeltaFeaturesOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_shift_deltas", names[0], "::kaldi::ShiftedDeltaFeaturesOptions", a[0]);
  ::kaldi::MatrixBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute_shift_deltas", names[1], "::kaldi::MatrixBase<float>", a[1]);
  ::kaldi::Matrix<float> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::ComputeShiftedDeltas(*arg1, *arg2, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// splice_frames(input_features:MatrixBase, left_context:int, right_context:int) -> Matrix
static PyObject* wrapSpliceFrames_as_splice_frames(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("input_features"),
      C("left_context"),
      C("right_context"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:splice_frames", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("splice_frames", names[0], "::kaldi::MatrixBase<float>", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("splice_frames", names[1], "int", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("splice_frames", names[2], "int", a[2]);
  ::kaldi::Matrix<float> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::SpliceFrames(*arg1, std::move(arg2), std::move(arg3), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// reverse_frames(input_features:MatrixBase) -> Matrix
static PyObject* wrapReverseFrames_as_reverse_frames(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("input_features"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:reverse_frames", names, &a[0])) return nullptr;
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("reverse_frames", names[0], "::kaldi::MatrixBase<float>", a[0]);
  ::kaldi::Matrix<float> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::ReverseFrames(*arg1, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// init_idft_bases(n_bases:int, dimension:int) -> Matrix
static PyObject* wrapInitIdftBases_as_init_idft_bases(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("n_bases"),
      C("dimension"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:init_idft_bases", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("init_idft_bases", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("init_idft_bases", names[1], "int", a[1]);
  ::kaldi::Matrix<float> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::InitIdftBases(std::move(arg1), std::move(arg2), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

namespace pySlidingWindowCmnOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::SlidingWindowCmnOptions> cpp;
};
static ::kaldi::SlidingWindowCmnOptions* ThisPtr(PyObject*);

static PyObject* get_cmn_window(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->cmn_window, {});
}

static int set_cmn_window(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the cmn_window attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->cmn_window)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for cmn_window:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_min_window(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->min_window, {});
}

static int set_min_window(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the min_window attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->min_window)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for min_window:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_normalize_variance(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->normalize_variance, {});
}

static int set_normalize_variance(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the normalize_variance attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->normalize_variance)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for normalize_variance:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_center(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->center, {});
}

static int set_center(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the center attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->center)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for center:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// check()
static PyObject* wrapCheck_as_check(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SlidingWindowCmnOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Check();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("cmn_window"), get_cmn_window, set_cmn_window, C("C++ ::int32 SlidingWindowCmnOptions.cmn_window")},
  {C("min_window"), get_min_window, set_min_window, C("C++ ::int32 SlidingWindowCmnOptions.min_window")},
  {C("normalize_variance"), get_normalize_variance, set_normalize_variance, C("C++ bool SlidingWindowCmnOptions.normalize_variance")},
  {C("center"), get_center, set_center, C("C++ bool SlidingWindowCmnOptions.center")},
  {}
};

static PyMethodDef Methods[] = {
  {C("check"), (PyCFunction)wrapCheck_as_check, METH_NOARGS, C("check()\n  Calls C++ function\n  void ::kaldi::SlidingWindowCmnOptions::Check()")},
  {}
};

// SlidingWindowCmnOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// SlidingWindowCmnOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// SlidingWindowCmnOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_feature_functions.SlidingWindowCmnOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::SlidingWindowCmnOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "SlidingWindowCmnOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::SlidingWindowCmnOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::SlidingWindowCmnOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_SlidingWindowCmnOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::SlidingWindowCmnOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::SlidingWindowCmnOptions* c = static_cast<::kaldi::SlidingWindowCmnOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::SlidingWindowCmnOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pySlidingWindowCmnOptions

// sliding_window_cmn(opts:SlidingWindowCmnOptions, input:MatrixBase, output:MatrixBase)
static PyObject* wrapSlidingWindowCmn_as_sliding_window_cmn(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("opts"),
      C("input"),
      C("output"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:sliding_window_cmn", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::SlidingWindowCmnOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("sliding_window_cmn", names[0], "::kaldi::SlidingWindowCmnOptions", a[0]);
  ::kaldi::MatrixBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("sliding_window_cmn", names[1], "::kaldi::MatrixBase<float>", a[1]);
  ::kaldi::MatrixBase<float> * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("sliding_window_cmn", names[2], "::kaldi::MatrixBase<float> *", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::SlidingWindowCmn(*arg1, *arg2, arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("compute_power_spectrum"), (PyCFunction)wrapComputePowerSpectrum_as_compute_power_spectrum, METH_VARARGS | METH_KEYWORDS, C("compute_power_spectrum(complex_fft:VectorBase)\n  Calls C++ function\n  void ::kaldi::ComputePowerSpectrum(::kaldi::VectorBase<float> *)")},
  {C("compute_deltas"), (PyCFunction)wrapComputeDeltas_as_compute_deltas, METH_VARARGS | METH_KEYWORDS, C("compute_deltas(delta_opts:DeltaFeaturesOptions, input_features:MatrixBase) -> Matrix\n  Calls C++ function\n  void ::kaldi::ComputeDeltas(::kaldi::DeltaFeaturesOptions, ::kaldi::MatrixBase<float>, ::kaldi::Matrix<float>*)")},
  {C("compute_shift_deltas"), (PyCFunction)wrapComputeShiftedDeltas_as_compute_shift_deltas, METH_VARARGS | METH_KEYWORDS, C("compute_shift_deltas(delta_opts:ShiftedDeltaFeaturesOptions, input_features:MatrixBase) -> Matrix\n  Calls C++ function\n  void ::kaldi::ComputeShiftedDeltas(::kaldi::ShiftedDeltaFeaturesOptions, ::kaldi::MatrixBase<float>, ::kaldi::Matrix<float>*)")},
  {C("splice_frames"), (PyCFunction)wrapSpliceFrames_as_splice_frames, METH_VARARGS | METH_KEYWORDS, C("splice_frames(input_features:MatrixBase, left_context:int, right_context:int) -> Matrix\n  Calls C++ function\n  void ::kaldi::SpliceFrames(::kaldi::MatrixBase<float>, int, int, ::kaldi::Matrix<float>*)")},
  {C("reverse_frames"), (PyCFunction)wrapReverseFrames_as_reverse_frames, METH_VARARGS | METH_KEYWORDS, C("reverse_frames(input_features:MatrixBase) -> Matrix\n  Calls C++ function\n  void ::kaldi::ReverseFrames(::kaldi::MatrixBase<float>, ::kaldi::Matrix<float>*)")},
  {C("init_idft_bases"), (PyCFunction)wrapInitIdftBases_as_init_idft_bases, METH_VARARGS | METH_KEYWORDS, C("init_idft_bases(n_bases:int, dimension:int) -> Matrix\n  Calls C++ function\n  void ::kaldi::InitIdftBases(int, int, ::kaldi::Matrix<float>*)")},
  {C("sliding_window_cmn"), (PyCFunction)wrapSlidingWindowCmn_as_sliding_window_cmn, METH_VARARGS | METH_KEYWORDS, C("sliding_window_cmn(opts:SlidingWindowCmnOptions, input:MatrixBase, output:MatrixBase)\n  Calls C++ function\n  void ::kaldi::SlidingWindowCmn(::kaldi::SlidingWindowCmnOptions, ::kaldi::MatrixBase<float>, ::kaldi::MatrixBase<float> *)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyDeltaFeaturesOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyDeltaFeaturesOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyDeltaFeatures::wrapper_Type) < 0) return false;
  Py_INCREF(&pyDeltaFeatures::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyShiftedDeltaFeaturesOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyShiftedDeltaFeaturesOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyShiftedDeltaFeatures::wrapper_Type) < 0) return false;
  Py_INCREF(&pyShiftedDeltaFeatures::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pySlidingWindowCmnOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pySlidingWindowCmnOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_feature_functions",  // module name
  "CLIF-generated module for feat/feature-functions.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_matrix_ext")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "DeltaFeaturesOptions", reinterpret_cast<PyObject*>(&pyDeltaFeaturesOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "DeltaFeatures", reinterpret_cast<PyObject*>(&pyDeltaFeatures::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "ShiftedDeltaFeaturesOptions", reinterpret_cast<PyObject*>(&pyShiftedDeltaFeaturesOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "ShiftedDeltaFeatures", reinterpret_cast<PyObject*>(&pyShiftedDeltaFeatures::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "SlidingWindowCmnOptions", reinterpret_cast<PyObject*>(&pySlidingWindowCmnOptions::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __feature__functions_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// DeltaFeatures to/from ::kaldi::DeltaFeatures conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::DeltaFeatures** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::DeltaFeatures* cpp = __feature__functions_clifwrap::pyDeltaFeatures::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::DeltaFeatures>* c) {
  assert(c != nullptr);
  ::kaldi::DeltaFeatures* cpp = __feature__functions_clifwrap::pyDeltaFeatures::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__feature__functions_clifwrap::pyDeltaFeatures::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::DeltaFeatures>* c) {
  assert(c != nullptr);
  ::kaldi::DeltaFeatures* cpp = __feature__functions_clifwrap::pyDeltaFeatures::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__feature__functions_clifwrap::pyDeltaFeatures::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert DeltaFeatures instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::DeltaFeatures* c) {
  assert(c != nullptr);
  ::kaldi::DeltaFeatures* cpp = __feature__functions_clifwrap::pyDeltaFeatures::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::DeltaFeatures>* c) {
  assert(c != nullptr);
  ::kaldi::DeltaFeatures* cpp = __feature__functions_clifwrap::pyDeltaFeatures::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::DeltaFeatures* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__functions_clifwrap::pyDeltaFeatures::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__functions_clifwrap::pyDeltaFeatures::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DeltaFeatures>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::DeltaFeatures> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__functions_clifwrap::pyDeltaFeatures::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__functions_clifwrap::pyDeltaFeatures::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DeltaFeatures>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::DeltaFeatures> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__functions_clifwrap::pyDeltaFeatures::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__functions_clifwrap::pyDeltaFeatures::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DeltaFeatures>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::DeltaFeatures& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__feature__functions_clifwrap::pyDeltaFeatures::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__functions_clifwrap::pyDeltaFeatures::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::DeltaFeatures>(c);
  return py;
}

// DeltaFeaturesOptions to/from ::kaldi::DeltaFeaturesOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::DeltaFeaturesOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::DeltaFeaturesOptions* cpp = __feature__functions_clifwrap::pyDeltaFeaturesOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::DeltaFeaturesOptions>* c) {
  assert(c != nullptr);
  ::kaldi::DeltaFeaturesOptions* cpp = __feature__functions_clifwrap::pyDeltaFeaturesOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__feature__functions_clifwrap::pyDeltaFeaturesOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::DeltaFeaturesOptions>* c) {
  assert(c != nullptr);
  ::kaldi::DeltaFeaturesOptions* cpp = __feature__functions_clifwrap::pyDeltaFeaturesOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__feature__functions_clifwrap::pyDeltaFeaturesOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert DeltaFeaturesOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::DeltaFeaturesOptions* c) {
  assert(c != nullptr);
  ::kaldi::DeltaFeaturesOptions* cpp = __feature__functions_clifwrap::pyDeltaFeaturesOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::DeltaFeaturesOptions>* c) {
  assert(c != nullptr);
  ::kaldi::DeltaFeaturesOptions* cpp = __feature__functions_clifwrap::pyDeltaFeaturesOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::DeltaFeaturesOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__functions_clifwrap::pyDeltaFeaturesOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__functions_clifwrap::pyDeltaFeaturesOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DeltaFeaturesOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::DeltaFeaturesOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__functions_clifwrap::pyDeltaFeaturesOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__functions_clifwrap::pyDeltaFeaturesOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DeltaFeaturesOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::DeltaFeaturesOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__functions_clifwrap::pyDeltaFeaturesOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__functions_clifwrap::pyDeltaFeaturesOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DeltaFeaturesOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::DeltaFeaturesOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__feature__functions_clifwrap::pyDeltaFeaturesOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__functions_clifwrap::pyDeltaFeaturesOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::DeltaFeaturesOptions>(c);
  return py;
}

// ShiftedDeltaFeatures to/from ::kaldi::ShiftedDeltaFeatures conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::ShiftedDeltaFeatures** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::ShiftedDeltaFeatures* cpp = __feature__functions_clifwrap::pyShiftedDeltaFeatures::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::ShiftedDeltaFeatures>* c) {
  assert(c != nullptr);
  ::kaldi::ShiftedDeltaFeatures* cpp = __feature__functions_clifwrap::pyShiftedDeltaFeatures::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__feature__functions_clifwrap::pyShiftedDeltaFeatures::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::ShiftedDeltaFeatures>* c) {
  assert(c != nullptr);
  ::kaldi::ShiftedDeltaFeatures* cpp = __feature__functions_clifwrap::pyShiftedDeltaFeatures::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__feature__functions_clifwrap::pyShiftedDeltaFeatures::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ShiftedDeltaFeatures instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::ShiftedDeltaFeatures* c) {
  assert(c != nullptr);
  ::kaldi::ShiftedDeltaFeatures* cpp = __feature__functions_clifwrap::pyShiftedDeltaFeatures::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::ShiftedDeltaFeatures>* c) {
  assert(c != nullptr);
  ::kaldi::ShiftedDeltaFeatures* cpp = __feature__functions_clifwrap::pyShiftedDeltaFeatures::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::ShiftedDeltaFeatures* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__functions_clifwrap::pyShiftedDeltaFeatures::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__functions_clifwrap::pyShiftedDeltaFeatures::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ShiftedDeltaFeatures>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::ShiftedDeltaFeatures> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__functions_clifwrap::pyShiftedDeltaFeatures::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__functions_clifwrap::pyShiftedDeltaFeatures::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ShiftedDeltaFeatures>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::ShiftedDeltaFeatures> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__functions_clifwrap::pyShiftedDeltaFeatures::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__functions_clifwrap::pyShiftedDeltaFeatures::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ShiftedDeltaFeatures>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::ShiftedDeltaFeatures& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__feature__functions_clifwrap::pyShiftedDeltaFeatures::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__functions_clifwrap::pyShiftedDeltaFeatures::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::ShiftedDeltaFeatures>(c);
  return py;
}

// ShiftedDeltaFeaturesOptions to/from ::kaldi::ShiftedDeltaFeaturesOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::ShiftedDeltaFeaturesOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::ShiftedDeltaFeaturesOptions* cpp = __feature__functions_clifwrap::pyShiftedDeltaFeaturesOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::ShiftedDeltaFeaturesOptions>* c) {
  assert(c != nullptr);
  ::kaldi::ShiftedDeltaFeaturesOptions* cpp = __feature__functions_clifwrap::pyShiftedDeltaFeaturesOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__feature__functions_clifwrap::pyShiftedDeltaFeaturesOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::ShiftedDeltaFeaturesOptions>* c) {
  assert(c != nullptr);
  ::kaldi::ShiftedDeltaFeaturesOptions* cpp = __feature__functions_clifwrap::pyShiftedDeltaFeaturesOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__feature__functions_clifwrap::pyShiftedDeltaFeaturesOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ShiftedDeltaFeaturesOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::ShiftedDeltaFeaturesOptions* c) {
  assert(c != nullptr);
  ::kaldi::ShiftedDeltaFeaturesOptions* cpp = __feature__functions_clifwrap::pyShiftedDeltaFeaturesOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::ShiftedDeltaFeaturesOptions>* c) {
  assert(c != nullptr);
  ::kaldi::ShiftedDeltaFeaturesOptions* cpp = __feature__functions_clifwrap::pyShiftedDeltaFeaturesOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::ShiftedDeltaFeaturesOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__functions_clifwrap::pyShiftedDeltaFeaturesOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__functions_clifwrap::pyShiftedDeltaFeaturesOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ShiftedDeltaFeaturesOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::ShiftedDeltaFeaturesOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__functions_clifwrap::pyShiftedDeltaFeaturesOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__functions_clifwrap::pyShiftedDeltaFeaturesOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ShiftedDeltaFeaturesOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::ShiftedDeltaFeaturesOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__functions_clifwrap::pyShiftedDeltaFeaturesOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__functions_clifwrap::pyShiftedDeltaFeaturesOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ShiftedDeltaFeaturesOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::ShiftedDeltaFeaturesOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__feature__functions_clifwrap::pyShiftedDeltaFeaturesOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__functions_clifwrap::pyShiftedDeltaFeaturesOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::ShiftedDeltaFeaturesOptions>(c);
  return py;
}

// SlidingWindowCmnOptions to/from ::kaldi::SlidingWindowCmnOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::SlidingWindowCmnOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::SlidingWindowCmnOptions* cpp = __feature__functions_clifwrap::pySlidingWindowCmnOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::SlidingWindowCmnOptions>* c) {
  assert(c != nullptr);
  ::kaldi::SlidingWindowCmnOptions* cpp = __feature__functions_clifwrap::pySlidingWindowCmnOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__feature__functions_clifwrap::pySlidingWindowCmnOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::SlidingWindowCmnOptions>* c) {
  assert(c != nullptr);
  ::kaldi::SlidingWindowCmnOptions* cpp = __feature__functions_clifwrap::pySlidingWindowCmnOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__feature__functions_clifwrap::pySlidingWindowCmnOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert SlidingWindowCmnOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::SlidingWindowCmnOptions* c) {
  assert(c != nullptr);
  ::kaldi::SlidingWindowCmnOptions* cpp = __feature__functions_clifwrap::pySlidingWindowCmnOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::SlidingWindowCmnOptions>* c) {
  assert(c != nullptr);
  ::kaldi::SlidingWindowCmnOptions* cpp = __feature__functions_clifwrap::pySlidingWindowCmnOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::SlidingWindowCmnOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__functions_clifwrap::pySlidingWindowCmnOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__functions_clifwrap::pySlidingWindowCmnOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::SlidingWindowCmnOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SlidingWindowCmnOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__functions_clifwrap::pySlidingWindowCmnOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__functions_clifwrap::pySlidingWindowCmnOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::SlidingWindowCmnOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SlidingWindowCmnOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__functions_clifwrap::pySlidingWindowCmnOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__functions_clifwrap::pySlidingWindowCmnOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::SlidingWindowCmnOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::SlidingWindowCmnOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__feature__functions_clifwrap::pySlidingWindowCmnOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__functions_clifwrap::pySlidingWindowCmnOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::SlidingWindowCmnOptions>(c);
  return py;
}

}  // namespace kaldi
