//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/lm/arpa-file-parser.clif

#include <memory>
#include "clif/python/optional.h"
#include "lm/arpa-file-parser.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::ArpaFileParser` as ArpaFileParser
bool Clif_PyObjAs(PyObject* input, ::kaldi::ArpaFileParser** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::ArpaFileParser>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::ArpaFileParser>* output);
PyObject* Clif_PyObjFrom(::kaldi::ArpaFileParser*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::ArpaFileParser>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::ArpaFileParser>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::ArpaFileParser*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::ArpaFileParser&, py::PostConv) = delete;
// CLIF use `::kaldi::ArpaParseOptions` as ArpaParseOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::ArpaParseOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::ArpaParseOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::ArpaParseOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::ArpaParseOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::ArpaParseOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::ArpaParseOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::ArpaParseOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::ArpaParseOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::ArpaParseOptions&, py::PostConv);
// CLIF use `::kaldi::ArpaParseOptions::OovHandling` as ArpaParseOptions.OovHandling
bool Clif_PyObjAs(PyObject* input, ::kaldi::ArpaParseOptions::OovHandling* output);
PyObject* Clif_PyObjFrom(const ::kaldi::ArpaParseOptions::OovHandling&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_arpa_file_parser")) Py_DECREF(m);
// CLIF init_module else goto err;
