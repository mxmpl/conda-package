//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/lm/arpa-file-parser.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "itf/options-itf-clifwrap.h"
#include "arpa-file-parser-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __arpa__file__parser_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes

static PyObject *_Enum{}, *_IntEnum{};  // set below in Init()


namespace pyArpaParseOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::ArpaParseOptions> cpp;
};
static ::kaldi::ArpaParseOptions* ThisPtr(PyObject*);

// Create Python Enum object (cached in _OovHandling) for ::kaldi::ArpaParseOptions::OovHandling
static PyObject* wrapOovHandling() {
  PyObject *py, *py_enum_class{}, *names = PyTuple_New(4);
  if (names == nullptr) return nullptr;
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("RAISE_ERROR"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::ArpaParseOptions::OovHandling>::type>(::kaldi::ArpaParseOptions::OovHandling::kRaiseError)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 0, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("ADD_TO_SYMBOLS"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::ArpaParseOptions::OovHandling>::type>(::kaldi::ArpaParseOptions::OovHandling::kAddToSymbols)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 1, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("REPLACE_WITH_UNK"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::ArpaParseOptions::OovHandling>::type>(::kaldi::ArpaParseOptions::OovHandling::kReplaceWithUnk)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 2, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("SKIP_NGRAM"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::ArpaParseOptions::OovHandling>::type>(::kaldi::ArpaParseOptions::OovHandling::kSkipNGram)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 3, py);
  py = PyUnicode_FromString("ArpaParseOptions.OovHandling");
  py_enum_class = PyObject_CallFunctionObjArgs(_IntEnum, py, names, nullptr);
  Py_DECREF(py);
err:
  Py_DECREF(names);
  return py_enum_class;
}
static PyObject* _OovHandling{};  // set by above func in Init()

static PyObject* get_bos_symbol(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->bos_symbol, {});
}

static int set_bos_symbol(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the bos_symbol attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->bos_symbol)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for bos_symbol:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_eos_symbol(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->eos_symbol, {});
}

static int set_eos_symbol(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the eos_symbol attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->eos_symbol)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for eos_symbol:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_unk_symbol(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->unk_symbol, {});
}

static int set_unk_symbol(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the unk_symbol attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->unk_symbol)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for unk_symbol:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_oov_handling(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->oov_handling, {});
}

static int set_oov_handling(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the oov_handling attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->oov_handling)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for oov_handling:OovHandling", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_max_warnings(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->max_warnings, {});
}

static int set_max_warnings(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the max_warnings attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->max_warnings)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for max_warnings:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::ArpaParseOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("bos_symbol"), get_bos_symbol, set_bos_symbol, C("Symbol for <s>, Required non-epsilon.")},
  {C("eos_symbol"), get_eos_symbol, set_eos_symbol, C("Symbol for </s>, Required non-epsilon.")},
  {C("unk_symbol"), get_unk_symbol, set_unk_symbol, C("Symbol for <unk>, Required for `OovHandling.REPLACE_WITH_UNK`.")},
  {C("oov_handling"), get_oov_handling, set_oov_handling, C("How to handle OOV words in the file.")},
  {C("max_warnings"), get_max_warnings, set_max_warnings, C("Maximum warnings to report, <0 unlimited.")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n\nRegisters options with an object implementing the options interface.\n\nArgs:\n  opts (OptionsItf): An object implementing the options interface.\n    Typically a command-line option parser.")},
  {}
};

// ArpaParseOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ArpaParseOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ArpaParseOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_arpa_file_parser.ArpaParseOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Options for parsing ARPA files.",   // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "ArpaParseOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::ArpaParseOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::ArpaParseOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_ArpaParseOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::ArpaParseOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::ArpaParseOptions* c = static_cast<::kaldi::ArpaParseOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::ArpaParseOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyArpaParseOptions

namespace pyArpaFileParser {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::ArpaFileParser> cpp;
};
static ::kaldi::ArpaFileParser* ThisPtr(PyObject*);

// read(is:istream)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("is"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:read", names, &a[0])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  // Call actual C++ method.
  ::kaldi::ArpaFileParser* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// options() -> ArpaParseOptions
static PyObject* wrapOptions_as_options(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::ArpaFileParser* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::ArpaParseOptions ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Options();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream)\n\nReads ARPA LM file from input stream.\n\nArgs:\n  is (istream): The input C++ stream.")},
  {C("options"), (PyCFunction)wrapOptions_as_options, METH_NOARGS, C("options() -> ArpaParseOptions\n\nGets ARPA parser options.\n\nReturns:\n  The ARPA parser options.")},
  {}
};

// ArpaFileParser __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ArpaFileParser __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_arpa_file_parser.ArpaFileParser",  // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Abstract base class for ARPA LM file conversion.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::ArpaFileParser* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_ArpaFileParser"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::ArpaFileParser"));
      if (!PyErr_Occurred()) {
        ::kaldi::ArpaFileParser* c = static_cast<::kaldi::ArpaFileParser*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::ArpaFileParser*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyArpaFileParser


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyArpaParseOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyArpaParseOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyArpaFileParser::wrapper_Type) < 0) return false;
  Py_INCREF(&pyArpaFileParser::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_arpa_file_parser",  // module name
  "CLIF-generated module for lm/arpa-file-parser.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  {PyObject* em = PyImport_ImportModule("enum");
   if (em == nullptr) goto err;
   _Enum = PyObject_GetAttrString(em, "Enum");
   _IntEnum = PyObject_GetAttrString(em, "IntEnum");
   Py_DECREF(em);}
  if (!_Enum || !_IntEnum) {
    Py_XDECREF(_Enum);
    Py_XDECREF(_IntEnum);
    goto err;
  }
  if (PyDict_SetItemString(pyArpaParseOptions::wrapper_Type.tp_dict, "OovHandling", (pyArpaParseOptions::_OovHandling=pyArpaParseOptions::wrapOovHandling())) < 0) goto err;
  if (PyModule_AddObject(module, "ArpaParseOptions", reinterpret_cast<PyObject*>(&pyArpaParseOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "ArpaFileParser", reinterpret_cast<PyObject*>(&pyArpaFileParser::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __arpa__file__parser_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// ArpaFileParser to/from ::kaldi::ArpaFileParser conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::ArpaFileParser** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::ArpaFileParser* cpp = __arpa__file__parser_clifwrap::pyArpaFileParser::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::ArpaFileParser>* c) {
  assert(c != nullptr);
  ::kaldi::ArpaFileParser* cpp = __arpa__file__parser_clifwrap::pyArpaFileParser::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__arpa__file__parser_clifwrap::pyArpaFileParser::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::ArpaFileParser>* c) {
  assert(c != nullptr);
  ::kaldi::ArpaFileParser* cpp = __arpa__file__parser_clifwrap::pyArpaFileParser::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__arpa__file__parser_clifwrap::pyArpaFileParser::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ArpaFileParser instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::ArpaFileParser* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__arpa__file__parser_clifwrap::pyArpaFileParser::wrapper_Type, NULL, NULL);
  reinterpret_cast<__arpa__file__parser_clifwrap::pyArpaFileParser::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ArpaFileParser>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::ArpaFileParser> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__arpa__file__parser_clifwrap::pyArpaFileParser::wrapper_Type, NULL, NULL);
  reinterpret_cast<__arpa__file__parser_clifwrap::pyArpaFileParser::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ArpaFileParser>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::ArpaFileParser> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__arpa__file__parser_clifwrap::pyArpaFileParser::wrapper_Type, NULL, NULL);
  reinterpret_cast<__arpa__file__parser_clifwrap::pyArpaFileParser::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ArpaFileParser>(std::move(c));
  return py;
}

// ArpaParseOptions to/from ::kaldi::ArpaParseOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::ArpaParseOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::ArpaParseOptions* cpp = __arpa__file__parser_clifwrap::pyArpaParseOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::ArpaParseOptions>* c) {
  assert(c != nullptr);
  ::kaldi::ArpaParseOptions* cpp = __arpa__file__parser_clifwrap::pyArpaParseOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__arpa__file__parser_clifwrap::pyArpaParseOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::ArpaParseOptions>* c) {
  assert(c != nullptr);
  ::kaldi::ArpaParseOptions* cpp = __arpa__file__parser_clifwrap::pyArpaParseOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__arpa__file__parser_clifwrap::pyArpaParseOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ArpaParseOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::ArpaParseOptions* c) {
  assert(c != nullptr);
  ::kaldi::ArpaParseOptions* cpp = __arpa__file__parser_clifwrap::pyArpaParseOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::ArpaParseOptions>* c) {
  assert(c != nullptr);
  ::kaldi::ArpaParseOptions* cpp = __arpa__file__parser_clifwrap::pyArpaParseOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::ArpaParseOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__arpa__file__parser_clifwrap::pyArpaParseOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__arpa__file__parser_clifwrap::pyArpaParseOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ArpaParseOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::ArpaParseOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__arpa__file__parser_clifwrap::pyArpaParseOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__arpa__file__parser_clifwrap::pyArpaParseOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ArpaParseOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::ArpaParseOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__arpa__file__parser_clifwrap::pyArpaParseOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__arpa__file__parser_clifwrap::pyArpaParseOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ArpaParseOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::ArpaParseOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__arpa__file__parser_clifwrap::pyArpaParseOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__arpa__file__parser_clifwrap::pyArpaParseOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::ArpaParseOptions>(c);
  return py;
}

// ArpaParseOptions.OovHandling:IntEnum to/from enum ::kaldi::ArpaParseOptions::OovHandling conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::ArpaParseOptions::OovHandling* c) {
  assert(c != nullptr);
  if (!PyObject_IsInstance(py, __arpa__file__parser_clifwrap::pyArpaParseOptions::_OovHandling)) {
    PyErr_Format(PyExc_TypeError, "expecting enum ArpaParseOptions.OovHandling, got %s %s", ClassName(py), ClassType(py));
    return false;
  }
  typename std::underlying_type<::kaldi::ArpaParseOptions::OovHandling>::type v;
  PyObject* value = PyObject_GetAttrString(py, "value");
  if (value == nullptr || !Clif_PyObjAs(value, &v)) return false;
  Py_DECREF(value);
  *c = static_cast<::kaldi::ArpaParseOptions::OovHandling>(v);
  return true;
}

PyObject* Clif_PyObjFrom(const ::kaldi::ArpaParseOptions::OovHandling& c, py::PostConv) {
  return PyObject_CallFunctionObjArgs(__arpa__file__parser_clifwrap::pyArpaParseOptions::_OovHandling, PyInt_FromLong(
      static_cast<typename std::underlying_type<::kaldi::ArpaParseOptions::OovHandling>::type>(c)), nullptr);
}

}  // namespace kaldi
