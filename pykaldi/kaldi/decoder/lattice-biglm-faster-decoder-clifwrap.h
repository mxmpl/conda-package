//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/decoder/lattice-biglm-faster-decoder.clif

#include <memory>
#include "clif/python/optional.h"
#include "decoder/lattice-biglm-faster-decoder.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::LatticeBiglmFasterDecoder` as LatticeBiglmFasterDecoder
bool Clif_PyObjAs(PyObject* input, ::kaldi::LatticeBiglmFasterDecoder** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::LatticeBiglmFasterDecoder>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::LatticeBiglmFasterDecoder>* output);
PyObject* Clif_PyObjFrom(::kaldi::LatticeBiglmFasterDecoder*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::LatticeBiglmFasterDecoder>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::LatticeBiglmFasterDecoder>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::LatticeBiglmFasterDecoder*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::LatticeBiglmFasterDecoder&, py::PostConv) = delete;

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_lattice_biglm_faster_decoder")) Py_DECREF(m);
// CLIF init_module else goto err;
