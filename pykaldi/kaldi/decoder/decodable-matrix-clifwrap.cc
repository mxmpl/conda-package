//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/decoder/decodable-matrix.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "hmm/transition-model-clifwrap.h"
#include "decodable-matrix-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __decodable__matrix_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyDecodableMatrixScaledMapped {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::DecodableMatrixScaledMapped> cpp;
};
static ::kaldi::DecodableMatrixScaledMapped* ThisPtr(PyObject*);

// __init__(tm:TransitionModel, likes:Matrix, scale:float)
static PyObject* wrapDecodableMatrixScaledMapped_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("tm"),
      C("likes"),
      C("scale"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:__init__", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::TransitionModel* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::TransitionModel", a[0]);
  ::kaldi::Matrix<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::Matrix<float>", a[1]);
  float arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "float", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::DecodableMatrixScaledMapped>(*arg1, *arg2, std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// @classmethod _new(tm:TransitionModel, scale:float, likes:Matrix) -> DecodableMatrixScaledMapped
static PyObject* wrapDecodableMatrixScaledMapped_as__new(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("tm"),
      C("scale"),
      C("likes"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:_new", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::TransitionModel* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_new", names[0], "::kaldi::TransitionModel", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_new", names[1], "float", a[1]);
  ::kaldi::Matrix<float> * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("_new", names[2], "::kaldi::Matrix<float> *", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::DecodableMatrixScaledMapped> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::DecodableMatrixScaledMapped>(*arg1, std::move(arg2), arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_frames_ready() -> int
static PyObject* wrapNumFramesReady_as_num_frames_ready(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::DecodableMatrixScaledMapped* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFramesReady();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_last_frame(frame:int) -> bool
static PyObject* wrapIsLastFrame_as_is_last_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_last_frame", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_last_frame", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::DecodableMatrixScaledMapped* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsLastFrame(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// log_likelihood(frame:int, tid:int) -> float
static PyObject* wrapLogLikelihood_as_log_likelihood(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("tid"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:log_likelihood", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("log_likelihood", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("log_likelihood", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::DecodableMatrixScaledMapped* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->LogLikelihood(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_indices() -> int
static PyObject* wrapNumIndices_as_num_indices(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::DecodableMatrixScaledMapped* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumIndices();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::kaldi::DecodableInterface*
static PyObject* as_kaldi_DecodableInterface(PyObject* self) {
  ::kaldi::DecodableInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::DecodableInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapDecodableMatrixScaledMapped_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(tm:TransitionModel, likes:Matrix, scale:float)\n  Calls C++ function\n  void ::kaldi::DecodableMatrixScaledMapped::DecodableMatrixScaledMapped(::kaldi::TransitionModel, ::kaldi::Matrix<float>, float)")},
  {C("_new"), (PyCFunction)wrapDecodableMatrixScaledMapped_as__new, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("_new(tm:TransitionModel, scale:float, likes:Matrix) -> DecodableMatrixScaledMapped\n  Calls C++ function\n  std::unique_ptr<::kaldi::DecodableMatrixScaledMapped> ::kaldi::DecodableMatrixScaledMapped::DecodableMatrixScaledMapped(::kaldi::TransitionModel, float, ::kaldi::Matrix<float> *)")},
  {C("num_frames_ready"), (PyCFunction)wrapNumFramesReady_as_num_frames_ready, METH_NOARGS, C("num_frames_ready() -> int\n\nReturns number of frames ready for decoding.")},
  {C("is_last_frame"), (PyCFunction)wrapIsLastFrame_as_is_last_frame, METH_VARARGS | METH_KEYWORDS, C("is_last_frame(frame:int) -> bool\n\nChecks if given frame is the last frame.")},
  {C("log_likelihood"), (PyCFunction)wrapLogLikelihood_as_log_likelihood, METH_VARARGS | METH_KEYWORDS, C("log_likelihood(frame:int, tid:int) -> float\n\nReturns the log-likehood of the transition ID for the given frame.")},
  {C("num_indices"), (PyCFunction)wrapNumIndices_as_num_indices, METH_NOARGS, C("num_indices() -> int\n\nReturns number of indices.")},
  {C("as_kaldi_DecodableInterface"), (PyCFunction)as_kaldi_DecodableInterface, METH_NOARGS, C("Upcast to ::kaldi::DecodableInterface*")},
  {}
};

// DecodableMatrixScaledMapped __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// DecodableMatrixScaledMapped __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// DecodableMatrixScaledMapped __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_decodable_matrix.DecodableMatrixScaledMapped", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "DecodableMatrixScaledMapped(tm, likes, scale)\n\nDecodable scaling and returning mapped log-likelihoods from a matrix.\n\nThis decodable maps transition IDs to PDF IDs when queried. Likelihoods\nread from the matrix are scaled with the :attr:`scale` argument provided\nwhen instantiating the object.\n\nArgs:\n  tm (TransitionModel): The transition model for mapping transition IDs\n    to PDF IDs.\n  likes (Matrix): The matrix of log-likelihoods.\n  scale (float): The scalar multiplier.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapDecodableMatrixScaledMapped_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::DecodableMatrixScaledMapped* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_DecodableMatrixScaledMapped"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::DecodableMatrixScaledMapped"));
      if (!PyErr_Occurred()) {
        ::kaldi::DecodableMatrixScaledMapped* c = static_cast<::kaldi::DecodableMatrixScaledMapped*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::DecodableMatrixScaledMapped*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyDecodableMatrixScaledMapped

namespace pyDecodableMatrixMappedOffset {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::DecodableMatrixMappedOffset> cpp;
};
static ::kaldi::DecodableMatrixMappedOffset* ThisPtr(PyObject*);

// __init__(tm:TransitionModel)
static PyObject* wrapDecodableMatrixMappedOffset_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("tm"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::kaldi::TransitionModel* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::TransitionModel", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::DecodableMatrixMappedOffset>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// num_frames_ready() -> int
static PyObject* wrapNumFramesReady_as_num_frames_ready(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::DecodableMatrixMappedOffset* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFramesReady();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// first_available_frame() -> int
static PyObject* wrapFirstAvailableFrame_as_first_available_frame(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::DecodableMatrixMappedOffset* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FirstAvailableFrame();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// accept_log_likes(loglikes:Matrix, frames_to_discard:int)
static PyObject* wrapAcceptLoglikes_as_accept_log_likes(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("loglikes"),
      C("frames_to_discard"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:accept_log_likes", names, &a[0], &a[1])) return nullptr;
  ::kaldi::Matrix<float> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accept_log_likes", names[0], "::kaldi::Matrix<float> *", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accept_log_likes", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::DecodableMatrixMappedOffset* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AcceptLoglikes(arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// input_is_finished()
static PyObject* wrapInputIsFinished_as_input_is_finished(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::DecodableMatrixMappedOffset* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->InputIsFinished();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// is_last_frame(frame:int) -> bool
static PyObject* wrapIsLastFrame_as_is_last_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_last_frame", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_last_frame", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::DecodableMatrixMappedOffset* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsLastFrame(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// log_likelihood(frame:int, tid:int) -> float
static PyObject* wrapLogLikelihood_as_log_likelihood(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("tid"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:log_likelihood", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("log_likelihood", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("log_likelihood", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::DecodableMatrixMappedOffset* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->LogLikelihood(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_indices() -> int
static PyObject* wrapNumIndices_as_num_indices(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::DecodableMatrixMappedOffset* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumIndices();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::kaldi::DecodableInterface*
static PyObject* as_kaldi_DecodableInterface(PyObject* self) {
  ::kaldi::DecodableInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::DecodableInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapDecodableMatrixMappedOffset_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(tm:TransitionModel)\n  Calls C++ function\n  void ::kaldi::DecodableMatrixMappedOffset::DecodableMatrixMappedOffset(::kaldi::TransitionModel)")},
  {C("num_frames_ready"), (PyCFunction)wrapNumFramesReady_as_num_frames_ready, METH_NOARGS, C("num_frames_ready() -> int\n\nReturns number of frames ready for decoding.")},
  {C("first_available_frame"), (PyCFunction)wrapFirstAvailableFrame_as_first_available_frame, METH_NOARGS, C("first_available_frame() -> int\n\nReturns the 0-based index of the first available frame.")},
  {C("accept_log_likes"), (PyCFunction)wrapAcceptLoglikes_as_accept_log_likes, METH_VARARGS | METH_KEYWORDS, C("accept_log_likes(loglikes:Matrix, frames_to_discard:int)\n\nAppends given log-likelihoods to existing log-likehoods.\n\nThis method is destructive of the input \"loglikes\" because it may under\nsome circumstances do a shallow copy by swapping data pointers. It\nappends loglikes to any existing likelihoods that have been previously\nsupplied. :attr:`frames_to_discard`, if nonzero, will discard that\nnumber of previously available frames, from the left, advancing\n:meth:`first_available_frame` by :attr:`frames_to_discard` frames.\nUsers should only set `frames_to_discard` to nonzero if the decoder\nwon't access the loglikes for older frames going forward.")},
  {C("input_is_finished"), (PyCFunction)wrapInputIsFinished_as_input_is_finished, METH_NOARGS, C("input_is_finished()\n\nSignals that no more likelihoods will be appended.\n\nThis method should only be called after all likelihoods are appended to\nmark the end.")},
  {C("is_last_frame"), (PyCFunction)wrapIsLastFrame_as_is_last_frame, METH_VARARGS | METH_KEYWORDS, C("is_last_frame(frame:int) -> bool\n\nChecks if given frame is the last frame.")},
  {C("log_likelihood"), (PyCFunction)wrapLogLikelihood_as_log_likelihood, METH_VARARGS | METH_KEYWORDS, C("log_likelihood(frame:int, tid:int) -> float\n\nReturns the log-likehood of the transition ID for the given frame.")},
  {C("num_indices"), (PyCFunction)wrapNumIndices_as_num_indices, METH_NOARGS, C("num_indices() -> int\n\nReturns number of indices.")},
  {C("as_kaldi_DecodableInterface"), (PyCFunction)as_kaldi_DecodableInterface, METH_NOARGS, C("Upcast to ::kaldi::DecodableInterface*")},
  {}
};

// DecodableMatrixMappedOffset __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// DecodableMatrixMappedOffset __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// DecodableMatrixMappedOffset __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_decodable_matrix.DecodableMatrixMappedOffset", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "DecodableMatrixMappedOffset(tm)\n\nDecodable returning mapped log-likelihoods from a matrix.\n\nThis decodable maps transition IDs to pdf IDs when queried. It supports\nrepeatedly writing to the matrix and setting a time-offset representing\nthe frame-index of the first row of the matrix. It's intended for use in\nmulti-threaded decoding; mutex and semaphores are not included. External\ncode will call :meth:`accept_log_likes` each time more log-likelihods are\navailable. If you try to access a log-likelihood that's no longer\navailable because the frame index is less than the current offset, it is\nan error.\n\nArgs:\n  tm (TransitionModel): The transition model for mapping transition IDs\n    to PDF IDs.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapDecodableMatrixMappedOffset_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::DecodableMatrixMappedOffset* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_DecodableMatrixMappedOffset"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::DecodableMatrixMappedOffset"));
      if (!PyErr_Occurred()) {
        ::kaldi::DecodableMatrixMappedOffset* c = static_cast<::kaldi::DecodableMatrixMappedOffset*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::DecodableMatrixMappedOffset*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyDecodableMatrixMappedOffset

namespace pyDecodableMatrixScaled {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::DecodableMatrixScaled> cpp;
};
static ::kaldi::DecodableMatrixScaled* ThisPtr(PyObject*);

// __init__(likes:Matrix, scale:float)
static PyObject* wrapDecodableMatrixScaled_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("likes"),
      C("scale"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::kaldi::Matrix<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::Matrix<float>", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "float", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::DecodableMatrixScaled>(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// num_frames_ready() -> int
static PyObject* wrapNumFramesReady_as_num_frames_ready(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::DecodableMatrixScaled* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFramesReady();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_last_frame(frame:int) -> bool
static PyObject* wrapIsLastFrame_as_is_last_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_last_frame", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_last_frame", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::DecodableMatrixScaled* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsLastFrame(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// log_likelihood(frame:int, index:int) -> float
static PyObject* wrapLogLikelihood_as_log_likelihood(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:log_likelihood", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("log_likelihood", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("log_likelihood", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::DecodableMatrixScaled* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->LogLikelihood(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_indices() -> int
static PyObject* wrapNumIndices_as_num_indices(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::DecodableMatrixScaled* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumIndices();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::kaldi::DecodableInterface*
static PyObject* as_kaldi_DecodableInterface(PyObject* self) {
  ::kaldi::DecodableInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::DecodableInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapDecodableMatrixScaled_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(likes:Matrix, scale:float)\n  Calls C++ function\n  void ::kaldi::DecodableMatrixScaled::DecodableMatrixScaled(::kaldi::Matrix<float>, float)")},
  {C("num_frames_ready"), (PyCFunction)wrapNumFramesReady_as_num_frames_ready, METH_NOARGS, C("num_frames_ready() -> int\n\nReturns number of frames ready for decoding.")},
  {C("is_last_frame"), (PyCFunction)wrapIsLastFrame_as_is_last_frame, METH_VARARGS | METH_KEYWORDS, C("is_last_frame(frame:int) -> bool\n\nChecks if given frame is the last frame.")},
  {C("log_likelihood"), (PyCFunction)wrapLogLikelihood_as_log_likelihood, METH_VARARGS | METH_KEYWORDS, C("log_likelihood(frame:int, index:int) -> float\n\nReturns the log-likehood of the index for the given frame.")},
  {C("num_indices"), (PyCFunction)wrapNumIndices_as_num_indices, METH_NOARGS, C("num_indices() -> int\n\nReturns number of indices.")},
  {C("as_kaldi_DecodableInterface"), (PyCFunction)as_kaldi_DecodableInterface, METH_NOARGS, C("Upcast to ::kaldi::DecodableInterface*")},
  {}
};

// DecodableMatrixScaled __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// DecodableMatrixScaled __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// DecodableMatrixScaled __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_decodable_matrix.DecodableMatrixScaled", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "DecodableMatrixScaled(likes, scale)\n\nDecodable returning log-likelihoods from a matrix.\n\nArgs:\n  likes (Matrix): The matrix of log-likelihoods.\n  scale (float): The scalar multiplier.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapDecodableMatrixScaled_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::DecodableMatrixScaled* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_DecodableMatrixScaled"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::DecodableMatrixScaled"));
      if (!PyErr_Occurred()) {
        ::kaldi::DecodableMatrixScaled* c = static_cast<::kaldi::DecodableMatrixScaled*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::DecodableMatrixScaled*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyDecodableMatrixScaled


// Initialize module

bool Ready() {
  PyObject* base_cls = ImportFQName("kaldi.itf._decodable_itf.DecodableInterface");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._decodable_itf.DecodableInterface is not a new style class inheriting from object.");
    return false;
  }
  pyDecodableMatrixScaledMapped::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyDecodableMatrixScaledMapped::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._decodable_itf.DecodableInterface is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyDecodableMatrixScaledMapped::wrapper_Type) < 0) return false;
  Py_INCREF(&pyDecodableMatrixScaledMapped::wrapper_Type);  // For PyModule_AddObject to steal.
  Py_INCREF(base_cls);
  pyDecodableMatrixMappedOffset::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  if (PyType_Ready(&pyDecodableMatrixMappedOffset::wrapper_Type) < 0) return false;
  Py_INCREF(&pyDecodableMatrixMappedOffset::wrapper_Type);  // For PyModule_AddObject to steal.
  Py_INCREF(base_cls);
  pyDecodableMatrixScaled::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  if (PyType_Ready(&pyDecodableMatrixScaled::wrapper_Type) < 0) return false;
  Py_INCREF(&pyDecodableMatrixScaled::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_decodable_matrix",  // module name
  "CLIF-generated module for decoder/decodable-matrix.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_transition_model")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "DecodableMatrixScaledMapped", reinterpret_cast<PyObject*>(&pyDecodableMatrixScaledMapped::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "DecodableMatrixMappedOffset", reinterpret_cast<PyObject*>(&pyDecodableMatrixMappedOffset::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "DecodableMatrixScaled", reinterpret_cast<PyObject*>(&pyDecodableMatrixScaled::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __decodable__matrix_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// DecodableMatrixMappedOffset to/from ::kaldi::DecodableMatrixMappedOffset conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::DecodableMatrixMappedOffset** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::DecodableMatrixMappedOffset* cpp = __decodable__matrix_clifwrap::pyDecodableMatrixMappedOffset::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::DecodableMatrixMappedOffset>* c) {
  assert(c != nullptr);
  ::kaldi::DecodableMatrixMappedOffset* cpp = __decodable__matrix_clifwrap::pyDecodableMatrixMappedOffset::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__decodable__matrix_clifwrap::pyDecodableMatrixMappedOffset::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::DecodableMatrixMappedOffset>* c) {
  assert(c != nullptr);
  ::kaldi::DecodableMatrixMappedOffset* cpp = __decodable__matrix_clifwrap::pyDecodableMatrixMappedOffset::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__decodable__matrix_clifwrap::pyDecodableMatrixMappedOffset::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert DecodableMatrixMappedOffset instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::DecodableMatrixMappedOffset* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__matrix_clifwrap::pyDecodableMatrixMappedOffset::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__matrix_clifwrap::pyDecodableMatrixMappedOffset::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableMatrixMappedOffset>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::DecodableMatrixMappedOffset> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__matrix_clifwrap::pyDecodableMatrixMappedOffset::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__matrix_clifwrap::pyDecodableMatrixMappedOffset::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableMatrixMappedOffset>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::DecodableMatrixMappedOffset> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__matrix_clifwrap::pyDecodableMatrixMappedOffset::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__matrix_clifwrap::pyDecodableMatrixMappedOffset::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableMatrixMappedOffset>(std::move(c));
  return py;
}

// DecodableMatrixScaled to/from ::kaldi::DecodableMatrixScaled conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::DecodableMatrixScaled** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::DecodableMatrixScaled* cpp = __decodable__matrix_clifwrap::pyDecodableMatrixScaled::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::DecodableMatrixScaled>* c) {
  assert(c != nullptr);
  ::kaldi::DecodableMatrixScaled* cpp = __decodable__matrix_clifwrap::pyDecodableMatrixScaled::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__decodable__matrix_clifwrap::pyDecodableMatrixScaled::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::DecodableMatrixScaled>* c) {
  assert(c != nullptr);
  ::kaldi::DecodableMatrixScaled* cpp = __decodable__matrix_clifwrap::pyDecodableMatrixScaled::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__decodable__matrix_clifwrap::pyDecodableMatrixScaled::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert DecodableMatrixScaled instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::DecodableMatrixScaled* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__matrix_clifwrap::pyDecodableMatrixScaled::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__matrix_clifwrap::pyDecodableMatrixScaled::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableMatrixScaled>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::DecodableMatrixScaled> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__matrix_clifwrap::pyDecodableMatrixScaled::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__matrix_clifwrap::pyDecodableMatrixScaled::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableMatrixScaled>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::DecodableMatrixScaled> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__matrix_clifwrap::pyDecodableMatrixScaled::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__matrix_clifwrap::pyDecodableMatrixScaled::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableMatrixScaled>(std::move(c));
  return py;
}

// DecodableMatrixScaledMapped to/from ::kaldi::DecodableMatrixScaledMapped conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::DecodableMatrixScaledMapped** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::DecodableMatrixScaledMapped* cpp = __decodable__matrix_clifwrap::pyDecodableMatrixScaledMapped::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::DecodableMatrixScaledMapped>* c) {
  assert(c != nullptr);
  ::kaldi::DecodableMatrixScaledMapped* cpp = __decodable__matrix_clifwrap::pyDecodableMatrixScaledMapped::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__decodable__matrix_clifwrap::pyDecodableMatrixScaledMapped::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::DecodableMatrixScaledMapped>* c) {
  assert(c != nullptr);
  ::kaldi::DecodableMatrixScaledMapped* cpp = __decodable__matrix_clifwrap::pyDecodableMatrixScaledMapped::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__decodable__matrix_clifwrap::pyDecodableMatrixScaledMapped::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert DecodableMatrixScaledMapped instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::DecodableMatrixScaledMapped* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__matrix_clifwrap::pyDecodableMatrixScaledMapped::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__matrix_clifwrap::pyDecodableMatrixScaledMapped::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableMatrixScaledMapped>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::DecodableMatrixScaledMapped> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__matrix_clifwrap::pyDecodableMatrixScaledMapped::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__matrix_clifwrap::pyDecodableMatrixScaledMapped::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableMatrixScaledMapped>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::DecodableMatrixScaledMapped> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__matrix_clifwrap::pyDecodableMatrixScaledMapped::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__matrix_clifwrap::pyDecodableMatrixScaledMapped::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableMatrixScaledMapped>(std::move(c));
  return py;
}

}  // namespace kaldi
