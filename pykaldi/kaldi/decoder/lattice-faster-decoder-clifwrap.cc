//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/decoder/lattice-faster-decoder.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "itf/decodable-itf-clifwrap.h"
#include "itf/options-itf-clifwrap.h"
#include "fstext/lattice-weight-clifwrap.h"
#include "fstext/fst-clifwrap.h"
#include "fstext/vector-fst-clifwrap.h"
#include "lat/determinize-lattice-pruned-clifwrap.h"
#include "lattice-faster-decoder-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __lattice__faster__decoder_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyLatticeFasterDecoderOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::LatticeFasterDecoderConfig> cpp;
};
static ::kaldi::LatticeFasterDecoderConfig* ThisPtr(PyObject*);

static PyObject* get_beam(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->beam, {});
}

static int set_beam(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the beam attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->beam)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for beam:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_max_active(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->max_active, {});
}

static int set_max_active(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the max_active attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->max_active)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for max_active:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_min_active(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->min_active, {});
}

static int set_min_active(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the min_active attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->min_active)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for min_active:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_lattice_beam(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->lattice_beam, {});
}

static int set_lattice_beam(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the lattice_beam attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->lattice_beam)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for lattice_beam:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_prune_interval(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->prune_interval, {});
}

static int set_prune_interval(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the prune_interval attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->prune_interval)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for prune_interval:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_determinize_lattice(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->determinize_lattice, {});
}

static int set_determinize_lattice(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the determinize_lattice attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->determinize_lattice)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for determinize_lattice:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_beam_delta(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->beam_delta, {});
}

static int set_beam_delta(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the beam_delta attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->beam_delta)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for beam_delta:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_hash_ratio(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->hash_ratio, {});
}

static int set_hash_ratio(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the hash_ratio attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->hash_ratio)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for hash_ratio:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_prune_scale(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->prune_scale, {});
}

static int set_prune_scale(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the prune_scale attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->prune_scale)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for prune_scale:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_det_opts(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->det_opts), {});
}

static int set_det_opts(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the det_opts attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->det_opts)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for det_opts:DeterminizeLatticePhonePrunedOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::LatticeFasterDecoderConfig* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("beam"), get_beam, set_beam, C("Decoding beam. Larger -> slower but more accurate.")},
  {C("max_active"), get_max_active, set_max_active, C("Max number of active states. Larger -> slower but more accurate.")},
  {C("min_active"), get_min_active, set_min_active, C("Min number of active states. No pruning if `active < min_active`.")},
  {C("lattice_beam"), get_lattice_beam, set_lattice_beam, C("Lattice generation beam. Larger -> slower but deeper lattices.")},
  {C("prune_interval"), get_prune_interval, set_prune_interval, C("Token pruning interval (in frames).")},
  {C("determinize_lattice"), get_determinize_lattice, set_determinize_lattice, C("Whether to run lattice-determinization on output lattices.")},
  {C("beam_delta"), get_beam_delta, set_beam_delta, C("Increment used for increasing decoder beam. Obscure option.")},
  {C("hash_ratio"), get_hash_ratio, set_hash_ratio, C("Setting used in decoder to control hash behavior.")},
  {C("prune_scale"), get_prune_scale, set_prune_scale, C("Pruning scale. It affects the algorithm used for pruning tokens.")},
  {C("det_opts"), get_det_opts, set_det_opts, C("Options for lattice-determinization.")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n\nRegisters options with an object implementing the options interface.\n\nArgs:\n  opts (OptionsItf): An object implementing the options interface.\n    Typically a command-line option parser.")},
  {}
};

// LatticeFasterDecoderOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// LatticeFasterDecoderOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// LatticeFasterDecoderOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_lattice_faster_decoder.LatticeFasterDecoderOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Options for :class:`LatticeFasterDecoder`.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "LatticeFasterDecoderOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::LatticeFasterDecoderConfig>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::LatticeFasterDecoderConfig* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_LatticeFasterDecoderConfig"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::LatticeFasterDecoderConfig"));
      if (!PyErr_Occurred()) {
        ::kaldi::LatticeFasterDecoderConfig* c = static_cast<::kaldi::LatticeFasterDecoderConfig*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::LatticeFasterDecoderConfig*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyLatticeFasterDecoderOptions

namespace pyLatticeFasterDecoder {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::LatticeFasterDecoder> cpp;
};
static ::kaldi::LatticeFasterDecoder* ThisPtr(PyObject*);

// __init__(fst:StdFst, opts:LatticeFasterDecoderOptions)
static PyObject* wrapLatticeFasterDecoder_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("fst"),
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >", a[0]);
  ::kaldi::LatticeFasterDecoderConfig* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::LatticeFasterDecoderConfig", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::LatticeFasterDecoder>(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_options(opts:LatticeFasterDecoderOptions)
static PyObject* wrapSetOptions_as_set_options(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_options", names, &a[0])) return nullptr;
  ::kaldi::LatticeFasterDecoderConfig* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_options", names[0], "::kaldi::LatticeFasterDecoderConfig", a[0]);
  // Call actual C++ method.
  ::kaldi::LatticeFasterDecoder* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetOptions(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// get_options() -> LatticeFasterDecoderOptions
static PyObject* wrapGetOptions_as_get_options(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::LatticeFasterDecoder* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::LatticeFasterDecoderConfig ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetOptions();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// decode(decodable:DecodableInterface) -> bool
static PyObject* wrapDecode_as_decode(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("decodable"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:decode", names, &a[0])) return nullptr;
  ::kaldi::DecodableInterface * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("decode", names[0], "::kaldi::DecodableInterface *", a[0]);
  // Call actual C++ method.
  ::kaldi::LatticeFasterDecoder* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Decode(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// reached_final() -> bool
static PyObject* wrapReachedFinal_as_reached_final(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::LatticeFasterDecoder* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->ReachedFinal();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _get_best_path(fst_out:LatticeVectorFst, use_final_probs:bool=default) -> bool
static PyObject* wrapGetBestPath_as__get_best_path(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("fst_out"),
      C("use_final_probs"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:_get_best_path", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > > > * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_get_best_path", names[0], "::fst::VectorFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > > > *", a[0]);
  bool arg2;
  if (nargs > 1) {
    if (!a[1]) arg2 = (bool)true;
    else if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_get_best_path", names[1], "bool", a[1]);
  }
  // Call actual C++ method.
  ::kaldi::LatticeFasterDecoder* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    ret0 = c->GetBestPath(arg1); break;
  case 2:
    ret0 = c->GetBestPath(arg1, std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _get_raw_lattice(fst_out:LatticeVectorFst, use_final_probs:bool=default) -> bool
static PyObject* wrapGetRawLattice_as__get_raw_lattice(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("fst_out"),
      C("use_final_probs"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:_get_raw_lattice", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > > > * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_get_raw_lattice", names[0], "::fst::VectorFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > > > *", a[0]);
  bool arg2;
  if (nargs > 1) {
    if (!a[1]) arg2 = (bool)true;
    else if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_get_raw_lattice", names[1], "bool", a[1]);
  }
  // Call actual C++ method.
  ::kaldi::LatticeFasterDecoder* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    ret0 = c->GetRawLattice(arg1); break;
  case 2:
    ret0 = c->GetRawLattice(arg1, std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _get_lattice(fst_out:CompactLatticeVectorFst, use_final_probs:bool=default) -> bool
static PyObject* wrapGetLattice_as__get_lattice(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("fst_out"),
      C("use_final_probs"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:_get_lattice", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > > * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_get_lattice", names[0], "::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > > *", a[0]);
  bool arg2;
  if (nargs > 1) {
    if (!a[1]) arg2 = (bool)true;
    else if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_get_lattice", names[1], "bool", a[1]);
  }
  // Call actual C++ method.
  ::kaldi::LatticeFasterDecoder* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    ret0 = c->GetLattice(arg1); break;
  case 2:
    ret0 = c->GetLattice(arg1, std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// init_decoding()
static PyObject* wrapInitDecoding_as_init_decoding(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::LatticeFasterDecoder* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->InitDecoding();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// advance_decoding(decodable:DecodableInterface, max_num_frames:int=default)
static PyObject* wrapAdvanceDecoding_as_advance_decoding(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("decodable"),
      C("max_num_frames"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:advance_decoding", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::DecodableInterface * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("advance_decoding", names[0], "::kaldi::DecodableInterface *", a[0]);
  int arg2;
  if (nargs > 1) {
    if (!a[1]) arg2 = (int)-1;
    else if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("advance_decoding", names[1], "int", a[1]);
  }
  // Call actual C++ method.
  ::kaldi::LatticeFasterDecoder* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    c->AdvanceDecoding(arg1); break;
  case 2:
    c->AdvanceDecoding(arg1, std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// finalize_decoding()
static PyObject* wrapFinalizeDecoding_as_finalize_decoding(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::LatticeFasterDecoder* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->FinalizeDecoding();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// final_relative_cost() -> float
static PyObject* wrapFinalRelativeCost_as_final_relative_cost(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::LatticeFasterDecoder* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FinalRelativeCost();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_frames_decoded() -> int
static PyObject* wrapNumFramesDecoded_as_num_frames_decoded(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::LatticeFasterDecoder* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFramesDecoded();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapLatticeFasterDecoder_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(fst:StdFst, opts:LatticeFasterDecoderOptions)\n  Calls C++ function\n  void ::kaldi::LatticeFasterDecoder::LatticeFasterDecoder(::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >, ::kaldi::LatticeFasterDecoderConfig)")},
  {C("set_options"), (PyCFunction)wrapSetOptions_as_set_options, METH_VARARGS | METH_KEYWORDS, C("set_options(opts:LatticeFasterDecoderOptions)\n\nSets decoder options.\n\nArgs:\n  opts (LatticeFasterDecoderOptions): Decoder options.")},
  {C("get_options"), (PyCFunction)wrapGetOptions_as_get_options, METH_NOARGS, C("get_options() -> LatticeFasterDecoderOptions\n\nGets decoder options.\n\nReturns:\n  The decoder options.")},
  {C("decode"), (PyCFunction)wrapDecode_as_decode, METH_VARARGS | METH_KEYWORDS, C("decode(decodable:DecodableInterface) -> bool\n\nDecodes all available frames in the decodable object.\n\nThis may block waiting for input if the `decodable` object blocks.\n\nArgs:\n  decodable (DecodableInterface): The decodable object.\n\nReturns:\n  True if any kind of traceback is available (not necessarily from a\n  final state).")},
  {C("reached_final"), (PyCFunction)wrapReachedFinal_as_reached_final, METH_NOARGS, C("reached_final() -> bool\n\nChecks if a final state was active on the last decoded frame.\n\nReturns:\n  True if a final state was active on the last decoded frame.")},
  {C("_get_best_path"), (PyCFunction)wrapGetBestPath_as__get_best_path, METH_VARARGS | METH_KEYWORDS, C("_get_best_path(fst_out:LatticeVectorFst, use_final_probs:bool=default) -> bool\n  Calls C++ function\n  bool ::kaldi::LatticeFasterDecoder::GetBestPath(::fst::VectorFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > > > *, bool)")},
  {C("_get_raw_lattice"), (PyCFunction)wrapGetRawLattice_as__get_raw_lattice, METH_VARARGS | METH_KEYWORDS, C("_get_raw_lattice(fst_out:LatticeVectorFst, use_final_probs:bool=default) -> bool\n  Calls C++ function\n  bool ::kaldi::LatticeFasterDecoder::GetRawLattice(::fst::VectorFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > > > *, bool)")},
  {C("_get_lattice"), (PyCFunction)wrapGetLattice_as__get_lattice, METH_VARARGS | METH_KEYWORDS, C("_get_lattice(fst_out:CompactLatticeVectorFst, use_final_probs:bool=default) -> bool\n  Calls C++ function\n  bool ::kaldi::LatticeFasterDecoder::GetLattice(::fst::VectorFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, ::std::allocator< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > > > *, bool)")},
  {C("init_decoding"), (PyCFunction)wrapInitDecoding_as_init_decoding, METH_NOARGS, C("init_decoding()\n\nInitializes decoding.\n\nAs an alternative to :meth:`decode`, you can call :meth:`init_decoding`\nand then call :meth:`advance_decoding` (possibly multiple times).")},
  {C("advance_decoding"), (PyCFunction)wrapAdvanceDecoding_as_advance_decoding, METH_VARARGS | METH_KEYWORDS, C("advance_decoding(decodable:DecodableInterface, max_num_frames:int=default)\n\nAdvances decoding.\n\nThis will decode until there are no more frames ready in the decodable\nobject, but if `max_num_frames >= 0` it will decode no more than that\nmany frames.\n\nArgs:\n  decodable (DecodableInterface): The decodable object.\n  max_num_frames (int): Max number of frames to decode. Defaults to\n    ``-1`` which means decode all available frames.")},
  {C("finalize_decoding"), (PyCFunction)wrapFinalizeDecoding_as_finalize_decoding, METH_NOARGS, C("finalize_decoding()\n\nFinalizes decoding.\n\nThis function may be optionally called after the last call to\n:meth:`advance_decoding`. It does an extra pruning step to prune the\nlattices output by :meth:`get_lattice` and :meth:`get_raw_lattice`.\nmore accurately.")},
  {C("final_relative_cost"), (PyCFunction)wrapFinalRelativeCost_as_final_relative_cost, METH_NOARGS, C("final_relative_cost() -> float\n\nQueries the final relative cost.\n\nThis method serves the same purpose as :meth:`reached_final`, but gives\nmore information. It returns the difference between the best\n(final-cost plus cost) of any token on the final frame, and the best\ncost of any token on the final frame. If it is infinity it means no\nfinal-states were present on the final frame. It will usually be\nnonnegative. If it not too positive (e.g. < 5) you can take it as an\nindication that we reached the final-state with reasonable likelihood.\n\nReturns:\n  The final relative cost.")},
  {C("num_frames_decoded"), (PyCFunction)wrapNumFramesDecoded_as_num_frames_decoded, METH_NOARGS, C("num_frames_decoded() -> int\n\nQueries the number of frames already decoded.\n\nReturns:\n  The number of frames already decoded.")},
  {}
};

// LatticeFasterDecoder __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// LatticeFasterDecoder __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// LatticeFasterDecoder __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_lattice_faster_decoder.LatticeFasterDecoder", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "LatticeFasterDecoder(fst, opts)\n\nLattice generating faster decoder.\n\nArgs:\n  fst (StdFst): Decoding graph `HCLG`.\n  opts (LatticeFasterDecoderOptions): Decoder options.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapLatticeFasterDecoder_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::LatticeFasterDecoder* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_LatticeFasterDecoder"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::LatticeFasterDecoder"));
      if (!PyErr_Occurred()) {
        ::kaldi::LatticeFasterDecoder* c = static_cast<::kaldi::LatticeFasterDecoder*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::LatticeFasterDecoder*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyLatticeFasterDecoder


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyLatticeFasterDecoderOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyLatticeFasterDecoderOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyLatticeFasterDecoder::wrapper_Type) < 0) return false;
  Py_INCREF(&pyLatticeFasterDecoder::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_lattice_faster_decoder",  // module name
  "CLIF-generated module for decoder/lattice-faster-decoder.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_decodable_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_lattice_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_fst")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_vector_fst")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_determinize_lattice_pruned")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "LatticeFasterDecoderOptions", reinterpret_cast<PyObject*>(&pyLatticeFasterDecoderOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "LatticeFasterDecoder", reinterpret_cast<PyObject*>(&pyLatticeFasterDecoder::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __lattice__faster__decoder_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// LatticeFasterDecoder to/from ::kaldi::LatticeFasterDecoder conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::LatticeFasterDecoder** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::LatticeFasterDecoder* cpp = __lattice__faster__decoder_clifwrap::pyLatticeFasterDecoder::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::LatticeFasterDecoder>* c) {
  assert(c != nullptr);
  ::kaldi::LatticeFasterDecoder* cpp = __lattice__faster__decoder_clifwrap::pyLatticeFasterDecoder::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__lattice__faster__decoder_clifwrap::pyLatticeFasterDecoder::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::LatticeFasterDecoder>* c) {
  assert(c != nullptr);
  ::kaldi::LatticeFasterDecoder* cpp = __lattice__faster__decoder_clifwrap::pyLatticeFasterDecoder::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__lattice__faster__decoder_clifwrap::pyLatticeFasterDecoder::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert LatticeFasterDecoder instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::LatticeFasterDecoder* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lattice__faster__decoder_clifwrap::pyLatticeFasterDecoder::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__faster__decoder_clifwrap::pyLatticeFasterDecoder::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::LatticeFasterDecoder>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::LatticeFasterDecoder> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lattice__faster__decoder_clifwrap::pyLatticeFasterDecoder::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__faster__decoder_clifwrap::pyLatticeFasterDecoder::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::LatticeFasterDecoder>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::LatticeFasterDecoder> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lattice__faster__decoder_clifwrap::pyLatticeFasterDecoder::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__faster__decoder_clifwrap::pyLatticeFasterDecoder::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::LatticeFasterDecoder>(std::move(c));
  return py;
}

// LatticeFasterDecoderOptions to/from ::kaldi::LatticeFasterDecoderConfig conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::LatticeFasterDecoderConfig** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::LatticeFasterDecoderConfig* cpp = __lattice__faster__decoder_clifwrap::pyLatticeFasterDecoderOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::LatticeFasterDecoderConfig>* c) {
  assert(c != nullptr);
  ::kaldi::LatticeFasterDecoderConfig* cpp = __lattice__faster__decoder_clifwrap::pyLatticeFasterDecoderOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__lattice__faster__decoder_clifwrap::pyLatticeFasterDecoderOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::LatticeFasterDecoderConfig>* c) {
  assert(c != nullptr);
  ::kaldi::LatticeFasterDecoderConfig* cpp = __lattice__faster__decoder_clifwrap::pyLatticeFasterDecoderOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__lattice__faster__decoder_clifwrap::pyLatticeFasterDecoderOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert LatticeFasterDecoderOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::LatticeFasterDecoderConfig* c) {
  assert(c != nullptr);
  ::kaldi::LatticeFasterDecoderConfig* cpp = __lattice__faster__decoder_clifwrap::pyLatticeFasterDecoderOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::LatticeFasterDecoderConfig>* c) {
  assert(c != nullptr);
  ::kaldi::LatticeFasterDecoderConfig* cpp = __lattice__faster__decoder_clifwrap::pyLatticeFasterDecoderOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::LatticeFasterDecoderConfig* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lattice__faster__decoder_clifwrap::pyLatticeFasterDecoderOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__faster__decoder_clifwrap::pyLatticeFasterDecoderOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::LatticeFasterDecoderConfig>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::LatticeFasterDecoderConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lattice__faster__decoder_clifwrap::pyLatticeFasterDecoderOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__faster__decoder_clifwrap::pyLatticeFasterDecoderOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::LatticeFasterDecoderConfig>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::LatticeFasterDecoderConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lattice__faster__decoder_clifwrap::pyLatticeFasterDecoderOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__faster__decoder_clifwrap::pyLatticeFasterDecoderOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::LatticeFasterDecoderConfig>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::LatticeFasterDecoderConfig& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__lattice__faster__decoder_clifwrap::pyLatticeFasterDecoderOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lattice__faster__decoder_clifwrap::pyLatticeFasterDecoderOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::LatticeFasterDecoderConfig>(c);
  return py;
}

}  // namespace kaldi
