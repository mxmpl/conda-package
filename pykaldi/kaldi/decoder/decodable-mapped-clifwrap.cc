//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/decoder/decodable-mapped.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "itf/decodable-itf-clifwrap.h"
#include "decodable-mapped-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __decodable__mapped_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyDecodableMapped {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::DecodableMapped> cpp;
};
static ::kaldi::DecodableMapped* ThisPtr(PyObject*);

// __init__(index_map:list<int>, d:DecodableInterface)
static PyObject* wrapDecodableMapped_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("index_map"),
      C("d"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::std::vector< ::int32> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::std::vector< ::int32>", a[0]);
  ::kaldi::DecodableInterface * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::DecodableInterface *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::DecodableMapped>(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// loglikelihood(frame:int, state_index:int) -> float
static PyObject* wrapLogLikelihood_as_loglikelihood(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("state_index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:loglikelihood", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("loglikelihood", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("loglikelihood", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::DecodableMapped* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->LogLikelihood(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_indices() -> int
static PyObject* wrapNumIndices_as_num_indices(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::DecodableMapped* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumIndices();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_last_frame(frame:int) -> bool
static PyObject* wrapIsLastFrame_as_is_last_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_last_frame", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_last_frame", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::DecodableMapped* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsLastFrame(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::kaldi::DecodableInterface*
static PyObject* as_kaldi_DecodableInterface(PyObject* self) {
  ::kaldi::DecodableInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::DecodableInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapDecodableMapped_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(index_map:list<int>, d:DecodableInterface)\n  Calls C++ function\n  void ::kaldi::DecodableMapped::DecodableMapped(::std::vector< ::int32>, ::kaldi::DecodableInterface *)")},
  {C("loglikelihood"), (PyCFunction)wrapLogLikelihood_as_loglikelihood, METH_VARARGS | METH_KEYWORDS, C("loglikelihood(frame:int, state_index:int) -> float\n\nReturns the log-likehood of the mapped index for the given frame.")},
  {C("num_indices"), (PyCFunction)wrapNumIndices_as_num_indices, METH_NOARGS, C("num_indices() -> int\n\nReturns number of indices.")},
  {C("is_last_frame"), (PyCFunction)wrapIsLastFrame_as_is_last_frame, METH_VARARGS | METH_KEYWORDS, C("is_last_frame(frame:int) -> bool\n\nChecks if given frame is the last frame.")},
  {C("as_kaldi_DecodableInterface"), (PyCFunction)as_kaldi_DecodableInterface, METH_NOARGS, C("Upcast to ::kaldi::DecodableInterface*")},
  {}
};

// DecodableMapped __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// DecodableMapped __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// DecodableMapped __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_decodable_mapped.DecodableMapped", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "DecodableMapped(index_map, d)\n\nDecodable for mapping the indices of another decodable object.\n\nArgs:\n  index_map (List[int]): The index mapping.\n  d (DecodableInterface): The other decodable object.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapDecodableMapped_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::DecodableMapped* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_DecodableMapped"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::DecodableMapped"));
      if (!PyErr_Occurred()) {
        ::kaldi::DecodableMapped* c = static_cast<::kaldi::DecodableMapped*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::DecodableMapped*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyDecodableMapped


// Initialize module

bool Ready() {
  PyObject* base_cls = ImportFQName("kaldi.itf._decodable_itf.DecodableInterface");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._decodable_itf.DecodableInterface is not a new style class inheriting from object.");
    return false;
  }
  pyDecodableMapped::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyDecodableMapped::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._decodable_itf.DecodableInterface is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyDecodableMapped::wrapper_Type) < 0) return false;
  Py_INCREF(&pyDecodableMapped::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_decodable_mapped",  // module name
  "CLIF-generated module for decoder/decodable-mapped.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_decodable_itf")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "DecodableMapped", reinterpret_cast<PyObject*>(&pyDecodableMapped::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __decodable__mapped_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// DecodableMapped to/from ::kaldi::DecodableMapped conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::DecodableMapped** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::DecodableMapped* cpp = __decodable__mapped_clifwrap::pyDecodableMapped::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::DecodableMapped>* c) {
  assert(c != nullptr);
  ::kaldi::DecodableMapped* cpp = __decodable__mapped_clifwrap::pyDecodableMapped::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__decodable__mapped_clifwrap::pyDecodableMapped::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::DecodableMapped>* c) {
  assert(c != nullptr);
  ::kaldi::DecodableMapped* cpp = __decodable__mapped_clifwrap::pyDecodableMapped::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__decodable__mapped_clifwrap::pyDecodableMapped::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert DecodableMapped instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::DecodableMapped* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__mapped_clifwrap::pyDecodableMapped::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__mapped_clifwrap::pyDecodableMapped::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableMapped>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::DecodableMapped> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__mapped_clifwrap::pyDecodableMapped::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__mapped_clifwrap::pyDecodableMapped::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableMapped>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::DecodableMapped> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__decodable__mapped_clifwrap::pyDecodableMapped::wrapper_Type, NULL, NULL);
  reinterpret_cast<__decodable__mapped_clifwrap::pyDecodableMapped::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::DecodableMapped>(std::move(c));
  return py;
}

}  // namespace kaldi
