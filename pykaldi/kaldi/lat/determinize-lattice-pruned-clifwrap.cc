//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/lat/determinize-lattice-pruned.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "itf/options-itf-clifwrap.h"
#include "fstext/lattice-weight-clifwrap.h"
#include "fstext/expanded-fst-clifwrap.h"
#include "fstext/mutable-fst-clifwrap.h"
#include "hmm/transition-model-clifwrap.h"
#include "determinize-lattice-pruned-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __determinize__lattice__pruned_clifwrap {
using namespace clif;
using namespace fst;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyDeterminizeLatticePrunedOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::DeterminizeLatticePrunedOptions> cpp;
};
static ::fst::DeterminizeLatticePrunedOptions* ThisPtr(PyObject*);

static PyObject* get_delta(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->delta, {});
}

static int set_delta(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the delta attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->delta)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for delta:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_max_mem(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->max_mem, {});
}

static int set_max_mem(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the max_mem attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->max_mem)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for max_mem:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_max_loop(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->max_loop, {});
}

static int set_max_loop(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the max_loop attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->max_loop)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for max_loop:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_max_states(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->max_states, {});
}

static int set_max_states(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the max_states attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->max_states)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for max_states:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_max_arcs(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->max_arcs, {});
}

static int set_max_arcs(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the max_arcs attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->max_arcs)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for max_arcs:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_retry_cutoff(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->retry_cutoff, {});
}

static int set_retry_cutoff(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the retry_cutoff attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->retry_cutoff)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for retry_cutoff:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::fst::DeterminizeLatticePrunedOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("delta"), get_delta, set_delta, C("A small offset used to measure equality of weights.")},
  {C("max_mem"), get_max_mem, set_max_mem, C("Maximum memory threshold for the determinization operation.\n\nIf > 0, determinization will fail and return false when the algorithm's\n(approximate) memory consumption crosses this threshold.")},
  {C("max_loop"), get_max_loop, set_max_loop, C("Maximum loop threshold for the determinization operation.\n\nIf >0, can be used to detect non-determinizable input (a case that\nwouldn't be caught by max_mem).")},
  {C("max_states"), get_max_states, set_max_states, C("Maximum number of states allowed in output FST.")},
  {C("max_arcs"), get_max_arcs, set_max_arcs, C("Maximum number of arcs allowed in output FST.")},
  {C("retry_cutoff"), get_retry_cutoff, set_retry_cutoff, C("Cutoff value used when retrying a failed determinization operation.\n\nControls pruning un-determinized lattice and retrying determinization:\nif effective-beam <  retry-cutoff * beam, we prune the raw lattice and\nretry. Avoids ever getting empty output for long segments.")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n\nRegisters options with an object implementing the options interface.\n\nArgs:\n  opts (OptionsItf): An object implementing the options interface.\n    Typically a command-line option parser.")},
  {}
};

// DeterminizeLatticePrunedOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// DeterminizeLatticePrunedOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// DeterminizeLatticePrunedOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_determinize_lattice_pruned.DeterminizeLatticePrunedOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Options for pruning and word determinizing a lattice.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "DeterminizeLatticePrunedOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::DeterminizeLatticePrunedOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::DeterminizeLatticePrunedOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_DeterminizeLatticePrunedOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::DeterminizeLatticePrunedOptions"));
      if (!PyErr_Occurred()) {
        ::fst::DeterminizeLatticePrunedOptions* c = static_cast<::fst::DeterminizeLatticePrunedOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::DeterminizeLatticePrunedOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyDeterminizeLatticePrunedOptions

namespace pyDeterminizeLatticePhonePrunedOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::DeterminizeLatticePhonePrunedOptions> cpp;
};
static ::fst::DeterminizeLatticePhonePrunedOptions* ThisPtr(PyObject*);

static PyObject* get_delta(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->delta, {});
}

static int set_delta(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the delta attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->delta)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for delta:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_max_mem(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->max_mem, {});
}

static int set_max_mem(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the max_mem attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->max_mem)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for max_mem:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_phone_determinize(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->phone_determinize, {});
}

static int set_phone_determinize(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the phone_determinize attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->phone_determinize)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for phone_determinize:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_word_determinize(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->word_determinize, {});
}

static int set_word_determinize(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the word_determinize attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->word_determinize)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for word_determinize:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_minimize(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->minimize, {});
}

static int set_minimize(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the minimize attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->minimize)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for minimize:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::fst::DeterminizeLatticePhonePrunedOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("delta"), get_delta, set_delta, C("A small offset used to measure equality of weights.")},
  {C("max_mem"), get_max_mem, set_max_mem, C("Maximum memory threshold for the determinization operation.\n\nIf > 0, determinization will fail and return false when the algorithm's\n(approximate) memory consumption crosses this threshold.")},
  {C("phone_determinize"), get_phone_determinize, set_phone_determinize, C("Whether to do a first pass determinization on both phones and words.")},
  {C("word_determinize"), get_word_determinize, set_word_determinize, C("Whether to do a second pass determinization on words only.")},
  {C("minimize"), get_minimize, set_minimize, C("Whether to push and minimize the output after determinization.")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n\nRegisters options with an object implementing the options interface.\n\nArgs:\n  opts (OptionsItf): An object implementing the options interface.\n    Typically a command-line option parser.")},
  {}
};

// DeterminizeLatticePhonePrunedOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// DeterminizeLatticePhonePrunedOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// DeterminizeLatticePhonePrunedOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_determinize_lattice_pruned.DeterminizeLatticePhonePrunedOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Options for pruning and phone+word determinizing a lattice.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "DeterminizeLatticePhonePrunedOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::DeterminizeLatticePhonePrunedOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::DeterminizeLatticePhonePrunedOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_DeterminizeLatticePhonePrunedOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::DeterminizeLatticePhonePrunedOptions"));
      if (!PyErr_Occurred()) {
        ::fst::DeterminizeLatticePhonePrunedOptions* c = static_cast<::fst::DeterminizeLatticePhonePrunedOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::DeterminizeLatticePhonePrunedOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyDeterminizeLatticePhonePrunedOptions

// _determinize_lattice_pruned(ifst:LatticeExpandedFst, prune:float, ofst:LatticeMutableFst, opts:DeterminizeLatticePrunedOptions=default) -> bool
static PyObject* wrapDeterminizeLatticePruned_as__determinize_lattice_pruned(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4]{};
  char* names[] = {
      C("ifst"),
      C("prune"),
      C("ofst"),
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO|O:_determinize_lattice_pruned", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 4; nargs > 3; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_determinize_lattice_pruned", names[0], "::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >", a[0]);
  double arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_determinize_lattice_pruned", names[1], "double", a[1]);
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("_determinize_lattice_pruned", names[2], "::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > *", a[2]);
  ::fst::DeterminizeLatticePrunedOptions* arg4;
  if (nargs > 3) {
    if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("_determinize_lattice_pruned", names[3], "::fst::DeterminizeLatticePrunedOptions", a[3]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 3:
    ret0 = ::fst::DeterminizeLatticePruned(*arg1, std::move(arg2), arg3); break;
  case 4:
    ret0 = ::fst::DeterminizeLatticePruned(*arg1, std::move(arg2), arg3, *arg4); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _determinize_lattice_pruned_to_compact(ifst:LatticeExpandedFst, prune:float, ofst:CompactLatticeMutableFst, opts:DeterminizeLatticePrunedOptions=default) -> bool
static PyObject* wrapDeterminizeLatticePruned_as__determinize_lattice_pruned_to_compact(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4]{};
  char* names[] = {
      C("ifst"),
      C("prune"),
      C("ofst"),
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO|O:_determinize_lattice_pruned_to_compact", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 4; nargs > 3; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_determinize_lattice_pruned_to_compact", names[0], "::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >", a[0]);
  double arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_determinize_lattice_pruned_to_compact", names[1], "double", a[1]);
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("_determinize_lattice_pruned_to_compact", names[2], "::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > *", a[2]);
  ::fst::DeterminizeLatticePrunedOptions* arg4;
  if (nargs > 3) {
    if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("_determinize_lattice_pruned_to_compact", names[3], "::fst::DeterminizeLatticePrunedOptions", a[3]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 3:
    ret0 = ::fst::DeterminizeLatticePruned(*arg1, std::move(arg2), arg3); break;
  case 4:
    ret0 = ::fst::DeterminizeLatticePruned(*arg1, std::move(arg2), arg3, *arg4); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _determinize_lattice_insert_phones(trans_model:TransitionModel, fst:LatticeMutableFst) -> int
static PyObject* wrapDeterminizeLatticeInsertPhones_as__determinize_lattice_insert_phones(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("trans_model"),
      C("fst"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_determinize_lattice_insert_phones", names, &a[0], &a[1])) return nullptr;
  ::kaldi::TransitionModel* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_determinize_lattice_insert_phones", names[0], "::kaldi::TransitionModel", a[0]);
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_determinize_lattice_insert_phones", names[1], "::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::DeterminizeLatticeInsertPhones(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _determinize_lattice_delete_phones(first_phone_label:int, fst:LatticeMutableFst)
static PyObject* wrapDeterminizeLatticeDeletePhones_as__determinize_lattice_delete_phones(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("first_phone_label"),
      C("fst"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_determinize_lattice_delete_phones", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_determinize_lattice_delete_phones", names[0], "int", a[0]);
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_determinize_lattice_delete_phones", names[1], "::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::fst::DeterminizeLatticeDeletePhones(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _determinize_lattice_phone_pruned(trans_model:TransitionModel, ifst:LatticeExpandedFst, prune:float, ofst:CompactLatticeMutableFst, opts:DeterminizeLatticePhonePrunedOptions=default) -> bool
static PyObject* wrapDeterminizeLatticePhonePruned_as__determinize_lattice_phone_pruned(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[5]{};
  char* names[] = {
      C("trans_model"),
      C("ifst"),
      C("prune"),
      C("ofst"),
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO|O:_determinize_lattice_phone_pruned", names, &a[0], &a[1], &a[2], &a[3], &a[4])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 5; nargs > 4; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::TransitionModel* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_determinize_lattice_phone_pruned", names[0], "::kaldi::TransitionModel", a[0]);
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_determinize_lattice_phone_pruned", names[1], "::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >", a[1]);
  double arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("_determinize_lattice_phone_pruned", names[2], "double", a[2]);
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > * arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("_determinize_lattice_phone_pruned", names[3], "::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > *", a[3]);
  ::fst::DeterminizeLatticePhonePrunedOptions* arg5;
  if (nargs > 4) {
    if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("_determinize_lattice_phone_pruned", names[4], "::fst::DeterminizeLatticePhonePrunedOptions", a[4]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 4:
    ret0 = ::fst::DeterminizeLatticePhonePruned(*arg1, *arg2, std::move(arg3), arg4); break;
  case 5:
    ret0 = ::fst::DeterminizeLatticePhonePruned(*arg1, *arg2, std::move(arg3), arg4, *arg5); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _determinize_lattice_phone_pruned_destructive(trans_model:TransitionModel, ifst:LatticeMutableFst, prune:float, ofst:CompactLatticeMutableFst, opts:DeterminizeLatticePhonePrunedOptions=default) -> bool
static PyObject* wrapDeterminizeLatticePhonePruned_as__determinize_lattice_phone_pruned_destructive(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[5]{};
  char* names[] = {
      C("trans_model"),
      C("ifst"),
      C("prune"),
      C("ofst"),
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO|O:_determinize_lattice_phone_pruned_destructive", names, &a[0], &a[1], &a[2], &a[3], &a[4])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 5; nargs > 4; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::TransitionModel* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_determinize_lattice_phone_pruned_destructive", names[0], "::kaldi::TransitionModel", a[0]);
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_determinize_lattice_phone_pruned_destructive", names[1], "::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >", a[1]);
  double arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("_determinize_lattice_phone_pruned_destructive", names[2], "double", a[2]);
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > * arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("_determinize_lattice_phone_pruned_destructive", names[3], "::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > *", a[3]);
  ::fst::DeterminizeLatticePhonePrunedOptions* arg5;
  if (nargs > 4) {
    if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("_determinize_lattice_phone_pruned_destructive", names[4], "::fst::DeterminizeLatticePhonePrunedOptions", a[4]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 4:
    ret0 = ::fst::DeterminizeLatticePhonePruned(*arg1, *arg2, std::move(arg3), arg4); break;
  case 5:
    ret0 = ::fst::DeterminizeLatticePhonePruned(*arg1, *arg2, std::move(arg3), arg4, *arg5); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _determinize_lattice_phone_pruned_wrapper(trans_model:TransitionModel, ifst:LatticeMutableFst, prune:float, ofst:CompactLatticeMutableFst, opts:DeterminizeLatticePhonePrunedOptions=default) -> bool
static PyObject* wrapDeterminizeLatticePhonePrunedWrapper_as__determinize_lattice_phone_pruned_wrapper(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[5]{};
  char* names[] = {
      C("trans_model"),
      C("ifst"),
      C("prune"),
      C("ofst"),
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO|O:_determinize_lattice_phone_pruned_wrapper", names, &a[0], &a[1], &a[2], &a[3], &a[4])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 5; nargs > 4; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::TransitionModel* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_determinize_lattice_phone_pruned_wrapper", names[0], "::kaldi::TransitionModel", a[0]);
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_determinize_lattice_phone_pruned_wrapper", names[1], "::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > *", a[1]);
  double arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("_determinize_lattice_phone_pruned_wrapper", names[2], "double", a[2]);
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > * arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("_determinize_lattice_phone_pruned_wrapper", names[3], "::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > *", a[3]);
  ::fst::DeterminizeLatticePhonePrunedOptions* arg5;
  if (nargs > 4) {
    if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("_determinize_lattice_phone_pruned_wrapper", names[4], "::fst::DeterminizeLatticePhonePrunedOptions", a[4]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 4:
    ret0 = ::fst::DeterminizeLatticePhonePrunedWrapper(*arg1, arg2, std::move(arg3), arg4); break;
  case 5:
    ret0 = ::fst::DeterminizeLatticePhonePrunedWrapper(*arg1, arg2, std::move(arg3), arg4, *arg5); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("_determinize_lattice_pruned"), (PyCFunction)wrapDeterminizeLatticePruned_as__determinize_lattice_pruned, METH_VARARGS | METH_KEYWORDS, C("_determinize_lattice_pruned(ifst:LatticeExpandedFst, prune:float, ofst:LatticeMutableFst, opts:DeterminizeLatticePrunedOptions=default) -> bool\n  Calls C++ function\n  bool ::fst::DeterminizeLatticePruned(::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >, double, ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > *, ::fst::DeterminizeLatticePrunedOptions)")},
  {C("_determinize_lattice_pruned_to_compact"), (PyCFunction)wrapDeterminizeLatticePruned_as__determinize_lattice_pruned_to_compact, METH_VARARGS | METH_KEYWORDS, C("_determinize_lattice_pruned_to_compact(ifst:LatticeExpandedFst, prune:float, ofst:CompactLatticeMutableFst, opts:DeterminizeLatticePrunedOptions=default) -> bool\n  Calls C++ function\n  bool ::fst::DeterminizeLatticePruned(::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >, double, ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > *, ::fst::DeterminizeLatticePrunedOptions)")},
  {C("_determinize_lattice_insert_phones"), (PyCFunction)wrapDeterminizeLatticeInsertPhones_as__determinize_lattice_insert_phones, METH_VARARGS | METH_KEYWORDS, C("_determinize_lattice_insert_phones(trans_model:TransitionModel, fst:LatticeMutableFst) -> int\n\nInserts phones at phone boundaries in a lattice.\n\nThis function takes in a lattice and inserts phones at phone boundaries.\nIt uses the transition model to work out the transition_id to phone map.\nThe return value is the starting index of the phone labels. Typically we\npick (`maximum_output_label_index + 1`) as this value. The inserted\nphones are then mapped to (`return_value + original_phone_label`) in the\nnew lattice. The return value is used by\n`determinize_lattice_delete_phones` to work out the phones.\n\nArgs:\n  trans_model (TransitionModel): The transition model.\n  fst (LatticeMutableFst): The input lattice.\n\nReturns:\n  The starting index of the phone labels.\n\nSee Also:\n  meth:`_determinize_lattice_delete_phones`")},
  {C("_determinize_lattice_delete_phones"), (PyCFunction)wrapDeterminizeLatticeDeletePhones_as__determinize_lattice_delete_phones, METH_VARARGS | METH_KEYWORDS, C("_determinize_lattice_delete_phones(first_phone_label:int, fst:LatticeMutableFst)\n\nDeletes phones larger than `first_phone_label` in a lattice.\n\nThis function takes in lattices and deletes \"phones\" from them. The\n\"phones\" here are actually any label that is larger than\n`first_phone_label` because when we insert phones into the lattice, we\nmap the original phone label to (`first_phone_label +\noriginal_phone_label`). It is supposed to be used together with\n`determinize_lattice_insert_phones`.\n\nArgs:\n  first_phone_label (int): The starting index of the phone labels.\n  fst (LatticeMutableFst): The input lattice.\n\nSee Also:\n  meth:`_determinize_lattice_insert_phones`")},
  {C("_determinize_lattice_phone_pruned"), (PyCFunction)wrapDeterminizeLatticePhonePruned_as__determinize_lattice_phone_pruned, METH_VARARGS | METH_KEYWORDS, C("_determinize_lattice_phone_pruned(trans_model:TransitionModel, ifst:LatticeExpandedFst, prune:float, ofst:CompactLatticeMutableFst, opts:DeterminizeLatticePhonePrunedOptions=default) -> bool\n  Calls C++ function\n  bool ::fst::DeterminizeLatticePhonePruned(::kaldi::TransitionModel, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >, double, ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > *, ::fst::DeterminizeLatticePhonePrunedOptions)")},
  {C("_determinize_lattice_phone_pruned_destructive"), (PyCFunction)wrapDeterminizeLatticePhonePruned_as__determinize_lattice_phone_pruned_destructive, METH_VARARGS | METH_KEYWORDS, C("_determinize_lattice_phone_pruned_destructive(trans_model:TransitionModel, ifst:LatticeMutableFst, prune:float, ofst:CompactLatticeMutableFst, opts:DeterminizeLatticePhonePrunedOptions=default) -> bool\n  Calls C++ function\n  bool ::fst::DeterminizeLatticePhonePruned(::kaldi::TransitionModel, ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >, double, ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > *, ::fst::DeterminizeLatticePhonePrunedOptions)")},
  {C("_determinize_lattice_phone_pruned_wrapper"), (PyCFunction)wrapDeterminizeLatticePhonePrunedWrapper_as__determinize_lattice_phone_pruned_wrapper, METH_VARARGS | METH_KEYWORDS, C("_determinize_lattice_phone_pruned_wrapper(trans_model:TransitionModel, ifst:LatticeMutableFst, prune:float, ofst:CompactLatticeMutableFst, opts:DeterminizeLatticePhonePrunedOptions=default) -> bool\n  Calls C++ function\n  bool ::fst::DeterminizeLatticePhonePrunedWrapper(::kaldi::TransitionModel, ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > *, double, ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > *, ::fst::DeterminizeLatticePhonePrunedOptions)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyDeterminizeLatticePrunedOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyDeterminizeLatticePrunedOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyDeterminizeLatticePhonePrunedOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyDeterminizeLatticePhonePrunedOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_determinize_lattice_pruned",  // module name
  "CLIF-generated module for lat/determinize-lattice-pruned.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_lattice_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_expanded_fst")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_mutable_fst")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_transition_model")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "DeterminizeLatticePrunedOptions", reinterpret_cast<PyObject*>(&pyDeterminizeLatticePrunedOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "DeterminizeLatticePhonePrunedOptions", reinterpret_cast<PyObject*>(&pyDeterminizeLatticePhonePrunedOptions::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __determinize__lattice__pruned_clifwrap

namespace fst {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// DeterminizeLatticePhonePrunedOptions to/from ::fst::DeterminizeLatticePhonePrunedOptions conversion

bool Clif_PyObjAs(PyObject* py, ::fst::DeterminizeLatticePhonePrunedOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::DeterminizeLatticePhonePrunedOptions* cpp = __determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePhonePrunedOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::DeterminizeLatticePhonePrunedOptions>* c) {
  assert(c != nullptr);
  ::fst::DeterminizeLatticePhonePrunedOptions* cpp = __determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePhonePrunedOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePhonePrunedOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::DeterminizeLatticePhonePrunedOptions>* c) {
  assert(c != nullptr);
  ::fst::DeterminizeLatticePhonePrunedOptions* cpp = __determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePhonePrunedOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePhonePrunedOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert DeterminizeLatticePhonePrunedOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::DeterminizeLatticePhonePrunedOptions* c) {
  assert(c != nullptr);
  ::fst::DeterminizeLatticePhonePrunedOptions* cpp = __determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePhonePrunedOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::DeterminizeLatticePhonePrunedOptions>* c) {
  assert(c != nullptr);
  ::fst::DeterminizeLatticePhonePrunedOptions* cpp = __determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePhonePrunedOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::DeterminizeLatticePhonePrunedOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePhonePrunedOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePhonePrunedOptions::wrapper*>(py)->cpp = ::clif::Instance<::fst::DeterminizeLatticePhonePrunedOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::DeterminizeLatticePhonePrunedOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePhonePrunedOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePhonePrunedOptions::wrapper*>(py)->cpp = ::clif::Instance<::fst::DeterminizeLatticePhonePrunedOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::DeterminizeLatticePhonePrunedOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePhonePrunedOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePhonePrunedOptions::wrapper*>(py)->cpp = ::clif::Instance<::fst::DeterminizeLatticePhonePrunedOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::DeterminizeLatticePhonePrunedOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePhonePrunedOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePhonePrunedOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::DeterminizeLatticePhonePrunedOptions>(c);
  return py;
}

// DeterminizeLatticePrunedOptions to/from ::fst::DeterminizeLatticePrunedOptions conversion

bool Clif_PyObjAs(PyObject* py, ::fst::DeterminizeLatticePrunedOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::DeterminizeLatticePrunedOptions* cpp = __determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePrunedOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::DeterminizeLatticePrunedOptions>* c) {
  assert(c != nullptr);
  ::fst::DeterminizeLatticePrunedOptions* cpp = __determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePrunedOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePrunedOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::DeterminizeLatticePrunedOptions>* c) {
  assert(c != nullptr);
  ::fst::DeterminizeLatticePrunedOptions* cpp = __determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePrunedOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePrunedOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert DeterminizeLatticePrunedOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::DeterminizeLatticePrunedOptions* c) {
  assert(c != nullptr);
  ::fst::DeterminizeLatticePrunedOptions* cpp = __determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePrunedOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::DeterminizeLatticePrunedOptions>* c) {
  assert(c != nullptr);
  ::fst::DeterminizeLatticePrunedOptions* cpp = __determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePrunedOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::DeterminizeLatticePrunedOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePrunedOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePrunedOptions::wrapper*>(py)->cpp = ::clif::Instance<::fst::DeterminizeLatticePrunedOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::DeterminizeLatticePrunedOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePrunedOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePrunedOptions::wrapper*>(py)->cpp = ::clif::Instance<::fst::DeterminizeLatticePrunedOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::DeterminizeLatticePrunedOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePrunedOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePrunedOptions::wrapper*>(py)->cpp = ::clif::Instance<::fst::DeterminizeLatticePrunedOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::DeterminizeLatticePrunedOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePrunedOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__determinize__lattice__pruned_clifwrap::pyDeterminizeLatticePrunedOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::DeterminizeLatticePrunedOptions>(c);
  return py;
}

}  // namespace fst
