//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/gmm/mle-full-gmm.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "matrix/sp-matrix-clifwrap.h"
#include "gmm/model-common-clifwrap.h"
#include "gmm/full-gmm-clifwrap.h"
#include "gmm/full-gmm-normal-clifwrap.h"
#include "gmm/diag-gmm-clifwrap.h"
#include "itf/options-itf-clifwrap.h"
#include "base/iostream-clifwrap.h"
#include "mle-full-gmm-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __mle__full__gmm_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyMleFullGmmOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::MleFullGmmOptions> cpp;
};
static ::kaldi::MleFullGmmOptions* ThisPtr(PyObject*);

static PyObject* get_min_gaussian_weight(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->min_gaussian_weight, {});
}

static int set_min_gaussian_weight(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the min_gaussian_weight attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->min_gaussian_weight)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for min_gaussian_weight:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_min_gaussian_occupancy(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->min_gaussian_occupancy, {});
}

static int set_min_gaussian_occupancy(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the min_gaussian_occupancy attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->min_gaussian_occupancy)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for min_gaussian_occupancy:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_variance_floor(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->variance_floor, {});
}

static int set_variance_floor(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the variance_floor attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->variance_floor)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for variance_floor:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_max_condition(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->max_condition, {});
}

static int set_max_condition(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the max_condition attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->max_condition)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for max_condition:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_remove_low_count_gaussians(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->remove_low_count_gaussians, {});
}

static int set_remove_low_count_gaussians(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the remove_low_count_gaussians attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->remove_low_count_gaussians)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for remove_low_count_gaussians:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::MleFullGmmOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("min_gaussian_weight"), get_min_gaussian_weight, set_min_gaussian_weight, C("C++ ::kaldi::BaseFloat MleFullGmmOptions.min_gaussian_weight")},
  {C("min_gaussian_occupancy"), get_min_gaussian_occupancy, set_min_gaussian_occupancy, C("C++ ::kaldi::BaseFloat MleFullGmmOptions.min_gaussian_occupancy")},
  {C("variance_floor"), get_variance_floor, set_variance_floor, C("C++ ::kaldi::BaseFloat MleFullGmmOptions.variance_floor")},
  {C("max_condition"), get_max_condition, set_max_condition, C("C++ ::kaldi::BaseFloat MleFullGmmOptions.max_condition")},
  {C("remove_low_count_gaussians"), get_remove_low_count_gaussians, set_remove_low_count_gaussians, C("C++ bool MleFullGmmOptions.remove_low_count_gaussians")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::MleFullGmmOptions::Register(::kaldi::OptionsItf *)")},
  {}
};

// MleFullGmmOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// MleFullGmmOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// MleFullGmmOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_mle_full_gmm.MleFullGmmOptions",   // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::MleFullGmmOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "MleFullGmmOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::MleFullGmmOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::MleFullGmmOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_MleFullGmmOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::MleFullGmmOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::MleFullGmmOptions* c = static_cast<::kaldi::MleFullGmmOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::MleFullGmmOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyMleFullGmmOptions

namespace pyAccumFullGmm {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::AccumFullGmm> cpp;
};
static ::kaldi::AccumFullGmm* ThisPtr(PyObject*);

// @classmethod new_with_params(num_comp:int, dim:int, flags:int) -> AccumFullGmm
static PyObject* wrapAccumFullGmm_as_new_with_params(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("num_comp"),
      C("dim"),
      C("flags"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:new_with_params", names, &a[0], &a[1], &a[2])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new_with_params", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("new_with_params", names[1], "int", a[1]);
  unsigned short arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("new_with_params", names[2], "unsigned short", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::AccumFullGmm> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::AccumFullGmm>(std::move(arg1), std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod new_with_full(gmm:FullGmm, flags:int) -> AccumFullGmm
static PyObject* wrapAccumFullGmm_as_new_with_full(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("gmm"),
      C("flags"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:new_with_full", names, &a[0], &a[1])) return nullptr;
  ::kaldi::FullGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new_with_full", names[0], "::kaldi::FullGmm", a[0]);
  unsigned short arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("new_with_full", names[1], "unsigned short", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::AccumFullGmm> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::AccumFullGmm>(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod new_with_other(gmm:AccumFullGmm) -> AccumFullGmm
static PyObject* wrapAccumFullGmm_as_new_with_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("gmm"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:new_with_other", names, &a[0])) return nullptr;
  ::kaldi::AccumFullGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new_with_other", names[0], "::kaldi::AccumFullGmm", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::AccumFullGmm> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::AccumFullGmm>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// read(in_stream:istream, binary:bool, add:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("in_stream"),
      C("binary"),
      C("add"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:read", names, &a[0], &a[1], &a[2])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  bool arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("read", names[2], "bool", a[2]);
  // Call actual C++ method.
  ::kaldi::AccumFullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// write(out_stream:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("out_stream"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::AccumFullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// resize(num_comp:int, dim:int, flags:int)
static PyObject* wrapResize_as_resize(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("num_comp"),
      C("dim"),
      C("flags"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:resize", names, &a[0], &a[1], &a[2])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("resize", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("resize", names[1], "int", a[1]);
  unsigned short arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("resize", names[2], "unsigned short", a[2]);
  // Call actual C++ method.
  ::kaldi::AccumFullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Resize(std::move(arg1), std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// resize_with_full(gmm:FullGmm, flags:int)
static PyObject* wrapResize_as_resize_with_full(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("gmm"),
      C("flags"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:resize_with_full", names, &a[0], &a[1])) return nullptr;
  ::kaldi::FullGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("resize_with_full", names[0], "::kaldi::FullGmm", a[0]);
  unsigned short arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("resize_with_full", names[1], "unsigned short", a[1]);
  // Call actual C++ method.
  ::kaldi::AccumFullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Resize(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// resize_var_accumulator(num_comp:int, dim:int)
static PyObject* wrapResizeVarAccumulator_as_resize_var_accumulator(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("num_comp"),
      C("dim"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:resize_var_accumulator", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("resize_var_accumulator", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("resize_var_accumulator", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::AccumFullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ResizeVarAccumulator(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// num_gauss() -> int
static PyObject* wrapNumGauss_as_num_gauss(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::AccumFullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumGauss();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::AccumFullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// set_zero(flags:int)
static PyObject* wrapSetZero_as_set_zero(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("flags"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_zero", names, &a[0])) return nullptr;
  unsigned short arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_zero", names[0], "unsigned short", a[0]);
  // Call actual C++ method.
  ::kaldi::AccumFullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetZero(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// scale(f:float, flags:int)
static PyObject* wrapScale_as_scale(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("f"),
      C("flags"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:scale", names, &a[0], &a[1])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("scale", names[0], "float", a[0]);
  unsigned short arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("scale", names[1], "unsigned short", a[1]);
  // Call actual C++ method.
  ::kaldi::AccumFullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Scale(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// accumulate_for_component(data:VectorBase, comp_index:int, weight:float)
static PyObject* wrapAccumulateForComponent_as_accumulate_for_component(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("data"),
      C("comp_index"),
      C("weight"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:accumulate_for_component", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_for_component", names[0], "::kaldi::VectorBase<float>", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_for_component", names[1], "int", a[1]);
  float arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate_for_component", names[2], "float", a[2]);
  // Call actual C++ method.
  ::kaldi::AccumFullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AccumulateForComponent(*arg1, std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// accumulate_from_posteriors(data:VectorBase, gauss_posteriors:VectorBase)
static PyObject* wrapAccumulateFromPosteriors_as_accumulate_from_posteriors(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("data"),
      C("gauss_posteriors"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:accumulate_from_posteriors", names, &a[0], &a[1])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_from_posteriors", names[0], "::kaldi::VectorBase<float>", a[0]);
  ::kaldi::VectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_from_posteriors", names[1], "::kaldi::VectorBase<float>", a[1]);
  // Call actual C++ method.
  ::kaldi::AccumFullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AccumulateFromPosteriors(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// accumulate_from_full(gmm:FullGmm, data:VectorBase, frame_posterior:float) -> float
static PyObject* wrapAccumulateFromFull_as_accumulate_from_full(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("gmm"),
      C("data"),
      C("frame_posterior"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:accumulate_from_full", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::FullGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_from_full", names[0], "::kaldi::FullGmm", a[0]);
  ::kaldi::VectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_from_full", names[1], "::kaldi::VectorBase<float>", a[1]);
  float arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate_from_full", names[2], "float", a[2]);
  // Call actual C++ method.
  ::kaldi::AccumFullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->AccumulateFromFull(*arg1, *arg2, std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// accumulate_from_diag(gmm:DiagGmm, data:VectorBase, frame_posterior:float) -> float
static PyObject* wrapAccumulateFromDiag_as_accumulate_from_diag(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("gmm"),
      C("data"),
      C("frame_posterior"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:accumulate_from_diag", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::DiagGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate_from_diag", names[0], "::kaldi::DiagGmm", a[0]);
  ::kaldi::VectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate_from_diag", names[1], "::kaldi::VectorBase<float>", a[1]);
  float arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate_from_diag", names[2], "float", a[2]);
  // Call actual C++ method.
  ::kaldi::AccumFullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->AccumulateFromDiag(*arg1, *arg2, std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// flags() -> int
static PyObject* wrapFlags_as_flags(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::AccumFullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned short ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Flags();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// occupancy() -> DoubleVector
static PyObject* wrapoccupancy(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::AccumFullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::Vector<double> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->occupancy();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// mean_accumulator() -> DoubleMatrix
static PyObject* wrapmean_accumulator(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::AccumFullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::Matrix<double> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->mean_accumulator();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// covariance_accumulator() -> list<DoubleSpMatrix>
static PyObject* wrapcovariance_accumulator(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::AccumFullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::vector< ::kaldi::SpMatrix<double> > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->covariance_accumulator();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("new_with_params"), (PyCFunction)wrapAccumFullGmm_as_new_with_params, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new_with_params(num_comp:int, dim:int, flags:int) -> AccumFullGmm\n  Calls C++ function\n  std::unique_ptr<::kaldi::AccumFullGmm> ::kaldi::AccumFullGmm::AccumFullGmm(int, int, unsigned short)")},
  {C("new_with_full"), (PyCFunction)wrapAccumFullGmm_as_new_with_full, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new_with_full(gmm:FullGmm, flags:int) -> AccumFullGmm\n  Calls C++ function\n  std::unique_ptr<::kaldi::AccumFullGmm> ::kaldi::AccumFullGmm::AccumFullGmm(::kaldi::FullGmm, unsigned short)")},
  {C("new_with_other"), (PyCFunction)wrapAccumFullGmm_as_new_with_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new_with_other(gmm:AccumFullGmm) -> AccumFullGmm\n  Calls C++ function\n  std::unique_ptr<::kaldi::AccumFullGmm> ::kaldi::AccumFullGmm::AccumFullGmm(::kaldi::AccumFullGmm)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(in_stream:istream, binary:bool, add:bool)\n  Calls C++ function\n  void ::kaldi::AccumFullGmm::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool, bool)")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(out_stream:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::AccumFullGmm::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("resize"), (PyCFunction)wrapResize_as_resize, METH_VARARGS | METH_KEYWORDS, C("resize(num_comp:int, dim:int, flags:int)\n  Calls C++ function\n  void ::kaldi::AccumFullGmm::Resize(int, int, unsigned short)")},
  {C("resize_with_full"), (PyCFunction)wrapResize_as_resize_with_full, METH_VARARGS | METH_KEYWORDS, C("resize_with_full(gmm:FullGmm, flags:int)\n  Calls C++ function\n  void ::kaldi::AccumFullGmm::Resize(::kaldi::FullGmm, unsigned short)")},
  {C("resize_var_accumulator"), (PyCFunction)wrapResizeVarAccumulator_as_resize_var_accumulator, METH_VARARGS | METH_KEYWORDS, C("resize_var_accumulator(num_comp:int, dim:int)\n  Calls C++ function\n  void ::kaldi::AccumFullGmm::ResizeVarAccumulator(int, int)")},
  {C("num_gauss"), (PyCFunction)wrapNumGauss_as_num_gauss, METH_NOARGS, C("num_gauss() -> int\n  Calls C++ function\n  int ::kaldi::AccumFullGmm::NumGauss()")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n  Calls C++ function\n  int ::kaldi::AccumFullGmm::Dim()")},
  {C("set_zero"), (PyCFunction)wrapSetZero_as_set_zero, METH_VARARGS | METH_KEYWORDS, C("set_zero(flags:int)\n  Calls C++ function\n  void ::kaldi::AccumFullGmm::SetZero(unsigned short)")},
  {C("scale"), (PyCFunction)wrapScale_as_scale, METH_VARARGS | METH_KEYWORDS, C("scale(f:float, flags:int)\n  Calls C++ function\n  void ::kaldi::AccumFullGmm::Scale(float, unsigned short)")},
  {C("accumulate_for_component"), (PyCFunction)wrapAccumulateForComponent_as_accumulate_for_component, METH_VARARGS | METH_KEYWORDS, C("accumulate_for_component(data:VectorBase, comp_index:int, weight:float)\n  Calls C++ function\n  void ::kaldi::AccumFullGmm::AccumulateForComponent(::kaldi::VectorBase<float>, int, float)")},
  {C("accumulate_from_posteriors"), (PyCFunction)wrapAccumulateFromPosteriors_as_accumulate_from_posteriors, METH_VARARGS | METH_KEYWORDS, C("accumulate_from_posteriors(data:VectorBase, gauss_posteriors:VectorBase)\n  Calls C++ function\n  void ::kaldi::AccumFullGmm::AccumulateFromPosteriors(::kaldi::VectorBase<float>, ::kaldi::VectorBase<float>)")},
  {C("accumulate_from_full"), (PyCFunction)wrapAccumulateFromFull_as_accumulate_from_full, METH_VARARGS | METH_KEYWORDS, C("accumulate_from_full(gmm:FullGmm, data:VectorBase, frame_posterior:float) -> float\n  Calls C++ function\n  float ::kaldi::AccumFullGmm::AccumulateFromFull(::kaldi::FullGmm, ::kaldi::VectorBase<float>, float)")},
  {C("accumulate_from_diag"), (PyCFunction)wrapAccumulateFromDiag_as_accumulate_from_diag, METH_VARARGS | METH_KEYWORDS, C("accumulate_from_diag(gmm:DiagGmm, data:VectorBase, frame_posterior:float) -> float\n  Calls C++ function\n  float ::kaldi::AccumFullGmm::AccumulateFromDiag(::kaldi::DiagGmm, ::kaldi::VectorBase<float>, float)")},
  {C("flags"), (PyCFunction)wrapFlags_as_flags, METH_NOARGS, C("flags() -> int\n  Calls C++ function\n  unsigned short ::kaldi::AccumFullGmm::Flags()")},
  {C("occupancy"), (PyCFunction)wrapoccupancy, METH_NOARGS, C("occupancy() -> DoubleVector\n  Calls C++ function\n  ::kaldi::Vector<double> ::kaldi::AccumFullGmm::occupancy()")},
  {C("mean_accumulator"), (PyCFunction)wrapmean_accumulator, METH_NOARGS, C("mean_accumulator() -> DoubleMatrix\n  Calls C++ function\n  ::kaldi::Matrix<double> ::kaldi::AccumFullGmm::mean_accumulator()")},
  {C("covariance_accumulator"), (PyCFunction)wrapcovariance_accumulator, METH_NOARGS, C("covariance_accumulator() -> list<DoubleSpMatrix>\n  Calls C++ function\n  ::std::vector< ::kaldi::SpMatrix<double> > ::kaldi::AccumFullGmm::covariance_accumulator()")},
  {}
};

// AccumFullGmm __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// AccumFullGmm __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// AccumFullGmm __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_mle_full_gmm.AccumFullGmm",        // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::AccumFullGmm", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "AccumFullGmm takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::AccumFullGmm>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::AccumFullGmm* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_AccumFullGmm"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::AccumFullGmm"));
      if (!PyErr_Occurred()) {
        ::kaldi::AccumFullGmm* c = static_cast<::kaldi::AccumFullGmm*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::AccumFullGmm*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyAccumFullGmm

// mle_full_gmm_update(config:MleFullGmmOptions, fullgmm_acc:AccumFullGmm, flags:int, gmm:FullGmm) -> (obj_change_out:float, count_out:float)
static PyObject* wrapMleFullGmmUpdate_as_mle_full_gmm_update(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("config"),
      C("fullgmm_acc"),
      C("flags"),
      C("gmm"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:mle_full_gmm_update", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::MleFullGmmOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("mle_full_gmm_update", names[0], "::kaldi::MleFullGmmOptions", a[0]);
  ::kaldi::AccumFullGmm* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("mle_full_gmm_update", names[1], "::kaldi::AccumFullGmm", a[1]);
  unsigned short arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("mle_full_gmm_update", names[2], "unsigned short", a[2]);
  ::kaldi::FullGmm * arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("mle_full_gmm_update", names[3], "::kaldi::FullGmm *", a[3]);
  float ret0{};
  float ret1{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::MleFullGmmUpdate(*arg1, *arg2, std::move(arg3), arg4, &ret0, &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("mle_full_gmm_update"), (PyCFunction)wrapMleFullGmmUpdate_as_mle_full_gmm_update, METH_VARARGS | METH_KEYWORDS, C("mle_full_gmm_update(config:MleFullGmmOptions, fullgmm_acc:AccumFullGmm, flags:int, gmm:FullGmm) -> (obj_change_out:float, count_out:float)\n  Calls C++ function\n  void ::kaldi::MleFullGmmUpdate(::kaldi::MleFullGmmOptions, ::kaldi::AccumFullGmm, unsigned short, ::kaldi::FullGmm *, float*, float*)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyMleFullGmmOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyMleFullGmmOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyAccumFullGmm::wrapper_Type) < 0) return false;
  Py_INCREF(&pyAccumFullGmm::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_mle_full_gmm",  // module name
  "CLIF-generated module for gmm/mle-full-gmm.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_sp_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_model_common")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_full_gmm")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_full_gmm_normal")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_diag_gmm")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "MleFullGmmOptions", reinterpret_cast<PyObject*>(&pyMleFullGmmOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "AccumFullGmm", reinterpret_cast<PyObject*>(&pyAccumFullGmm::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __mle__full__gmm_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// AccumFullGmm to/from ::kaldi::AccumFullGmm conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::AccumFullGmm** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::AccumFullGmm* cpp = __mle__full__gmm_clifwrap::pyAccumFullGmm::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::AccumFullGmm>* c) {
  assert(c != nullptr);
  ::kaldi::AccumFullGmm* cpp = __mle__full__gmm_clifwrap::pyAccumFullGmm::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__mle__full__gmm_clifwrap::pyAccumFullGmm::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::AccumFullGmm>* c) {
  assert(c != nullptr);
  ::kaldi::AccumFullGmm* cpp = __mle__full__gmm_clifwrap::pyAccumFullGmm::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__mle__full__gmm_clifwrap::pyAccumFullGmm::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert AccumFullGmm instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::AccumFullGmm* c) {
  assert(c != nullptr);
  ::kaldi::AccumFullGmm* cpp = __mle__full__gmm_clifwrap::pyAccumFullGmm::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::AccumFullGmm>* c) {
  assert(c != nullptr);
  ::kaldi::AccumFullGmm* cpp = __mle__full__gmm_clifwrap::pyAccumFullGmm::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::AccumFullGmm* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mle__full__gmm_clifwrap::pyAccumFullGmm::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mle__full__gmm_clifwrap::pyAccumFullGmm::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::AccumFullGmm>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::AccumFullGmm> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mle__full__gmm_clifwrap::pyAccumFullGmm::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mle__full__gmm_clifwrap::pyAccumFullGmm::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::AccumFullGmm>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::AccumFullGmm> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mle__full__gmm_clifwrap::pyAccumFullGmm::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mle__full__gmm_clifwrap::pyAccumFullGmm::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::AccumFullGmm>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::AccumFullGmm& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__mle__full__gmm_clifwrap::pyAccumFullGmm::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mle__full__gmm_clifwrap::pyAccumFullGmm::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::AccumFullGmm>(c);
  return py;
}

// MleFullGmmOptions to/from ::kaldi::MleFullGmmOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::MleFullGmmOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::MleFullGmmOptions* cpp = __mle__full__gmm_clifwrap::pyMleFullGmmOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::MleFullGmmOptions>* c) {
  assert(c != nullptr);
  ::kaldi::MleFullGmmOptions* cpp = __mle__full__gmm_clifwrap::pyMleFullGmmOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__mle__full__gmm_clifwrap::pyMleFullGmmOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::MleFullGmmOptions>* c) {
  assert(c != nullptr);
  ::kaldi::MleFullGmmOptions* cpp = __mle__full__gmm_clifwrap::pyMleFullGmmOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__mle__full__gmm_clifwrap::pyMleFullGmmOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert MleFullGmmOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::MleFullGmmOptions* c) {
  assert(c != nullptr);
  ::kaldi::MleFullGmmOptions* cpp = __mle__full__gmm_clifwrap::pyMleFullGmmOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::MleFullGmmOptions>* c) {
  assert(c != nullptr);
  ::kaldi::MleFullGmmOptions* cpp = __mle__full__gmm_clifwrap::pyMleFullGmmOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::MleFullGmmOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mle__full__gmm_clifwrap::pyMleFullGmmOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mle__full__gmm_clifwrap::pyMleFullGmmOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MleFullGmmOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::MleFullGmmOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mle__full__gmm_clifwrap::pyMleFullGmmOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mle__full__gmm_clifwrap::pyMleFullGmmOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MleFullGmmOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::MleFullGmmOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mle__full__gmm_clifwrap::pyMleFullGmmOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mle__full__gmm_clifwrap::pyMleFullGmmOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MleFullGmmOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::MleFullGmmOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__mle__full__gmm_clifwrap::pyMleFullGmmOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mle__full__gmm_clifwrap::pyMleFullGmmOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::MleFullGmmOptions>(c);
  return py;
}

}  // namespace kaldi
