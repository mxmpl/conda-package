//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/gmm/full-gmm.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "matrix/sp-matrix-clifwrap.h"
#include "gmm/model-common-clifwrap.h"
#include "full-gmm-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __full__gmm_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyFullGmm {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::FullGmm> cpp;
};
static ::kaldi::FullGmm* ThisPtr(PyObject*);

// @classmethod from_other(gmm:FullGmm) -> FullGmm
static PyObject* wrapFullGmm_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("gmm"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::kaldi::FullGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::kaldi::FullGmm", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::FullGmm> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::FullGmm>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_nmix_dim(nmix:int, dim:int) -> FullGmm
static PyObject* wrapFullGmm_as_from_nmix_dim(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("nmix"),
      C("dim"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:from_nmix_dim", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_nmix_dim", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_nmix_dim", names[1], "int", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::FullGmm> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::FullGmm>(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// resize(nmix:int, dim:int)
static PyObject* wrapResize_as_resize(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("nmix"),
      C("dim"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:resize", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("resize", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("resize", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Resize(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// num_gauss() -> int
static PyObject* wrapNumGauss_as_num_gauss(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumGauss();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// dim() -> int
static PyObject* wrapDim_as_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Dim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// copy_from_full(fullgmm:FullGmm)
static PyObject* wrapCopyFromFullGmm_as_copy_from_full(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("fullgmm"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:copy_from_full", names, &a[0])) return nullptr;
  ::kaldi::FullGmm* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy_from_full", names[0], "::kaldi::FullGmm", a[0]);
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->CopyFromFullGmm(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// log_likelihood(data:VectorBase) -> float
static PyObject* wrapLogLikelihood_as_log_likelihood(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("data"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:log_likelihood", names, &a[0])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("log_likelihood", names[0], "::kaldi::VectorBase<float>", a[0]);
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->LogLikelihood(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// log_likelihoods(data:VectorBase) -> Vector
static PyObject* wrapLogLikelihoods_as_log_likelihoods(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("data"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:log_likelihoods", names, &a[0])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("log_likelihoods", names[0], "::kaldi::VectorBase<float>", a[0]);
  ::kaldi::Vector<float> ret0{};
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->LogLikelihoods(*arg1, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// log_likelihoods_preselect(data:VectorBase, indices:list<int>) -> Vector
static PyObject* wrapLogLikelihoodsPreselect_as_log_likelihoods_preselect(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("data"),
      C("indices"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:log_likelihoods_preselect", names, &a[0], &a[1])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("log_likelihoods_preselect", names[0], "::kaldi::VectorBase<float>", a[0]);
  ::std::vector< ::int32> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("log_likelihoods_preselect", names[1], "::std::vector< ::int32>", a[1]);
  ::kaldi::Vector<float> ret0{};
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->LogLikelihoodsPreselect(*arg1, std::move(arg2), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// gaussian_selection(data:VectorBase, num_gselect:int) -> (log_like:float, output:list<int>)
static PyObject* wrapGaussianSelection_as_gaussian_selection(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("data"),
      C("num_gselect"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:gaussian_selection", names, &a[0], &a[1])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("gaussian_selection", names[0], "::kaldi::VectorBase<float>", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("gaussian_selection", names[1], "int", a[1]);
  ::std::vector< ::int32> ret1{};
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GaussianSelection(*arg1, std::move(arg2), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// gaussian_selection_preselect(data:VectorBase, preselect:list<int>, num_gselect:int) -> (log_like:float, posteriors:list<int>)
static PyObject* wrapGaussianSelectionPreselect_as_gaussian_selection_preselect(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("data"),
      C("preselect"),
      C("num_gselect"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:gaussian_selection_preselect", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("gaussian_selection_preselect", names[0], "::kaldi::VectorBase<float>", a[0]);
  ::std::vector< ::int32> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("gaussian_selection_preselect", names[1], "::std::vector< ::int32>", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("gaussian_selection_preselect", names[2], "int", a[2]);
  ::std::vector< ::int32> ret1{};
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GaussianSelectionPreselect(*arg1, std::move(arg2), std::move(arg3), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// _component_posteriors(data:VectorBase, posterior:VectorBase) -> float
static PyObject* wrapComponentPosteriors_as__component_posteriors(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("data"),
      C("posterior"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_component_posteriors", names, &a[0], &a[1])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_component_posteriors", names[0], "::kaldi::VectorBase<float>", a[0]);
  ::kaldi::VectorBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_component_posteriors", names[1], "::kaldi::VectorBase<float> *", a[1]);
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->ComponentPosteriors(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// component_log_likelihood(data:VectorBase, comp_id:int) -> float
static PyObject* wrapComponentLogLikelihood_as_component_log_likelihood(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("data"),
      C("comp_id"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:component_log_likelihood", names, &a[0], &a[1])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("component_log_likelihood", names[0], "::kaldi::VectorBase<float>", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("component_log_likelihood", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->ComponentLogLikelihood(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// compute_gconsts() -> int
static PyObject* wrapComputeGconsts_as_compute_gconsts(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->ComputeGconsts();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// perturb(pertub_factor:float)
static PyObject* wrapPerturb_as_perturb(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("pertub_factor"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:perturb", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("perturb", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Perturb(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(is:istream, binary:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// interpolate(rho:float, source:FullGmm, flags:int=default)
static PyObject* wrapInterpolate_as_interpolate(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("rho"),
      C("source"),
      C("flags"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:interpolate", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("interpolate", names[0], "float", a[0]);
  ::kaldi::FullGmm* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("interpolate", names[1], "::kaldi::FullGmm", a[1]);
  unsigned short arg3;
  if (nargs > 2) {
    if (!a[2]) arg3 = (unsigned short)15;
    else if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("interpolate", names[2], "unsigned short", a[2]);
  }
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    c->Interpolate(std::move(arg1), *arg2); break;
  case 3:
    c->Interpolate(std::move(arg1), *arg2, std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyObject* get_gconsts_(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->gconsts(), {});
}

static PyObject* get_weights_(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->weights(), {});
}

static PyObject* get_means_invcovars_(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->means_invcovars(), {});
}

static PyObject* get_inv_covars_(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->inv_covars(), {});
}

static int set_inv_covars_(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the inv_covars_ attribute");
    return -1;
  }
  ::std::vector< ::kaldi::SpMatrix<float> > cval;
  if (Clif_PyObjAs(value, &cval)) {
    auto cpp = ThisPtr(self); if (!cpp) return -1;
    cpp->SetInvCovars(cval);
    return 0;
  }
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for inv_covars_:list<SpMatrix>", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// _set_weights(w:Vector)
static PyObject* wrapSetWeights_as__set_weights(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("w"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_set_weights", names, &a[0])) return nullptr;
  ::kaldi::Vector<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_weights", names[0], "::kaldi::Vector<float>", a[0]);
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetWeights(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _set_means(m:Matrix)
static PyObject* wrapSetMeans_as__set_means(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("m"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_set_means", names, &a[0])) return nullptr;
  ::kaldi::Matrix<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_means", names[0], "::kaldi::Matrix<float>", a[0]);
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetMeans(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_inv_covars_and_means(invcovars:list<SpMatrix>, means:Matrix)
static PyObject* wrapSetInvCovarsAndMeans_as_set_inv_covars_and_means(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("invcovars"),
      C("means"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:set_inv_covars_and_means", names, &a[0], &a[1])) return nullptr;
  ::std::vector< ::kaldi::SpMatrix<float> > arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_inv_covars_and_means", names[0], "::std::vector< ::kaldi::SpMatrix<float> >", a[0]);
  ::kaldi::Matrix<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("set_inv_covars_and_means", names[1], "::kaldi::Matrix<float>", a[1]);
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetInvCovarsAndMeans(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_inv_covars_and_means_inv_covars(invcovars:list<SpMatrix>, means_invcovars:Matrix)
static PyObject* wrapSetInvCovarsAndMeansInvCovars_as_set_inv_covars_and_means_inv_covars(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("invcovars"),
      C("means_invcovars"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:set_inv_covars_and_means_inv_covars", names, &a[0], &a[1])) return nullptr;
  ::std::vector< ::kaldi::SpMatrix<float> > arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_inv_covars_and_means_inv_covars", names[0], "::std::vector< ::kaldi::SpMatrix<float> >", a[0]);
  ::kaldi::Matrix<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("set_inv_covars_and_means_inv_covars", names[1], "::kaldi::Matrix<float>", a[1]);
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetInvCovarsAndMeansInvCovars(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// get_covars_() -> list<SpMatrix>
static PyObject* wrapGetCovars_as_get_covars_(PyObject* self) {
  ::std::vector< ::kaldi::SpMatrix<float> > ret0{};
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetCovars(&ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_means() -> Matrix
static PyObject* wrapGetMeans_as_get_means(PyObject* self) {
  ::kaldi::Matrix<float> ret0{};
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetMeans(&ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_covars_and_means() -> (covars:list<SpMatrix>, means:Matrix)
static PyObject* wrapGetCovarsAndMeans_as_get_covars_and_means(PyObject* self) {
  ::std::vector< ::kaldi::SpMatrix<float> > ret0{};
  ::kaldi::Matrix<float> ret1{};
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetCovarsAndMeans(&ret0, &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// remove_component(gauss:int, renorm_weights:bool)
static PyObject* wrapRemoveComponent_as_remove_component(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("gauss"),
      C("renorm_weights"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:remove_component", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("remove_component", names[0], "int", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("remove_component", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->RemoveComponent(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// remove_components(gauss:list<int>, renorm_weights:bool)
static PyObject* wrapRemoveComponents_as_remove_components(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("gauss"),
      C("renorm_weights"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:remove_components", names, &a[0], &a[1])) return nullptr;
  ::std::vector< ::int32> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("remove_components", names[0], "::std::vector< ::int32>", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("remove_components", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->RemoveComponents(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// get_component_mean(gauss:int, out:VectorBase)
static PyObject* wrapGetComponentMean_as_get_component_mean(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("gauss"),
      C("out"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_component_mean", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_component_mean", names[0], "int", a[0]);
  ::kaldi::VectorBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_component_mean", names[1], "::kaldi::VectorBase<float> *", a[1]);
  // Call actual C++ method.
  ::kaldi::FullGmm* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetComponentMean(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("gconsts_"), get_gconsts_, nullptr, C("C++ clif_type_44 FullGmm.gconsts()")},
  {C("weights_"), get_weights_, nullptr, C("C++ clif_type_46 FullGmm.weights()")},
  {C("means_invcovars_"), get_means_invcovars_, nullptr, C("C++ clif_type_48 FullGmm.means_invcovars()")},
  {C("inv_covars_"), get_inv_covars_, set_inv_covars_, C("C++ clif_type_51 FullGmm.inv_covars()")},
  {}
};

static PyMethodDef Methods[] = {
  {C("from_other"), (PyCFunction)wrapFullGmm_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(gmm:FullGmm) -> FullGmm\n  Calls C++ function\n  std::unique_ptr<::kaldi::FullGmm> ::kaldi::FullGmm::FullGmm(::kaldi::FullGmm)")},
  {C("from_nmix_dim"), (PyCFunction)wrapFullGmm_as_from_nmix_dim, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_nmix_dim(nmix:int, dim:int) -> FullGmm\n  Calls C++ function\n  std::unique_ptr<::kaldi::FullGmm> ::kaldi::FullGmm::FullGmm(int, int)")},
  {C("resize"), (PyCFunction)wrapResize_as_resize, METH_VARARGS | METH_KEYWORDS, C("resize(nmix:int, dim:int)\n\nResizes arrays to this dim. Does not init data.")},
  {C("num_gauss"), (PyCFunction)wrapNumGauss_as_num_gauss, METH_NOARGS, C("num_gauss() -> int\n\nReturns the number of mixture components.")},
  {C("dim"), (PyCFunction)wrapDim_as_dim, METH_NOARGS, C("dim() -> int\n\nReturns the dimensionality of the Gaussian mean vectors.")},
  {C("copy_from_full"), (PyCFunction)wrapCopyFromFullGmm_as_copy_from_full, METH_VARARGS | METH_KEYWORDS, C("copy_from_full(fullgmm:FullGmm)\n\nCopies from given :class:`FullGmm`")},
  {C("log_likelihood"), (PyCFunction)wrapLogLikelihood_as_log_likelihood, METH_VARARGS | METH_KEYWORDS, C("log_likelihood(data:VectorBase) -> float\n\nReturns the log-likelihood of a data point given the GMM.\n\nArgs:\n  data (:class:`kaldi.matrix.VectorBase`) - data point")},
  {C("log_likelihoods"), (PyCFunction)wrapLogLikelihoods_as_log_likelihoods, METH_VARARGS | METH_KEYWORDS, C("log_likelihoods(data:VectorBase) -> Vector\n\nOutput the per-component distribution to the log-likelihood\n\nArgs:\n  data (:class:`kaldi.matrix.VectorBase`) - data point")},
  {C("log_likelihoods_preselect"), (PyCFunction)wrapLogLikelihoodsPreselect_as_log_likelihoods_preselect, METH_VARARGS | METH_KEYWORDS, C("log_likelihoods_preselect(data:VectorBase, indices:list<int>) -> Vector\n\nOutputs the per-component log-likelihoods of a subset of mixture components.\n\nArgs:\n  data (:class:`kaldi.matrix.VectorBase`) - data point\n  indices - list of indices")},
  {C("gaussian_selection"), (PyCFunction)wrapGaussianSelection_as_gaussian_selection, METH_VARARGS | METH_KEYWORDS, C("gaussian_selection(data:VectorBase, num_gselect:int) -> (log_like:float, output:list<int>)\n\nGet gaussian selection information for one frame. \n\nArgs:\n  data (:class:`kaldi.matrix.VectorBase`) - data point\n  num_gselect (int) - Output is the best \"num_gselect\" indices, sorted from best to worst.\n\nReturns:\n  log-likelihood for this frame.   ")},
  {C("gaussian_selection_preselect"), (PyCFunction)wrapGaussianSelectionPreselect_as_gaussian_selection_preselect, METH_VARARGS | METH_KEYWORDS, C("gaussian_selection_preselect(data:VectorBase, preselect:list<int>, num_gselect:int) -> (log_like:float, posteriors:list<int>)\n\nGet gaussian selection information for one frame.\n\nArgs:\n  data (:class:`kaldi.matrix.VectorBase`) - data point\n  preselect (list) - subset of mixture components\n  num_gselect (int) - Output is the best \"num_gselect\" indices, sorted from best to worst.\n\nReturns:\n  Log-like for this frame.")},
  {C("_component_posteriors"), (PyCFunction)wrapComponentPosteriors_as__component_posteriors, METH_VARARGS | METH_KEYWORDS, C("_component_posteriors(data:VectorBase, posterior:VectorBase) -> float\n\nComputes the posterior probabilities of all Gaussian components given a data point.\n\nArgs:\n  data (:class:`kaldi.matrix.VectorBase`) - data point\n  posterior (:class:`kaldi.matrix.VectorBase`) - output vector\n\nReturns:\n  Log-likehood of the data given the GMM.")},
  {C("component_log_likelihood"), (PyCFunction)wrapComponentLogLikelihood_as_component_log_likelihood, METH_VARARGS | METH_KEYWORDS, C("component_log_likelihood(data:VectorBase, comp_id:int) -> float\n\nComputes the contribution log-likelihood of a data point from a single Gaussian component.\n\nArgs:\n  data (:class:`kaldi.matrix.VectorBase`) - data point\n  comp_id - component id\n\nReturns:\n  Log-likehood for a given component")},
  {C("compute_gconsts"), (PyCFunction)wrapComputeGconsts_as_compute_gconsts, METH_NOARGS, C("compute_gconsts() -> int\n\nSets the gconsts.\n\nReturns:\n  Number that are invalid e.g. because of zero weights or variances.")},
  {C("perturb"), (PyCFunction)wrapPerturb_as_perturb, METH_VARARGS | METH_KEYWORDS, C("perturb(pertub_factor:float)\n\nPerturbs the component means with a random vector multiplied by the pertrub factor.")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::FullGmm::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool)\n  Calls C++ function\n  void ::kaldi::FullGmm::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool)")},
  {C("interpolate"), (PyCFunction)wrapInterpolate_as_interpolate, METH_VARARGS | METH_KEYWORDS, C("interpolate(rho:float, source:FullGmm, flags:int=default)\n\nthis <- rho * source + (1 - rho) * this")},
  {C("_set_weights"), (PyCFunction)wrapSetWeights_as__set_weights, METH_VARARGS | METH_KEYWORDS, C("_set_weights(w:Vector)\n  Calls C++ function\n  void ::kaldi::FullGmm::SetWeights(::kaldi::Vector<float>)")},
  {C("_set_means"), (PyCFunction)wrapSetMeans_as__set_means, METH_VARARGS | METH_KEYWORDS, C("_set_means(m:Matrix)\n  Calls C++ function\n  void ::kaldi::FullGmm::SetMeans(::kaldi::Matrix<float>)")},
  {C("set_inv_covars_and_means"), (PyCFunction)wrapSetInvCovarsAndMeans_as_set_inv_covars_and_means, METH_VARARGS | METH_KEYWORDS, C("set_inv_covars_and_means(invcovars:list<SpMatrix>, means:Matrix)\n\nUpdates both means and (inverse) covariances.\n\nArgs:\n  invcovars (list of :class:`SpMatrix`): List of inverse covariances\n  means (:class:`kaldi.matrix.Matrix`): matrix of means ")},
  {C("set_inv_covars_and_means_inv_covars"), (PyCFunction)wrapSetInvCovarsAndMeansInvCovars_as_set_inv_covars_and_means_inv_covars, METH_VARARGS | METH_KEYWORDS, C("set_inv_covars_and_means_inv_covars(invcovars:list<SpMatrix>, means_invcovars:Matrix)\n\nUse this if setting both, in the class's native format.\n\nArgs:\n  invcovars (list of :class:`SpMatrix`): List of inverse covariances\n  means_invcovars (:class:`kaldi.matrix.Matrix`): matrix of means and invcovars ")},
  {C("get_covars_"), (PyCFunction)wrapGetCovars_as_get_covars_, METH_NOARGS, C("get_covars_() -> list<SpMatrix>\n\nAccessor for covariances.")},
  {C("get_means"), (PyCFunction)wrapGetMeans_as_get_means, METH_NOARGS, C("get_means() -> Matrix\n\nAccessor for means.")},
  {C("get_covars_and_means"), (PyCFunction)wrapGetCovarsAndMeans_as_get_covars_and_means, METH_NOARGS, C("get_covars_and_means() -> (covars:list<SpMatrix>, means:Matrix)\n\nAccessor for covariances and means.")},
  {C("remove_component"), (PyCFunction)wrapRemoveComponent_as_remove_component, METH_VARARGS | METH_KEYWORDS, C("remove_component(gauss:int, renorm_weights:bool)\n\nMutators for single component, supports float or double Removes single component from model.")},
  {C("remove_components"), (PyCFunction)wrapRemoveComponents_as_remove_components, METH_VARARGS | METH_KEYWORDS, C("remove_components(gauss:list<int>, renorm_weights:bool)\n\nRemoves multiple components from model; \"gauss\" must not have dups.")},
  {C("get_component_mean"), (PyCFunction)wrapGetComponentMean_as_get_component_mean, METH_VARARGS | METH_KEYWORDS, C("get_component_mean(gauss:int, out:VectorBase)\n\nAccessor for component mean.")},
  {}
};

// FullGmm __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// FullGmm __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// FullGmm __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_full_gmm.FullGmm",                 // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::FullGmm", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "FullGmm takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::FullGmm>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::FullGmm* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_FullGmm"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::FullGmm"));
      if (!PyErr_Occurred()) {
        ::kaldi::FullGmm* c = static_cast<::kaldi::FullGmm*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::FullGmm*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyFullGmm


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyFullGmm::wrapper_Type) < 0) return false;
  Py_INCREF(&pyFullGmm::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_full_gmm",  // module name
  "CLIF-generated module for gmm/full-gmm.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_sp_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_model_common")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "FullGmm", reinterpret_cast<PyObject*>(&pyFullGmm::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __full__gmm_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// FullGmm to/from ::kaldi::FullGmm conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::FullGmm** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::FullGmm* cpp = __full__gmm_clifwrap::pyFullGmm::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::FullGmm>* c) {
  assert(c != nullptr);
  ::kaldi::FullGmm* cpp = __full__gmm_clifwrap::pyFullGmm::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__full__gmm_clifwrap::pyFullGmm::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::FullGmm>* c) {
  assert(c != nullptr);
  ::kaldi::FullGmm* cpp = __full__gmm_clifwrap::pyFullGmm::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__full__gmm_clifwrap::pyFullGmm::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert FullGmm instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::FullGmm* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__full__gmm_clifwrap::pyFullGmm::wrapper_Type, NULL, NULL);
  reinterpret_cast<__full__gmm_clifwrap::pyFullGmm::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FullGmm>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::FullGmm> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__full__gmm_clifwrap::pyFullGmm::wrapper_Type, NULL, NULL);
  reinterpret_cast<__full__gmm_clifwrap::pyFullGmm::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FullGmm>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::FullGmm> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__full__gmm_clifwrap::pyFullGmm::wrapper_Type, NULL, NULL);
  reinterpret_cast<__full__gmm_clifwrap::pyFullGmm::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FullGmm>(std::move(c));
  return py;
}

}  // namespace kaldi
