//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/gmm/mle-diag-gmm.clif

#include <memory>
#include "clif/python/optional.h"
#include "gmm/mle-diag-gmm.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::AccumDiagGmm` as AccumDiagGmm
bool Clif_PyObjAs(PyObject* input, ::kaldi::AccumDiagGmm** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::AccumDiagGmm>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::AccumDiagGmm>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::AccumDiagGmm* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::AccumDiagGmm>* output);
PyObject* Clif_PyObjFrom(::kaldi::AccumDiagGmm*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::AccumDiagGmm>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::AccumDiagGmm>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::AccumDiagGmm&, py::PostConv);
// CLIF use `::kaldi::MapDiagGmmOptions` as MapDiagGmmOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::MapDiagGmmOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::MapDiagGmmOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::MapDiagGmmOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::MapDiagGmmOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::MapDiagGmmOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::MapDiagGmmOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::MapDiagGmmOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::MapDiagGmmOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::MapDiagGmmOptions&, py::PostConv);
// CLIF use `::kaldi::MleDiagGmmOptions` as MleDiagGmmOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::MleDiagGmmOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::MleDiagGmmOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::MleDiagGmmOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::MleDiagGmmOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::MleDiagGmmOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::MleDiagGmmOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::MleDiagGmmOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::MleDiagGmmOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::MleDiagGmmOptions&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_mle_diag_gmm")) Py_DECREF(m);
// CLIF init_module else goto err;
