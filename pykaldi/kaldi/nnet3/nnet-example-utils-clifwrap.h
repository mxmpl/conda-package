//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/nnet-example-utils.clif

#include <memory>
#include "clif/python/optional.h"
#include "nnet3/nnet-example-utils.h"
#include "clif/python/postconv.h"

namespace kaldi { namespace nnet3 {
using namespace ::clif;

// CLIF use `::kaldi::nnet3::ChunkTimeInfo` as ChunkTimeInfo
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ChunkTimeInfo** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::ChunkTimeInfo>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::ChunkTimeInfo>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ChunkTimeInfo* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::nnet3::ChunkTimeInfo>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::ChunkTimeInfo*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ChunkTimeInfo>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ChunkTimeInfo>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ChunkTimeInfo&, py::PostConv);
// CLIF use `::kaldi::nnet3::ExampleGenerationConfig` as ExampleGenerationConfig
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ExampleGenerationConfig** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::ExampleGenerationConfig>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::ExampleGenerationConfig>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ExampleGenerationConfig* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::nnet3::ExampleGenerationConfig>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::ExampleGenerationConfig*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ExampleGenerationConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ExampleGenerationConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ExampleGenerationConfig&, py::PostConv);
// CLIF use `::kaldi::nnet3::ExampleMerger` as ExampleMerger
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ExampleMerger** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::ExampleMerger>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::ExampleMerger>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::ExampleMerger*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ExampleMerger>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ExampleMerger>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ExampleMerger*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ExampleMerger&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::ExampleMergingConfig` as ExampleMergingConfig
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ExampleMergingConfig** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::ExampleMergingConfig>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::ExampleMergingConfig>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ExampleMergingConfig* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::nnet3::ExampleMergingConfig>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::ExampleMergingConfig*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ExampleMergingConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ExampleMergingConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ExampleMergingConfig&, py::PostConv);
// CLIF use `::kaldi::nnet3::ExampleMergingStats` as ExampleMergingStats
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ExampleMergingStats** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::ExampleMergingStats>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::ExampleMergingStats>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::ExampleMergingStats* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::nnet3::ExampleMergingStats>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::ExampleMergingStats*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ExampleMergingStats>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ExampleMergingStats>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ExampleMergingStats&, py::PostConv);
// CLIF use `::kaldi::nnet3::UtteranceSplitter` as UtteranceSplitter
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::UtteranceSplitter** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::UtteranceSplitter>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::UtteranceSplitter>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::UtteranceSplitter*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::UtteranceSplitter>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::UtteranceSplitter>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::UtteranceSplitter*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::UtteranceSplitter&, py::PostConv) = delete;

} }  // namespace kaldi::nnet3

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_nnet_example_utils")) Py_DECREF(m);
// CLIF init_module else goto err;
