//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/nnet-training.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "itf/options-itf-clifwrap.h"
#include "matrix/sparse-matrix-clifwrap.h"
#include "nnet3/nnet-nnet-clifwrap.h"
#include "nnet3/nnet-example-clifwrap.h"
#include "nnet3/nnet-compute-clifwrap.h"
#include "nnet3/nnet-optimize-clifwrap.h"
#include "nnet-training-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __nnet__training_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyNnetTrainerOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::NnetTrainerOptions> cpp;
};
static ::kaldi::nnet3::NnetTrainerOptions* ThisPtr(PyObject*);

static PyObject* get_zero_component_stats(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->zero_component_stats, {});
}

static int set_zero_component_stats(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the zero_component_stats attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->zero_component_stats)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for zero_component_stats:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_store_component_stats(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->store_component_stats, {});
}

static int set_store_component_stats(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the store_component_stats attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->store_component_stats)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for store_component_stats:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_print_interval(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->print_interval, {});
}

static int set_print_interval(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the print_interval attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->print_interval)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for print_interval:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_debug_computation(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->debug_computation, {});
}

static int set_debug_computation(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the debug_computation attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->debug_computation)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for debug_computation:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_momentum(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->momentum, {});
}

static int set_momentum(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the momentum attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->momentum)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for momentum:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_l2_regularize_factor(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->l2_regularize_factor, {});
}

static int set_l2_regularize_factor(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the l2_regularize_factor attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->l2_regularize_factor)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for l2_regularize_factor:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_backstitch_training_scale(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->backstitch_training_scale, {});
}

static int set_backstitch_training_scale(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the backstitch_training_scale attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->backstitch_training_scale)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for backstitch_training_scale:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_backstitch_training_interval(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->backstitch_training_interval, {});
}

static int set_backstitch_training_interval(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the backstitch_training_interval attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->backstitch_training_interval)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for backstitch_training_interval:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_batchnorm_stats_scale(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->batchnorm_stats_scale, {});
}

static int set_batchnorm_stats_scale(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the batchnorm_stats_scale attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->batchnorm_stats_scale)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for batchnorm_stats_scale:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_read_cache(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->read_cache, _1);
}

static int set_read_cache(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the read_cache attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->read_cache)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for read_cache:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_write_cache(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->write_cache, _1);
}

static int set_write_cache(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the write_cache attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->write_cache)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for write_cache:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_binary_write_cache(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->binary_write_cache, {});
}

static int set_binary_write_cache(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the binary_write_cache attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->binary_write_cache)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for binary_write_cache:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_max_param_change(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->max_param_change, {});
}

static int set_max_param_change(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the max_param_change attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->max_param_change)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for max_param_change:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_optimize_config(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->optimize_config), {});
}

static int set_optimize_config(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the optimize_config attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->optimize_config)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for optimize_config:NnetOptimizeOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_compute_config(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->compute_config), {});
}

static int set_compute_config(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the compute_config attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->compute_config)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for compute_config:NnetComputeOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_compiler_config(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->compiler_config), {});
}

static int set_compiler_config(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the compiler_config attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->compiler_config)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for compiler_config:CachingOptimizingCompilerOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::NnetTrainerOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("zero_component_stats"), get_zero_component_stats, set_zero_component_stats, C("C++ bool NnetTrainerOptions.zero_component_stats")},
  {C("store_component_stats"), get_store_component_stats, set_store_component_stats, C("C++ bool NnetTrainerOptions.store_component_stats")},
  {C("print_interval"), get_print_interval, set_print_interval, C("C++ ::int32 NnetTrainerOptions.print_interval")},
  {C("debug_computation"), get_debug_computation, set_debug_computation, C("C++ bool NnetTrainerOptions.debug_computation")},
  {C("momentum"), get_momentum, set_momentum, C("C++ ::kaldi::BaseFloat NnetTrainerOptions.momentum")},
  {C("l2_regularize_factor"), get_l2_regularize_factor, set_l2_regularize_factor, C("C++ ::kaldi::BaseFloat NnetTrainerOptions.l2_regularize_factor")},
  {C("backstitch_training_scale"), get_backstitch_training_scale, set_backstitch_training_scale, C("C++ ::kaldi::BaseFloat NnetTrainerOptions.backstitch_training_scale")},
  {C("backstitch_training_interval"), get_backstitch_training_interval, set_backstitch_training_interval, C("C++ ::int32 NnetTrainerOptions.backstitch_training_interval")},
  {C("batchnorm_stats_scale"), get_batchnorm_stats_scale, set_batchnorm_stats_scale, C("C++ ::kaldi::BaseFloat NnetTrainerOptions.batchnorm_stats_scale")},
  {C("read_cache"), get_read_cache, set_read_cache, C("C++ ::std::string NnetTrainerOptions.read_cache")},
  {C("write_cache"), get_write_cache, set_write_cache, C("C++ ::std::string NnetTrainerOptions.write_cache")},
  {C("binary_write_cache"), get_binary_write_cache, set_binary_write_cache, C("C++ bool NnetTrainerOptions.binary_write_cache")},
  {C("max_param_change"), get_max_param_change, set_max_param_change, C("C++ ::kaldi::BaseFloat NnetTrainerOptions.max_param_change")},
  {C("optimize_config"), get_optimize_config, set_optimize_config, C("C++ ::kaldi::nnet3::NnetOptimizeOptions NnetTrainerOptions.optimize_config")},
  {C("compute_config"), get_compute_config, set_compute_config, C("C++ ::kaldi::nnet3::NnetComputeOptions NnetTrainerOptions.compute_config")},
  {C("compiler_config"), get_compiler_config, set_compiler_config, C("C++ ::kaldi::nnet3::CachingOptimizingCompilerOptions NnetTrainerOptions.compiler_config")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::nnet3::NnetTrainerOptions::Register(::kaldi::OptionsItf *)")},
  {}
};

// NnetTrainerOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// NnetTrainerOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// NnetTrainerOptions __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_training.NnetTrainerOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::NnetTrainerOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "NnetTrainerOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::NnetTrainerOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::NnetTrainerOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_NnetTrainerOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::NnetTrainerOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::NnetTrainerOptions* c = static_cast<::kaldi::nnet3::NnetTrainerOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::NnetTrainerOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyNnetTrainerOptions

namespace pyObjectiveFunctionInfo {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::ObjectiveFunctionInfo> cpp;
};
static ::kaldi::nnet3::ObjectiveFunctionInfo* ThisPtr(PyObject*);

static PyObject* get_current_phase(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->current_phase, {});
}

static int set_current_phase(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the current_phase attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->current_phase)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for current_phase:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_minibatches_this_phase(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->minibatches_this_phase, {});
}

static int set_minibatches_this_phase(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the minibatches_this_phase attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->minibatches_this_phase)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for minibatches_this_phase:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_tot_weight(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->tot_weight, {});
}

static int set_tot_weight(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the tot_weight attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->tot_weight)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for tot_weight:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_tot_objf(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->tot_objf, {});
}

static int set_tot_objf(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the tot_objf attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->tot_objf)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for tot_objf:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_tot_aux_objf(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->tot_aux_objf, {});
}

static int set_tot_aux_objf(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the tot_aux_objf attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->tot_aux_objf)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for tot_aux_objf:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_tot_weight_this_phase(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->tot_weight_this_phase, {});
}

static int set_tot_weight_this_phase(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the tot_weight_this_phase attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->tot_weight_this_phase)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for tot_weight_this_phase:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_tot_objf_this_phase(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->tot_objf_this_phase, {});
}

static int set_tot_objf_this_phase(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the tot_objf_this_phase attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->tot_objf_this_phase)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for tot_objf_this_phase:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_tot_aux_objf_this_phase(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->tot_aux_objf_this_phase, {});
}

static int set_tot_aux_objf_this_phase(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the tot_aux_objf_this_phase attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->tot_aux_objf_this_phase)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for tot_aux_objf_this_phase:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// update_stats(output_name:str, minibatches_per_phase:int, minibatch_counter:int, this_minibatch_weight:float, this_minibatch_tot_objf:float, this_minibatch_tot_aux_objf:float=default)
static PyObject* wrapUpdateStats_as_update_stats(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[6]{};
  char* names[] = {
      C("output_name"),
      C("minibatches_per_phase"),
      C("minibatch_counter"),
      C("this_minibatch_weight"),
      C("this_minibatch_tot_objf"),
      C("this_minibatch_tot_aux_objf"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOO|O:update_stats", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 6; nargs > 5; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("update_stats", names[0], "::std::string", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("update_stats", names[1], "int", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("update_stats", names[2], "int", a[2]);
  float arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("update_stats", names[3], "float", a[3]);
  float arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("update_stats", names[4], "float", a[4]);
  float arg6;
  if (nargs > 5) {
    if (!a[5]) arg6 = (float)0.000000e+00;
    else if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("update_stats", names[5], "float", a[5]);
  }
  // Call actual C++ method.
  ::kaldi::nnet3::ObjectiveFunctionInfo* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 5:
    c->UpdateStats(std::move(arg1), std::move(arg2), std::move(arg3), std::move(arg4), std::move(arg5)); break;
  case 6:
    c->UpdateStats(std::move(arg1), std::move(arg2), std::move(arg3), std::move(arg4), std::move(arg5), std::move(arg6)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// print_stats_for_this_phase(output_name:str, minibatches_per_phase:int, phase:int)
static PyObject* wrapPrintStatsForThisPhase_as_print_stats_for_this_phase(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("output_name"),
      C("minibatches_per_phase"),
      C("phase"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:print_stats_for_this_phase", names, &a[0], &a[1], &a[2])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("print_stats_for_this_phase", names[0], "::std::string", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("print_stats_for_this_phase", names[1], "int", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("print_stats_for_this_phase", names[2], "int", a[2]);
  // Call actual C++ method.
  ::kaldi::nnet3::ObjectiveFunctionInfo* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->PrintStatsForThisPhase(std::move(arg1), std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// print_total_stats(output_name:str) -> bool
static PyObject* wrapPrintTotalStats_as_print_total_stats(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("output_name"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:print_total_stats", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("print_total_stats", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::ObjectiveFunctionInfo* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->PrintTotalStats(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyGetSetDef Properties[] = {
  {C("current_phase"), get_current_phase, set_current_phase, C("C++ ::int32 ObjectiveFunctionInfo.current_phase")},
  {C("minibatches_this_phase"), get_minibatches_this_phase, set_minibatches_this_phase, C("C++ ::int32 ObjectiveFunctionInfo.minibatches_this_phase")},
  {C("tot_weight"), get_tot_weight, set_tot_weight, C("C++ double ObjectiveFunctionInfo.tot_weight")},
  {C("tot_objf"), get_tot_objf, set_tot_objf, C("C++ double ObjectiveFunctionInfo.tot_objf")},
  {C("tot_aux_objf"), get_tot_aux_objf, set_tot_aux_objf, C("C++ double ObjectiveFunctionInfo.tot_aux_objf")},
  {C("tot_weight_this_phase"), get_tot_weight_this_phase, set_tot_weight_this_phase, C("C++ double ObjectiveFunctionInfo.tot_weight_this_phase")},
  {C("tot_objf_this_phase"), get_tot_objf_this_phase, set_tot_objf_this_phase, C("C++ double ObjectiveFunctionInfo.tot_objf_this_phase")},
  {C("tot_aux_objf_this_phase"), get_tot_aux_objf_this_phase, set_tot_aux_objf_this_phase, C("C++ double ObjectiveFunctionInfo.tot_aux_objf_this_phase")},
  {}
};

static PyMethodDef Methods[] = {
  {C("update_stats"), (PyCFunction)wrapUpdateStats_as_update_stats, METH_VARARGS | METH_KEYWORDS, C("update_stats(output_name:str, minibatches_per_phase:int, minibatch_counter:int, this_minibatch_weight:float, this_minibatch_tot_objf:float, this_minibatch_tot_aux_objf:float=default)\n  Calls C++ function\n  void ::kaldi::nnet3::ObjectiveFunctionInfo::UpdateStats(::std::string, int, int, float, float, float)")},
  {C("print_stats_for_this_phase"), (PyCFunction)wrapPrintStatsForThisPhase_as_print_stats_for_this_phase, METH_VARARGS | METH_KEYWORDS, C("print_stats_for_this_phase(output_name:str, minibatches_per_phase:int, phase:int)\n  Calls C++ function\n  void ::kaldi::nnet3::ObjectiveFunctionInfo::PrintStatsForThisPhase(::std::string, int, int)")},
  {C("print_total_stats"), (PyCFunction)wrapPrintTotalStats_as_print_total_stats, METH_VARARGS | METH_KEYWORDS, C("print_total_stats(output_name:str) -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::ObjectiveFunctionInfo::PrintTotalStats(::std::string)")},
  {}
};

// ObjectiveFunctionInfo __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ObjectiveFunctionInfo __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ObjectiveFunctionInfo __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_training.ObjectiveFunctionInfo", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::ObjectiveFunctionInfo", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "ObjectiveFunctionInfo takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::ObjectiveFunctionInfo>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::ObjectiveFunctionInfo* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_ObjectiveFunctionInfo"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::ObjectiveFunctionInfo"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::ObjectiveFunctionInfo* c = static_cast<::kaldi::nnet3::ObjectiveFunctionInfo*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::ObjectiveFunctionInfo*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyObjectiveFunctionInfo

namespace pyNnetTrainer {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::NnetTrainer> cpp;
};
static ::kaldi::nnet3::NnetTrainer* ThisPtr(PyObject*);

// __init__(config:NnetTrainerOptions, nnet:Nnet)
static PyObject* wrapNnetTrainer_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("config"),
      C("nnet"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::kaldi::nnet3::NnetTrainerOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::nnet3::NnetTrainerOptions", a[0]);
  ::kaldi::nnet3::Nnet * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::nnet3::Nnet *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::NnetTrainer>(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// train(eg:NnetExample)
static PyObject* wrapTrain_as_train(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("eg"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:train", names, &a[0])) return nullptr;
  ::kaldi::nnet3::NnetExample* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("train", names[0], "::kaldi::nnet3::NnetExample", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::NnetTrainer* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Train(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// print_total_stats() -> bool
static PyObject* wrapPrintTotalStats_as_print_total_stats(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::NnetTrainer* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->PrintTotalStats();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// print_max_change_stats()
static PyObject* wrapPrintMaxChangeStats_as_print_max_change_stats(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::NnetTrainer* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->PrintMaxChangeStats();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapNnetTrainer_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(config:NnetTrainerOptions, nnet:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::NnetTrainer::NnetTrainer(::kaldi::nnet3::NnetTrainerOptions, ::kaldi::nnet3::Nnet *)")},
  {C("train"), (PyCFunction)wrapTrain_as_train, METH_VARARGS | METH_KEYWORDS, C("train(eg:NnetExample)\n  Calls C++ function\n  void ::kaldi::nnet3::NnetTrainer::Train(::kaldi::nnet3::NnetExample)")},
  {C("print_total_stats"), (PyCFunction)wrapPrintTotalStats_as_print_total_stats, METH_NOARGS, C("print_total_stats() -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::NnetTrainer::PrintTotalStats()")},
  {C("print_max_change_stats"), (PyCFunction)wrapPrintMaxChangeStats_as_print_max_change_stats, METH_NOARGS, C("print_max_change_stats()\n  Calls C++ function\n  void ::kaldi::nnet3::NnetTrainer::PrintMaxChangeStats()")},
  {}
};

// NnetTrainer __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// NnetTrainer __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// NnetTrainer __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_training.NnetTrainer",        // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::NnetTrainer", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapNnetTrainer_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::NnetTrainer* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_NnetTrainer"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::NnetTrainer"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::NnetTrainer* c = static_cast<::kaldi::nnet3::NnetTrainer*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::NnetTrainer*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyNnetTrainer

// compute_objective_function(supervision:GeneralMatrix, objective_type:ObjectiveType, output_name:str, supply_deriv:bool, computer:NnetComputer) -> (tot_weight:float, tot_objf:float)
static PyObject* wrapComputeObjectiveFunction_as_compute_objective_function(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[5];
  char* names[] = {
      C("supervision"),
      C("objective_type"),
      C("output_name"),
      C("supply_deriv"),
      C("computer"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOO:compute_objective_function", names, &a[0], &a[1], &a[2], &a[3], &a[4])) return nullptr;
  ::kaldi::GeneralMatrix* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compute_objective_function", names[0], "::kaldi::GeneralMatrix", a[0]);
  ::kaldi::nnet3::ObjectiveType arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compute_objective_function", names[1], "::kaldi::nnet3::ObjectiveType", a[1]);
  ::std::string arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("compute_objective_function", names[2], "::std::string", a[2]);
  bool arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("compute_objective_function", names[3], "bool", a[3]);
  ::kaldi::nnet3::NnetComputer * arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("compute_objective_function", names[4], "::kaldi::nnet3::NnetComputer *", a[4]);
  float ret0{};
  float ret1{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ComputeObjectiveFunction(*arg1, std::move(arg2), std::move(arg3), std::move(arg4), arg5, &ret0, &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("compute_objective_function"), (PyCFunction)wrapComputeObjectiveFunction_as_compute_objective_function, METH_VARARGS | METH_KEYWORDS, C("compute_objective_function(supervision:GeneralMatrix, objective_type:ObjectiveType, output_name:str, supply_deriv:bool, computer:NnetComputer) -> (tot_weight:float, tot_objf:float)\n  Calls C++ function\n  void ::kaldi::nnet3::ComputeObjectiveFunction(::kaldi::GeneralMatrix, ::kaldi::nnet3::ObjectiveType, ::std::string, bool, ::kaldi::nnet3::NnetComputer *, float*, float*)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyNnetTrainerOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyNnetTrainerOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyObjectiveFunctionInfo::wrapper_Type) < 0) return false;
  Py_INCREF(&pyObjectiveFunctionInfo::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyNnetTrainer::wrapper_Type) < 0) return false;
  Py_INCREF(&pyNnetTrainer::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_nnet_training",  // module name
  "CLIF-generated module for nnet3/nnet-training.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_sparse_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_nnet")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_example")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_compute")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_optimize")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "NnetTrainerOptions", reinterpret_cast<PyObject*>(&pyNnetTrainerOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "ObjectiveFunctionInfo", reinterpret_cast<PyObject*>(&pyObjectiveFunctionInfo::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "NnetTrainer", reinterpret_cast<PyObject*>(&pyNnetTrainer::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __nnet__training_clifwrap

namespace kaldi { namespace nnet3 {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// NnetTrainer to/from ::kaldi::nnet3::NnetTrainer conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::NnetTrainer** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::NnetTrainer* cpp = __nnet__training_clifwrap::pyNnetTrainer::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::NnetTrainer>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NnetTrainer* cpp = __nnet__training_clifwrap::pyNnetTrainer::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__training_clifwrap::pyNnetTrainer::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::NnetTrainer>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NnetTrainer* cpp = __nnet__training_clifwrap::pyNnetTrainer::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__training_clifwrap::pyNnetTrainer::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert NnetTrainer instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::NnetTrainer* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__training_clifwrap::pyNnetTrainer::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__training_clifwrap::pyNnetTrainer::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NnetTrainer>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::NnetTrainer> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__training_clifwrap::pyNnetTrainer::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__training_clifwrap::pyNnetTrainer::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NnetTrainer>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::NnetTrainer> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__training_clifwrap::pyNnetTrainer::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__training_clifwrap::pyNnetTrainer::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NnetTrainer>(std::move(c));
  return py;
}

// NnetTrainerOptions to/from ::kaldi::nnet3::NnetTrainerOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::NnetTrainerOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::NnetTrainerOptions* cpp = __nnet__training_clifwrap::pyNnetTrainerOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::NnetTrainerOptions>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NnetTrainerOptions* cpp = __nnet__training_clifwrap::pyNnetTrainerOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__training_clifwrap::pyNnetTrainerOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::NnetTrainerOptions>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NnetTrainerOptions* cpp = __nnet__training_clifwrap::pyNnetTrainerOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__training_clifwrap::pyNnetTrainerOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert NnetTrainerOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::NnetTrainerOptions* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NnetTrainerOptions* cpp = __nnet__training_clifwrap::pyNnetTrainerOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::NnetTrainerOptions>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NnetTrainerOptions* cpp = __nnet__training_clifwrap::pyNnetTrainerOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::NnetTrainerOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__training_clifwrap::pyNnetTrainerOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__training_clifwrap::pyNnetTrainerOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NnetTrainerOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::NnetTrainerOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__training_clifwrap::pyNnetTrainerOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__training_clifwrap::pyNnetTrainerOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NnetTrainerOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::NnetTrainerOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__training_clifwrap::pyNnetTrainerOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__training_clifwrap::pyNnetTrainerOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NnetTrainerOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::NnetTrainerOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__training_clifwrap::pyNnetTrainerOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__training_clifwrap::pyNnetTrainerOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::NnetTrainerOptions>(c);
  return py;
}

// ObjectiveFunctionInfo to/from ::kaldi::nnet3::ObjectiveFunctionInfo conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ObjectiveFunctionInfo** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::ObjectiveFunctionInfo* cpp = __nnet__training_clifwrap::pyObjectiveFunctionInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::ObjectiveFunctionInfo>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ObjectiveFunctionInfo* cpp = __nnet__training_clifwrap::pyObjectiveFunctionInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__training_clifwrap::pyObjectiveFunctionInfo::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::ObjectiveFunctionInfo>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ObjectiveFunctionInfo* cpp = __nnet__training_clifwrap::pyObjectiveFunctionInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__training_clifwrap::pyObjectiveFunctionInfo::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ObjectiveFunctionInfo instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ObjectiveFunctionInfo* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ObjectiveFunctionInfo* cpp = __nnet__training_clifwrap::pyObjectiveFunctionInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::ObjectiveFunctionInfo>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ObjectiveFunctionInfo* cpp = __nnet__training_clifwrap::pyObjectiveFunctionInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::ObjectiveFunctionInfo* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__training_clifwrap::pyObjectiveFunctionInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__training_clifwrap::pyObjectiveFunctionInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ObjectiveFunctionInfo>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ObjectiveFunctionInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__training_clifwrap::pyObjectiveFunctionInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__training_clifwrap::pyObjectiveFunctionInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ObjectiveFunctionInfo>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ObjectiveFunctionInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__training_clifwrap::pyObjectiveFunctionInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__training_clifwrap::pyObjectiveFunctionInfo::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ObjectiveFunctionInfo>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ObjectiveFunctionInfo& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__training_clifwrap::pyObjectiveFunctionInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__training_clifwrap::pyObjectiveFunctionInfo::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::ObjectiveFunctionInfo>(c);
  return py;
}

} }  // namespace kaldi::nnet3
