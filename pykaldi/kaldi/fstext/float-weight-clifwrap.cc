//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/fstext/float-weight.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "fstext/weight-clifwrap.h"
#include "float-weight-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __float__weight_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyFloatLimits {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::FloatLimits<float>> cpp;
};
static ::fst::FloatLimits<float>* ThisPtr(PyObject*);

// @classmethod pos_infinity() -> float
static PyObject* wrapPosInfinity_as_pos_infinity(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::FloatLimits<float>::PosInfinity();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod neg_infinity() -> float
static PyObject* wrapNegInfinity_as_neg_infinity(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::FloatLimits<float>::NegInfinity();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod number_bad() -> float
static PyObject* wrapNumberBad_as_number_bad(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::FloatLimits<float>::NumberBad();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("pos_infinity"), (PyCFunction)wrapPosInfinity_as_pos_infinity, METH_NOARGS | METH_CLASS, C("pos_infinity() -> float\n\nReturns float +infinity.")},
  {C("neg_infinity"), (PyCFunction)wrapNegInfinity_as_neg_infinity, METH_NOARGS | METH_CLASS, C("neg_infinity() -> float\n\nReturns float -infinity.")},
  {C("number_bad"), (PyCFunction)wrapNumberBad_as_number_bad, METH_NOARGS | METH_CLASS, C("number_bad() -> float\n\nReturns float bad number.")},
  {}
};

// FloatLimits __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// FloatLimits __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// FloatLimits __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_float_weight.FloatLimits",         // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Float limits.",                     // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "FloatLimits takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FloatLimits<float>>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::FloatLimits<float>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_FloatLimits_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::FloatLimits<float>"));
      if (!PyErr_Occurred()) {
        ::fst::FloatLimits<float>* c = static_cast<::fst::FloatLimits<float>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::FloatLimits<float>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyFloatLimits

namespace pyFloatWeight {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::FloatWeightTpl<float>> cpp;
};
static ::fst::FloatWeightTpl<float>* ThisPtr(PyObject*);

// @classmethod from_float(f:float) -> FloatWeight
static PyObject* wrapFloatWeightTpl_as_from_float(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("f"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_float", names, &a[0])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_float", names[0], "double", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::fst::FloatWeightTpl<float>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::fst::FloatWeightTpl<float>>(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_other(weight:FloatWeight) -> FloatWeight
static PyObject* wrapFloatWeightTpl_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("weight"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::fst::FloatWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::fst::FloatWeightTpl<float>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::fst::FloatWeightTpl<float>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::fst::FloatWeightTpl<float>>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// hash() -> int
static PyObject* wrapHash_as_hash(PyObject* self) {
  // Call actual C++ method.
  ::fst::FloatWeightTpl<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Hash();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyObject* get_value(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->Value(), {});
}

// __eq__(other:FloatWeight) -> bool
static PyObject* wrap__eq__(PyObject* self, PyObject* args, PyObject* kw) {
  ::fst::FloatWeightTpl<float>* arg0;
  if (!Clif_PyObjAs(self, &arg0)) return nullptr;
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__eq__", names, &a[0])) return nullptr;
  ::fst::FloatWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__eq__", names[0], "::fst::FloatWeightTpl<float>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::operator==(*arg0, *arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __ne__(other:FloatWeight) -> bool
static PyObject* wrap__ne__(PyObject* self, PyObject* args, PyObject* kw) {
  ::fst::FloatWeightTpl<float>* arg0;
  if (!Clif_PyObjAs(self, &arg0)) return nullptr;
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__ne__", names, &a[0])) return nullptr;
  ::fst::FloatWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__ne__", names[0], "::fst::FloatWeightTpl<float>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::operator!=(*arg0, *arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyGetSetDef Properties[] = {
  {C("value"), get_value, nullptr, C("Float value of the weight.")},
  {}
};

PyObject* slot_richcmp(PyObject* self, PyObject* other, int op) {
  switch (op) {
    case Py_EQ: return slot::adapter<wrap__eq__>(self, other);
    case Py_NE: return slot::adapter<wrap__ne__>(self, other);
    default: Py_RETURN_NOTIMPLEMENTED;
  }
}

static PyMethodDef Methods[] = {
  {C("from_float"), (PyCFunction)wrapFloatWeightTpl_as_from_float, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_float(f:float) -> FloatWeight\n\nCreate a new float weight from a float.")},
  {C("from_other"), (PyCFunction)wrapFloatWeightTpl_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(weight:FloatWeight) -> FloatWeight\n\nCreate a new float weight from another.")},
  {C("hash"), (PyCFunction)wrapHash_as_hash, METH_NOARGS, C("hash() -> int\n\nReturns the hash for the weight.")},
  {}
};

// FloatWeight __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// FloatWeight __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// FloatWeight __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_float_weight.FloatWeight",         // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Base class for float weight types.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  slot_richcmp,                        // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "FloatWeight takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FloatWeightTpl<float>>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::FloatWeightTpl<float>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_FloatWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::FloatWeightTpl<float>"));
      if (!PyErr_Occurred()) {
        ::fst::FloatWeightTpl<float>* c = static_cast<::fst::FloatWeightTpl<float>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::FloatWeightTpl<float>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyFloatWeight

// approx_equal_float_weight(w1:FloatWeight, w2:FloatWeight, delta:float=default) -> bool
static PyObject* wrapApproxEqual_as_approx_equal_float_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("w1"),
      C("w2"),
      C("delta"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:approx_equal_float_weight", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::FloatWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("approx_equal_float_weight", names[0], "::fst::FloatWeightTpl<float>", a[0]);
  ::fst::FloatWeightTpl<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("approx_equal_float_weight", names[1], "::fst::FloatWeightTpl<float>", a[1]);
  float arg3;
  if (nargs > 2) {
    if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("approx_equal_float_weight", names[2], "float", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ret0 = ::fst::ApproxEqual(*arg1, *arg2); break;
  case 3:
    ret0 = ::fst::ApproxEqual(*arg1, *arg2, std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

namespace pyTropicalWeight {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::TropicalWeightTpl<float>> cpp;
};
static ::fst::TropicalWeightTpl<float>* ThisPtr(PyObject*);

// @classmethod from_float(f:float) -> TropicalWeight
static PyObject* wrapTropicalWeightTpl_as_from_float(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("f"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_float", names, &a[0])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_float", names[0], "double", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::fst::TropicalWeightTpl<float>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::fst::TropicalWeightTpl<float>>(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_other(weight:TropicalWeight) -> TropicalWeight
static PyObject* wrapTropicalWeightTpl_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("weight"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::fst::TropicalWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::fst::TropicalWeightTpl<float>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::fst::TropicalWeightTpl<float>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::fst::TropicalWeightTpl<float>>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod zero() -> TropicalWeight
static PyObject* wrapZero_as_zero(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::TropicalWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::TropicalWeightTpl<float>::Zero();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod one() -> TropicalWeight
static PyObject* wrapOne_as_one(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::TropicalWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::TropicalWeightTpl<float>::One();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod no_weight() -> TropicalWeight
static PyObject* wrapNoWeight_as_no_weight(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::TropicalWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::TropicalWeightTpl<float>::NoWeight();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod type() -> str
static PyObject* wrapType_as_type(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::TropicalWeightTpl<float>::Type();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// @classmethod properties() -> int
static PyObject* wrapProperties_as_properties(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::TropicalWeightTpl<float>::Properties();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// member() -> bool
static PyObject* wrapMember_as_member(PyObject* self) {
  // Call actual C++ method.
  ::fst::TropicalWeightTpl<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Member();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// quantize(delta:float=default) -> TropicalWeight
static PyObject* wrapQuantize_as_quantize(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("delta"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:quantize", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  float arg1;
  if (nargs > 0) {
    if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("quantize", names[0], "float", a[0]);
  }
  // Call actual C++ method.
  ::fst::TropicalWeightTpl<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::TropicalWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    ret0 = c->Quantize(); break;
  case 1:
    ret0 = c->Quantize(std::move(arg1)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// reverse() -> TropicalWeight
static PyObject* wrapReverse_as_reverse(PyObject* self) {
  // Call actual C++ method.
  ::fst::TropicalWeightTpl<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::TropicalWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Reverse();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::fst::FloatWeightTpl<float>*
static PyObject* as_fst_FloatWeightTpl_float(PyObject* self) {
  ::fst::FloatWeightTpl<float>* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::FloatWeightTpl<float>"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("from_float"), (PyCFunction)wrapTropicalWeightTpl_as_from_float, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_float(f:float) -> TropicalWeight\n\nCreate a new tropical weight from a float.")},
  {C("from_other"), (PyCFunction)wrapTropicalWeightTpl_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(weight:TropicalWeight) -> TropicalWeight\n\nCreate a new tropical weight from another.")},
  {C("zero"), (PyCFunction)wrapZero_as_zero, METH_NOARGS | METH_CLASS, C("zero() -> TropicalWeight\n\nZero in tropical semiring, i.e. float +infinity.")},
  {C("one"), (PyCFunction)wrapOne_as_one, METH_NOARGS | METH_CLASS, C("one() -> TropicalWeight\n\nOne in tropical semiring, i.e. 0.0.")},
  {C("no_weight"), (PyCFunction)wrapNoWeight_as_no_weight, METH_NOARGS | METH_CLASS, C("no_weight() -> TropicalWeight\n\nNo weight in tropical semiring.")},
  {C("type"), (PyCFunction)wrapType_as_type, METH_NOARGS | METH_CLASS, C("type() -> str\n\nReturns weight type.")},
  {C("properties"), (PyCFunction)wrapProperties_as_properties, METH_NOARGS | METH_CLASS, C("properties() -> int\n\nReturns weight properties.")},
  {C("member"), (PyCFunction)wrapMember_as_member, METH_NOARGS, C("member() -> bool\n\nChecks if weight is a member of the tropical semiring.")},
  {C("quantize"), (PyCFunction)wrapQuantize_as_quantize, METH_VARARGS | METH_KEYWORDS, C("quantize(delta:float=default) -> TropicalWeight\n\nQuantizes the weight.")},
  {C("reverse"), (PyCFunction)wrapReverse_as_reverse, METH_NOARGS, C("reverse() -> TropicalWeight\n\nReverses the weight.")},
  {C("as_fst_FloatWeightTpl_float"), (PyCFunction)as_fst_FloatWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::FloatWeightTpl<float>*")},
  {}
};

// TropicalWeight __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// TropicalWeight __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// TropicalWeight __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_float_weight.TropicalWeight",      // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Tropical weight.",                  // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "TropicalWeight takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::TropicalWeightTpl<float>>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::TropicalWeightTpl<float>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_TropicalWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::TropicalWeightTpl<float>"));
      if (!PyErr_Occurred()) {
        ::fst::TropicalWeightTpl<float>* c = static_cast<::fst::TropicalWeightTpl<float>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::TropicalWeightTpl<float>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyTropicalWeight

// plus_tropical_weight(w1:TropicalWeight, w2:TropicalWeight) -> TropicalWeight
static PyObject* wrapPlus_as_plus_tropical_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("w1"),
      C("w2"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:plus_tropical_weight", names, &a[0], &a[1])) return nullptr;
  ::fst::TropicalWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("plus_tropical_weight", names[0], "::fst::TropicalWeightTpl<float>", a[0]);
  ::fst::TropicalWeightTpl<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("plus_tropical_weight", names[1], "::fst::TropicalWeightTpl<float>", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::TropicalWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::Plus(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// times_tropical_weight(w1:TropicalWeight, w2:TropicalWeight) -> TropicalWeight
static PyObject* wrapTimes_as_times_tropical_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("w1"),
      C("w2"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:times_tropical_weight", names, &a[0], &a[1])) return nullptr;
  ::fst::TropicalWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("times_tropical_weight", names[0], "::fst::TropicalWeightTpl<float>", a[0]);
  ::fst::TropicalWeightTpl<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("times_tropical_weight", names[1], "::fst::TropicalWeightTpl<float>", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::TropicalWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::Times(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// divide_tropical_weight(w1:TropicalWeight, w2:TropicalWeight, typ:DivideType=default) -> TropicalWeight
static PyObject* wrapDivide_as_divide_tropical_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("w1"),
      C("w2"),
      C("typ"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:divide_tropical_weight", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::TropicalWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("divide_tropical_weight", names[0], "::fst::TropicalWeightTpl<float>", a[0]);
  ::fst::TropicalWeightTpl<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("divide_tropical_weight", names[1], "::fst::TropicalWeightTpl<float>", a[1]);
  ::fst::DivideType arg3;
  if (nargs > 2) {
    if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("divide_tropical_weight", names[2], "::fst::DivideType", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::TropicalWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ret0 = ::fst::Divide(*arg1, *arg2); break;
  case 3:
    ret0 = ::fst::Divide(*arg1, *arg2, std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// power_tropical_weight(weight:TropicalWeight, scalar:float) -> TropicalWeight
static PyObject* wrapPower_as_power_tropical_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("weight"),
      C("scalar"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:power_tropical_weight", names, &a[0], &a[1])) return nullptr;
  ::fst::TropicalWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("power_tropical_weight", names[0], "::fst::TropicalWeightTpl<float>", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("power_tropical_weight", names[1], "float", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::TropicalWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::Power(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

namespace pyLogWeight {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::LogWeightTpl<float>> cpp;
};
static ::fst::LogWeightTpl<float>* ThisPtr(PyObject*);

// @classmethod from_float(f:float) -> LogWeight
static PyObject* wrapLogWeightTpl_as_from_float(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("f"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_float", names, &a[0])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_float", names[0], "double", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::fst::LogWeightTpl<float>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::fst::LogWeightTpl<float>>(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_other(weight:LogWeight) -> LogWeight
static PyObject* wrapLogWeightTpl_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("weight"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::fst::LogWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::fst::LogWeightTpl<float>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::fst::LogWeightTpl<float>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::fst::LogWeightTpl<float>>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod zero() -> LogWeight
static PyObject* wrapZero_as_zero(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LogWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::LogWeightTpl<float>::Zero();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod one() -> LogWeight
static PyObject* wrapOne_as_one(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LogWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::LogWeightTpl<float>::One();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod no_weight() -> LogWeight
static PyObject* wrapNoWeight_as_no_weight(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LogWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::LogWeightTpl<float>::NoWeight();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod type() -> str
static PyObject* wrapType_as_type(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::LogWeightTpl<float>::Type();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// @classmethod properties() -> int
static PyObject* wrapProperties_as_properties(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::LogWeightTpl<float>::Properties();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// member() -> bool
static PyObject* wrapMember_as_member(PyObject* self) {
  // Call actual C++ method.
  ::fst::LogWeightTpl<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Member();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// quantize(delta:float=default) -> LogWeight
static PyObject* wrapQuantize_as_quantize(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("delta"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:quantize", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  float arg1;
  if (nargs > 0) {
    if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("quantize", names[0], "float", a[0]);
  }
  // Call actual C++ method.
  ::fst::LogWeightTpl<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LogWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    ret0 = c->Quantize(); break;
  case 1:
    ret0 = c->Quantize(std::move(arg1)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// reverse() -> LogWeight
static PyObject* wrapReverse_as_reverse(PyObject* self) {
  // Call actual C++ method.
  ::fst::LogWeightTpl<float>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LogWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Reverse();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::fst::FloatWeightTpl<float>*
static PyObject* as_fst_FloatWeightTpl_float(PyObject* self) {
  ::fst::FloatWeightTpl<float>* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::FloatWeightTpl<float>"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("from_float"), (PyCFunction)wrapLogWeightTpl_as_from_float, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_float(f:float) -> LogWeight\n\nCreate a new log weight from a float.")},
  {C("from_other"), (PyCFunction)wrapLogWeightTpl_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(weight:LogWeight) -> LogWeight\n\nCreate a new log weight from another.")},
  {C("zero"), (PyCFunction)wrapZero_as_zero, METH_NOARGS | METH_CLASS, C("zero() -> LogWeight\n\nZero in log semiring, i.e. float +infinity.")},
  {C("one"), (PyCFunction)wrapOne_as_one, METH_NOARGS | METH_CLASS, C("one() -> LogWeight\n\nOne in log semiring, i.e. 0.0.")},
  {C("no_weight"), (PyCFunction)wrapNoWeight_as_no_weight, METH_NOARGS | METH_CLASS, C("no_weight() -> LogWeight\n\nNo weight in log semiring.")},
  {C("type"), (PyCFunction)wrapType_as_type, METH_NOARGS | METH_CLASS, C("type() -> str\n\nReturns weight type.")},
  {C("properties"), (PyCFunction)wrapProperties_as_properties, METH_NOARGS | METH_CLASS, C("properties() -> int\n\nReturns weight properties.")},
  {C("member"), (PyCFunction)wrapMember_as_member, METH_NOARGS, C("member() -> bool\n\nChecks if weight is a member of log semiring.")},
  {C("quantize"), (PyCFunction)wrapQuantize_as_quantize, METH_VARARGS | METH_KEYWORDS, C("quantize(delta:float=default) -> LogWeight\n\nQuantizes the weight.")},
  {C("reverse"), (PyCFunction)wrapReverse_as_reverse, METH_NOARGS, C("reverse() -> LogWeight\n\nReverses the weight.")},
  {C("as_fst_FloatWeightTpl_float"), (PyCFunction)as_fst_FloatWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::FloatWeightTpl<float>*")},
  {}
};

// LogWeight __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// LogWeight __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// LogWeight __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_float_weight.LogWeight",           // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Log weight.",                       // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "LogWeight takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::LogWeightTpl<float>>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::LogWeightTpl<float>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_LogWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::LogWeightTpl<float>"));
      if (!PyErr_Occurred()) {
        ::fst::LogWeightTpl<float>* c = static_cast<::fst::LogWeightTpl<float>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::LogWeightTpl<float>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyLogWeight

// plus_log_weight(w1:LogWeight, w2:LogWeight) -> LogWeight
static PyObject* wrapPlus_as_plus_log_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("w1"),
      C("w2"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:plus_log_weight", names, &a[0], &a[1])) return nullptr;
  ::fst::LogWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("plus_log_weight", names[0], "::fst::LogWeightTpl<float>", a[0]);
  ::fst::LogWeightTpl<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("plus_log_weight", names[1], "::fst::LogWeightTpl<float>", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LogWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::Plus(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// times_log_weight(w1:LogWeight, w2:LogWeight) -> LogWeight
static PyObject* wrapTimes_as_times_log_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("w1"),
      C("w2"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:times_log_weight", names, &a[0], &a[1])) return nullptr;
  ::fst::LogWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("times_log_weight", names[0], "::fst::LogWeightTpl<float>", a[0]);
  ::fst::LogWeightTpl<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("times_log_weight", names[1], "::fst::LogWeightTpl<float>", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LogWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::Times(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// divide_log_weight(w1:LogWeight, w2:LogWeight, typ:DivideType=default) -> LogWeight
static PyObject* wrapDivide_as_divide_log_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("w1"),
      C("w2"),
      C("typ"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:divide_log_weight", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::LogWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("divide_log_weight", names[0], "::fst::LogWeightTpl<float>", a[0]);
  ::fst::LogWeightTpl<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("divide_log_weight", names[1], "::fst::LogWeightTpl<float>", a[1]);
  ::fst::DivideType arg3;
  if (nargs > 2) {
    if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("divide_log_weight", names[2], "::fst::DivideType", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LogWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ret0 = ::fst::Divide(*arg1, *arg2); break;
  case 3:
    ret0 = ::fst::Divide(*arg1, *arg2, std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// power_log_weight(weight:LogWeight, scalar:float) -> LogWeight
static PyObject* wrapPower_as_power_log_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("weight"),
      C("scalar"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:power_log_weight", names, &a[0], &a[1])) return nullptr;
  ::fst::LogWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("power_log_weight", names[0], "::fst::LogWeightTpl<float>", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("power_log_weight", names[1], "float", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LogWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::Power(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// (w:LogWeight)->TropicalWeight
static PyObject* lambda_GetLogToTropicalConverter_ret0_lambda(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("w"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:", names, &a[0])) return nullptr;
  ::fst::LogWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("", names[0], "::fst::LogWeightTpl<float>", a[0]);
  // Call actual C++ method.
  void* fp = PyCapsule_GetPointer(self, typeid(std::function<::fst::TropicalWeightTpl<float>(const ::fst::LogWeightTpl<float> &)>).name());
  if (fp == nullptr) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::TropicalWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = (*static_cast<std::function<::fst::TropicalWeightTpl<float>(const ::fst::LogWeightTpl<float> &)>*>(fp))(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}
static PyMethodDef lambda_GetLogToTropicalConverter_ret0_lambda_def = {C(""), (PyCFunction)lambda_GetLogToTropicalConverter_ret0_lambda, METH_VARARGS | METH_KEYWORDS, C("Calls std::function<::fst::TropicalWeightTpl<float>(const ::fst::LogWeightTpl<float> &)>")};

// get_log_to_tropical_converter() -> (w:LogWeight)->TropicalWeight
static PyObject* wrapGetLogToTropicalConverter_as_get_log_to_tropical_converter(PyObject* self) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::function<::fst::TropicalWeightTpl<float>(const ::fst::LogWeightTpl<float> &)> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::GetLogToTropicalConverter();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// (w:TropicalWeight)->LogWeight
static PyObject* lambda_GetTropicalToLogConverter_ret0_lambda(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("w"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:", names, &a[0])) return nullptr;
  ::fst::TropicalWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("", names[0], "::fst::TropicalWeightTpl<float>", a[0]);
  // Call actual C++ method.
  void* fp = PyCapsule_GetPointer(self, typeid(std::function<::fst::LogWeightTpl<float>(const ::fst::TropicalWeightTpl<float> &)>).name());
  if (fp == nullptr) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LogWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = (*static_cast<std::function<::fst::LogWeightTpl<float>(const ::fst::TropicalWeightTpl<float> &)>*>(fp))(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}
static PyMethodDef lambda_GetTropicalToLogConverter_ret0_lambda_def = {C(""), (PyCFunction)lambda_GetTropicalToLogConverter_ret0_lambda, METH_VARARGS | METH_KEYWORDS, C("Calls std::function<::fst::LogWeightTpl<float>(const ::fst::TropicalWeightTpl<float> &)>")};

// get_tropical_to_log_converter() -> (w:TropicalWeight)->LogWeight
static PyObject* wrapGetTropicalToLogConverter_as_get_tropical_to_log_converter(PyObject* self) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::function<::fst::LogWeightTpl<float>(const ::fst::TropicalWeightTpl<float> &)> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::GetTropicalToLogConverter();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("approx_equal_float_weight"), (PyCFunction)wrapApproxEqual_as_approx_equal_float_weight, METH_VARARGS | METH_KEYWORDS, C("approx_equal_float_weight(w1:FloatWeight, w2:FloatWeight, delta:float=default) -> bool\n\nChecks if given float weights are approximately equal.")},
  {C("plus_tropical_weight"), (PyCFunction)wrapPlus_as_plus_tropical_weight, METH_VARARGS | METH_KEYWORDS, C("plus_tropical_weight(w1:TropicalWeight, w2:TropicalWeight) -> TropicalWeight\n\n:math:`\\oplus` operation in the tropical semiring.")},
  {C("times_tropical_weight"), (PyCFunction)wrapTimes_as_times_tropical_weight, METH_VARARGS | METH_KEYWORDS, C("times_tropical_weight(w1:TropicalWeight, w2:TropicalWeight) -> TropicalWeight\n\n:math:`\\otimes` operation in the tropical semiring.")},
  {C("divide_tropical_weight"), (PyCFunction)wrapDivide_as_divide_tropical_weight, METH_VARARGS | METH_KEYWORDS, C("divide_tropical_weight(w1:TropicalWeight, w2:TropicalWeight, typ:DivideType=default) -> TropicalWeight\n\n:math:`\\oslash` operation in the tropical semiring.")},
  {C("power_tropical_weight"), (PyCFunction)wrapPower_as_power_tropical_weight, METH_VARARGS | METH_KEYWORDS, C("power_tropical_weight(weight:TropicalWeight, scalar:float) -> TropicalWeight\n\nPower operation in the tropical semiring.")},
  {C("plus_log_weight"), (PyCFunction)wrapPlus_as_plus_log_weight, METH_VARARGS | METH_KEYWORDS, C("plus_log_weight(w1:LogWeight, w2:LogWeight) -> LogWeight\n\n:math:`\\oplus` operation in the log semiring.")},
  {C("times_log_weight"), (PyCFunction)wrapTimes_as_times_log_weight, METH_VARARGS | METH_KEYWORDS, C("times_log_weight(w1:LogWeight, w2:LogWeight) -> LogWeight\n\n:math:`\\otimes` operation in the log semiring.")},
  {C("divide_log_weight"), (PyCFunction)wrapDivide_as_divide_log_weight, METH_VARARGS | METH_KEYWORDS, C("divide_log_weight(w1:LogWeight, w2:LogWeight, typ:DivideType=default) -> LogWeight\n\n:math:`\\oslash` operation in the log semiring.")},
  {C("power_log_weight"), (PyCFunction)wrapPower_as_power_log_weight, METH_VARARGS | METH_KEYWORDS, C("power_log_weight(weight:LogWeight, scalar:float) -> LogWeight\n\nPower operation in the log semiring.")},
  {C("get_log_to_tropical_converter"), (PyCFunction)wrapGetLogToTropicalConverter_as_get_log_to_tropical_converter, METH_NOARGS, C("get_log_to_tropical_converter() -> (w:LogWeight)->TropicalWeight\n\nReturns a callable for converting log weight to tropical weight.")},
  {C("get_tropical_to_log_converter"), (PyCFunction)wrapGetTropicalToLogConverter_as_get_tropical_to_log_converter, METH_NOARGS, C("get_tropical_to_log_converter() -> (w:TropicalWeight)->LogWeight\n\nReturns a callable for converting tropical weight to log weight.")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyFloatLimits::wrapper_Type) < 0) return false;
  Py_INCREF(&pyFloatLimits::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyFloatWeight::wrapper_Type) < 0) return false;
  Py_INCREF(&pyFloatWeight::wrapper_Type);  // For PyModule_AddObject to steal.
  pyTropicalWeight::wrapper_Type.tp_base = &pyFloatWeight::wrapper_Type;
  if (PyType_Ready(&pyTropicalWeight::wrapper_Type) < 0) return false;
  Py_INCREF(&pyTropicalWeight::wrapper_Type);  // For PyModule_AddObject to steal.
  pyLogWeight::wrapper_Type.tp_base = &pyFloatWeight::wrapper_Type;
  if (PyType_Ready(&pyLogWeight::wrapper_Type) < 0) return false;
  Py_INCREF(&pyLogWeight::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_float_weight",  // module name
  "CLIF-generated module for fstext/float-weight-ext.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_weight")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "FloatLimits", reinterpret_cast<PyObject*>(&pyFloatLimits::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "FloatWeight", reinterpret_cast<PyObject*>(&pyFloatWeight::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "TropicalWeight", reinterpret_cast<PyObject*>(&pyTropicalWeight::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "LogWeight", reinterpret_cast<PyObject*>(&pyLogWeight::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __float__weight_clifwrap

namespace clif {

// Create a Python function that calls std::function<::fst::TropicalWeightTpl<float>(const ::fst::LogWeightTpl<float> &)> cfunction.
PyObject* Clif_PyObjFrom(std::function<::fst::TropicalWeightTpl<float>(const ::fst::LogWeightTpl<float> &)> cfunction, py::PostConv) {
  PyObject* f = FunctionCapsule(cfunction);
  if (f == nullptr) return nullptr;
  PyObject* py = PyCFunction_New(&__float__weight_clifwrap::lambda_GetLogToTropicalConverter_ret0_lambda_def, f);
  Py_DECREF(f);
  return py;
}

// Create a Python function that calls std::function<::fst::LogWeightTpl<float>(const ::fst::TropicalWeightTpl<float> &)> cfunction.
PyObject* Clif_PyObjFrom(std::function<::fst::LogWeightTpl<float>(const ::fst::TropicalWeightTpl<float> &)> cfunction, py::PostConv) {
  PyObject* f = FunctionCapsule(cfunction);
  if (f == nullptr) return nullptr;
  PyObject* py = PyCFunction_New(&__float__weight_clifwrap::lambda_GetTropicalToLogConverter_ret0_lambda_def, f);
  Py_DECREF(f);
  return py;
}

}  // namespace clif

namespace fst {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// FloatLimits to/from ::fst::FloatLimits<float> conversion

bool Clif_PyObjAs(PyObject* py, ::fst::FloatLimits<float>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::FloatLimits<float>* cpp = __float__weight_clifwrap::pyFloatLimits::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::FloatLimits<float>>* c) {
  assert(c != nullptr);
  ::fst::FloatLimits<float>* cpp = __float__weight_clifwrap::pyFloatLimits::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__float__weight_clifwrap::pyFloatLimits::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::FloatLimits<float>>* c) {
  assert(c != nullptr);
  ::fst::FloatLimits<float>* cpp = __float__weight_clifwrap::pyFloatLimits::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__float__weight_clifwrap::pyFloatLimits::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert FloatLimits instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::FloatLimits<float>* c) {
  assert(c != nullptr);
  ::fst::FloatLimits<float>* cpp = __float__weight_clifwrap::pyFloatLimits::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::FloatLimits<float>>* c) {
  assert(c != nullptr);
  ::fst::FloatLimits<float>* cpp = __float__weight_clifwrap::pyFloatLimits::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::FloatLimits<float>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__float__weight_clifwrap::pyFloatLimits::wrapper_Type, NULL, NULL);
  reinterpret_cast<__float__weight_clifwrap::pyFloatLimits::wrapper*>(py)->cpp = ::clif::Instance<::fst::FloatLimits<float>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::FloatLimits<float>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__float__weight_clifwrap::pyFloatLimits::wrapper_Type, NULL, NULL);
  reinterpret_cast<__float__weight_clifwrap::pyFloatLimits::wrapper*>(py)->cpp = ::clif::Instance<::fst::FloatLimits<float>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::FloatLimits<float>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__float__weight_clifwrap::pyFloatLimits::wrapper_Type, NULL, NULL);
  reinterpret_cast<__float__weight_clifwrap::pyFloatLimits::wrapper*>(py)->cpp = ::clif::Instance<::fst::FloatLimits<float>>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::FloatLimits<float>& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__float__weight_clifwrap::pyFloatLimits::wrapper_Type, NULL, NULL);
  reinterpret_cast<__float__weight_clifwrap::pyFloatLimits::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::FloatLimits<float>>(c);
  return py;
}

// FloatWeight to/from ::fst::FloatWeightTpl<float> conversion

bool Clif_PyObjAs(PyObject* py, ::fst::FloatWeightTpl<float>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::FloatWeightTpl<float>* cpp = __float__weight_clifwrap::pyFloatWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::FloatWeightTpl<float>>* c) {
  assert(c != nullptr);
  ::fst::FloatWeightTpl<float>* cpp = __float__weight_clifwrap::pyFloatWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__float__weight_clifwrap::pyFloatWeight::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::FloatWeightTpl<float>>* c) {
  assert(c != nullptr);
  ::fst::FloatWeightTpl<float>* cpp = __float__weight_clifwrap::pyFloatWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__float__weight_clifwrap::pyFloatWeight::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert FloatWeight instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::FloatWeightTpl<float>* c) {
  assert(c != nullptr);
  ::fst::FloatWeightTpl<float>* cpp = __float__weight_clifwrap::pyFloatWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::FloatWeightTpl<float>>* c) {
  assert(c != nullptr);
  ::fst::FloatWeightTpl<float>* cpp = __float__weight_clifwrap::pyFloatWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::FloatWeightTpl<float>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__float__weight_clifwrap::pyFloatWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__float__weight_clifwrap::pyFloatWeight::wrapper*>(py)->cpp = ::clif::Instance<::fst::FloatWeightTpl<float>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::FloatWeightTpl<float>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__float__weight_clifwrap::pyFloatWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__float__weight_clifwrap::pyFloatWeight::wrapper*>(py)->cpp = ::clif::Instance<::fst::FloatWeightTpl<float>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::FloatWeightTpl<float>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__float__weight_clifwrap::pyFloatWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__float__weight_clifwrap::pyFloatWeight::wrapper*>(py)->cpp = ::clif::Instance<::fst::FloatWeightTpl<float>>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::FloatWeightTpl<float>& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__float__weight_clifwrap::pyFloatWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__float__weight_clifwrap::pyFloatWeight::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::FloatWeightTpl<float>>(c);
  return py;
}

// LogWeight to/from ::fst::LogWeightTpl<float> conversion

bool Clif_PyObjAs(PyObject* py, ::fst::LogWeightTpl<float>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::LogWeightTpl<float>* cpp = __float__weight_clifwrap::pyLogWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::LogWeightTpl<float>>* c) {
  assert(c != nullptr);
  ::fst::LogWeightTpl<float>* cpp = __float__weight_clifwrap::pyLogWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__float__weight_clifwrap::pyLogWeight::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::LogWeightTpl<float>>* c) {
  assert(c != nullptr);
  ::fst::LogWeightTpl<float>* cpp = __float__weight_clifwrap::pyLogWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__float__weight_clifwrap::pyLogWeight::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert LogWeight instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::LogWeightTpl<float>* c) {
  assert(c != nullptr);
  ::fst::LogWeightTpl<float>* cpp = __float__weight_clifwrap::pyLogWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::LogWeightTpl<float>>* c) {
  assert(c != nullptr);
  ::fst::LogWeightTpl<float>* cpp = __float__weight_clifwrap::pyLogWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::LogWeightTpl<float>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__float__weight_clifwrap::pyLogWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__float__weight_clifwrap::pyLogWeight::wrapper*>(py)->cpp = ::clif::Instance<::fst::LogWeightTpl<float>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::LogWeightTpl<float>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__float__weight_clifwrap::pyLogWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__float__weight_clifwrap::pyLogWeight::wrapper*>(py)->cpp = ::clif::Instance<::fst::LogWeightTpl<float>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::LogWeightTpl<float>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__float__weight_clifwrap::pyLogWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__float__weight_clifwrap::pyLogWeight::wrapper*>(py)->cpp = ::clif::Instance<::fst::LogWeightTpl<float>>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::LogWeightTpl<float>& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__float__weight_clifwrap::pyLogWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__float__weight_clifwrap::pyLogWeight::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::LogWeightTpl<float>>(c);
  return py;
}

// TropicalWeight to/from ::fst::TropicalWeightTpl<float> conversion

bool Clif_PyObjAs(PyObject* py, ::fst::TropicalWeightTpl<float>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::TropicalWeightTpl<float>* cpp = __float__weight_clifwrap::pyTropicalWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::TropicalWeightTpl<float>>* c) {
  assert(c != nullptr);
  ::fst::TropicalWeightTpl<float>* cpp = __float__weight_clifwrap::pyTropicalWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__float__weight_clifwrap::pyTropicalWeight::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::TropicalWeightTpl<float>>* c) {
  assert(c != nullptr);
  ::fst::TropicalWeightTpl<float>* cpp = __float__weight_clifwrap::pyTropicalWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__float__weight_clifwrap::pyTropicalWeight::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert TropicalWeight instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::TropicalWeightTpl<float>* c) {
  assert(c != nullptr);
  ::fst::TropicalWeightTpl<float>* cpp = __float__weight_clifwrap::pyTropicalWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::TropicalWeightTpl<float>>* c) {
  assert(c != nullptr);
  ::fst::TropicalWeightTpl<float>* cpp = __float__weight_clifwrap::pyTropicalWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::TropicalWeightTpl<float>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__float__weight_clifwrap::pyTropicalWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__float__weight_clifwrap::pyTropicalWeight::wrapper*>(py)->cpp = ::clif::Instance<::fst::TropicalWeightTpl<float>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::TropicalWeightTpl<float>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__float__weight_clifwrap::pyTropicalWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__float__weight_clifwrap::pyTropicalWeight::wrapper*>(py)->cpp = ::clif::Instance<::fst::TropicalWeightTpl<float>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::TropicalWeightTpl<float>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__float__weight_clifwrap::pyTropicalWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__float__weight_clifwrap::pyTropicalWeight::wrapper*>(py)->cpp = ::clif::Instance<::fst::TropicalWeightTpl<float>>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::TropicalWeightTpl<float>& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__float__weight_clifwrap::pyTropicalWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__float__weight_clifwrap::pyTropicalWeight::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::TropicalWeightTpl<float>>(c);
  return py;
}

}  // namespace fst
