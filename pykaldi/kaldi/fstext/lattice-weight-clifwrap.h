//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/fstext/lattice-weight.clif

#include <memory>
#include "clif/python/optional.h"
#include "fstext/lattice-weight.h"
#include "clif/python/postconv.h"

namespace fst {
using namespace ::clif;

// CLIF use `::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >` as CompactLatticeNaturalLess
bool Clif_PyObjAs(PyObject* input, ::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >>* output);
PyObject* Clif_PyObjFrom(::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::NaturalLess< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >&, py::PostConv);
// CLIF use `::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>` as CompactLatticeWeight
bool Clif_PyObjAs(PyObject* input, ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>>* output);
PyObject* Clif_PyObjFrom(::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>&, py::PostConv);
// CLIF use `::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >` as LatticeNaturalLess
bool Clif_PyObjAs(PyObject* input, ::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >>* output);
PyObject* Clif_PyObjFrom(::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::NaturalLess< ::fst::LatticeWeightTpl<float> >&, py::PostConv);
// CLIF use `::fst::LatticeWeightTpl<float>` as LatticeWeight
bool Clif_PyObjAs(PyObject* input, ::fst::LatticeWeightTpl<float>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::LatticeWeightTpl<float>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::LatticeWeightTpl<float>>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::LatticeWeightTpl<float>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::LatticeWeightTpl<float>>* output);
PyObject* Clif_PyObjFrom(::fst::LatticeWeightTpl<float>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::LatticeWeightTpl<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::LatticeWeightTpl<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::LatticeWeightTpl<float>&, py::PostConv);

}  // namespace fst

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_lattice_weight")) Py_DECREF(m);
// CLIF init_module else goto err;
