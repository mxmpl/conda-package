//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/fstext/expanded-fst.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "fstext/lattice-weight-clifwrap.h"
#include "fstext/fst-clifwrap.h"
#include "expanded-fst-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __expanded__fst_clifwrap {
using namespace clif;
using namespace fst;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyStdExpandedFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >> cpp;
};
static ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* ThisPtr(PyObject*);

// _num_states() -> int
static PyObject* wrapNumStates_as__num_states(PyObject* self) {
  // Call actual C++ method.
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumStates();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*
static PyObject* as_fst_Fst__fst_ArcTpl__fst_TropicalWeightTpl_float(PyObject* self) {
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("_num_states"), (PyCFunction)wrapNumStates_as__num_states, METH_NOARGS, C("_num_states() -> int\n  Calls C++ function\n  int ::fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::NumStates()")},
  {C("as_fst_Fst__fst_ArcTpl__fst_TropicalWeightTpl_float"), (PyCFunction)as_fst_Fst__fst_ArcTpl__fst_TropicalWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*")},
  {}
};

// StdExpandedFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// StdExpandedFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_expanded_fst.StdExpandedFst",      // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_ExpandedFst__fst_ArcTpl__fst_TropicalWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >"));
      if (!PyErr_Occurred()) {
        ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = static_cast<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyStdExpandedFst

namespace pyLogExpandedFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >> cpp;
};
static ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* ThisPtr(PyObject*);

// _num_states() -> int
static PyObject* wrapNumStates_as__num_states(PyObject* self) {
  // Call actual C++ method.
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumStates();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*
static PyObject* as_fst_Fst__fst_ArcTpl__fst_LogWeightTpl_float(PyObject* self) {
  ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("_num_states"), (PyCFunction)wrapNumStates_as__num_states, METH_NOARGS, C("_num_states() -> int\n  Calls C++ function\n  int ::fst::ExpandedFst<fst::ArcTpl<fst::LogWeightTpl<float> > >::NumStates()")},
  {C("as_fst_Fst__fst_ArcTpl__fst_LogWeightTpl_float"), (PyCFunction)as_fst_Fst__fst_ArcTpl__fst_LogWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*")},
  {}
};

// LogExpandedFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// LogExpandedFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_expanded_fst.LogExpandedFst",      // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_ExpandedFst__fst_ArcTpl__fst_LogWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >"));
      if (!PyErr_Occurred()) {
        ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = static_cast<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyLogExpandedFst

namespace pyLatticeExpandedFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >> cpp;
};
static ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* ThisPtr(PyObject*);

// _num_states() -> int
static PyObject* wrapNumStates_as__num_states(PyObject* self) {
  // Call actual C++ method.
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumStates();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*
static PyObject* as_fst_Fst__fst_ArcTpl__fst_LatticeWeightTpl_float(PyObject* self) {
  ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("_num_states"), (PyCFunction)wrapNumStates_as__num_states, METH_NOARGS, C("_num_states() -> int\n  Calls C++ function\n  int ::fst::ExpandedFst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::NumStates()")},
  {C("as_fst_Fst__fst_ArcTpl__fst_LatticeWeightTpl_float"), (PyCFunction)as_fst_Fst__fst_ArcTpl__fst_LatticeWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*")},
  {}
};

// LatticeExpandedFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// LatticeExpandedFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_expanded_fst.LatticeExpandedFst",  // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_ExpandedFst__fst_ArcTpl__fst_LatticeWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >"));
      if (!PyErr_Occurred()) {
        ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = static_cast<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyLatticeExpandedFst

namespace pyCompactLatticeExpandedFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >> cpp;
};
static ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* ThisPtr(PyObject*);

// _num_states() -> int
static PyObject* wrapNumStates_as__num_states(PyObject* self) {
  // Call actual C++ method.
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumStates();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*
static PyObject* as_fst_Fst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int(PyObject* self) {
  ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("_num_states"), (PyCFunction)wrapNumStates_as__num_states, METH_NOARGS, C("_num_states() -> int\n  Calls C++ function\n  int ::fst::ExpandedFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::NumStates()")},
  {C("as_fst_Fst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int"), (PyCFunction)as_fst_Fst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int, METH_NOARGS, C("Upcast to ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*")},
  {}
};

// CompactLatticeExpandedFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// CompactLatticeExpandedFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_expanded_fst.CompactLatticeExpandedFst", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_ExpandedFst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >"));
      if (!PyErr_Occurred()) {
        ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = static_cast<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyCompactLatticeExpandedFst

namespace pyKwsIndexExpandedFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >> cpp;
};
static ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* ThisPtr(PyObject*);

// _num_states() -> int
static PyObject* wrapNumStates_as__num_states(PyObject* self) {
  // Call actual C++ method.
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumStates();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*
static PyObject* as_fst_Fst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float(PyObject* self) {
  ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("_num_states"), (PyCFunction)wrapNumStates_as__num_states, METH_NOARGS, C("_num_states() -> int\n  Calls C++ function\n  int ::fst::ExpandedFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::NumStates()")},
  {C("as_fst_Fst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float"), (PyCFunction)as_fst_Fst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*")},
  {}
};

// KwsIndexExpandedFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// KwsIndexExpandedFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_expanded_fst.KwsIndexExpandedFst", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_ExpandedFst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >"));
      if (!PyErr_Occurred()) {
        ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = static_cast<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyKwsIndexExpandedFst


// Initialize module

bool Ready() {
  PyObject* base_cls = ImportFQName("kaldi.fstext._fst.StdFst");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._fst.StdFst is not a new style class inheriting from object.");
    return false;
  }
  pyStdExpandedFst::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyStdExpandedFst::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._fst.StdFst is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyStdExpandedFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyStdExpandedFst::wrapper_Type);  // For PyModule_AddObject to steal.
  base_cls = ImportFQName("kaldi.fstext._fst.LogFst");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._fst.LogFst is not a new style class inheriting from object.");
    return false;
  }
  pyLogExpandedFst::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyLogExpandedFst::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._fst.LogFst is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyLogExpandedFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyLogExpandedFst::wrapper_Type);  // For PyModule_AddObject to steal.
  base_cls = ImportFQName("kaldi.fstext._fst.LatticeFst");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._fst.LatticeFst is not a new style class inheriting from object.");
    return false;
  }
  pyLatticeExpandedFst::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyLatticeExpandedFst::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._fst.LatticeFst is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyLatticeExpandedFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyLatticeExpandedFst::wrapper_Type);  // For PyModule_AddObject to steal.
  base_cls = ImportFQName("kaldi.fstext._fst.CompactLatticeFst");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._fst.CompactLatticeFst is not a new style class inheriting from object.");
    return false;
  }
  pyCompactLatticeExpandedFst::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyCompactLatticeExpandedFst::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._fst.CompactLatticeFst is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyCompactLatticeExpandedFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyCompactLatticeExpandedFst::wrapper_Type);  // For PyModule_AddObject to steal.
  base_cls = ImportFQName("kaldi.fstext._fst.KwsIndexFst");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._fst.KwsIndexFst is not a new style class inheriting from object.");
    return false;
  }
  pyKwsIndexExpandedFst::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyKwsIndexExpandedFst::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._fst.KwsIndexFst is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyKwsIndexExpandedFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyKwsIndexExpandedFst::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_expanded_fst",  // module name
  "CLIF-generated module for fst/expanded-fst.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_lattice_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_fst")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "StdExpandedFst", reinterpret_cast<PyObject*>(&pyStdExpandedFst::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "LogExpandedFst", reinterpret_cast<PyObject*>(&pyLogExpandedFst::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "LatticeExpandedFst", reinterpret_cast<PyObject*>(&pyLatticeExpandedFst::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "CompactLatticeExpandedFst", reinterpret_cast<PyObject*>(&pyCompactLatticeExpandedFst::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "KwsIndexExpandedFst", reinterpret_cast<PyObject*>(&pyKwsIndexExpandedFst::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __expanded__fst_clifwrap

namespace fst {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// CompactLatticeExpandedFst to/from ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* cpp = __expanded__fst_clifwrap::pyCompactLatticeExpandedFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>* c) {
  assert(c != nullptr);
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* cpp = __expanded__fst_clifwrap::pyCompactLatticeExpandedFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__expanded__fst_clifwrap::pyCompactLatticeExpandedFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>* c) {
  assert(c != nullptr);
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* cpp = __expanded__fst_clifwrap::pyCompactLatticeExpandedFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__expanded__fst_clifwrap::pyCompactLatticeExpandedFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert CompactLatticeExpandedFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__expanded__fst_clifwrap::pyCompactLatticeExpandedFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__expanded__fst_clifwrap::pyCompactLatticeExpandedFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__expanded__fst_clifwrap::pyCompactLatticeExpandedFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__expanded__fst_clifwrap::pyCompactLatticeExpandedFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__expanded__fst_clifwrap::pyCompactLatticeExpandedFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__expanded__fst_clifwrap::pyCompactLatticeExpandedFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>(std::move(c));
  return py;
}

// KwsIndexExpandedFst to/from ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* cpp = __expanded__fst_clifwrap::pyKwsIndexExpandedFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>* c) {
  assert(c != nullptr);
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* cpp = __expanded__fst_clifwrap::pyKwsIndexExpandedFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__expanded__fst_clifwrap::pyKwsIndexExpandedFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>* c) {
  assert(c != nullptr);
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* cpp = __expanded__fst_clifwrap::pyKwsIndexExpandedFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__expanded__fst_clifwrap::pyKwsIndexExpandedFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert KwsIndexExpandedFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__expanded__fst_clifwrap::pyKwsIndexExpandedFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__expanded__fst_clifwrap::pyKwsIndexExpandedFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__expanded__fst_clifwrap::pyKwsIndexExpandedFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__expanded__fst_clifwrap::pyKwsIndexExpandedFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__expanded__fst_clifwrap::pyKwsIndexExpandedFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__expanded__fst_clifwrap::pyKwsIndexExpandedFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>(std::move(c));
  return py;
}

// LatticeExpandedFst to/from ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* cpp = __expanded__fst_clifwrap::pyLatticeExpandedFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* cpp = __expanded__fst_clifwrap::pyLatticeExpandedFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__expanded__fst_clifwrap::pyLatticeExpandedFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* cpp = __expanded__fst_clifwrap::pyLatticeExpandedFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__expanded__fst_clifwrap::pyLatticeExpandedFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert LatticeExpandedFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__expanded__fst_clifwrap::pyLatticeExpandedFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__expanded__fst_clifwrap::pyLatticeExpandedFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__expanded__fst_clifwrap::pyLatticeExpandedFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__expanded__fst_clifwrap::pyLatticeExpandedFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__expanded__fst_clifwrap::pyLatticeExpandedFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__expanded__fst_clifwrap::pyLatticeExpandedFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>(std::move(c));
  return py;
}

// LogExpandedFst to/from ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* cpp = __expanded__fst_clifwrap::pyLogExpandedFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* cpp = __expanded__fst_clifwrap::pyLogExpandedFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__expanded__fst_clifwrap::pyLogExpandedFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* cpp = __expanded__fst_clifwrap::pyLogExpandedFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__expanded__fst_clifwrap::pyLogExpandedFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert LogExpandedFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__expanded__fst_clifwrap::pyLogExpandedFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__expanded__fst_clifwrap::pyLogExpandedFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__expanded__fst_clifwrap::pyLogExpandedFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__expanded__fst_clifwrap::pyLogExpandedFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__expanded__fst_clifwrap::pyLogExpandedFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__expanded__fst_clifwrap::pyLogExpandedFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>(std::move(c));
  return py;
}

// StdExpandedFst to/from ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* cpp = __expanded__fst_clifwrap::pyStdExpandedFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* cpp = __expanded__fst_clifwrap::pyStdExpandedFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__expanded__fst_clifwrap::pyStdExpandedFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* cpp = __expanded__fst_clifwrap::pyStdExpandedFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__expanded__fst_clifwrap::pyStdExpandedFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert StdExpandedFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__expanded__fst_clifwrap::pyStdExpandedFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__expanded__fst_clifwrap::pyStdExpandedFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__expanded__fst_clifwrap::pyStdExpandedFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__expanded__fst_clifwrap::pyStdExpandedFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__expanded__fst_clifwrap::pyStdExpandedFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__expanded__fst_clifwrap::pyStdExpandedFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>(std::move(c));
  return py;
}

}  // namespace fst
