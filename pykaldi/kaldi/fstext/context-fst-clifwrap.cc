//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/fstext/context-fst.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "fstext/symbol-table-clifwrap.h"
#include "fstext/lattice-weight-clifwrap.h"
#include "fstext/arc-clifwrap.h"
#include "context-fst-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __context__fst_clifwrap {
using namespace clif;
using namespace fst::internal;
using namespace fst;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyStdContextFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>> cpp;
};
static ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>* ThisPtr(PyObject*);

// __init__(subsequential_symbol:int, phones:list<int>, disambig_syms:list<int>, N:int, P:int)
static PyObject* wrapTropicalWeightTpl_float___int_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[5];
  char* names[] = {
      C("subsequential_symbol"),
      C("phones"),
      C("disambig_syms"),
      C("N"),
      C("P"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOO:__init__", names, &a[0], &a[1], &a[2], &a[3], &a[4])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "int", a[0]);
  ::std::vector<int> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::std::vector<int>", a[1]);
  ::std::vector<int> arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::std::vector<int>", a[2]);
  int arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "int", a[3]);
  int arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("__init__", names[4], "int", a[4]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>>(std::move(arg1), std::move(arg2), std::move(arg3), std::move(arg4), std::move(arg5));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// @classmethod from_other(fst:StdContextFst, safe:bool=default) -> StdContextFst
static PyObject* wrapContextFst_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("fst"),
      C("safe"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:from_other", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>", a[0]);
  bool arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_other", names[1], "bool", a[1]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    ret0 = ::gtl::MakeUnique<::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>>(*arg1); break;
  case 2:
    ret0 = ::gtl::MakeUnique<::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>>(*arg1, std::move(arg2)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// copy(safe:bool=default) -> StdContextFst
static PyObject* wrapCopy_as_copy(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("safe"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:copy", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  bool arg1;
  if (nargs > 0) {
    if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("copy", names[0], "bool", a[0]);
  }
  // Call actual C++ method.
  ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::gtl::optional<::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> *> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    ret0 = c->Copy(); break;
  case 1:
    ret0 = c->Copy(std::move(arg1)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0.value()), {});
}

// create_arc(s:int, olabel:int) -> (success:bool, oarc:StdArc)
static PyObject* wrapCreateArc_as_create_arc(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("s"),
      C("olabel"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:create_arc", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("create_arc", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("create_arc", names[1], "int", a[1]);
  ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > ret1{};
  // Call actual C++ method.
  ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->CreateArc(std::move(arg1), std::move(arg2), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  PyObject* pyproc = ImportFQName("kaldi.util._value_error_on_false");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// ilabel_info() -> list<list<int>>
static PyObject* wrapILabelInfo_as_ilabel_info(PyObject* self) {
  // Call actual C++ method.
  ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::vector< ::std::vector<int> > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->ILabelInfo();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::fst::ImplToFst< ::fst::internal::ContextFstImpl< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >*
static PyObject* as_fst_ImplToFst__fst_internal_ContextFstImpl__fst_ArcTpl__fst_TropicalWeightTpl_float___int(PyObject* self) {
  ::fst::ImplToFst< ::fst::internal::ContextFstImpl< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::ImplToFst< ::fst::internal::ContextFstImpl< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >"), nullptr);
}

// Implicit cast this as ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*
static PyObject* as_fst_Fst__fst_ArcTpl__fst_TropicalWeightTpl_float(PyObject* self) {
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapTropicalWeightTpl_float___int_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(subsequential_symbol:int, phones:list<int>, disambig_syms:list<int>, N:int, P:int)\n  Calls C++ function\n  void ::fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, int>::ContextFst(int, ::std::vector<int>, ::std::vector<int>, int, int)")},
  {C("from_other"), (PyCFunction)wrapContextFst_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(fst:StdContextFst, safe:bool=default) -> StdContextFst\n\nCreates a new context FST from another.")},
  {C("copy"), (PyCFunction)wrapCopy_as_copy, METH_VARARGS | METH_KEYWORDS, C("copy(safe:bool=default) -> StdContextFst\n\nCreates a copy of the context FST.")},
  {C("create_arc"), (PyCFunction)wrapCreateArc_as_create_arc, METH_VARARGS | METH_KEYWORDS, C("create_arc(s:int, olabel:int) -> (success:bool, oarc:StdArc)\n\nCreates an on demand arc and returns it.\n\nArgs:\n  s (int): State index.\n  olabel (int): Output label of the arc.\n\nReturns:\n  The created arc.")},
  {C("ilabel_info"), (PyCFunction)wrapILabelInfo_as_ilabel_info, METH_NOARGS, C("ilabel_info() -> list<list<int>>\n\nReturns input label info.")},
  {C("as_fst_ImplToFst__fst_internal_ContextFstImpl__fst_ArcTpl__fst_TropicalWeightTpl_float___int"), (PyCFunction)as_fst_ImplToFst__fst_internal_ContextFstImpl__fst_ArcTpl__fst_TropicalWeightTpl_float___int, METH_NOARGS, C("Upcast to ::fst::ImplToFst< ::fst::internal::ContextFstImpl< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >*")},
  {C("as_fst_Fst__fst_ArcTpl__fst_TropicalWeightTpl_float"), (PyCFunction)as_fst_Fst__fst_ArcTpl__fst_TropicalWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*")},
  {}
};

// StdContextFst __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// StdContextFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// StdContextFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_context_fst.StdContextFst",        // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Context FST over the tropical semiring.\n\nContext FST \"C\" transduces from symbols representing phone context\nwindows (e.g. \"a, b, c\") to individual phone, e.g. \"a\".  The context\nFST is an on-demand FST.  It has its own matcher type that makes it\nparticularly efficient to compose with.\n\nArgs:\n  subsequential_symbol (int): Integer index of the subsequential symbol.\n  phones (List[int]): Integer indices for the phones.\n  disambig_syms (List[int]): Integer indices for disambiguation symbols.\n  N (int): Size of context window.\n  P (int): Position of central phone in context window, from 0..N-1.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapTropicalWeightTpl_float___int_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_ContextFst__fst_ArcTpl__fst_TropicalWeightTpl_float___int"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>"));
      if (!PyErr_Occurred()) {
        ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>* c = static_cast<::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyStdContextFst

namespace pyStdContextFstStateIterator {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >> cpp;
};
static ::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* ThisPtr(PyObject*);

// __init__(fst:StdContextFst)
static PyObject* wrapTropicalWeightTpl_float___int_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("fst"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// done() -> bool
static PyObject* wrapDone_as_done(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Done();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// value() -> int
static PyObject* wrapValue_as_value(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Value();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// next()
static PyObject* wrapNext_as_next(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Next();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// reset()
static PyObject* wrapReset_as_reset(PyObject* self) {
  // Call actual C++ method.
  ::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Reset();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::fst::CacheStateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >*
static PyObject* as_fst_CacheStateIterator__fst_ContextFst__fst_ArcTpl__fst_TropicalWeightTpl_float(PyObject* self) {
  ::fst::CacheStateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::CacheStateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >"), nullptr);
}

// Implicit cast this as ::fst::StateIteratorBase<typename ::fst::ImplToFst<ContextFstImpl<ArcTpl<TropicalWeightTpl<float> >, int>, Fst<ArcTpl<TropicalWeightTpl<float> > > >::Arc>*
static PyObject* as_fst_StateIteratorBase_typename_fst_ImplToFst_ContextFstImpl_ArcTpl_TropicalWeightTpl_float___int__Fst_ArcTpl_TropicalWeightTpl_float_____Arc(PyObject* self) {
  ::fst::StateIteratorBase<typename ::fst::ImplToFst<ContextFstImpl<ArcTpl<TropicalWeightTpl<float> >, int>, Fst<ArcTpl<TropicalWeightTpl<float> > > >::Arc>* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::StateIteratorBase<typename ::fst::ImplToFst<ContextFstImpl<ArcTpl<TropicalWeightTpl<float> >, int>, Fst<ArcTpl<TropicalWeightTpl<float> > > >::Arc>"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapTropicalWeightTpl_float___int_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(fst:StdContextFst)\n  Calls C++ function\n  void ::fst::StateIterator<fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, int> >::StateIterator(::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>)")},
  {C("done"), (PyCFunction)wrapDone_as_done, METH_NOARGS, C("done() -> bool\n\nIndicates whether the iterator is exhausted or not.\n\nReturns:\n  True if the iterator is exhausted, False otherwise.")},
  {C("value"), (PyCFunction)wrapValue_as_value, METH_NOARGS, C("value() -> int\n\nReturns the current state index.")},
  {C("next"), (PyCFunction)wrapNext_as_next, METH_NOARGS, C("next()\n\nAdvances the iterator.")},
  {C("reset"), (PyCFunction)wrapReset_as_reset, METH_NOARGS, C("reset()\n\nResets the iterator to the initial position.")},
  {C("as_fst_CacheStateIterator__fst_ContextFst__fst_ArcTpl__fst_TropicalWeightTpl_float"), (PyCFunction)as_fst_CacheStateIterator__fst_ContextFst__fst_ArcTpl__fst_TropicalWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::CacheStateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >*")},
  {C("as_fst_StateIteratorBase_typename_fst_ImplToFst_ContextFstImpl_ArcTpl_TropicalWeightTpl_float___int__Fst_ArcTpl_TropicalWeightTpl_float_____Arc"), (PyCFunction)as_fst_StateIteratorBase_typename_fst_ImplToFst_ContextFstImpl_ArcTpl_TropicalWeightTpl_float___int__Fst_ArcTpl_TropicalWeightTpl_float_____Arc, METH_NOARGS, C("Upcast to ::fst::StateIteratorBase<typename ::fst::ImplToFst<ContextFstImpl<ArcTpl<TropicalWeightTpl<float> >, int>, Fst<ArcTpl<TropicalWeightTpl<float> > > >::Arc>*")},
  {}
};

// StdContextFstStateIterator __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// StdContextFstStateIterator __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// StdContextFstStateIterator __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_context_fst.StdContextFstStateIterator", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "State iterator for context FST over the tropical semiring.\n\nArgs:\n    fst: The context FST.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapTropicalWeightTpl_float___int_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_StateIterator__fst_ContextFst__fst_ArcTpl__fst_TropicalWeightTpl_float___int"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >"));
      if (!PyErr_Occurred()) {
        ::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* c = static_cast<::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyStdContextFstStateIterator

namespace pyStdContextFstArcIterator {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >> cpp;
};
static ::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* ThisPtr(PyObject*);

// __init__(fst:StdContextFst, s:int)
static PyObject* wrapTropicalWeightTpl_float___int_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("fst"),
      C("s"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "int", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >>(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// done() -> bool
static PyObject* wrapDone_as_done(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Done();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// value() -> StdArc
static PyObject* wrapValue_as_value(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Value();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// next()
static PyObject* wrapNext_as_next(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Next();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// reset()
static PyObject* wrapReset_as_reset(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Reset();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// seek(a:int)
static PyObject* wrapSeek_as_seek(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("a"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:seek", names, &a[0])) return nullptr;
  unsigned long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("seek", names[0], "unsigned long", a[0]);
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Seek(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// position() -> int
static PyObject* wrapPosition_as_position(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Position();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// flags() -> int
static PyObject* wrapFlags_as_flags(PyObject* self) {
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Flags();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// set_flags(flags:int, mask:int)
static PyObject* wrapSetFlags_as_set_flags(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("flags"),
      C("mask"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:set_flags", names, &a[0], &a[1])) return nullptr;
  unsigned int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_flags", names[0], "unsigned int", a[0]);
  unsigned int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("set_flags", names[1], "unsigned int", a[1]);
  // Call actual C++ method.
  ::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetFlags(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::fst::CacheArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >*
static PyObject* as_fst_CacheArcIterator__fst_ContextFst__fst_ArcTpl__fst_TropicalWeightTpl_float(PyObject* self) {
  ::fst::CacheArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::CacheArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapTropicalWeightTpl_float___int_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(fst:StdContextFst, s:int)\n  Calls C++ function\n  void ::fst::ArcIterator<fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float> >, int> >::ArcIterator(::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>, int)")},
  {C("done"), (PyCFunction)wrapDone_as_done, METH_NOARGS, C("done() -> bool\n\nIndicates whether the iterator is exhausted or not.\n\nReturns:\n  True if the iterator is exhausted, False otherwise.")},
  {C("value"), (PyCFunction)wrapValue_as_value, METH_NOARGS, C("value() -> StdArc\n\nReturns the current arc.")},
  {C("next"), (PyCFunction)wrapNext_as_next, METH_NOARGS, C("next()\n\nAdvances the iterator.")},
  {C("reset"), (PyCFunction)wrapReset_as_reset, METH_NOARGS, C("reset()\n\nResets the iterator to the initial position.")},
  {C("seek"), (PyCFunction)wrapSeek_as_seek, METH_VARARGS | METH_KEYWORDS, C("seek(a:int)\n\nAdvance the iterator to a new position.\n\nArgs:\n  a (int): The position to seek to.")},
  {C("position"), (PyCFunction)wrapPosition_as_position, METH_NOARGS, C("position() -> int\n\nReturns the position of the iterator.\n\nReturns:\n  The iterator's position, expressed as an integer.")},
  {C("flags"), (PyCFunction)wrapFlags_as_flags, METH_NOARGS, C("flags() -> int\n\nReturns the current iterator behavioral flags.\n\nReturns:\n  The current iterator behavioral flags as an integer.")},
  {C("set_flags"), (PyCFunction)wrapSetFlags_as_set_flags, METH_VARARGS | METH_KEYWORDS, C("set_flags(flags:int, mask:int)\n\nSets the current iterator behavioral flags.\n\nArgs:\n  flags (int): The properties to be set.\n  mask (int): A mask to be applied to the `flags` argument before\n    setting them.")},
  {C("as_fst_CacheArcIterator__fst_ContextFst__fst_ArcTpl__fst_TropicalWeightTpl_float"), (PyCFunction)as_fst_CacheArcIterator__fst_ContextFst__fst_ArcTpl__fst_TropicalWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::CacheArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >*")},
  {}
};

// StdContextFstArcIterator __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// StdContextFstArcIterator __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// StdContextFstArcIterator __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_context_fst.StdContextFstArcIterator", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Arc iterator for context FST over the tropical semiring.\n\nArgs:\n    fst: The context FST.\n    state: The state index.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapTropicalWeightTpl_float___int_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_ArcIterator__fst_ContextFst__fst_ArcTpl__fst_TropicalWeightTpl_float___int"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >"));
      if (!PyErr_Occurred()) {
        ::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* c = static_cast<::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyStdContextFstArcIterator


// Initialize module

bool Ready() {
  PyObject* base_cls = ImportFQName("kaldi.fstext._fst.StdFst");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._fst.StdFst is not a new style class inheriting from object.");
    return false;
  }
  pyStdContextFst::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyStdContextFst::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._fst.StdFst is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyStdContextFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyStdContextFst::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyStdContextFstStateIterator::wrapper_Type) < 0) return false;
  Py_INCREF(&pyStdContextFstStateIterator::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyStdContextFstArcIterator::wrapper_Type) < 0) return false;
  Py_INCREF(&pyStdContextFstArcIterator::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_context_fst",  // module name
  "CLIF-generated module for fstext/context-fst.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_symbol_table")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_lattice_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_arc")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "StdContextFst", reinterpret_cast<PyObject*>(&pyStdContextFst::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "StdContextFstStateIterator", reinterpret_cast<PyObject*>(&pyStdContextFstStateIterator::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "StdContextFstArcIterator", reinterpret_cast<PyObject*>(&pyStdContextFstArcIterator::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __context__fst_clifwrap

namespace fst {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// StdContextFst to/from ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> conversion

bool Clif_PyObjAs(PyObject* py, ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>* cpp = __context__fst_clifwrap::pyStdContextFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>>* c) {
  assert(c != nullptr);
  ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>* cpp = __context__fst_clifwrap::pyStdContextFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__context__fst_clifwrap::pyStdContextFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>>* c) {
  assert(c != nullptr);
  ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>* cpp = __context__fst_clifwrap::pyStdContextFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__context__fst_clifwrap::pyStdContextFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert StdContextFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__context__fst_clifwrap::pyStdContextFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__context__fst_clifwrap::pyStdContextFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__context__fst_clifwrap::pyStdContextFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__context__fst_clifwrap::pyStdContextFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__context__fst_clifwrap::pyStdContextFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__context__fst_clifwrap::pyStdContextFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int>>(std::move(c));
  return py;
}

// StdContextFstArcIterator to/from ::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* cpp = __context__fst_clifwrap::pyStdContextFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >>* c) {
  assert(c != nullptr);
  ::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* cpp = __context__fst_clifwrap::pyStdContextFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__context__fst_clifwrap::pyStdContextFstArcIterator::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >>* c) {
  assert(c != nullptr);
  ::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* cpp = __context__fst_clifwrap::pyStdContextFstArcIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__context__fst_clifwrap::pyStdContextFstArcIterator::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert StdContextFstArcIterator instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__context__fst_clifwrap::pyStdContextFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__context__fst_clifwrap::pyStdContextFstArcIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__context__fst_clifwrap::pyStdContextFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__context__fst_clifwrap::pyStdContextFstArcIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__context__fst_clifwrap::pyStdContextFstArcIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__context__fst_clifwrap::pyStdContextFstArcIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::ArcIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >>(std::move(c));
  return py;
}

// StdContextFstStateIterator to/from ::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* cpp = __context__fst_clifwrap::pyStdContextFstStateIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >>* c) {
  assert(c != nullptr);
  ::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* cpp = __context__fst_clifwrap::pyStdContextFstStateIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__context__fst_clifwrap::pyStdContextFstStateIterator::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >>* c) {
  assert(c != nullptr);
  ::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* cpp = __context__fst_clifwrap::pyStdContextFstStateIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__context__fst_clifwrap::pyStdContextFstStateIterator::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert StdContextFstStateIterator instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__context__fst_clifwrap::pyStdContextFstStateIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__context__fst_clifwrap::pyStdContextFstStateIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__context__fst_clifwrap::pyStdContextFstStateIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__context__fst_clifwrap::pyStdContextFstStateIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__context__fst_clifwrap::pyStdContextFstStateIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__context__fst_clifwrap::pyStdContextFstStateIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::StateIterator< ::fst::ContextFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, int> >>(std::move(c));
  return py;
}

}  // namespace fst
