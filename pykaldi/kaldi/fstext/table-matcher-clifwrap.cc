//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/fstext/table-matcher.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "fstext/getters-clifwrap.h"
#include "fstext/lattice-weight-clifwrap.h"
#include "fstext/fst-clifwrap.h"
#include "fstext/mutable-fst-clifwrap.h"
#include "table-matcher-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __table__matcher_clifwrap {
using namespace clif;
using namespace fst;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyTableMatcherOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::TableMatcherOptions> cpp;
};
static ::fst::TableMatcherOptions* ThisPtr(PyObject*);

static PyObject* get_table_ratio(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->table_ratio, {});
}

static int set_table_ratio(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the table_ratio attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->table_ratio)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for table_ratio:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_min_table_size(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->min_table_size, {});
}

static int set_min_table_size(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the min_table_size attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->min_table_size)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for min_table_size:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("table_ratio"), get_table_ratio, set_table_ratio, C("Construct the table if it would be at least this full.")},
  {C("min_table_size"), get_min_table_size, set_min_table_size, C("Minimum table size.")},
  {}
};

// TableMatcherOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// TableMatcherOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// TableMatcherOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_table_matcher.TableMatcherOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Options for table matcher.\n\nTable matcher is a matcher specialized for the case where the output\nside of the left FST always has either all-epsilons coming out of\na state, or a majority of the symbol table. Therefore we can\neither store nothing (for the all-epsilon case) or store a lookup\ntable from labels to arc offsets. Since the table matcher has to\niterate over all arcs in each left-hand state the first time it sees\nit, this matcher type is not efficient if you compose with\nsomething very small on the right -- unless you do it multiple\ntimes and keep the matcher around.\n\nTable matcher class is not exposed to Python code directly. Instances of\n`TableMatcherOptions` can be passed to :meth:`table_compose` and\n`TableComposeCache` for controlling the table matcher behavior.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  nullptr,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "TableMatcherOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::TableMatcherOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::TableMatcherOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_TableMatcherOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::TableMatcherOptions"));
      if (!PyErr_Occurred()) {
        ::fst::TableMatcherOptions* c = static_cast<::fst::TableMatcherOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::TableMatcherOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyTableMatcherOptions

namespace pyTableComposeOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::TableComposeOptions> cpp;
};
static ::fst::TableComposeOptions* ThisPtr(PyObject*);

static PyObject* get_connect(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->connect, {});
}

static int set_connect(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the connect attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->connect)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for connect:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_filter_type(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->filter_type, {});
}

static int set_filter_type(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the filter_type attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->filter_type)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for filter_type:ComposeFilter", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_table_match_type(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->table_match_type, {});
}

static int set_table_match_type(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the table_match_type attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->table_match_type)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for table_match_type:MatchType", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// @classmethod from_matcher_opts(mo:TableMatcherOptions, connect:bool=default, filter_type:ComposeFilter=default, table_match_type:MatchType=default) -> TableComposeOptions
static PyObject* wrapTableComposeOptions_as_from_matcher_opts(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[4]{};
  char* names[] = {
      C("mo"),
      C("connect"),
      C("filter_type"),
      C("table_match_type"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|OOO:from_matcher_opts", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 4; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::TableMatcherOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_matcher_opts", names[0], "::fst::TableMatcherOptions", a[0]);
  bool arg2;
  if (nargs > 1) {
    if (!a[1]) arg2 = (bool)true;
    else if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_matcher_opts", names[1], "bool", a[1]);
  }
  ::fst::ComposeFilter arg3;
  if (nargs > 2) {
    if (!a[2]) arg3 = (::fst::ComposeFilter)3;
    else if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("from_matcher_opts", names[2], "::fst::ComposeFilter", a[2]);
  }
  ::fst::MatchType arg4;
  if (nargs > 3) {
    if (!a[3]) arg4 = (::fst::MatchType)2;
    else if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("from_matcher_opts", names[3], "::fst::MatchType", a[3]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::fst::TableComposeOptions> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    ret0 = ::gtl::MakeUnique<::fst::TableComposeOptions>(*arg1); break;
  case 2:
    ret0 = ::gtl::MakeUnique<::fst::TableComposeOptions>(*arg1, std::move(arg2)); break;
  case 3:
    ret0 = ::gtl::MakeUnique<::fst::TableComposeOptions>(*arg1, std::move(arg2), std::move(arg3)); break;
  case 4:
    ret0 = ::gtl::MakeUnique<::fst::TableComposeOptions>(*arg1, std::move(arg2), std::move(arg3), std::move(arg4)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyGetSetDef Properties[] = {
  {C("connect"), get_connect, set_connect, C("Connect output")},
  {C("filter_type"), get_filter_type, set_filter_type, C("Which pre-defined filter to use.")},
  {C("table_match_type"), get_table_match_type, set_table_match_type, C("Type of table match.")},
  {}
};

// Implicit cast this as ::fst::TableMatcherOptions*
static PyObject* as_fst_TableMatcherOptions(PyObject* self) {
  ::fst::TableMatcherOptions* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::TableMatcherOptions"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("from_matcher_opts"), (PyCFunction)wrapTableComposeOptions_as_from_matcher_opts, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_matcher_opts(mo:TableMatcherOptions, connect:bool=default, filter_type:ComposeFilter=default, table_match_type:MatchType=default) -> TableComposeOptions\n\nCreates a new `TableComposeOptions` instance.")},
  {C("as_fst_TableMatcherOptions"), (PyCFunction)as_fst_TableMatcherOptions, METH_NOARGS, C("Upcast to ::fst::TableMatcherOptions*")},
  {}
};

// TableComposeOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// TableComposeOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// TableComposeOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_table_matcher.TableComposeOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Options for table composition.",    // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "TableComposeOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::TableComposeOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::TableComposeOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_TableComposeOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::TableComposeOptions"));
      if (!PyErr_Occurred()) {
        ::fst::TableComposeOptions* c = static_cast<::fst::TableComposeOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::TableComposeOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyTableComposeOptions

// table_compose(ifst1:StdFst, ifst2:StdFst, ofst:StdMutableFst, opts:TableComposeOptions=default)
static PyObject* wrapTableCompose_as_table_compose(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4]{};
  char* names[] = {
      C("ifst1"),
      C("ifst2"),
      C("ofst"),
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO|O:table_compose", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 4; nargs > 3; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("table_compose", names[0], "::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >", a[0]);
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("table_compose", names[1], "::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >", a[1]);
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("table_compose", names[2], "::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > *", a[2]);
  ::fst::TableComposeOptions* arg4;
  if (nargs > 3) {
    if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("table_compose", names[3], "::fst::TableComposeOptions", a[3]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 3:
    ::fst::TableCompose(*arg1, *arg2, arg3); break;
  case 4:
    ::fst::TableCompose(*arg1, *arg2, arg3, *arg4); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

namespace pyTableComposeCache {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >> cpp;
};
static ::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* ThisPtr(PyObject*);

static PyObject* get_opts(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->opts), {});
}

static int set_opts(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the opts attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->opts)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for opts:TableComposeOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// @classmethod from_compose_opts(opts:TableComposeOptions=default) -> TableComposeCache
static PyObject* wrapTableComposeCache_as_from_compose_opts(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:from_compose_opts", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::TableComposeOptions* arg1;
  if (nargs > 0) {
    if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_compose_opts", names[0], "::fst::TableComposeOptions", a[0]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    ret0 = ::gtl::MakeUnique<::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>(); break;
  case 1:
    ret0 = ::gtl::MakeUnique<::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>(*arg1); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyGetSetDef Properties[] = {
  {C("opts"), get_opts, set_opts, C("Table compose options.")},
  {}
};

static PyMethodDef Methods[] = {
  {C("from_compose_opts"), (PyCFunction)wrapTableComposeCache_as_from_compose_opts, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_compose_opts(opts:TableComposeOptions=default) -> TableComposeCache\n\nCreates a new `TableComposeCache` instance.")},
  {}
};

// TableComposeCache __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// TableComposeCache __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// TableComposeCache __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_table_matcher.TableComposeCache",  // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Cache for table compose.\n\nUsed for doing multiple compositions while caching the same matcher.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "TableComposeCache takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_TableComposeCache__fst_Fst__fst_ArcTpl__fst_TropicalWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >"));
      if (!PyErr_Occurred()) {
        ::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = static_cast<::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyTableComposeCache

// table_compose_cache(ifst1:StdFst, ifst2:StdFst, ofst:StdMutableFst, cache:TableComposeCache)
static PyObject* wrapTableCompose_as_table_compose_cache(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("ifst1"),
      C("ifst2"),
      C("ofst"),
      C("cache"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:table_compose_cache", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("table_compose_cache", names[0], "::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >", a[0]);
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("table_compose_cache", names[1], "::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >", a[1]);
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("table_compose_cache", names[2], "::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > *", a[2]);
  ::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > * arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("table_compose_cache", names[3], "::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > *", a[3]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::fst::TableCompose(*arg1, *arg2, arg3, arg4);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("table_compose"), (PyCFunction)wrapTableCompose_as_table_compose, METH_VARARGS | METH_KEYWORDS, C("table_compose(ifst1:StdFst, ifst2:StdFst, ofst:StdMutableFst, opts:TableComposeOptions=default)\n\nPerforms table composition.")},
  {C("table_compose_cache"), (PyCFunction)wrapTableCompose_as_table_compose_cache, METH_VARARGS | METH_KEYWORDS, C("table_compose_cache(ifst1:StdFst, ifst2:StdFst, ofst:StdMutableFst, cache:TableComposeCache)\n\nPerforms table composition using the cached table matcher.")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyTableMatcherOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyTableMatcherOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  pyTableComposeOptions::wrapper_Type.tp_base = &pyTableMatcherOptions::wrapper_Type;
  if (PyType_Ready(&pyTableComposeOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyTableComposeOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyTableComposeCache::wrapper_Type) < 0) return false;
  Py_INCREF(&pyTableComposeCache::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_table_matcher",  // module name
  "CLIF-generated module for fstext/table-matcher.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_getters")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_lattice_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_fst")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_mutable_fst")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "TableMatcherOptions", reinterpret_cast<PyObject*>(&pyTableMatcherOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "TableComposeOptions", reinterpret_cast<PyObject*>(&pyTableComposeOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "TableComposeCache", reinterpret_cast<PyObject*>(&pyTableComposeCache::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __table__matcher_clifwrap

namespace fst {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// TableComposeCache to/from ::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* cpp = __table__matcher_clifwrap::pyTableComposeCache::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>* c) {
  assert(c != nullptr);
  ::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* cpp = __table__matcher_clifwrap::pyTableComposeCache::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__table__matcher_clifwrap::pyTableComposeCache::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>* c) {
  assert(c != nullptr);
  ::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* cpp = __table__matcher_clifwrap::pyTableComposeCache::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__table__matcher_clifwrap::pyTableComposeCache::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert TableComposeCache instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c) {
  assert(c != nullptr);
  ::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* cpp = __table__matcher_clifwrap::pyTableComposeCache::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>* c) {
  assert(c != nullptr);
  ::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* cpp = __table__matcher_clifwrap::pyTableComposeCache::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__table__matcher_clifwrap::pyTableComposeCache::wrapper_Type, NULL, NULL);
  reinterpret_cast<__table__matcher_clifwrap::pyTableComposeCache::wrapper*>(py)->cpp = ::clif::Instance<::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__table__matcher_clifwrap::pyTableComposeCache::wrapper_Type, NULL, NULL);
  reinterpret_cast<__table__matcher_clifwrap::pyTableComposeCache::wrapper*>(py)->cpp = ::clif::Instance<::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__table__matcher_clifwrap::pyTableComposeCache::wrapper_Type, NULL, NULL);
  reinterpret_cast<__table__matcher_clifwrap::pyTableComposeCache::wrapper*>(py)->cpp = ::clif::Instance<::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__table__matcher_clifwrap::pyTableComposeCache::wrapper_Type, NULL, NULL);
  reinterpret_cast<__table__matcher_clifwrap::pyTableComposeCache::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::TableComposeCache< ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>(c);
  return py;
}

// TableComposeOptions to/from ::fst::TableComposeOptions conversion

bool Clif_PyObjAs(PyObject* py, ::fst::TableComposeOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::TableComposeOptions* cpp = __table__matcher_clifwrap::pyTableComposeOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::TableComposeOptions>* c) {
  assert(c != nullptr);
  ::fst::TableComposeOptions* cpp = __table__matcher_clifwrap::pyTableComposeOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__table__matcher_clifwrap::pyTableComposeOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::TableComposeOptions>* c) {
  assert(c != nullptr);
  ::fst::TableComposeOptions* cpp = __table__matcher_clifwrap::pyTableComposeOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__table__matcher_clifwrap::pyTableComposeOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert TableComposeOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::TableComposeOptions* c) {
  assert(c != nullptr);
  ::fst::TableComposeOptions* cpp = __table__matcher_clifwrap::pyTableComposeOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::TableComposeOptions>* c) {
  assert(c != nullptr);
  ::fst::TableComposeOptions* cpp = __table__matcher_clifwrap::pyTableComposeOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::TableComposeOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__table__matcher_clifwrap::pyTableComposeOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__table__matcher_clifwrap::pyTableComposeOptions::wrapper*>(py)->cpp = ::clif::Instance<::fst::TableComposeOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::TableComposeOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__table__matcher_clifwrap::pyTableComposeOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__table__matcher_clifwrap::pyTableComposeOptions::wrapper*>(py)->cpp = ::clif::Instance<::fst::TableComposeOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::TableComposeOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__table__matcher_clifwrap::pyTableComposeOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__table__matcher_clifwrap::pyTableComposeOptions::wrapper*>(py)->cpp = ::clif::Instance<::fst::TableComposeOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::TableComposeOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__table__matcher_clifwrap::pyTableComposeOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__table__matcher_clifwrap::pyTableComposeOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::TableComposeOptions>(c);
  return py;
}

// TableMatcherOptions to/from ::fst::TableMatcherOptions conversion

bool Clif_PyObjAs(PyObject* py, ::fst::TableMatcherOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::TableMatcherOptions* cpp = __table__matcher_clifwrap::pyTableMatcherOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::TableMatcherOptions>* c) {
  assert(c != nullptr);
  ::fst::TableMatcherOptions* cpp = __table__matcher_clifwrap::pyTableMatcherOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__table__matcher_clifwrap::pyTableMatcherOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::TableMatcherOptions>* c) {
  assert(c != nullptr);
  ::fst::TableMatcherOptions* cpp = __table__matcher_clifwrap::pyTableMatcherOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__table__matcher_clifwrap::pyTableMatcherOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert TableMatcherOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::TableMatcherOptions* c) {
  assert(c != nullptr);
  ::fst::TableMatcherOptions* cpp = __table__matcher_clifwrap::pyTableMatcherOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::TableMatcherOptions>* c) {
  assert(c != nullptr);
  ::fst::TableMatcherOptions* cpp = __table__matcher_clifwrap::pyTableMatcherOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::TableMatcherOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__table__matcher_clifwrap::pyTableMatcherOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__table__matcher_clifwrap::pyTableMatcherOptions::wrapper*>(py)->cpp = ::clif::Instance<::fst::TableMatcherOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::TableMatcherOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__table__matcher_clifwrap::pyTableMatcherOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__table__matcher_clifwrap::pyTableMatcherOptions::wrapper*>(py)->cpp = ::clif::Instance<::fst::TableMatcherOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::TableMatcherOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__table__matcher_clifwrap::pyTableMatcherOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__table__matcher_clifwrap::pyTableMatcherOptions::wrapper*>(py)->cpp = ::clif::Instance<::fst::TableMatcherOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::TableMatcherOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__table__matcher_clifwrap::pyTableMatcherOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__table__matcher_clifwrap::pyTableMatcherOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::TableMatcherOptions>(c);
  return py;
}

}  // namespace fst
