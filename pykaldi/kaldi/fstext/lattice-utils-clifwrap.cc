//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/fstext/lattice-utils.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "lattice-utils-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __lattice__utils_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


// default_lattice_scale() -> list<list<float>>
static PyObject* wrapDefaultLatticeScale_as_default_lattice_scale(PyObject* self) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::vector< ::std::vector<double> > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::DefaultLatticeScale();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// acoustic_lattice_scale(acwt:float) -> list<list<float>>
static PyObject* wrapAcousticLatticeScale_as_acoustic_lattice_scale(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("acwt"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:acoustic_lattice_scale", names, &a[0])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("acoustic_lattice_scale", names[0], "double", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::vector< ::std::vector<double> > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::AcousticLatticeScale(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// graph_lattice_scale(lmwt:float) -> list<list<float>>
static PyObject* wrapGraphLatticeScale_as_graph_lattice_scale(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("lmwt"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:graph_lattice_scale", names, &a[0])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("graph_lattice_scale", names[0], "double", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::vector< ::std::vector<double> > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::GraphLatticeScale(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// lattice_scale(lmwt:float, acwt:float) -> list<list<float>>
static PyObject* wrapLatticeScale_as_lattice_scale(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("lmwt"),
      C("acwt"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:lattice_scale", names, &a[0], &a[1])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("lattice_scale", names[0], "double", a[0]);
  double arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("lattice_scale", names[1], "double", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::vector< ::std::vector<double> > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::LatticeScale(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("default_lattice_scale"), (PyCFunction)wrapDefaultLatticeScale_as_default_lattice_scale, METH_NOARGS, C("default_lattice_scale() -> list<list<float>>\n\nReturns a default 2x2 matrix for scaling lattice weights.")},
  {C("acoustic_lattice_scale"), (PyCFunction)wrapAcousticLatticeScale_as_acoustic_lattice_scale, METH_VARARGS | METH_KEYWORDS, C("acoustic_lattice_scale(acwt:float) -> list<list<float>>\n\nReturns a 2x2 matrix for scaling acoustic cost in lattice weights.")},
  {C("graph_lattice_scale"), (PyCFunction)wrapGraphLatticeScale_as_graph_lattice_scale, METH_VARARGS | METH_KEYWORDS, C("graph_lattice_scale(lmwt:float) -> list<list<float>>\n\nReturns a 2x2 matrix for scaling graph cost in lattice weights.")},
  {C("lattice_scale"), (PyCFunction)wrapLatticeScale_as_lattice_scale, METH_VARARGS | METH_KEYWORDS, C("lattice_scale(lmwt:float, acwt:float) -> list<list<float>>\n\nReturns a 2x2 matrix for scaling graph and acoustic costs in lattice weights.")},
  {}
};

bool Ready() {
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_lattice_utils",  // module name
  "CLIF-generated module for fstext/lattice-utils.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  PyEval_InitThreads();
  return module;
}

}  // namespace __lattice__utils_clifwrap
