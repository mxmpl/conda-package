//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/fstext/fst.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "fstext/float-weight-clifwrap.h"
#include "fstext/lattice-weight-clifwrap.h"
#include "fstext/lexicographic-weight-clifwrap.h"
#include "fstext/arc-clifwrap.h"
#include "fstext/symbol-table-clifwrap.h"
#include "fst-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __fst_clifwrap {
using namespace clif;
using namespace fst;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes

static PyObject *_Enum{}, *_IntEnum{};  // set below in Init()


namespace pyFstHeader {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::FstHeader> cpp;
};
static ::fst::FstHeader* ThisPtr(PyObject*);

// fst_type() -> str
static PyObject* wrapFstType_as_fst_type(PyObject* self) {
  // Call actual C++ method.
  ::fst::FstHeader* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FstType();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// arc_type() -> str
static PyObject* wrapArcType_as_arc_type(PyObject* self) {
  // Call actual C++ method.
  ::fst::FstHeader* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->ArcType();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// version() -> int
static PyObject* wrapVersion_as_version(PyObject* self) {
  // Call actual C++ method.
  ::fst::FstHeader* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Version();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_flags() -> int
static PyObject* wrapGetFlags_as_get_flags(PyObject* self) {
  // Call actual C++ method.
  ::fst::FstHeader* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetFlags();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// properties() -> int
static PyObject* wrapProperties_as_properties(PyObject* self) {
  // Call actual C++ method.
  ::fst::FstHeader* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Properties();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// start() -> int
static PyObject* wrapStart_as_start(PyObject* self) {
  // Call actual C++ method.
  ::fst::FstHeader* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Start();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_states() -> int
static PyObject* wrapNumStates_as_num_states(PyObject* self) {
  // Call actual C++ method.
  ::fst::FstHeader* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumStates();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_arcs() -> int
static PyObject* wrapNumArcs_as_num_arcs(PyObject* self) {
  // Call actual C++ method.
  ::fst::FstHeader* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumArcs();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// set_fst_type(type:str)
static PyObject* wrapSetFstType_as_set_fst_type(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("type"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_fst_type", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_fst_type", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::fst::FstHeader* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetFstType(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_arc_type(type:str)
static PyObject* wrapSetArcType_as_set_arc_type(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("type"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_arc_type", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_arc_type", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::fst::FstHeader* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetArcType(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_version(version:int)
static PyObject* wrapSetVersion_as_set_version(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("version"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_version", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_version", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::FstHeader* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetVersion(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_flags(flags:int)
static PyObject* wrapSetFlags_as_set_flags(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("flags"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_flags", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_flags", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::FstHeader* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetFlags(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_properties(properties:int)
static PyObject* wrapSetProperties_as_set_properties(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("properties"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_properties", names, &a[0])) return nullptr;
  unsigned long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_properties", names[0], "unsigned long", a[0]);
  // Call actual C++ method.
  ::fst::FstHeader* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetProperties(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_start(start:int)
static PyObject* wrapSetStart_as_set_start(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("start"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_start", names, &a[0])) return nullptr;
  long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_start", names[0], "long", a[0]);
  // Call actual C++ method.
  ::fst::FstHeader* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetStart(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_num_states(numstates:int)
static PyObject* wrapSetNumStates_as_set_num_states(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("numstates"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_num_states", names, &a[0])) return nullptr;
  long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_num_states", names[0], "long", a[0]);
  // Call actual C++ method.
  ::fst::FstHeader* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetNumStates(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_num_arcs(numarcs:int)
static PyObject* wrapSetNumArcs_as_set_num_arcs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("numarcs"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_num_arcs", names, &a[0])) return nullptr;
  long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_num_arcs", names[0], "long", a[0]);
  // Call actual C++ method.
  ::fst::FstHeader* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetNumArcs(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(strm:istream, source:str, rewind:bool=default) -> bool
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("strm"),
      C("source"),
      C("rewind"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:read", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  ::std::string arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "::std::string", a[1]);
  bool arg3;
  if (nargs > 2) {
    if (!a[2]) arg3 = (bool)false;
    else if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("read", names[2], "bool", a[2]);
  }
  // Call actual C++ method.
  ::fst::FstHeader* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ret0 = c->Read(*arg1, std::move(arg2)); break;
  case 3:
    ret0 = c->Read(*arg1, std::move(arg2), std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// write(strm:ostream, source:str) -> bool
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("strm"),
      C("source"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  ::std::string arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "::std::string", a[1]);
  // Call actual C++ method.
  ::fst::FstHeader* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// debug_string() -> str
static PyObject* wrapDebugString_as_debug_string(PyObject* self) {
  // Call actual C++ method.
  ::fst::FstHeader* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->DebugString();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

static PyMethodDef Methods[] = {
  {C("fst_type"), (PyCFunction)wrapFstType_as_fst_type, METH_NOARGS, C("fst_type() -> str\n\nReturns FST type.")},
  {C("arc_type"), (PyCFunction)wrapArcType_as_arc_type, METH_NOARGS, C("arc_type() -> str\n\nReturns arc type.")},
  {C("version"), (PyCFunction)wrapVersion_as_version, METH_NOARGS, C("version() -> int\n\nReturns version.")},
  {C("get_flags"), (PyCFunction)wrapGetFlags_as_get_flags, METH_NOARGS, C("get_flags() -> int\n\nReturns flags.")},
  {C("properties"), (PyCFunction)wrapProperties_as_properties, METH_NOARGS, C("properties() -> int\n\nReturns FST properties.")},
  {C("start"), (PyCFunction)wrapStart_as_start, METH_NOARGS, C("start() -> int\n\nReturns start state.")},
  {C("num_states"), (PyCFunction)wrapNumStates_as_num_states, METH_NOARGS, C("num_states() -> int\n\nReturns number of states.")},
  {C("num_arcs"), (PyCFunction)wrapNumArcs_as_num_arcs, METH_NOARGS, C("num_arcs() -> int\n\nReturns number of arcs.")},
  {C("set_fst_type"), (PyCFunction)wrapSetFstType_as_set_fst_type, METH_VARARGS | METH_KEYWORDS, C("set_fst_type(type:str)\n\nSets FST type.")},
  {C("set_arc_type"), (PyCFunction)wrapSetArcType_as_set_arc_type, METH_VARARGS | METH_KEYWORDS, C("set_arc_type(type:str)\n\nSets arc type.")},
  {C("set_version"), (PyCFunction)wrapSetVersion_as_set_version, METH_VARARGS | METH_KEYWORDS, C("set_version(version:int)\n\nSets version.")},
  {C("set_flags"), (PyCFunction)wrapSetFlags_as_set_flags, METH_VARARGS | METH_KEYWORDS, C("set_flags(flags:int)\n\nSets flags.")},
  {C("set_properties"), (PyCFunction)wrapSetProperties_as_set_properties, METH_VARARGS | METH_KEYWORDS, C("set_properties(properties:int)\n\nSets FST properties.")},
  {C("set_start"), (PyCFunction)wrapSetStart_as_set_start, METH_VARARGS | METH_KEYWORDS, C("set_start(start:int)\n\nSets start state.")},
  {C("set_num_states"), (PyCFunction)wrapSetNumStates_as_set_num_states, METH_VARARGS | METH_KEYWORDS, C("set_num_states(numstates:int)\n\nSets number of states.")},
  {C("set_num_arcs"), (PyCFunction)wrapSetNumArcs_as_set_num_arcs, METH_VARARGS | METH_KEYWORDS, C("set_num_arcs(numarcs:int)\n\nSets number of arcs.")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(strm:istream, source:str, rewind:bool=default) -> bool\n\nReads header from stream.")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(strm:ostream, source:str) -> bool\n\nWrites header to stream.")},
  {C("debug_string"), (PyCFunction)wrapDebugString_as_debug_string, METH_NOARGS, C("debug_string() -> str\n\nOutputs a debug string for the FstHeader object.")},
  {}
};

// FstHeader __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// FstHeader __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// FstHeader __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_fst.FstHeader",                    // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "FST file header.",                  // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "FstHeader takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstHeader>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::FstHeader* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_FstHeader"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::FstHeader"));
      if (!PyErr_Occurred()) {
        ::fst::FstHeader* c = static_cast<::fst::FstHeader*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::FstHeader*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyFstHeader

namespace pyFstReadOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::FstReadOptions> cpp;
};
static ::fst::FstReadOptions* ThisPtr(PyObject*);

// Create Python Enum object (cached in _FileReadMode) for ::fst::FstReadOptions::FileReadMode
static PyObject* wrapFileReadMode() {
  PyObject *py, *py_enum_class{}, *names = PyTuple_New(2);
  if (names == nullptr) return nullptr;
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("MAP"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::fst::FstReadOptions::FileReadMode>::type>(::fst::FstReadOptions::FileReadMode::MAP)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 0, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("READ"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::fst::FstReadOptions::FileReadMode>::type>(::fst::FstReadOptions::FileReadMode::READ)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 1, py);
  py = PyUnicode_FromString("FstReadOptions.FileReadMode");
  py_enum_class = PyObject_CallFunctionObjArgs(_IntEnum, py, names, nullptr);
  Py_DECREF(py);
err:
  Py_DECREF(names);
  return py_enum_class;
}
static PyObject* _FileReadMode{};  // set by above func in Init()

static PyObject* get_source(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->source, _1);
}

static int set_source(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the source attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->source)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for source:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_mode(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->mode, {});
}

static int set_mode(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the mode attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->mode)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for mode:FileReadMode", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_read_isymbols(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->read_isymbols, {});
}

static int set_read_isymbols(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the read_isymbols attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->read_isymbols)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for read_isymbols:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_read_osymbols(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->read_osymbols, {});
}

static int set_read_osymbols(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the read_osymbols attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->read_osymbols)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for read_osymbols:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// __init__(source:str=default, header:FstHeader=default, isymbols:SymbolTable=default, osymbols:SymbolTable=default)
static PyObject* wrapFstReadOptions_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4]{};
  char* names[] = {
      C("source"),
      C("header"),
      C("isymbols"),
      C("osymbols"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|OOOO:__init__", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 4; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::std::string arg1;
  if (nargs > 0) {
    if (!a[0]) return DefaultArgMissedError("__init__", names[0]);
    if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::std::string", a[0]);
  }
  ::fst::FstHeader * arg2;
  if (nargs > 1) {
    if (!a[1]) arg2 = (::fst::FstHeader *)nullptr;
    else if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::fst::FstHeader *", a[1]);
  }
  ::fst::SymbolTable * arg3;
  if (nargs > 2) {
    if (!a[2]) arg3 = (::fst::SymbolTable *)nullptr;
    else if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::fst::SymbolTable *", a[2]);
  }
  ::fst::SymbolTable * arg4;
  if (nargs > 3) {
    if (!a[3]) arg4 = (::fst::SymbolTable *)nullptr;
    else if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "::fst::SymbolTable *", a[3]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstReadOptions>(); break;
  case 1:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstReadOptions>(std::move(arg1)); break;
  case 2:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstReadOptions>(std::move(arg1), arg2); break;
  case 3:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstReadOptions>(std::move(arg1), arg2, arg3); break;
  case 4:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstReadOptions>(std::move(arg1), arg2, arg3, arg4); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// @classmethod read_mode(mode:str) -> FileReadMode
static PyObject* wrapReadMode_as_read_mode(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("mode"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:read_mode", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read_mode", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::FstReadOptions::FileReadMode ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::FstReadOptions::ReadMode(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// debug_string() -> str
static PyObject* wrapDebugString_as_debug_string(PyObject* self) {
  // Call actual C++ method.
  ::fst::FstReadOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->DebugString();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

static PyGetSetDef Properties[] = {
  {C("source"), get_source, set_source, C("Where you're reading from.")},
  {C("mode"), get_mode, set_mode, C("Read or map files (advisory, if possible)")},
  {C("read_isymbols"), get_read_isymbols, set_read_isymbols, C("Read input symbols, if any (default: true).")},
  {C("read_osymbols"), get_read_osymbols, set_read_osymbols, C("Read output symbols, if any (default: true).")},
  {}
};

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapFstReadOptions_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(source:str=default, header:FstHeader=default, isymbols:SymbolTable=default, osymbols:SymbolTable=default)\n  Calls C++ function\n  void ::fst::FstReadOptions::FstReadOptions(::std::string, ::fst::FstHeader *, ::fst::SymbolTable *, ::fst::SymbolTable *)")},
  {C("read_mode"), (PyCFunction)wrapReadMode_as_read_mode, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("read_mode(mode:str) -> FileReadMode\n\nConverts mode strings into FileReadMode enum values.")},
  {C("debug_string"), (PyCFunction)wrapDebugString_as_debug_string, METH_NOARGS, C("debug_string() -> str\n\nOutputs a debug string for the FstReadOptions object.")},
  {}
};

// FstReadOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// FstReadOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// FstReadOptions __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_fst.FstReadOptions",               // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "FST reading options.",              // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapFstReadOptions_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::FstReadOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_FstReadOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::FstReadOptions"));
      if (!PyErr_Occurred()) {
        ::fst::FstReadOptions* c = static_cast<::fst::FstReadOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::FstReadOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyFstReadOptions

namespace pyFstWriteOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::FstWriteOptions> cpp;
};
static ::fst::FstWriteOptions* ThisPtr(PyObject*);

static PyObject* get_source(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->source, _1);
}

static int set_source(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the source attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->source)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for source:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_write_header(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->write_header, {});
}

static int set_write_header(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the write_header attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->write_header)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for write_header:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_write_isymbols(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->write_isymbols, {});
}

static int set_write_isymbols(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the write_isymbols attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->write_isymbols)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for write_isymbols:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_write_osymbols(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->write_osymbols, {});
}

static int set_write_osymbols(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the write_osymbols attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->write_osymbols)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for write_osymbols:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_align(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->align, {});
}

static int set_align(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the align attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->align)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for align:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_stream_write(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->stream_write, {});
}

static int set_stream_write(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the stream_write attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->stream_write)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for stream_write:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// __init__(source:str=default, write_header:bool=default, write_isymbols:bool=default, write_osymbols:bool=default, align:bool=default, stream_write:bool=default)
static PyObject* wrapFstWriteOptions_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[6]{};
  char* names[] = {
      C("source"),
      C("write_header"),
      C("write_isymbols"),
      C("write_osymbols"),
      C("align"),
      C("stream_write"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|OOOOOO:__init__", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 6; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::std::string arg1;
  if (nargs > 0) {
    if (!a[0]) return DefaultArgMissedError("__init__", names[0]);
    if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::std::string", a[0]);
  }
  bool arg2;
  if (nargs > 1) {
    if (!a[1]) arg2 = (bool)true;
    else if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "bool", a[1]);
  }
  bool arg3;
  if (nargs > 2) {
    if (!a[2]) arg3 = (bool)true;
    else if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "bool", a[2]);
  }
  bool arg4;
  if (nargs > 3) {
    if (!a[3]) arg4 = (bool)true;
    else if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "bool", a[3]);
  }
  bool arg5;
  if (nargs > 4) {
    if (!a[4]) return DefaultArgMissedError("__init__", names[4]);
    if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("__init__", names[4], "bool", a[4]);
  }
  bool arg6;
  if (nargs > 5) {
    if (!a[5]) arg6 = (bool)false;
    else if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("__init__", names[5], "bool", a[5]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstWriteOptions>(); break;
  case 1:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstWriteOptions>(std::move(arg1)); break;
  case 2:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstWriteOptions>(std::move(arg1), std::move(arg2)); break;
  case 3:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstWriteOptions>(std::move(arg1), std::move(arg2), std::move(arg3)); break;
  case 4:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstWriteOptions>(std::move(arg1), std::move(arg2), std::move(arg3), std::move(arg4)); break;
  case 5:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstWriteOptions>(std::move(arg1), std::move(arg2), std::move(arg3), std::move(arg4), std::move(arg5)); break;
  case 6:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::FstWriteOptions>(std::move(arg1), std::move(arg2), std::move(arg3), std::move(arg4), std::move(arg5), std::move(arg6)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("source"), get_source, set_source, C("Where you're writing to.")},
  {C("write_header"), get_write_header, set_write_header, C("Write the header?")},
  {C("write_isymbols"), get_write_isymbols, set_write_isymbols, C("Write input symbols?")},
  {C("write_osymbols"), get_write_osymbols, set_write_osymbols, C("Write output symbols?")},
  {C("align"), get_align, set_align, C("Write data aligned (may fail on pipes)?")},
  {C("stream_write"), get_stream_write, set_stream_write, C("Avoid seek operations in writing.")},
  {}
};

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapFstWriteOptions_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(source:str=default, write_header:bool=default, write_isymbols:bool=default, write_osymbols:bool=default, align:bool=default, stream_write:bool=default)\n  Calls C++ function\n  void ::fst::FstWriteOptions::FstWriteOptions(::std::string, bool, bool, bool, bool, bool)")},
  {}
};

// FstWriteOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// FstWriteOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// FstWriteOptions __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_fst.FstWriteOptions",              // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "FST writing options.",              // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapFstWriteOptions_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::FstWriteOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_FstWriteOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::FstWriteOptions"));
      if (!PyErr_Occurred()) {
        ::fst::FstWriteOptions* c = static_cast<::fst::FstWriteOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::FstWriteOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyFstWriteOptions

namespace pyStdFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >> cpp;
};
static ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* ThisPtr(PyObject*);

// _start() -> int
static PyObject* wrapStart_as__start(PyObject* self) {
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Start();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _final(state:int) -> TropicalWeight
static PyObject* wrapFinal_as__final(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_final", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_final", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::TropicalWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Final(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _num_arcs(state:int) -> int
static PyObject* wrapNumArcs_as__num_arcs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_num_arcs", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_num_arcs", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumArcs(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _num_input_epsilons(state:int) -> int
static PyObject* wrapNumInputEpsilons_as__num_input_epsilons(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_num_input_epsilons", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_num_input_epsilons", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumInputEpsilons(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _num_output_epsilons(state:int) -> int
static PyObject* wrapNumOutputEpsilons_as__num_output_epsilons(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_num_output_epsilons", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_num_output_epsilons", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumOutputEpsilons(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _properties(mask:int, test:bool) -> int
static PyObject* wrapProperties_as__properties(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("mask"),
      C("test"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_properties", names, &a[0], &a[1])) return nullptr;
  unsigned long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_properties", names[0], "unsigned long", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_properties", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Properties(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _type() -> str
static PyObject* wrapType_as__type(PyObject* self) {
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Type();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// _input_symbols() -> SymbolTable
static PyObject* wrapInputSymbols_as__input_symbols(PyObject* self) {
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  const ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->InputSymbols();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _output_symbols() -> SymbolTable
static PyObject* wrapOutputSymbols_as__output_symbols(PyObject* self) {
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  const ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->OutputSymbols();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("_start"), (PyCFunction)wrapStart_as__start, METH_NOARGS, C("_start() -> int\n  Calls C++ function\n  int ::fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::Start()")},
  {C("_final"), (PyCFunction)wrapFinal_as__final, METH_VARARGS | METH_KEYWORDS, C("_final(state:int) -> TropicalWeight\n  Calls C++ function\n  ::fst::TropicalWeightTpl<float> ::fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::Final(int)")},
  {C("_num_arcs"), (PyCFunction)wrapNumArcs_as__num_arcs, METH_VARARGS | METH_KEYWORDS, C("_num_arcs(state:int) -> int\n  Calls C++ function\n  unsigned long ::fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::NumArcs(int)")},
  {C("_num_input_epsilons"), (PyCFunction)wrapNumInputEpsilons_as__num_input_epsilons, METH_VARARGS | METH_KEYWORDS, C("_num_input_epsilons(state:int) -> int\n  Calls C++ function\n  unsigned long ::fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::NumInputEpsilons(int)")},
  {C("_num_output_epsilons"), (PyCFunction)wrapNumOutputEpsilons_as__num_output_epsilons, METH_VARARGS | METH_KEYWORDS, C("_num_output_epsilons(state:int) -> int\n  Calls C++ function\n  unsigned long ::fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::NumOutputEpsilons(int)")},
  {C("_properties"), (PyCFunction)wrapProperties_as__properties, METH_VARARGS | METH_KEYWORDS, C("_properties(mask:int, test:bool) -> int\n  Calls C++ function\n  unsigned long ::fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::Properties(unsigned long, bool)")},
  {C("_type"), (PyCFunction)wrapType_as__type, METH_NOARGS, C("_type() -> str\n  Calls C++ function\n  ::std::string ::fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::Type()")},
  {C("_input_symbols"), (PyCFunction)wrapInputSymbols_as__input_symbols, METH_NOARGS, C("_input_symbols() -> SymbolTable\n  Calls C++ function\n  const ::fst::SymbolTable * ::fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::InputSymbols()")},
  {C("_output_symbols"), (PyCFunction)wrapOutputSymbols_as__output_symbols, METH_NOARGS, C("_output_symbols() -> SymbolTable\n  Calls C++ function\n  const ::fst::SymbolTable * ::fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::OutputSymbols()")},
  {}
};

// StdFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// StdFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_fst.StdFst",                       // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_Fst__fst_ArcTpl__fst_TropicalWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >"));
      if (!PyErr_Occurred()) {
        ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = static_cast<::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyStdFst

namespace pyLogFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >> cpp;
};
static ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* ThisPtr(PyObject*);

// _start() -> int
static PyObject* wrapStart_as__start(PyObject* self) {
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Start();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _final(state:int) -> LogWeight
static PyObject* wrapFinal_as__final(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_final", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_final", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LogWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Final(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _num_arcs(state:int) -> int
static PyObject* wrapNumArcs_as__num_arcs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_num_arcs", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_num_arcs", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumArcs(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _num_input_epsilons(state:int) -> int
static PyObject* wrapNumInputEpsilons_as__num_input_epsilons(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_num_input_epsilons", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_num_input_epsilons", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumInputEpsilons(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _num_output_epsilons(state:int) -> int
static PyObject* wrapNumOutputEpsilons_as__num_output_epsilons(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_num_output_epsilons", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_num_output_epsilons", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumOutputEpsilons(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _properties(mask:int, test:bool) -> int
static PyObject* wrapProperties_as__properties(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("mask"),
      C("test"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_properties", names, &a[0], &a[1])) return nullptr;
  unsigned long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_properties", names[0], "unsigned long", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_properties", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Properties(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _type() -> str
static PyObject* wrapType_as__type(PyObject* self) {
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Type();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// _input_symbols() -> SymbolTable
static PyObject* wrapInputSymbols_as__input_symbols(PyObject* self) {
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  const ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->InputSymbols();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _output_symbols() -> SymbolTable
static PyObject* wrapOutputSymbols_as__output_symbols(PyObject* self) {
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  const ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->OutputSymbols();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("_start"), (PyCFunction)wrapStart_as__start, METH_NOARGS, C("_start() -> int\n  Calls C++ function\n  int ::fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float> > >::Start()")},
  {C("_final"), (PyCFunction)wrapFinal_as__final, METH_VARARGS | METH_KEYWORDS, C("_final(state:int) -> LogWeight\n  Calls C++ function\n  ::fst::LogWeightTpl<float> ::fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float> > >::Final(int)")},
  {C("_num_arcs"), (PyCFunction)wrapNumArcs_as__num_arcs, METH_VARARGS | METH_KEYWORDS, C("_num_arcs(state:int) -> int\n  Calls C++ function\n  unsigned long ::fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float> > >::NumArcs(int)")},
  {C("_num_input_epsilons"), (PyCFunction)wrapNumInputEpsilons_as__num_input_epsilons, METH_VARARGS | METH_KEYWORDS, C("_num_input_epsilons(state:int) -> int\n  Calls C++ function\n  unsigned long ::fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float> > >::NumInputEpsilons(int)")},
  {C("_num_output_epsilons"), (PyCFunction)wrapNumOutputEpsilons_as__num_output_epsilons, METH_VARARGS | METH_KEYWORDS, C("_num_output_epsilons(state:int) -> int\n  Calls C++ function\n  unsigned long ::fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float> > >::NumOutputEpsilons(int)")},
  {C("_properties"), (PyCFunction)wrapProperties_as__properties, METH_VARARGS | METH_KEYWORDS, C("_properties(mask:int, test:bool) -> int\n  Calls C++ function\n  unsigned long ::fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float> > >::Properties(unsigned long, bool)")},
  {C("_type"), (PyCFunction)wrapType_as__type, METH_NOARGS, C("_type() -> str\n  Calls C++ function\n  ::std::string ::fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float> > >::Type()")},
  {C("_input_symbols"), (PyCFunction)wrapInputSymbols_as__input_symbols, METH_NOARGS, C("_input_symbols() -> SymbolTable\n  Calls C++ function\n  const ::fst::SymbolTable * ::fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float> > >::InputSymbols()")},
  {C("_output_symbols"), (PyCFunction)wrapOutputSymbols_as__output_symbols, METH_NOARGS, C("_output_symbols() -> SymbolTable\n  Calls C++ function\n  const ::fst::SymbolTable * ::fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float> > >::OutputSymbols()")},
  {}
};

// LogFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// LogFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_fst.LogFst",                       // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_Fst__fst_ArcTpl__fst_LogWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >"));
      if (!PyErr_Occurred()) {
        ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = static_cast<::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyLogFst

namespace pyLatticeFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >> cpp;
};
static ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* ThisPtr(PyObject*);

// _start() -> int
static PyObject* wrapStart_as__start(PyObject* self) {
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Start();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _final(state:int) -> LatticeWeight
static PyObject* wrapFinal_as__final(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_final", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_final", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LatticeWeightTpl<float> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Final(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _num_arcs(state:int) -> int
static PyObject* wrapNumArcs_as__num_arcs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_num_arcs", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_num_arcs", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumArcs(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _num_input_epsilons(state:int) -> int
static PyObject* wrapNumInputEpsilons_as__num_input_epsilons(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_num_input_epsilons", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_num_input_epsilons", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumInputEpsilons(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _num_output_epsilons(state:int) -> int
static PyObject* wrapNumOutputEpsilons_as__num_output_epsilons(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_num_output_epsilons", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_num_output_epsilons", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumOutputEpsilons(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _properties(mask:int, test:bool) -> int
static PyObject* wrapProperties_as__properties(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("mask"),
      C("test"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_properties", names, &a[0], &a[1])) return nullptr;
  unsigned long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_properties", names[0], "unsigned long", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_properties", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Properties(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _type() -> str
static PyObject* wrapType_as__type(PyObject* self) {
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Type();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// _input_symbols() -> SymbolTable
static PyObject* wrapInputSymbols_as__input_symbols(PyObject* self) {
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  const ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->InputSymbols();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _output_symbols() -> SymbolTable
static PyObject* wrapOutputSymbols_as__output_symbols(PyObject* self) {
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  const ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->OutputSymbols();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("_start"), (PyCFunction)wrapStart_as__start, METH_NOARGS, C("_start() -> int\n  Calls C++ function\n  int ::fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::Start()")},
  {C("_final"), (PyCFunction)wrapFinal_as__final, METH_VARARGS | METH_KEYWORDS, C("_final(state:int) -> LatticeWeight\n  Calls C++ function\n  ::fst::LatticeWeightTpl<float> ::fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::Final(int)")},
  {C("_num_arcs"), (PyCFunction)wrapNumArcs_as__num_arcs, METH_VARARGS | METH_KEYWORDS, C("_num_arcs(state:int) -> int\n  Calls C++ function\n  unsigned long ::fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::NumArcs(int)")},
  {C("_num_input_epsilons"), (PyCFunction)wrapNumInputEpsilons_as__num_input_epsilons, METH_VARARGS | METH_KEYWORDS, C("_num_input_epsilons(state:int) -> int\n  Calls C++ function\n  unsigned long ::fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::NumInputEpsilons(int)")},
  {C("_num_output_epsilons"), (PyCFunction)wrapNumOutputEpsilons_as__num_output_epsilons, METH_VARARGS | METH_KEYWORDS, C("_num_output_epsilons(state:int) -> int\n  Calls C++ function\n  unsigned long ::fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::NumOutputEpsilons(int)")},
  {C("_properties"), (PyCFunction)wrapProperties_as__properties, METH_VARARGS | METH_KEYWORDS, C("_properties(mask:int, test:bool) -> int\n  Calls C++ function\n  unsigned long ::fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::Properties(unsigned long, bool)")},
  {C("_type"), (PyCFunction)wrapType_as__type, METH_NOARGS, C("_type() -> str\n  Calls C++ function\n  ::std::string ::fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::Type()")},
  {C("_input_symbols"), (PyCFunction)wrapInputSymbols_as__input_symbols, METH_NOARGS, C("_input_symbols() -> SymbolTable\n  Calls C++ function\n  const ::fst::SymbolTable * ::fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::InputSymbols()")},
  {C("_output_symbols"), (PyCFunction)wrapOutputSymbols_as__output_symbols, METH_NOARGS, C("_output_symbols() -> SymbolTable\n  Calls C++ function\n  const ::fst::SymbolTable * ::fst::Fst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::OutputSymbols()")},
  {}
};

// LatticeFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// LatticeFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_fst.LatticeFst",                   // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_Fst__fst_ArcTpl__fst_LatticeWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >"));
      if (!PyErr_Occurred()) {
        ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = static_cast<::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyLatticeFst

namespace pyCompactLatticeFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >> cpp;
};
static ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* ThisPtr(PyObject*);

// _start() -> int
static PyObject* wrapStart_as__start(PyObject* self) {
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Start();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _final(state:int) -> CompactLatticeWeight
static PyObject* wrapFinal_as__final(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_final", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_final", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Final(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _num_arcs(state:int) -> int
static PyObject* wrapNumArcs_as__num_arcs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_num_arcs", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_num_arcs", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumArcs(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _num_input_epsilons(state:int) -> int
static PyObject* wrapNumInputEpsilons_as__num_input_epsilons(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_num_input_epsilons", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_num_input_epsilons", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumInputEpsilons(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _num_output_epsilons(state:int) -> int
static PyObject* wrapNumOutputEpsilons_as__num_output_epsilons(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_num_output_epsilons", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_num_output_epsilons", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumOutputEpsilons(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _properties(mask:int, test:bool) -> int
static PyObject* wrapProperties_as__properties(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("mask"),
      C("test"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_properties", names, &a[0], &a[1])) return nullptr;
  unsigned long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_properties", names[0], "unsigned long", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_properties", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Properties(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _type() -> str
static PyObject* wrapType_as__type(PyObject* self) {
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Type();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// _input_symbols() -> SymbolTable
static PyObject* wrapInputSymbols_as__input_symbols(PyObject* self) {
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  const ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->InputSymbols();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _output_symbols() -> SymbolTable
static PyObject* wrapOutputSymbols_as__output_symbols(PyObject* self) {
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  const ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->OutputSymbols();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("_start"), (PyCFunction)wrapStart_as__start, METH_NOARGS, C("_start() -> int\n  Calls C++ function\n  int ::fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::Start()")},
  {C("_final"), (PyCFunction)wrapFinal_as__final, METH_VARARGS | METH_KEYWORDS, C("_final(state:int) -> CompactLatticeWeight\n  Calls C++ function\n  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> ::fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::Final(int)")},
  {C("_num_arcs"), (PyCFunction)wrapNumArcs_as__num_arcs, METH_VARARGS | METH_KEYWORDS, C("_num_arcs(state:int) -> int\n  Calls C++ function\n  unsigned long ::fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::NumArcs(int)")},
  {C("_num_input_epsilons"), (PyCFunction)wrapNumInputEpsilons_as__num_input_epsilons, METH_VARARGS | METH_KEYWORDS, C("_num_input_epsilons(state:int) -> int\n  Calls C++ function\n  unsigned long ::fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::NumInputEpsilons(int)")},
  {C("_num_output_epsilons"), (PyCFunction)wrapNumOutputEpsilons_as__num_output_epsilons, METH_VARARGS | METH_KEYWORDS, C("_num_output_epsilons(state:int) -> int\n  Calls C++ function\n  unsigned long ::fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::NumOutputEpsilons(int)")},
  {C("_properties"), (PyCFunction)wrapProperties_as__properties, METH_VARARGS | METH_KEYWORDS, C("_properties(mask:int, test:bool) -> int\n  Calls C++ function\n  unsigned long ::fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::Properties(unsigned long, bool)")},
  {C("_type"), (PyCFunction)wrapType_as__type, METH_NOARGS, C("_type() -> str\n  Calls C++ function\n  ::std::string ::fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::Type()")},
  {C("_input_symbols"), (PyCFunction)wrapInputSymbols_as__input_symbols, METH_NOARGS, C("_input_symbols() -> SymbolTable\n  Calls C++ function\n  const ::fst::SymbolTable * ::fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::InputSymbols()")},
  {C("_output_symbols"), (PyCFunction)wrapOutputSymbols_as__output_symbols, METH_NOARGS, C("_output_symbols() -> SymbolTable\n  Calls C++ function\n  const ::fst::SymbolTable * ::fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::OutputSymbols()")},
  {}
};

// CompactLatticeFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// CompactLatticeFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_fst.CompactLatticeFst",            // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_Fst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >"));
      if (!PyErr_Occurred()) {
        ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = static_cast<::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyCompactLatticeFst

namespace pyKwsIndexFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >> cpp;
};
static ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* ThisPtr(PyObject*);

// _start() -> int
static PyObject* wrapStart_as__start(PyObject* self) {
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Start();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _final(state:int) -> KwsIndexWeight
static PyObject* wrapFinal_as__final(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_final", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_final", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Final(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _num_arcs(state:int) -> int
static PyObject* wrapNumArcs_as__num_arcs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_num_arcs", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_num_arcs", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumArcs(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _num_input_epsilons(state:int) -> int
static PyObject* wrapNumInputEpsilons_as__num_input_epsilons(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_num_input_epsilons", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_num_input_epsilons", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumInputEpsilons(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _num_output_epsilons(state:int) -> int
static PyObject* wrapNumOutputEpsilons_as__num_output_epsilons(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_num_output_epsilons", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_num_output_epsilons", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumOutputEpsilons(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _properties(mask:int, test:bool) -> int
static PyObject* wrapProperties_as__properties(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("mask"),
      C("test"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_properties", names, &a[0], &a[1])) return nullptr;
  unsigned long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_properties", names[0], "unsigned long", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_properties", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Properties(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _type() -> str
static PyObject* wrapType_as__type(PyObject* self) {
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Type();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// _input_symbols() -> SymbolTable
static PyObject* wrapInputSymbols_as__input_symbols(PyObject* self) {
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  const ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->InputSymbols();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _output_symbols() -> SymbolTable
static PyObject* wrapOutputSymbols_as__output_symbols(PyObject* self) {
  // Call actual C++ method.
  ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  const ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->OutputSymbols();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("_start"), (PyCFunction)wrapStart_as__start, METH_NOARGS, C("_start() -> int\n  Calls C++ function\n  int ::fst::Fst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::Start()")},
  {C("_final"), (PyCFunction)wrapFinal_as__final, METH_VARARGS | METH_KEYWORDS, C("_final(state:int) -> KwsIndexWeight\n  Calls C++ function\n  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > ::fst::Fst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::Final(int)")},
  {C("_num_arcs"), (PyCFunction)wrapNumArcs_as__num_arcs, METH_VARARGS | METH_KEYWORDS, C("_num_arcs(state:int) -> int\n  Calls C++ function\n  unsigned long ::fst::Fst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::NumArcs(int)")},
  {C("_num_input_epsilons"), (PyCFunction)wrapNumInputEpsilons_as__num_input_epsilons, METH_VARARGS | METH_KEYWORDS, C("_num_input_epsilons(state:int) -> int\n  Calls C++ function\n  unsigned long ::fst::Fst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::NumInputEpsilons(int)")},
  {C("_num_output_epsilons"), (PyCFunction)wrapNumOutputEpsilons_as__num_output_epsilons, METH_VARARGS | METH_KEYWORDS, C("_num_output_epsilons(state:int) -> int\n  Calls C++ function\n  unsigned long ::fst::Fst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::NumOutputEpsilons(int)")},
  {C("_properties"), (PyCFunction)wrapProperties_as__properties, METH_VARARGS | METH_KEYWORDS, C("_properties(mask:int, test:bool) -> int\n  Calls C++ function\n  unsigned long ::fst::Fst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::Properties(unsigned long, bool)")},
  {C("_type"), (PyCFunction)wrapType_as__type, METH_NOARGS, C("_type() -> str\n  Calls C++ function\n  ::std::string ::fst::Fst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::Type()")},
  {C("_input_symbols"), (PyCFunction)wrapInputSymbols_as__input_symbols, METH_NOARGS, C("_input_symbols() -> SymbolTable\n  Calls C++ function\n  const ::fst::SymbolTable * ::fst::Fst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::InputSymbols()")},
  {C("_output_symbols"), (PyCFunction)wrapOutputSymbols_as__output_symbols, METH_NOARGS, C("_output_symbols() -> SymbolTable\n  Calls C++ function\n  const ::fst::SymbolTable * ::fst::Fst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::OutputSymbols()")},
  {}
};

// KwsIndexFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// KwsIndexFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_fst.KwsIndexFst",                  // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_Fst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >"));
      if (!PyErr_Occurred()) {
        ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = static_cast<::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyKwsIndexFst


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyFstHeader::wrapper_Type) < 0) return false;
  Py_INCREF(&pyFstHeader::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyFstReadOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyFstReadOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyFstWriteOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyFstWriteOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyStdFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyStdFst::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyLogFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyLogFst::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyLatticeFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyLatticeFst::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyCompactLatticeFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyCompactLatticeFst::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyKwsIndexFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyKwsIndexFst::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_fst",  // module name
  "CLIF-generated module for fst/fst.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_float_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_lattice_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_lexicographic_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_arc")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_symbol_table")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  {PyObject* em = PyImport_ImportModule("enum");
   if (em == nullptr) goto err;
   _Enum = PyObject_GetAttrString(em, "Enum");
   _IntEnum = PyObject_GetAttrString(em, "IntEnum");
   Py_DECREF(em);}
  if (!_Enum || !_IntEnum) {
    Py_XDECREF(_Enum);
    Py_XDECREF(_IntEnum);
    goto err;
  }
  if (PyDict_SetItemString(pyFstReadOptions::wrapper_Type.tp_dict, "FileReadMode", (pyFstReadOptions::_FileReadMode=pyFstReadOptions::wrapFileReadMode())) < 0) goto err;
  if (PyModule_AddObject(module, "NO_STATE_ID", Clif_PyObjFrom(static_cast<int>(::fst::kNoStateId), {})) < 0) goto err;
  if (PyModule_AddObject(module, "NO_LABEL", Clif_PyObjFrom(static_cast<int>(::fst::kNoLabel), {})) < 0) goto err;
  if (PyModule_AddObject(module, "FstHeader", reinterpret_cast<PyObject*>(&pyFstHeader::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "FstReadOptions", reinterpret_cast<PyObject*>(&pyFstReadOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "FstWriteOptions", reinterpret_cast<PyObject*>(&pyFstWriteOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "StdFst", reinterpret_cast<PyObject*>(&pyStdFst::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "LogFst", reinterpret_cast<PyObject*>(&pyLogFst::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "LatticeFst", reinterpret_cast<PyObject*>(&pyLatticeFst::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "CompactLatticeFst", reinterpret_cast<PyObject*>(&pyCompactLatticeFst::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "KwsIndexFst", reinterpret_cast<PyObject*>(&pyKwsIndexFst::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __fst_clifwrap

namespace fst {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// CompactLatticeFst to/from ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* cpp = __fst_clifwrap::pyCompactLatticeFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>* c) {
  assert(c != nullptr);
  ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* cpp = __fst_clifwrap::pyCompactLatticeFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__fst_clifwrap::pyCompactLatticeFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>* c) {
  assert(c != nullptr);
  ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* cpp = __fst_clifwrap::pyCompactLatticeFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__fst_clifwrap::pyCompactLatticeFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert CompactLatticeFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyCompactLatticeFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyCompactLatticeFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyCompactLatticeFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyCompactLatticeFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyCompactLatticeFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyCompactLatticeFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>(std::move(c));
  return py;
}

// FstHeader to/from ::fst::FstHeader conversion

bool Clif_PyObjAs(PyObject* py, ::fst::FstHeader** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::FstHeader* cpp = __fst_clifwrap::pyFstHeader::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::FstHeader>* c) {
  assert(c != nullptr);
  ::fst::FstHeader* cpp = __fst_clifwrap::pyFstHeader::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__fst_clifwrap::pyFstHeader::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::FstHeader>* c) {
  assert(c != nullptr);
  ::fst::FstHeader* cpp = __fst_clifwrap::pyFstHeader::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__fst_clifwrap::pyFstHeader::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert FstHeader instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::FstHeader* c) {
  assert(c != nullptr);
  ::fst::FstHeader* cpp = __fst_clifwrap::pyFstHeader::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::FstHeader>* c) {
  assert(c != nullptr);
  ::fst::FstHeader* cpp = __fst_clifwrap::pyFstHeader::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::FstHeader* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyFstHeader::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyFstHeader::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstHeader>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::FstHeader> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyFstHeader::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyFstHeader::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstHeader>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::FstHeader> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyFstHeader::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyFstHeader::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstHeader>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::FstHeader& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyFstHeader::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyFstHeader::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::FstHeader>(c);
  return py;
}

// FstReadOptions to/from ::fst::FstReadOptions conversion

bool Clif_PyObjAs(PyObject* py, ::fst::FstReadOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::FstReadOptions* cpp = __fst_clifwrap::pyFstReadOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::FstReadOptions>* c) {
  assert(c != nullptr);
  ::fst::FstReadOptions* cpp = __fst_clifwrap::pyFstReadOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__fst_clifwrap::pyFstReadOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::FstReadOptions>* c) {
  assert(c != nullptr);
  ::fst::FstReadOptions* cpp = __fst_clifwrap::pyFstReadOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__fst_clifwrap::pyFstReadOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert FstReadOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::FstReadOptions* c) {
  assert(c != nullptr);
  ::fst::FstReadOptions* cpp = __fst_clifwrap::pyFstReadOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::FstReadOptions>* c) {
  assert(c != nullptr);
  ::fst::FstReadOptions* cpp = __fst_clifwrap::pyFstReadOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::FstReadOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyFstReadOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyFstReadOptions::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstReadOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::FstReadOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyFstReadOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyFstReadOptions::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstReadOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::FstReadOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyFstReadOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyFstReadOptions::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstReadOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::FstReadOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyFstReadOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyFstReadOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::FstReadOptions>(c);
  return py;
}

// FstReadOptions.FileReadMode:IntEnum to/from enum ::fst::FstReadOptions::FileReadMode conversion

bool Clif_PyObjAs(PyObject* py, ::fst::FstReadOptions::FileReadMode* c) {
  assert(c != nullptr);
  if (!PyObject_IsInstance(py, __fst_clifwrap::pyFstReadOptions::_FileReadMode)) {
    PyErr_Format(PyExc_TypeError, "expecting enum FstReadOptions.FileReadMode, got %s %s", ClassName(py), ClassType(py));
    return false;
  }
  typename std::underlying_type<::fst::FstReadOptions::FileReadMode>::type v;
  PyObject* value = PyObject_GetAttrString(py, "value");
  if (value == nullptr || !Clif_PyObjAs(value, &v)) return false;
  Py_DECREF(value);
  *c = static_cast<::fst::FstReadOptions::FileReadMode>(v);
  return true;
}

PyObject* Clif_PyObjFrom(const ::fst::FstReadOptions::FileReadMode& c, py::PostConv) {
  return PyObject_CallFunctionObjArgs(__fst_clifwrap::pyFstReadOptions::_FileReadMode, PyInt_FromLong(
      static_cast<typename std::underlying_type<::fst::FstReadOptions::FileReadMode>::type>(c)), nullptr);
}

// FstWriteOptions to/from ::fst::FstWriteOptions conversion

bool Clif_PyObjAs(PyObject* py, ::fst::FstWriteOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::FstWriteOptions* cpp = __fst_clifwrap::pyFstWriteOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::FstWriteOptions>* c) {
  assert(c != nullptr);
  ::fst::FstWriteOptions* cpp = __fst_clifwrap::pyFstWriteOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__fst_clifwrap::pyFstWriteOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::FstWriteOptions>* c) {
  assert(c != nullptr);
  ::fst::FstWriteOptions* cpp = __fst_clifwrap::pyFstWriteOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__fst_clifwrap::pyFstWriteOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert FstWriteOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::FstWriteOptions* c) {
  assert(c != nullptr);
  ::fst::FstWriteOptions* cpp = __fst_clifwrap::pyFstWriteOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::FstWriteOptions>* c) {
  assert(c != nullptr);
  ::fst::FstWriteOptions* cpp = __fst_clifwrap::pyFstWriteOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::FstWriteOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyFstWriteOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyFstWriteOptions::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstWriteOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::FstWriteOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyFstWriteOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyFstWriteOptions::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstWriteOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::FstWriteOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyFstWriteOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyFstWriteOptions::wrapper*>(py)->cpp = ::clif::Instance<::fst::FstWriteOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::FstWriteOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyFstWriteOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyFstWriteOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::FstWriteOptions>(c);
  return py;
}

// KwsIndexFst to/from ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* cpp = __fst_clifwrap::pyKwsIndexFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>* c) {
  assert(c != nullptr);
  ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* cpp = __fst_clifwrap::pyKwsIndexFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__fst_clifwrap::pyKwsIndexFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>* c) {
  assert(c != nullptr);
  ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* cpp = __fst_clifwrap::pyKwsIndexFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__fst_clifwrap::pyKwsIndexFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert KwsIndexFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyKwsIndexFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyKwsIndexFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyKwsIndexFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyKwsIndexFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyKwsIndexFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyKwsIndexFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>(std::move(c));
  return py;
}

// LatticeFst to/from ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* cpp = __fst_clifwrap::pyLatticeFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* cpp = __fst_clifwrap::pyLatticeFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__fst_clifwrap::pyLatticeFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* cpp = __fst_clifwrap::pyLatticeFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__fst_clifwrap::pyLatticeFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert LatticeFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyLatticeFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyLatticeFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyLatticeFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyLatticeFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyLatticeFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyLatticeFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>(std::move(c));
  return py;
}

// LogFst to/from ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* cpp = __fst_clifwrap::pyLogFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* cpp = __fst_clifwrap::pyLogFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__fst_clifwrap::pyLogFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* cpp = __fst_clifwrap::pyLogFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__fst_clifwrap::pyLogFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert LogFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyLogFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyLogFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyLogFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyLogFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyLogFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyLogFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>(std::move(c));
  return py;
}

// StdFst to/from ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* cpp = __fst_clifwrap::pyStdFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* cpp = __fst_clifwrap::pyStdFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__fst_clifwrap::pyStdFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* cpp = __fst_clifwrap::pyStdFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__fst_clifwrap::pyStdFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert StdFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyStdFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyStdFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyStdFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyStdFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__fst_clifwrap::pyStdFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__fst_clifwrap::pyStdFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>(std::move(c));
  return py;
}

}  // namespace fst
