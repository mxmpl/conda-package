//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/matrix/kaldi-matrix.clif

#include <memory>
#include "clif/python/optional.h"
#include "matrix/kaldi-matrix.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::Matrix<double>` as DoubleMatrix
bool Clif_PyObjAs(PyObject* input, ::kaldi::Matrix<double>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::Matrix<double>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::Matrix<double>>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::Matrix<double>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::Matrix<double>>* output);
PyObject* Clif_PyObjFrom(::kaldi::Matrix<double>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::Matrix<double>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::Matrix<double>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::Matrix<double>&, py::PostConv);
// CLIF use `::kaldi::MatrixBase<double>` as DoubleMatrixBase
bool Clif_PyObjAs(PyObject* input, ::kaldi::MatrixBase<double>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::MatrixBase<double>>* output);
PyObject* Clif_PyObjFrom(::kaldi::MatrixBase<double>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::MatrixBase<double>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::MatrixBase<double>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::MatrixBase<double>&, py::PostConv) = delete;
// CLIF use `::kaldi::HtkHeader` as HtkHeader
bool Clif_PyObjAs(PyObject* input, ::kaldi::HtkHeader** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::HtkHeader>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::HtkHeader>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::HtkHeader* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::HtkHeader>* output);
PyObject* Clif_PyObjFrom(::kaldi::HtkHeader*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::HtkHeader>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::HtkHeader>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::HtkHeader&, py::PostConv);
// CLIF use `::kaldi::Matrix<float>` as Matrix
bool Clif_PyObjAs(PyObject* input, ::kaldi::Matrix<float>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::Matrix<float>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::Matrix<float>>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::Matrix<float>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::Matrix<float>>* output);
PyObject* Clif_PyObjFrom(::kaldi::Matrix<float>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::Matrix<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::Matrix<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::Matrix<float>&, py::PostConv);
// CLIF use `::kaldi::MatrixBase<float>` as MatrixBase
bool Clif_PyObjAs(PyObject* input, ::kaldi::MatrixBase<float>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::MatrixBase<float>>* output);
PyObject* Clif_PyObjFrom(::kaldi::MatrixBase<float>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::MatrixBase<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::MatrixBase<float>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::MatrixBase<float>&, py::PostConv) = delete;

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
// CLIF init_module else goto err;
