//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/matrix/sparse-matrix.clif

#include <memory>
#include "clif/python/optional.h"
#include "matrix/sparse-matrix.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::SparseMatrix<double>` as DoubleSparseMatrix
bool Clif_PyObjAs(PyObject* input, ::kaldi::SparseMatrix<double>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SparseMatrix<double>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SparseMatrix<double>>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::SparseMatrix<double>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::SparseMatrix<double>>* output);
PyObject* Clif_PyObjFrom(::kaldi::SparseMatrix<double>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SparseMatrix<double>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SparseMatrix<double>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SparseMatrix<double>&, py::PostConv);
// CLIF use `::kaldi::SparseVector<double>` as DoubleSparseVector
bool Clif_PyObjAs(PyObject* input, ::kaldi::SparseVector<double>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SparseVector<double>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SparseVector<double>>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::SparseVector<double>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::SparseVector<double>>* output);
PyObject* Clif_PyObjFrom(::kaldi::SparseVector<double>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SparseVector<double>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SparseVector<double>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SparseVector<double>&, py::PostConv);
// CLIF use `::kaldi::GeneralMatrix` as GeneralMatrix
bool Clif_PyObjAs(PyObject* input, ::kaldi::GeneralMatrix** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::GeneralMatrix>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::GeneralMatrix>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::GeneralMatrix* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::GeneralMatrix>* output);
PyObject* Clif_PyObjFrom(::kaldi::GeneralMatrix*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::GeneralMatrix>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::GeneralMatrix>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::GeneralMatrix&, py::PostConv);
// CLIF use `::kaldi::GeneralMatrixType` as GeneralMatrixType
bool Clif_PyObjAs(PyObject* input, ::kaldi::GeneralMatrixType* output);
PyObject* Clif_PyObjFrom(const ::kaldi::GeneralMatrixType&, py::PostConv);
// CLIF use `::kaldi::SparseMatrix<float>` as SparseMatrix
bool Clif_PyObjAs(PyObject* input, ::kaldi::SparseMatrix<float>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SparseMatrix<float>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SparseMatrix<float>>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::SparseMatrix<float>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::SparseMatrix<float>>* output);
PyObject* Clif_PyObjFrom(::kaldi::SparseMatrix<float>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SparseMatrix<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SparseMatrix<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SparseMatrix<float>&, py::PostConv);
// CLIF use `::kaldi::SparseVector<float>` as SparseVector
bool Clif_PyObjAs(PyObject* input, ::kaldi::SparseVector<float>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SparseVector<float>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SparseVector<float>>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::SparseVector<float>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::SparseVector<float>>* output);
PyObject* Clif_PyObjFrom(::kaldi::SparseVector<float>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SparseVector<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SparseVector<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SparseVector<float>&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_sparse_matrix")) Py_DECREF(m);
// CLIF init_module else goto err;
