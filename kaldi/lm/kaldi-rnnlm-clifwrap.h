//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/lm/kaldi-rnnlm.clif

#include <memory>
#include "clif/python/optional.h"
#include "lm/kaldi-rnnlm.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::KaldiRnnlmWrapper` as KaldiRnnlmWrapper
bool Clif_PyObjAs(PyObject* input, ::kaldi::KaldiRnnlmWrapper** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::KaldiRnnlmWrapper>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::KaldiRnnlmWrapper>* output);
PyObject* Clif_PyObjFrom(::kaldi::KaldiRnnlmWrapper*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::KaldiRnnlmWrapper>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::KaldiRnnlmWrapper>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::KaldiRnnlmWrapper*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::KaldiRnnlmWrapper&, py::PostConv) = delete;
// CLIF use `::kaldi::KaldiRnnlmWrapperOpts` as KaldiRnnlmWrapperOpts
bool Clif_PyObjAs(PyObject* input, ::kaldi::KaldiRnnlmWrapperOpts** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::KaldiRnnlmWrapperOpts>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::KaldiRnnlmWrapperOpts>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::KaldiRnnlmWrapperOpts* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::KaldiRnnlmWrapperOpts>* output);
PyObject* Clif_PyObjFrom(::kaldi::KaldiRnnlmWrapperOpts*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::KaldiRnnlmWrapperOpts>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::KaldiRnnlmWrapperOpts>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::KaldiRnnlmWrapperOpts&, py::PostConv);
// CLIF use `::kaldi::RnnlmDeterministicFst` as RnnlmDeterministicFst
bool Clif_PyObjAs(PyObject* input, ::kaldi::RnnlmDeterministicFst** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RnnlmDeterministicFst>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RnnlmDeterministicFst>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::RnnlmDeterministicFst* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::RnnlmDeterministicFst>* output);
PyObject* Clif_PyObjFrom(::kaldi::RnnlmDeterministicFst*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RnnlmDeterministicFst>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RnnlmDeterministicFst>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RnnlmDeterministicFst&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_kaldi_rnnlm")) Py_DECREF(m);
// CLIF init_module else goto err;
