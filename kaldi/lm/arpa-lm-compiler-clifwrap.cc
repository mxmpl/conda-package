//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/lm/arpa-lm-compiler.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "fstext/lattice-weight-clifwrap.h"
#include "fstext/vector-fst-clifwrap.h"
#include "fstext/symbol-table-clifwrap.h"
#include "lm/arpa-file-parser-clifwrap.h"
#include "arpa-lm-compiler-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __arpa__lm__compiler_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyArpaLmCompiler {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::ArpaLmCompiler> cpp;
};
static ::kaldi::ArpaLmCompiler* ThisPtr(PyObject*);

// __init__(options:ArpaParseOptions, sub_eps:int, symbols:SymbolTable)
static PyObject* wrapArpaLmCompiler_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("options"),
      C("sub_eps"),
      C("symbols"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:__init__", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::ArpaParseOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::ArpaParseOptions", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "int", a[1]);
  ::fst::SymbolTable * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::fst::SymbolTable *", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::ArpaLmCompiler>(*arg1, std::move(arg2), arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// fst() -> StdVectorFst
static PyObject* wrapFst_as_fst(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::ArpaLmCompiler* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Fst();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// mutable_fst() -> StdVectorFst
static PyObject* wrapMutableFst_as_mutable_fst(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::ArpaLmCompiler* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > > * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->MutableFst();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::kaldi::ArpaFileParser*
static PyObject* as_kaldi_ArpaFileParser(PyObject* self) {
  ::kaldi::ArpaFileParser* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::ArpaFileParser"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapArpaLmCompiler_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(options:ArpaParseOptions, sub_eps:int, symbols:SymbolTable)\n  Calls C++ function\n  void ::kaldi::ArpaLmCompiler::ArpaLmCompiler(::kaldi::ArpaParseOptions, int, ::fst::SymbolTable *)")},
  {C("fst"), (PyCFunction)wrapFst_as_fst, METH_NOARGS, C("fst() -> StdVectorFst\n\nReturns a copy of the FST compiled from the ARPA LM file.")},
  {C("mutable_fst"), (PyCFunction)wrapMutableFst_as_mutable_fst, METH_NOARGS, C("mutable_fst() -> StdVectorFst\n\nReturns the internal FST compiled from the ARPA LM file.")},
  {C("as_kaldi_ArpaFileParser"), (PyCFunction)as_kaldi_ArpaFileParser, METH_NOARGS, C("Upcast to ::kaldi::ArpaFileParser*")},
  {}
};

// ArpaLmCompiler __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ArpaLmCompiler __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ArpaLmCompiler __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_arpa_lm_compiler.ArpaLmCompiler",  // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "ARPA LM compiler.\n\nConstructs the ARPA LM compiler with the given options and the optional\nsymbol table. If symbol table is provided, then the ARPA file that will\nbe read should contain text n-grams, and the words are mapped to labels\nusing the table. bos_symbol and eos_symbol in the options structure must\nbe valid labels in the table, and so must be unk_symbol if provided. The\ntable is not owned by the compiler, but may be augmented, if oov_handling\nis set to `ArpaFileParser.OovHandling.ADD_TO_SYMBOLS`. If symbol table is\n``None``, the ARPA file that will be read should contain integer label\nn-grams, and oov_handling has no effect. bos_symbol and eos_symbol must\nbe valid labels still.\n\nArgs:\n  options (ArpaParseOptions): The options for parsing ARPA files.\n  sub_eps (int): The disambigation symbol to substitute with epsilon.\n    If set to 0, bos_symbol and eos_symbol are treated as real symbols.\n    Otherwise they are treated as epsilons.\n  symbols (SymbolTable): The symbol table.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapArpaLmCompiler_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::ArpaLmCompiler* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_ArpaLmCompiler"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::ArpaLmCompiler"));
      if (!PyErr_Occurred()) {
        ::kaldi::ArpaLmCompiler* c = static_cast<::kaldi::ArpaLmCompiler*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::ArpaLmCompiler*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyArpaLmCompiler


// Initialize module

bool Ready() {
  PyObject* base_cls = ImportFQName("kaldi.lm._arpa_file_parser.ArpaFileParser");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.lm._arpa_file_parser.ArpaFileParser is not a new style class inheriting from object.");
    return false;
  }
  pyArpaLmCompiler::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyArpaLmCompiler::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.lm._arpa_file_parser.ArpaFileParser is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyArpaLmCompiler::wrapper_Type) < 0) return false;
  Py_INCREF(&pyArpaLmCompiler::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_arpa_lm_compiler",  // module name
  "CLIF-generated module for lm/arpa-lm-compiler.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_lattice_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_vector_fst")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_symbol_table")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_arpa_file_parser")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "ArpaLmCompiler", reinterpret_cast<PyObject*>(&pyArpaLmCompiler::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __arpa__lm__compiler_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// ArpaLmCompiler to/from ::kaldi::ArpaLmCompiler conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::ArpaLmCompiler** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::ArpaLmCompiler* cpp = __arpa__lm__compiler_clifwrap::pyArpaLmCompiler::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::ArpaLmCompiler>* c) {
  assert(c != nullptr);
  ::kaldi::ArpaLmCompiler* cpp = __arpa__lm__compiler_clifwrap::pyArpaLmCompiler::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__arpa__lm__compiler_clifwrap::pyArpaLmCompiler::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::ArpaLmCompiler>* c) {
  assert(c != nullptr);
  ::kaldi::ArpaLmCompiler* cpp = __arpa__lm__compiler_clifwrap::pyArpaLmCompiler::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__arpa__lm__compiler_clifwrap::pyArpaLmCompiler::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ArpaLmCompiler instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::ArpaLmCompiler* c) {
  assert(c != nullptr);
  ::kaldi::ArpaLmCompiler* cpp = __arpa__lm__compiler_clifwrap::pyArpaLmCompiler::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::ArpaLmCompiler>* c) {
  assert(c != nullptr);
  ::kaldi::ArpaLmCompiler* cpp = __arpa__lm__compiler_clifwrap::pyArpaLmCompiler::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::ArpaLmCompiler* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__arpa__lm__compiler_clifwrap::pyArpaLmCompiler::wrapper_Type, NULL, NULL);
  reinterpret_cast<__arpa__lm__compiler_clifwrap::pyArpaLmCompiler::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ArpaLmCompiler>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::ArpaLmCompiler> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__arpa__lm__compiler_clifwrap::pyArpaLmCompiler::wrapper_Type, NULL, NULL);
  reinterpret_cast<__arpa__lm__compiler_clifwrap::pyArpaLmCompiler::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ArpaLmCompiler>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::ArpaLmCompiler> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__arpa__lm__compiler_clifwrap::pyArpaLmCompiler::wrapper_Type, NULL, NULL);
  reinterpret_cast<__arpa__lm__compiler_clifwrap::pyArpaLmCompiler::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ArpaLmCompiler>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::ArpaLmCompiler& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__arpa__lm__compiler_clifwrap::pyArpaLmCompiler::wrapper_Type, NULL, NULL);
  reinterpret_cast<__arpa__lm__compiler_clifwrap::pyArpaLmCompiler::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::ArpaLmCompiler>(c);
  return py;
}

}  // namespace kaldi
