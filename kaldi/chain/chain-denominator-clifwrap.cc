//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/chain/chain-denominator.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "chain/chain-training-clifwrap.h"
#include "chain/chain-den-graph-clifwrap.h"
#include "cudamatrix/cu-matrix-clifwrap.h"
#include "chain-denominator-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __chain__denominator_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyDenominatorComputation {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::chain::DenominatorComputation> cpp;
};
static ::kaldi::chain::DenominatorComputation* ThisPtr(PyObject*);

// __init__(opts:ChainTrainingOptions, den_graph:DenominatorGraph, num_sequences:int, nnet_output:CuMatrixBase)
static PyObject* wrapDenominatorComputation_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("opts"),
      C("den_graph"),
      C("num_sequences"),
      C("nnet_output"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:__init__", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::chain::ChainTrainingOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::chain::ChainTrainingOptions", a[0]);
  ::kaldi::chain::DenominatorGraph* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::chain::DenominatorGraph", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "int", a[2]);
  ::kaldi::CuMatrixBase<float>* arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "::kaldi::CuMatrixBase<float>", a[3]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::chain::DenominatorComputation>(*arg1, *arg2, std::move(arg3), *arg4);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// forward() -> float
static PyObject* wrapForward_as_forward(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::chain::DenominatorComputation* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Forward();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// backward(deriv_weight:float, nnet_output_deriv:CuMatrixBase) -> bool
static PyObject* wrapBackward_as_backward(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("deriv_weight"),
      C("nnet_output_deriv"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:backward", names, &a[0], &a[1])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("backward", names[0], "float", a[0]);
  ::kaldi::CuMatrixBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("backward", names[1], "::kaldi::CuMatrixBase<float> *", a[1]);
  // Call actual C++ method.
  ::kaldi::chain::DenominatorComputation* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Backward(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapDenominatorComputation_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(opts:ChainTrainingOptions, den_graph:DenominatorGraph, num_sequences:int, nnet_output:CuMatrixBase)\n\nConstructor.\n\nArgs:\n  opts (ChainTrainingOptions): Options\n  graph (DenominatorGraph): The HMM to use for denominator\n  num_sequences (int): Number of separate time sequences to work with\n  nnet_output (CuMatrix): The output of the neural network for this minibatch")},
  {C("forward"), (PyCFunction)wrapForward_as_forward, METH_NOARGS, C("forward() -> float\n  Calls C++ function\n  float ::kaldi::chain::DenominatorComputation::Forward()")},
  {C("backward"), (PyCFunction)wrapBackward_as_backward, METH_VARARGS | METH_KEYWORDS, C("backward(deriv_weight:float, nnet_output_deriv:CuMatrixBase) -> bool\n  Calls C++ function\n  bool ::kaldi::chain::DenominatorComputation::Backward(float, ::kaldi::CuMatrixBase<float> *)")},
  {}
};

// DenominatorComputation __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// DenominatorComputation __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// DenominatorComputation __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_chain_denominator.DenominatorComputation", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::chain::DenominatorComputation", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapDenominatorComputation_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::chain::DenominatorComputation* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_chain_DenominatorComputation"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::chain::DenominatorComputation"));
      if (!PyErr_Occurred()) {
        ::kaldi::chain::DenominatorComputation* c = static_cast<::kaldi::chain::DenominatorComputation*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::chain::DenominatorComputation*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyDenominatorComputation


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyDenominatorComputation::wrapper_Type) < 0) return false;
  Py_INCREF(&pyDenominatorComputation::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_chain_denominator",  // module name
  "CLIF-generated module for chain/chain-denominator.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_chain_training")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_chain_den_graph")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_cu_matrix")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "DenominatorComputation", reinterpret_cast<PyObject*>(&pyDenominatorComputation::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __chain__denominator_clifwrap

namespace kaldi { namespace chain {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// DenominatorComputation to/from ::kaldi::chain::DenominatorComputation conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::chain::DenominatorComputation** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::chain::DenominatorComputation* cpp = __chain__denominator_clifwrap::pyDenominatorComputation::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::chain::DenominatorComputation>* c) {
  assert(c != nullptr);
  ::kaldi::chain::DenominatorComputation* cpp = __chain__denominator_clifwrap::pyDenominatorComputation::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__chain__denominator_clifwrap::pyDenominatorComputation::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::chain::DenominatorComputation>* c) {
  assert(c != nullptr);
  ::kaldi::chain::DenominatorComputation* cpp = __chain__denominator_clifwrap::pyDenominatorComputation::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__chain__denominator_clifwrap::pyDenominatorComputation::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert DenominatorComputation instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::chain::DenominatorComputation* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__denominator_clifwrap::pyDenominatorComputation::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__denominator_clifwrap::pyDenominatorComputation::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::chain::DenominatorComputation>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::chain::DenominatorComputation> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__denominator_clifwrap::pyDenominatorComputation::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__denominator_clifwrap::pyDenominatorComputation::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::chain::DenominatorComputation>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::chain::DenominatorComputation> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__chain__denominator_clifwrap::pyDenominatorComputation::wrapper_Type, NULL, NULL);
  reinterpret_cast<__chain__denominator_clifwrap::pyDenominatorComputation::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::chain::DenominatorComputation>(std::move(c));
  return py;
}

} }  // namespace kaldi::chain
