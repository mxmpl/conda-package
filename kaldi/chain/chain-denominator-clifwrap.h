//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/chain/chain-denominator.clif

#include <memory>
#include "clif/python/optional.h"
#include "chain/chain-denominator.h"
#include "clif/python/postconv.h"

namespace kaldi { namespace chain {
using namespace ::clif;

// CLIF use `::kaldi::chain::DenominatorComputation` as DenominatorComputation
bool Clif_PyObjAs(PyObject* input, ::kaldi::chain::DenominatorComputation** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::chain::DenominatorComputation>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::chain::DenominatorComputation>* output);
PyObject* Clif_PyObjFrom(::kaldi::chain::DenominatorComputation*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::chain::DenominatorComputation>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::chain::DenominatorComputation>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::chain::DenominatorComputation*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::chain::DenominatorComputation&, py::PostConv) = delete;

} }  // namespace kaldi::chain

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_chain_denominator")) Py_DECREF(m);
// CLIF init_module else goto err;
