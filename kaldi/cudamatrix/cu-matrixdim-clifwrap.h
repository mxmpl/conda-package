//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/cudamatrix/cu-matrixdim.clif

#include <memory>
#include "clif/python/optional.h"
#include "cudamatrix/cu-matrixdim.h"
#include "clif/python/postconv.h"

namespace clif {

// CLIF use `::CuBlockMatrixData_` as CuBlockMatrixData
bool Clif_PyObjAs(PyObject* input, ::CuBlockMatrixData_** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::CuBlockMatrixData_>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::CuBlockMatrixData_>* output);
bool Clif_PyObjAs(PyObject* input, ::CuBlockMatrixData_* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::CuBlockMatrixData_>* output);
PyObject* Clif_PyObjFrom(::CuBlockMatrixData_*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::CuBlockMatrixData_>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::CuBlockMatrixData_>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::CuBlockMatrixData_&, py::PostConv);
// CLIF use `::MatrixElement<double>` as DoubleMatrixElement
bool Clif_PyObjAs(PyObject* input, ::MatrixElement<double>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::MatrixElement<double>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::MatrixElement<double>>* output);
bool Clif_PyObjAs(PyObject* input, ::MatrixElement<double>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::MatrixElement<double>>* output);
PyObject* Clif_PyObjFrom(::MatrixElement<double>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::MatrixElement<double>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::MatrixElement<double>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::MatrixElement<double>&, py::PostConv);
// CLIF use `::Int32Pair` as IntPair
bool Clif_PyObjAs(PyObject* input, ::Int32Pair** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::Int32Pair>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::Int32Pair>* output);
bool Clif_PyObjAs(PyObject* input, ::Int32Pair* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::Int32Pair>* output);
PyObject* Clif_PyObjFrom(::Int32Pair*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::Int32Pair>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::Int32Pair>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::Int32Pair&, py::PostConv);
// CLIF use `::MatrixDim_` as MatrixDim
bool Clif_PyObjAs(PyObject* input, ::MatrixDim_** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::MatrixDim_>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::MatrixDim_>* output);
bool Clif_PyObjAs(PyObject* input, ::MatrixDim_* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::MatrixDim_>* output);
PyObject* Clif_PyObjFrom(::MatrixDim_*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::MatrixDim_>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::MatrixDim_>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::MatrixDim_&, py::PostConv);
// CLIF use `::MatrixElement<float>` as MatrixElement
bool Clif_PyObjAs(PyObject* input, ::MatrixElement<float>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::MatrixElement<float>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::MatrixElement<float>>* output);
bool Clif_PyObjAs(PyObject* input, ::MatrixElement<float>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::MatrixElement<float>>* output);
PyObject* Clif_PyObjFrom(::MatrixElement<float>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::MatrixElement<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::MatrixElement<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::MatrixElement<float>&, py::PostConv);

}  // namespace clif

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_cu_matrixdim")) Py_DECREF(m);
// CLIF init_module else goto err;
