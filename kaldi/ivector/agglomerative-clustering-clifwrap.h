//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/ivector/agglomerative-clustering.clif

#include <memory>
#include "clif/python/optional.h"
#include "ivector/agglomerative-clustering.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::AgglomerativeClusterer` as AgglomerativeClusterer
bool Clif_PyObjAs(PyObject* input, ::kaldi::AgglomerativeClusterer** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::AgglomerativeClusterer>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::AgglomerativeClusterer>* output);
PyObject* Clif_PyObjFrom(::kaldi::AgglomerativeClusterer*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::AgglomerativeClusterer>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::AgglomerativeClusterer>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::AgglomerativeClusterer*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::AgglomerativeClusterer&, py::PostConv) = delete;
// CLIF use `::kaldi::AhcCluster` as AhcCluster
bool Clif_PyObjAs(PyObject* input, ::kaldi::AhcCluster** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::AhcCluster>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::AhcCluster>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::AhcCluster* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::AhcCluster>* output);
PyObject* Clif_PyObjFrom(::kaldi::AhcCluster*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::AhcCluster>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::AhcCluster>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::AhcCluster&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_agglomerative_clustering")) Py_DECREF(m);
// CLIF init_module else goto err;
