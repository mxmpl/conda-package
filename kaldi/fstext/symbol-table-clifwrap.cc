//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/fstext/symbol-table.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "symbol-table-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __symbol__table_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pySymbolTableTextOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::SymbolTableTextOptions> cpp;
};
static ::fst::SymbolTableTextOptions* ThisPtr(PyObject*);

static PyObject* get_allow_negative_labels(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->allow_negative_labels, {});
}

static int set_allow_negative_labels(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the allow_negative_labels attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->allow_negative_labels)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for allow_negative_labels:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_fst_field_separator(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->fst_field_separator, _1);
}

static int set_fst_field_separator(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the fst_field_separator attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->fst_field_separator)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for fst_field_separator:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// __init__(allow_negative_labels:bool=default)
static PyObject* wrapSymbolTableTextOptions_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("allow_negative_labels"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:__init__", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  bool arg1;
  if (nargs > 0) {
    if (!a[0]) arg1 = (bool)false;
    else if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "bool", a[0]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::SymbolTableTextOptions>(); break;
  case 1:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::SymbolTableTextOptions>(std::move(arg1)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("allow_negative_labels"), get_allow_negative_labels, set_allow_negative_labels, C("Allow negative labels? (Not recommended; may cause conflicts).")},
  {C("fst_field_separator"), get_fst_field_separator, set_fst_field_separator, C("Set of characters used as a separator between printed fields.")},
  {}
};

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapSymbolTableTextOptions_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(allow_negative_labels:bool=default)\n  Calls C++ function\n  void ::fst::SymbolTableTextOptions::SymbolTableTextOptions(bool)")},
  {}
};

// SymbolTableTextOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// SymbolTableTextOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// SymbolTableTextOptions __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_symbol_table.SymbolTableTextOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Options for reading symbol table from text file.\n\nSymbolTableTextOptions(allow_negative_labels=False):\n  Creates options for reading symbol table from text file.\n\nArgs:\n  allow_negative_labels (bool): Allow negative labels?", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapSymbolTableTextOptions_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::SymbolTableTextOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_SymbolTableTextOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::SymbolTableTextOptions"));
      if (!PyErr_Occurred()) {
        ::fst::SymbolTableTextOptions* c = static_cast<::fst::SymbolTableTextOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::SymbolTableTextOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pySymbolTableTextOptions

namespace pySymbolTable {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::SymbolTable> cpp;
};
static ::fst::SymbolTable* ThisPtr(PyObject*);

// @classmethod from_name(name:str) -> SymbolTable
static PyObject* wrapSymbolTable_as_from_name(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("name"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_name", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_name", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::fst::SymbolTable> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::fst::SymbolTable>(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod read_text(filename:str, opts:SymbolTableTextOptions=default) -> SymbolTable
static PyObject* wrapReadText_as_read_text(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2]{};
  char* names[] = {
      C("filename"),
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O|O:read_text", names, &a[0], &a[1])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 2; nargs > 1; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read_text", names[0], "::std::string", a[0]);
  ::fst::SymbolTableTextOptions* arg2;
  if (nargs > 1) {
    if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read_text", names[1], "::fst::SymbolTableTextOptions", a[1]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 1:
    ret0 = ::fst::SymbolTable::ReadText(std::move(arg1)); break;
  case 2:
    ret0 = ::fst::SymbolTable::ReadText(std::move(arg1), *arg2); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod read(filename:str) -> SymbolTable
static PyObject* wrapRead_as_read(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("filename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:read", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::SymbolTable::Read(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// copy() -> SymbolTable
static PyObject* wrapCopy_as_copy(PyObject* self) {
  // Call actual C++ method.
  ::fst::SymbolTable* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Copy();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// add_pair(symbol:str, key:int) -> int
static PyObject* wrapAddSymbol_as_add_pair(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("symbol"),
      C("key"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:add_pair", names, &a[0], &a[1])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add_pair", names[0], "::std::string", a[0]);
  long arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("add_pair", names[1], "long", a[1]);
  // Call actual C++ method.
  ::fst::SymbolTable* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->AddSymbol(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// add_symbol(symbol:str) -> int
static PyObject* wrapAddSymbol_as_add_symbol(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("symbol"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:add_symbol", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add_symbol", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::fst::SymbolTable* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->AddSymbol(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// add_table(table:SymbolTable)
static PyObject* wrapAddTable_as_add_table(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("table"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:add_table", names, &a[0])) return nullptr;
  ::fst::SymbolTable* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add_table", names[0], "::fst::SymbolTable", a[0]);
  // Call actual C++ method.
  ::fst::SymbolTable* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AddTable(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// remove_symbol(key:int)
static PyObject* wrapRemoveSymbol_as_remove_symbol(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("key"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:remove_symbol", names, &a[0])) return nullptr;
  long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("remove_symbol", names[0], "long", a[0]);
  // Call actual C++ method.
  ::fst::SymbolTable* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->RemoveSymbol(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// name() -> str
static PyObject* wrapName_as_name(PyObject* self) {
  // Call actual C++ method.
  ::fst::SymbolTable* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Name();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// set_name(new_name:str)
static PyObject* wrapSetName_as_set_name(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("new_name"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_name", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_name", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::fst::SymbolTable* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetName(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// checksum() -> str
static PyObject* wrapCheckSum_as_checksum(PyObject* self) {
  // Call actual C++ method.
  ::fst::SymbolTable* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->CheckSum();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// labeled_checksum() -> str
static PyObject* wrapLabeledCheckSum_as_labeled_checksum(PyObject* self) {
  // Call actual C++ method.
  ::fst::SymbolTable* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->LabeledCheckSum();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// write(filename:str) -> bool
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("filename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:write", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::fst::SymbolTable* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Write(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// write_text(filename:str) -> bool
static PyObject* wrapWriteText_as_write_text(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("filename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:write_text", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write_text", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::fst::SymbolTable* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->WriteText(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// find_symbol(key:int) -> str
static PyObject* wrapFind_as_find_symbol(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("key"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:find_symbol", names, &a[0])) return nullptr;
  long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("find_symbol", names[0], "long", a[0]);
  // Call actual C++ method.
  ::fst::SymbolTable* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Find(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// find_index(symbol:str) -> int
static PyObject* wrapFind_as_find_index(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("symbol"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:find_index", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("find_index", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::fst::SymbolTable* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Find(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// member_index(key:int) -> bool
static PyObject* wrapMember_as_member_index(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("key"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:member_index", names, &a[0])) return nullptr;
  long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("member_index", names[0], "long", a[0]);
  // Call actual C++ method.
  ::fst::SymbolTable* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Member(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// member_symbol(symbol:str) -> bool
static PyObject* wrapMember_as_member_symbol(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("symbol"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:member_symbol", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("member_symbol", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::fst::SymbolTable* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Member(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// available_key() -> int
static PyObject* wrapAvailableKey_as_available_key(PyObject* self) {
  // Call actual C++ method.
  ::fst::SymbolTable* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->AvailableKey();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_symbols() -> int
static PyObject* wrapNumSymbols_as_num_symbols(PyObject* self) {
  // Call actual C++ method.
  ::fst::SymbolTable* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumSymbols();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_nth_key(pos:int) -> int
static PyObject* wrapGetNthKey_as_get_nth_key(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("pos"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_nth_key", names, &a[0])) return nullptr;
  long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_nth_key", names[0], "long", a[0]);
  // Call actual C++ method.
  ::fst::SymbolTable* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetNthKey(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("from_name"), (PyCFunction)wrapSymbolTable_as_from_name, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_name(name:str) -> SymbolTable\n\nCreates a new SymbolTable with the given name.")},
  {C("read_text"), (PyCFunction)wrapReadText_as_read_text, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("read_text(filename:str, opts:SymbolTableTextOptions=default) -> SymbolTable\n\nReads symbol table from text file.\n\nThis class method creates a new SymbolTable.\n\nArgs:\n  filename: The string location of the input text file.\n  opts (SymbolTableTextOptions): The symbol table reading options.\n\nReturns:\n  A new SymbolTable instance.\n\nSee also: `SymbolTable.read`.")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("read(filename:str) -> SymbolTable\n\nReads symbol table from binary file.\n\nThis class method creates a new SymbolTable.\n\nArgs:\n  filename: The string location of the input binary file.\n\nReturns:\n  A new SymbolTable instance.\n\nSee also: `SymbolTable.read_text`.")},
  {C("copy"), (PyCFunction)wrapCopy_as_copy, METH_NOARGS, C("copy() -> SymbolTable\n\nReturns a copy of the symbol table.")},
  {C("add_pair"), (PyCFunction)wrapAddSymbol_as_add_pair, METH_VARARGS | METH_KEYWORDS, C("add_pair(symbol:str, key:int) -> int\n\nAdds a symbol with given key to the table and returns the index.\n\nThis method adds a (symbol, key) pair to the table. If symbol is\nalready in the table with a different key, then the return value\nwill be the already existing key. Otherwise, return value will be\nthe given key.\n\nArgs:\n  symbol: A symbol string.\n  key: A non-negative index for the symbol\n    (-1 is reserved for \"no symbol requested\").\n\nReturns:\n  The integer index of the new symbol.")},
  {C("add_symbol"), (PyCFunction)wrapAddSymbol_as_add_symbol, METH_VARARGS | METH_KEYWORDS, C("add_symbol(symbol:str) -> int\n\nAdds a symbol to the table and returns the index.\n\nThis method adds a symbol to the table. The associated value key is\nautomatically assigned by the symbol table.\n\nArgs:\n  symbol: A symbol string.\n\nReturns:\n  The integer index of the new symbol.")},
  {C("add_table"), (PyCFunction)wrapAddTable_as_add_table, METH_VARARGS | METH_KEYWORDS, C("add_table(table:SymbolTable)\n\nAdds another SymbolTable to this table.\n\nThis method merges another symbol table into the current table. All key\nvalues will be offset by the current available key.\n\nArgs:\n  syms: A SymbolTable to be merged with the current table.")},
  {C("remove_symbol"), (PyCFunction)wrapRemoveSymbol_as_remove_symbol, METH_VARARGS | METH_KEYWORDS, C("remove_symbol(key:int)\n\nRemoves the symbol with the given key.")},
  {C("name"), (PyCFunction)wrapName_as_name, METH_NOARGS, C("name() -> str\n\nReturns the name of the table.")},
  {C("set_name"), (PyCFunction)wrapSetName_as_set_name, METH_VARARGS | METH_KEYWORDS, C("set_name(new_name:str)\n\nSets the name of the table.")},
  {C("checksum"), (PyCFunction)wrapCheckSum_as_checksum, METH_NOARGS, C("checksum() -> str\n\nReturns the label-agnostic MD5 checksum for the table.")},
  {C("labeled_checksum"), (PyCFunction)wrapLabeledCheckSum_as_labeled_checksum, METH_NOARGS, C("labeled_checksum() -> str\n\nReturns the label-dependent MD5 checksum of the table.")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(filename:str) -> bool\n\nSerializes symbol table to a file.\n\nThis method writes the SymbolTable to a file in binary format.\n\nArgs:\n  filename: The string location of the output file.\n\nReturn:\n  True if write was successful, False otherwise.")},
  {C("write_text"), (PyCFunction)wrapWriteText_as_write_text, METH_VARARGS | METH_KEYWORDS, C("write_text(filename:str) -> bool\n\nWrites symbol table to text file.\n\nThis method writes the SymbolTable to a file in human-readable format.\n\nArgs:\n  filename: The string location of the output file.\n\nReturn:\n  True if write was successful, False otherwise.")},
  {C("find_symbol"), (PyCFunction)wrapFind_as_find_symbol, METH_VARARGS | METH_KEYWORDS, C("find_symbol(key:int) -> str\n\nGiven an index, finds the associated symbol.\n\nArgs:\n  key: An index.\n\nReturns:\n  The symbol associated with the index key. Empty string if index is\n  not found.")},
  {C("find_index"), (PyCFunction)wrapFind_as_find_index, METH_VARARGS | METH_KEYWORDS, C("find_index(symbol:str) -> int\n\nGiven a symbol, finds the associated index.\n\nArgs:\n  key: A symbol string.\n\nReturns:\n  The index associated with the symbol key. -1 if symbol is not found.")},
  {C("member_index"), (PyCFunction)wrapMember_as_member_index, METH_VARARGS | METH_KEYWORDS, C("member_index(key:int) -> bool\n\nGiven an index, returns whether it is found in the table.\n\nThis method returns a boolean indicating whether the given index is\npresent in the table. If one intends to perform subsequent lookup, it\nis much better to simply call the `find_index` method and check the\nreturn value.\n\nArgs:\n  key: An index.\n\nReturns:\n  Whether or not the key is present in the table.")},
  {C("member_symbol"), (PyCFunction)wrapMember_as_member_symbol, METH_VARARGS | METH_KEYWORDS, C("member_symbol(symbol:str) -> bool\n\nGiven a symbol, returns whether it is found in the table.\n\nThis method returns a boolean indicating whether the given symbol is\npresent in the table. If one intends to perform subsequent lookup, it\nis much better to simply call the `find_symbol` method and check the\nreturn value.\n\nArgs:\n  key: A symbol.\n\nReturns:\n  Whether or not the key is present in the table.")},
  {C("available_key"), (PyCFunction)wrapAvailableKey_as_available_key, METH_NOARGS, C("available_key() -> int\n\nReturns the current available key (i.e. highest key + 1).")},
  {C("num_symbols"), (PyCFunction)wrapNumSymbols_as_num_symbols, METH_NOARGS, C("num_symbols() -> int\n\nReturns the number of sysmbols in the table.")},
  {C("get_nth_key"), (PyCFunction)wrapGetNthKey_as_get_nth_key, METH_VARARGS | METH_KEYWORDS, C("get_nth_key(pos:int) -> int\n\nRetrieves the integer index of the n-th key in the table.\n\nArgs:\n  pos: The n-th key to retrieve.\n\nReturns:\n  The integer index of the n-th key or -1 if index is not found.")},
  {}
};

// SymbolTable __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// SymbolTable __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// SymbolTable __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_symbol_table.SymbolTable",         // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "Symbol table.\n\nSymbolTable():\n  Creates a new symbol table.\n\nThis class can be used to programmatically construct a SymbolTable in\nmemory, e.g. ::\n\n  import string\n\n  table = SymbolTable()\n  table.set_name(\"alphabet\")\n  table.add_symbol(\"<eps>\")\n  for symbol in string.ascii_lowercase:\n      table.add_symbol(symbol)\n  table.write_text(\"alphabet.syms\")\n\n.. autoconstant:: NO_SYMBOL", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "SymbolTable takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::SymbolTable>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::SymbolTable* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_SymbolTable"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::SymbolTable"));
      if (!PyErr_Occurred()) {
        ::fst::SymbolTable* c = static_cast<::fst::SymbolTable*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::SymbolTable*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pySymbolTable

namespace pySymbolTableIterator {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::SymbolTableIterator> cpp;
};
static ::fst::SymbolTableIterator* ThisPtr(PyObject*);

// __init__(table:SymbolTable)
static PyObject* wrapSymbolTableIterator_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("table"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::fst::SymbolTable* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::fst::SymbolTable", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::SymbolTableIterator>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// done() -> bool
static PyObject* wrapDone_as_done(PyObject* self) {
  // Call actual C++ method.
  ::fst::SymbolTableIterator* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Done();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// value() -> int
static PyObject* wrapValue_as_value(PyObject* self) {
  // Call actual C++ method.
  ::fst::SymbolTableIterator* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Value();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// symbol() -> str
static PyObject* wrapSymbol_as_symbol(PyObject* self) {
  // Call actual C++ method.
  ::fst::SymbolTableIterator* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Symbol();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// next()
static PyObject* wrapNext_as_next(PyObject* self) {
  // Call actual C++ method.
  ::fst::SymbolTableIterator* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Next();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// reset()
static PyObject* wrapReset_as_reset(PyObject* self) {
  // Call actual C++ method.
  ::fst::SymbolTableIterator* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Reset();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapSymbolTableIterator_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(table:SymbolTable)\n  Calls C++ function\n  void ::fst::SymbolTableIterator::SymbolTableIterator(::fst::SymbolTable)")},
  {C("done"), (PyCFunction)wrapDone_as_done, METH_NOARGS, C("done() -> bool\n\nIndicates whether the iterator is exhausted or not.\n\nThis method is provided for compatibility with the C++ API only;\nmost users should use the Pythonic API.\n\nReturns:\n  True if the iterator is exhausted, False otherwise.")},
  {C("value"), (PyCFunction)wrapValue_as_value, METH_NOARGS, C("value() -> int\n\nReturns the current integer index.\n\nThis method is provided for compatibility with the C++ API only;\nmost users should use the Pythonic API.\n\nReturns:\n  An integer index.")},
  {C("symbol"), (PyCFunction)wrapSymbol_as_symbol, METH_NOARGS, C("symbol() -> str\n\nReturns the current symbol string.\n\nThis method is provided for compatibility with the C++ API only;\nmost users should use the Pythonic API.\n\nReturns:\n  A symbol string.")},
  {C("next"), (PyCFunction)wrapNext_as_next, METH_NOARGS, C("next()\n\nAdvances the iterator.\n\nThis method is provided for compatibility with the C++ API only;\nmost users should use the Pythonic API.")},
  {C("reset"), (PyCFunction)wrapReset_as_reset, METH_NOARGS, C("reset()\n\nResets the iterator to the initial position.\n\nThis method is provided for compatibility with the C++ API only;\nmost users should use the Pythonic API.")},
  {}
};

// SymbolTableIterator __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// SymbolTableIterator __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// SymbolTableIterator __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_symbol_table.SymbolTableIterator", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::SymbolTableIterator", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapSymbolTableIterator_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::SymbolTableIterator* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_SymbolTableIterator"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::SymbolTableIterator"));
      if (!PyErr_Occurred()) {
        ::fst::SymbolTableIterator* c = static_cast<::fst::SymbolTableIterator*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::SymbolTableIterator*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pySymbolTableIterator

// relabel_symbol_table(table:SymbolTable, pairs:list<tuple<int, int>>) -> SymbolTable
static PyObject* wrapRelabelSymbolTable_as_relabel_symbol_table(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("table"),
      C("pairs"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:relabel_symbol_table", names, &a[0], &a[1])) return nullptr;
  ::fst::SymbolTable * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("relabel_symbol_table", names[0], "::fst::SymbolTable *", a[0]);
  ::std::vector< ::std::pair<int, int> > arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("relabel_symbol_table", names[1], "::std::vector< ::std::pair<int, int> >", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::RelabelSymbolTable(arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// compat_symbols(syms1:SymbolTable, syms2:SymbolTable, warning:bool=default) -> bool
static PyObject* wrapCompatSymbols_as_compat_symbols(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("syms1"),
      C("syms2"),
      C("warning"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:compat_symbols", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::SymbolTable * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compat_symbols", names[0], "::fst::SymbolTable *", a[0]);
  ::fst::SymbolTable * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("compat_symbols", names[1], "::fst::SymbolTable *", a[1]);
  bool arg3;
  if (nargs > 2) {
    if (!a[2]) arg3 = (bool)true;
    else if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("compat_symbols", names[2], "bool", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ret0 = ::fst::CompatSymbols(arg1, arg2); break;
  case 3:
    ret0 = ::fst::CompatSymbols(arg1, arg2, std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// serialize_symbol_table(table:SymbolTable) -> bytes
static PyObject* wrapSymbolTableToString_as_serialize_symbol_table(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("table"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:serialize_symbol_table", names, &a[0])) return nullptr;
  ::fst::SymbolTable * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("serialize_symbol_table", names[0], "::fst::SymbolTable *", a[0]);
  ::std::string ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::fst::SymbolTableToString(arg1, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// deserialize_symbol_table(str:bytes) -> SymbolTable
static PyObject* wrapStringToSymbolTable_as_deserialize_symbol_table(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("str"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:deserialize_symbol_table", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("deserialize_symbol_table", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::StringToSymbolTable(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("relabel_symbol_table"), (PyCFunction)wrapRelabelSymbolTable_as_relabel_symbol_table, METH_VARARGS | METH_KEYWORDS, C("relabel_symbol_table(table:SymbolTable, pairs:list<tuple<int, int>>) -> SymbolTable\n\nRelabels a symbol table as specified by the input list of pairs.\n\nThe new symbol table only retains symbols for which a relabeling is\nexplicitly specified.\n\nArgs:\n  table: A symbol table.\n  pairs: A list of (old label, new label) pairs.\n\nReturns:\n  A new symbol table.")},
  {C("compat_symbols"), (PyCFunction)wrapCompatSymbols_as_compat_symbols, METH_VARARGS | METH_KEYWORDS, C("compat_symbols(syms1:SymbolTable, syms2:SymbolTable, warning:bool=default) -> bool\n\nReturns true if the two symbol tables have equal checksums.\n\nPassing in ``None`` for either table always returns true.")},
  {C("serialize_symbol_table"), (PyCFunction)wrapSymbolTableToString_as_serialize_symbol_table, METH_VARARGS | METH_KEYWORDS, C("serialize_symbol_table(table:SymbolTable) -> bytes\n\nSerializes a symbol table.")},
  {C("deserialize_symbol_table"), (PyCFunction)wrapStringToSymbolTable_as_deserialize_symbol_table, METH_VARARGS | METH_KEYWORDS, C("deserialize_symbol_table(str:bytes) -> SymbolTable\n\nDeserializes a symbol table.")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pySymbolTableTextOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pySymbolTableTextOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pySymbolTable::wrapper_Type) < 0) return false;
  Py_INCREF(&pySymbolTable::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pySymbolTableIterator::wrapper_Type) < 0) return false;
  Py_INCREF(&pySymbolTableIterator::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_symbol_table",  // module name
  "CLIF-generated module for fst/symbol-table.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  PyEval_InitThreads();
  if (PyDict_SetItemString(pySymbolTable::wrapper_Type.tp_dict, "NO_SYMBOL", Clif_PyObjFrom(static_cast<::int64>(::fst::SymbolTable::kNoSymbol), {})) < 0) goto err;
  if (PyModule_AddObject(module, "SymbolTableTextOptions", reinterpret_cast<PyObject*>(&pySymbolTableTextOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "SymbolTable", reinterpret_cast<PyObject*>(&pySymbolTable::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "SymbolTableIterator", reinterpret_cast<PyObject*>(&pySymbolTableIterator::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __symbol__table_clifwrap

namespace fst {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// SymbolTable to/from ::fst::SymbolTable conversion

bool Clif_PyObjAs(PyObject* py, ::fst::SymbolTable** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::SymbolTable* cpp = __symbol__table_clifwrap::pySymbolTable::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::SymbolTable>* c) {
  assert(c != nullptr);
  ::fst::SymbolTable* cpp = __symbol__table_clifwrap::pySymbolTable::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__symbol__table_clifwrap::pySymbolTable::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::SymbolTable>* c) {
  assert(c != nullptr);
  ::fst::SymbolTable* cpp = __symbol__table_clifwrap::pySymbolTable::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__symbol__table_clifwrap::pySymbolTable::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert SymbolTable instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::SymbolTable* c) {
  assert(c != nullptr);
  ::fst::SymbolTable* cpp = __symbol__table_clifwrap::pySymbolTable::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::SymbolTable>* c) {
  assert(c != nullptr);
  ::fst::SymbolTable* cpp = __symbol__table_clifwrap::pySymbolTable::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::SymbolTable* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__symbol__table_clifwrap::pySymbolTable::wrapper_Type, NULL, NULL);
  reinterpret_cast<__symbol__table_clifwrap::pySymbolTable::wrapper*>(py)->cpp = ::clif::Instance<::fst::SymbolTable>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::SymbolTable> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__symbol__table_clifwrap::pySymbolTable::wrapper_Type, NULL, NULL);
  reinterpret_cast<__symbol__table_clifwrap::pySymbolTable::wrapper*>(py)->cpp = ::clif::Instance<::fst::SymbolTable>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::SymbolTable> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__symbol__table_clifwrap::pySymbolTable::wrapper_Type, NULL, NULL);
  reinterpret_cast<__symbol__table_clifwrap::pySymbolTable::wrapper*>(py)->cpp = ::clif::Instance<::fst::SymbolTable>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::SymbolTable& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__symbol__table_clifwrap::pySymbolTable::wrapper_Type, NULL, NULL);
  reinterpret_cast<__symbol__table_clifwrap::pySymbolTable::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::SymbolTable>(c);
  return py;
}

// SymbolTableIterator to/from ::fst::SymbolTableIterator conversion

bool Clif_PyObjAs(PyObject* py, ::fst::SymbolTableIterator** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::SymbolTableIterator* cpp = __symbol__table_clifwrap::pySymbolTableIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::SymbolTableIterator>* c) {
  assert(c != nullptr);
  ::fst::SymbolTableIterator* cpp = __symbol__table_clifwrap::pySymbolTableIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__symbol__table_clifwrap::pySymbolTableIterator::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::SymbolTableIterator>* c) {
  assert(c != nullptr);
  ::fst::SymbolTableIterator* cpp = __symbol__table_clifwrap::pySymbolTableIterator::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__symbol__table_clifwrap::pySymbolTableIterator::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert SymbolTableIterator instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::SymbolTableIterator* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__symbol__table_clifwrap::pySymbolTableIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__symbol__table_clifwrap::pySymbolTableIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::SymbolTableIterator>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::SymbolTableIterator> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__symbol__table_clifwrap::pySymbolTableIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__symbol__table_clifwrap::pySymbolTableIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::SymbolTableIterator>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::SymbolTableIterator> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__symbol__table_clifwrap::pySymbolTableIterator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__symbol__table_clifwrap::pySymbolTableIterator::wrapper*>(py)->cpp = ::clif::Instance<::fst::SymbolTableIterator>(std::move(c));
  return py;
}

// SymbolTableTextOptions to/from ::fst::SymbolTableTextOptions conversion

bool Clif_PyObjAs(PyObject* py, ::fst::SymbolTableTextOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::SymbolTableTextOptions* cpp = __symbol__table_clifwrap::pySymbolTableTextOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::SymbolTableTextOptions>* c) {
  assert(c != nullptr);
  ::fst::SymbolTableTextOptions* cpp = __symbol__table_clifwrap::pySymbolTableTextOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__symbol__table_clifwrap::pySymbolTableTextOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::SymbolTableTextOptions>* c) {
  assert(c != nullptr);
  ::fst::SymbolTableTextOptions* cpp = __symbol__table_clifwrap::pySymbolTableTextOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__symbol__table_clifwrap::pySymbolTableTextOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert SymbolTableTextOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::SymbolTableTextOptions* c) {
  assert(c != nullptr);
  ::fst::SymbolTableTextOptions* cpp = __symbol__table_clifwrap::pySymbolTableTextOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::SymbolTableTextOptions>* c) {
  assert(c != nullptr);
  ::fst::SymbolTableTextOptions* cpp = __symbol__table_clifwrap::pySymbolTableTextOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::SymbolTableTextOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__symbol__table_clifwrap::pySymbolTableTextOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__symbol__table_clifwrap::pySymbolTableTextOptions::wrapper*>(py)->cpp = ::clif::Instance<::fst::SymbolTableTextOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::SymbolTableTextOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__symbol__table_clifwrap::pySymbolTableTextOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__symbol__table_clifwrap::pySymbolTableTextOptions::wrapper*>(py)->cpp = ::clif::Instance<::fst::SymbolTableTextOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::SymbolTableTextOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__symbol__table_clifwrap::pySymbolTableTextOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__symbol__table_clifwrap::pySymbolTableTextOptions::wrapper*>(py)->cpp = ::clif::Instance<::fst::SymbolTableTextOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::SymbolTableTextOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__symbol__table_clifwrap::pySymbolTableTextOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__symbol__table_clifwrap::pySymbolTableTextOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::SymbolTableTextOptions>(c);
  return py;
}

}  // namespace fst
