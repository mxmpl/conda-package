//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/fstext/float-weight.clif

#include <memory>
#include "clif/python/optional.h"
#include "fstext/float-weight-ext.h"
#include "clif/python/postconv.h"

namespace clif {

// (w:LogWeight)->TropicalWeight
PyObject* Clif_PyObjFrom(std::function<::fst::TropicalWeightTpl<float>(const ::fst::LogWeightTpl<float> &)>, py::PostConv);
// (w:TropicalWeight)->LogWeight
PyObject* Clif_PyObjFrom(std::function<::fst::LogWeightTpl<float>(const ::fst::TropicalWeightTpl<float> &)>, py::PostConv);

}  // namespace clif

namespace fst {
using namespace ::clif;

// CLIF use `::fst::FloatLimits<float>` as FloatLimits
bool Clif_PyObjAs(PyObject* input, ::fst::FloatLimits<float>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::FloatLimits<float>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::FloatLimits<float>>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::FloatLimits<float>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::FloatLimits<float>>* output);
PyObject* Clif_PyObjFrom(::fst::FloatLimits<float>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::FloatLimits<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::FloatLimits<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::FloatLimits<float>&, py::PostConv);
// CLIF use `::fst::FloatWeightTpl<float>` as FloatWeight
bool Clif_PyObjAs(PyObject* input, ::fst::FloatWeightTpl<float>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::FloatWeightTpl<float>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::FloatWeightTpl<float>>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::FloatWeightTpl<float>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::FloatWeightTpl<float>>* output);
PyObject* Clif_PyObjFrom(::fst::FloatWeightTpl<float>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::FloatWeightTpl<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::FloatWeightTpl<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::FloatWeightTpl<float>&, py::PostConv);
// CLIF use `::fst::LogWeightTpl<float>` as LogWeight
bool Clif_PyObjAs(PyObject* input, ::fst::LogWeightTpl<float>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::LogWeightTpl<float>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::LogWeightTpl<float>>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::LogWeightTpl<float>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::LogWeightTpl<float>>* output);
PyObject* Clif_PyObjFrom(::fst::LogWeightTpl<float>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::LogWeightTpl<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::LogWeightTpl<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::LogWeightTpl<float>&, py::PostConv);
// CLIF use `::fst::TropicalWeightTpl<float>` as TropicalWeight
bool Clif_PyObjAs(PyObject* input, ::fst::TropicalWeightTpl<float>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::TropicalWeightTpl<float>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::TropicalWeightTpl<float>>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::TropicalWeightTpl<float>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::TropicalWeightTpl<float>>* output);
PyObject* Clif_PyObjFrom(::fst::TropicalWeightTpl<float>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::TropicalWeightTpl<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::TropicalWeightTpl<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::TropicalWeightTpl<float>&, py::PostConv);

}  // namespace fst

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_float_weight")) Py_DECREF(m);
// CLIF init_module else goto err;
