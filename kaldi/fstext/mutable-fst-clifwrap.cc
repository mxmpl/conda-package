//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/fstext/mutable-fst.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "fstext/float-weight-clifwrap.h"
#include "fstext/lattice-weight-clifwrap.h"
#include "fstext/lexicographic-weight-clifwrap.h"
#include "fstext/arc-clifwrap.h"
#include "fstext/symbol-table-clifwrap.h"
#include "mutable-fst-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __mutable__fst_clifwrap {
using namespace clif;
using namespace fst;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyStdMutableFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >> cpp;
};
static ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* ThisPtr(PyObject*);

// _set_start(state:int)
static PyObject* wrapSetStart_as__set_start(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_set_start", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_start", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetStart(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _set_final(state:int, weight:TropicalWeight)
static PyObject* wrapSetFinal_as__set_final(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("state"),
      C("weight"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_set_final", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_final", names[0], "int", a[0]);
  ::fst::TropicalWeightTpl<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_set_final", names[1], "::fst::TropicalWeightTpl<float>", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetFinal(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _set_properties(props:int, mask:int)
static PyObject* wrapSetProperties_as__set_properties(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("props"),
      C("mask"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_set_properties", names, &a[0], &a[1])) return nullptr;
  unsigned long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_properties", names[0], "unsigned long", a[0]);
  unsigned long arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_set_properties", names[1], "unsigned long", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetProperties(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _add_state() -> int
static PyObject* wrapAddState_as__add_state(PyObject* self) {
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->AddState();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _add_arc(state:int, arc:StdArc)
static PyObject* wrapAddArc_as__add_arc(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("state"),
      C("arc"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_add_arc", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_add_arc", names[0], "int", a[0]);
  ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_add_arc", names[1], "::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AddArc(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _delete_states(dstates:list<int>)
static PyObject* wrapDeleteStates_as__delete_states(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("dstates"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_delete_states", names, &a[0])) return nullptr;
  ::std::vector< ::fst::MutableFst<ArcTpl<TropicalWeightTpl<float> > >::StateId> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_delete_states", names[0], "::std::vector< ::fst::MutableFst<ArcTpl<TropicalWeightTpl<float> > >::StateId>", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DeleteStates(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _delete_all_states()
static PyObject* wrapDeleteStates_as__delete_all_states(PyObject* self) {
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DeleteStates();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _delete_arcs(state:int, n:int)
static PyObject* wrapDeleteArcs_as__delete_arcs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("state"),
      C("n"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_delete_arcs", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_delete_arcs", names[0], "int", a[0]);
  unsigned long arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_delete_arcs", names[1], "unsigned long", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DeleteArcs(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _delete_all_arcs(state:int)
static PyObject* wrapDeleteArcs_as__delete_all_arcs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_delete_all_arcs", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_delete_all_arcs", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DeleteArcs(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _reserve_states(n:int)
static PyObject* wrapReserveStates_as__reserve_states(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("n"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_reserve_states", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_reserve_states", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ReserveStates(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _reserve_arcs(state:int, n:int)
static PyObject* wrapReserveArcs_as__reserve_arcs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("state"),
      C("n"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_reserve_arcs", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_reserve_arcs", names[0], "int", a[0]);
  unsigned long arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_reserve_arcs", names[1], "unsigned long", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ReserveArcs(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _mutable_input_symbols() -> SymbolTable
static PyObject* wrapMutableInputSymbols_as__mutable_input_symbols(PyObject* self) {
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->MutableInputSymbols();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _mutable_output_symbols() -> SymbolTable
static PyObject* wrapMutableOutputSymbols_as__mutable_output_symbols(PyObject* self) {
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->MutableOutputSymbols();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _set_input_symbols(isyms:SymbolTable)
static PyObject* wrapSetInputSymbols_as__set_input_symbols(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("isyms"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_set_input_symbols", names, &a[0])) return nullptr;
  ::fst::SymbolTable * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_input_symbols", names[0], "::fst::SymbolTable *", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetInputSymbols(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _set_output_symbols(osyms:SymbolTable)
static PyObject* wrapSetOutputSymbols_as__set_output_symbols(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("osyms"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_set_output_symbols", names, &a[0])) return nullptr;
  ::fst::SymbolTable * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_output_symbols", names[0], "::fst::SymbolTable *", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetOutputSymbols(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*
static PyObject* as_fst_ExpandedFst__fst_ArcTpl__fst_TropicalWeightTpl_float(PyObject* self) {
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >"), nullptr);
}

// Implicit cast this as ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*
static PyObject* as_fst_Fst__fst_ArcTpl__fst_TropicalWeightTpl_float(PyObject* self) {
  ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("_set_start"), (PyCFunction)wrapSetStart_as__set_start, METH_VARARGS | METH_KEYWORDS, C("_set_start(state:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::SetStart(int)")},
  {C("_set_final"), (PyCFunction)wrapSetFinal_as__set_final, METH_VARARGS | METH_KEYWORDS, C("_set_final(state:int, weight:TropicalWeight)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::SetFinal(int, ::fst::TropicalWeightTpl<float>)")},
  {C("_set_properties"), (PyCFunction)wrapSetProperties_as__set_properties, METH_VARARGS | METH_KEYWORDS, C("_set_properties(props:int, mask:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::SetProperties(unsigned long, unsigned long)")},
  {C("_add_state"), (PyCFunction)wrapAddState_as__add_state, METH_NOARGS, C("_add_state() -> int\n  Calls C++ function\n  int ::fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::AddState()")},
  {C("_add_arc"), (PyCFunction)wrapAddArc_as__add_arc, METH_VARARGS | METH_KEYWORDS, C("_add_arc(state:int, arc:StdArc)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::AddArc(int, ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >)")},
  {C("_delete_states"), (PyCFunction)wrapDeleteStates_as__delete_states, METH_VARARGS | METH_KEYWORDS, C("_delete_states(dstates:list<int>)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::DeleteStates(::std::vector< ::fst::MutableFst<ArcTpl<TropicalWeightTpl<float> > >::StateId>)")},
  {C("_delete_all_states"), (PyCFunction)wrapDeleteStates_as__delete_all_states, METH_NOARGS, C("_delete_all_states()\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::DeleteStates()")},
  {C("_delete_arcs"), (PyCFunction)wrapDeleteArcs_as__delete_arcs, METH_VARARGS | METH_KEYWORDS, C("_delete_arcs(state:int, n:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::DeleteArcs(int, unsigned long)")},
  {C("_delete_all_arcs"), (PyCFunction)wrapDeleteArcs_as__delete_all_arcs, METH_VARARGS | METH_KEYWORDS, C("_delete_all_arcs(state:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::DeleteArcs(int)")},
  {C("_reserve_states"), (PyCFunction)wrapReserveStates_as__reserve_states, METH_VARARGS | METH_KEYWORDS, C("_reserve_states(n:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::ReserveStates(int)")},
  {C("_reserve_arcs"), (PyCFunction)wrapReserveArcs_as__reserve_arcs, METH_VARARGS | METH_KEYWORDS, C("_reserve_arcs(state:int, n:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::ReserveArcs(int, unsigned long)")},
  {C("_mutable_input_symbols"), (PyCFunction)wrapMutableInputSymbols_as__mutable_input_symbols, METH_NOARGS, C("_mutable_input_symbols() -> SymbolTable\n  Calls C++ function\n  ::fst::SymbolTable * ::fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::MutableInputSymbols()")},
  {C("_mutable_output_symbols"), (PyCFunction)wrapMutableOutputSymbols_as__mutable_output_symbols, METH_NOARGS, C("_mutable_output_symbols() -> SymbolTable\n  Calls C++ function\n  ::fst::SymbolTable * ::fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::MutableOutputSymbols()")},
  {C("_set_input_symbols"), (PyCFunction)wrapSetInputSymbols_as__set_input_symbols, METH_VARARGS | METH_KEYWORDS, C("_set_input_symbols(isyms:SymbolTable)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::SetInputSymbols(::fst::SymbolTable *)")},
  {C("_set_output_symbols"), (PyCFunction)wrapSetOutputSymbols_as__set_output_symbols, METH_VARARGS | METH_KEYWORDS, C("_set_output_symbols(osyms:SymbolTable)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float> > >::SetOutputSymbols(::fst::SymbolTable *)")},
  {C("as_fst_ExpandedFst__fst_ArcTpl__fst_TropicalWeightTpl_float"), (PyCFunction)as_fst_ExpandedFst__fst_ArcTpl__fst_TropicalWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*")},
  {C("as_fst_Fst__fst_ArcTpl__fst_TropicalWeightTpl_float"), (PyCFunction)as_fst_Fst__fst_ArcTpl__fst_TropicalWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::Fst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*")},
  {}
};

// StdMutableFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// StdMutableFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_mutable_fst.StdMutableFst",        // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_MutableFst__fst_ArcTpl__fst_TropicalWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >"));
      if (!PyErr_Occurred()) {
        ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c = static_cast<::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyStdMutableFst

namespace pyLogMutableFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >> cpp;
};
static ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* ThisPtr(PyObject*);

// _set_start(state:int)
static PyObject* wrapSetStart_as__set_start(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_set_start", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_start", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetStart(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _set_final(state:int, weight:LogWeight)
static PyObject* wrapSetFinal_as__set_final(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("state"),
      C("weight"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_set_final", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_final", names[0], "int", a[0]);
  ::fst::LogWeightTpl<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_set_final", names[1], "::fst::LogWeightTpl<float>", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetFinal(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _set_properties(props:int, mask:int)
static PyObject* wrapSetProperties_as__set_properties(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("props"),
      C("mask"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_set_properties", names, &a[0], &a[1])) return nullptr;
  unsigned long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_properties", names[0], "unsigned long", a[0]);
  unsigned long arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_set_properties", names[1], "unsigned long", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetProperties(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _add_state() -> int
static PyObject* wrapAddState_as__add_state(PyObject* self) {
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->AddState();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _add_arc(state:int, arc:LogArc)
static PyObject* wrapAddArc_as__add_arc(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("state"),
      C("arc"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_add_arc", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_add_arc", names[0], "int", a[0]);
  ::fst::ArcTpl< ::fst::LogWeightTpl<float> >* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_add_arc", names[1], "::fst::ArcTpl< ::fst::LogWeightTpl<float> >", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AddArc(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _delete_states(dstates:list<int>)
static PyObject* wrapDeleteStates_as__delete_states(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("dstates"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_delete_states", names, &a[0])) return nullptr;
  ::std::vector< ::fst::MutableFst<ArcTpl<LogWeightTpl<float> > >::StateId> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_delete_states", names[0], "::std::vector< ::fst::MutableFst<ArcTpl<LogWeightTpl<float> > >::StateId>", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DeleteStates(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _delete_all_states()
static PyObject* wrapDeleteStates_as__delete_all_states(PyObject* self) {
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DeleteStates();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _delete_arcs(state:int, n:int)
static PyObject* wrapDeleteArcs_as__delete_arcs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("state"),
      C("n"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_delete_arcs", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_delete_arcs", names[0], "int", a[0]);
  unsigned long arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_delete_arcs", names[1], "unsigned long", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DeleteArcs(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _delete_all_arcs(state:int)
static PyObject* wrapDeleteArcs_as__delete_all_arcs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_delete_all_arcs", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_delete_all_arcs", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DeleteArcs(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _reserve_states(n:int)
static PyObject* wrapReserveStates_as__reserve_states(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("n"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_reserve_states", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_reserve_states", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ReserveStates(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _reserve_arcs(state:int, n:int)
static PyObject* wrapReserveArcs_as__reserve_arcs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("state"),
      C("n"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_reserve_arcs", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_reserve_arcs", names[0], "int", a[0]);
  unsigned long arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_reserve_arcs", names[1], "unsigned long", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ReserveArcs(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _mutable_input_symbols() -> SymbolTable
static PyObject* wrapMutableInputSymbols_as__mutable_input_symbols(PyObject* self) {
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->MutableInputSymbols();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _mutable_output_symbols() -> SymbolTable
static PyObject* wrapMutableOutputSymbols_as__mutable_output_symbols(PyObject* self) {
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->MutableOutputSymbols();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _set_input_symbols(isyms:SymbolTable)
static PyObject* wrapSetInputSymbols_as__set_input_symbols(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("isyms"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_set_input_symbols", names, &a[0])) return nullptr;
  ::fst::SymbolTable * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_input_symbols", names[0], "::fst::SymbolTable *", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetInputSymbols(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _set_output_symbols(osyms:SymbolTable)
static PyObject* wrapSetOutputSymbols_as__set_output_symbols(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("osyms"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_set_output_symbols", names, &a[0])) return nullptr;
  ::fst::SymbolTable * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_output_symbols", names[0], "::fst::SymbolTable *", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetOutputSymbols(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*
static PyObject* as_fst_ExpandedFst__fst_ArcTpl__fst_LogWeightTpl_float(PyObject* self) {
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >"), nullptr);
}

// Implicit cast this as ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*
static PyObject* as_fst_Fst__fst_ArcTpl__fst_LogWeightTpl_float(PyObject* self) {
  ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("_set_start"), (PyCFunction)wrapSetStart_as__set_start, METH_VARARGS | METH_KEYWORDS, C("_set_start(state:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float> > >::SetStart(int)")},
  {C("_set_final"), (PyCFunction)wrapSetFinal_as__set_final, METH_VARARGS | METH_KEYWORDS, C("_set_final(state:int, weight:LogWeight)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float> > >::SetFinal(int, ::fst::LogWeightTpl<float>)")},
  {C("_set_properties"), (PyCFunction)wrapSetProperties_as__set_properties, METH_VARARGS | METH_KEYWORDS, C("_set_properties(props:int, mask:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float> > >::SetProperties(unsigned long, unsigned long)")},
  {C("_add_state"), (PyCFunction)wrapAddState_as__add_state, METH_NOARGS, C("_add_state() -> int\n  Calls C++ function\n  int ::fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float> > >::AddState()")},
  {C("_add_arc"), (PyCFunction)wrapAddArc_as__add_arc, METH_VARARGS | METH_KEYWORDS, C("_add_arc(state:int, arc:LogArc)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float> > >::AddArc(int, ::fst::ArcTpl< ::fst::LogWeightTpl<float> >)")},
  {C("_delete_states"), (PyCFunction)wrapDeleteStates_as__delete_states, METH_VARARGS | METH_KEYWORDS, C("_delete_states(dstates:list<int>)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float> > >::DeleteStates(::std::vector< ::fst::MutableFst<ArcTpl<LogWeightTpl<float> > >::StateId>)")},
  {C("_delete_all_states"), (PyCFunction)wrapDeleteStates_as__delete_all_states, METH_NOARGS, C("_delete_all_states()\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float> > >::DeleteStates()")},
  {C("_delete_arcs"), (PyCFunction)wrapDeleteArcs_as__delete_arcs, METH_VARARGS | METH_KEYWORDS, C("_delete_arcs(state:int, n:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float> > >::DeleteArcs(int, unsigned long)")},
  {C("_delete_all_arcs"), (PyCFunction)wrapDeleteArcs_as__delete_all_arcs, METH_VARARGS | METH_KEYWORDS, C("_delete_all_arcs(state:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float> > >::DeleteArcs(int)")},
  {C("_reserve_states"), (PyCFunction)wrapReserveStates_as__reserve_states, METH_VARARGS | METH_KEYWORDS, C("_reserve_states(n:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float> > >::ReserveStates(int)")},
  {C("_reserve_arcs"), (PyCFunction)wrapReserveArcs_as__reserve_arcs, METH_VARARGS | METH_KEYWORDS, C("_reserve_arcs(state:int, n:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float> > >::ReserveArcs(int, unsigned long)")},
  {C("_mutable_input_symbols"), (PyCFunction)wrapMutableInputSymbols_as__mutable_input_symbols, METH_NOARGS, C("_mutable_input_symbols() -> SymbolTable\n  Calls C++ function\n  ::fst::SymbolTable * ::fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float> > >::MutableInputSymbols()")},
  {C("_mutable_output_symbols"), (PyCFunction)wrapMutableOutputSymbols_as__mutable_output_symbols, METH_NOARGS, C("_mutable_output_symbols() -> SymbolTable\n  Calls C++ function\n  ::fst::SymbolTable * ::fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float> > >::MutableOutputSymbols()")},
  {C("_set_input_symbols"), (PyCFunction)wrapSetInputSymbols_as__set_input_symbols, METH_VARARGS | METH_KEYWORDS, C("_set_input_symbols(isyms:SymbolTable)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float> > >::SetInputSymbols(::fst::SymbolTable *)")},
  {C("_set_output_symbols"), (PyCFunction)wrapSetOutputSymbols_as__set_output_symbols, METH_VARARGS | METH_KEYWORDS, C("_set_output_symbols(osyms:SymbolTable)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float> > >::SetOutputSymbols(::fst::SymbolTable *)")},
  {C("as_fst_ExpandedFst__fst_ArcTpl__fst_LogWeightTpl_float"), (PyCFunction)as_fst_ExpandedFst__fst_ArcTpl__fst_LogWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*")},
  {C("as_fst_Fst__fst_ArcTpl__fst_LogWeightTpl_float"), (PyCFunction)as_fst_Fst__fst_ArcTpl__fst_LogWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::Fst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*")},
  {}
};

// LogMutableFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// LogMutableFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_mutable_fst.LogMutableFst",        // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_MutableFst__fst_ArcTpl__fst_LogWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >"));
      if (!PyErr_Occurred()) {
        ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c = static_cast<::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyLogMutableFst

namespace pyLatticeMutableFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >> cpp;
};
static ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* ThisPtr(PyObject*);

// _set_start(state:int)
static PyObject* wrapSetStart_as__set_start(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_set_start", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_start", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetStart(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _set_final(state:int, weight:LatticeWeight)
static PyObject* wrapSetFinal_as__set_final(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("state"),
      C("weight"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_set_final", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_final", names[0], "int", a[0]);
  ::fst::LatticeWeightTpl<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_set_final", names[1], "::fst::LatticeWeightTpl<float>", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetFinal(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _set_properties(props:int, mask:int)
static PyObject* wrapSetProperties_as__set_properties(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("props"),
      C("mask"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_set_properties", names, &a[0], &a[1])) return nullptr;
  unsigned long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_properties", names[0], "unsigned long", a[0]);
  unsigned long arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_set_properties", names[1], "unsigned long", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetProperties(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _add_state() -> int
static PyObject* wrapAddState_as__add_state(PyObject* self) {
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->AddState();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _add_arc(state:int, arc:LatticeArc)
static PyObject* wrapAddArc_as__add_arc(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("state"),
      C("arc"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_add_arc", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_add_arc", names[0], "int", a[0]);
  ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_add_arc", names[1], "::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AddArc(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _delete_states(dstates:list<int>)
static PyObject* wrapDeleteStates_as__delete_states(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("dstates"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_delete_states", names, &a[0])) return nullptr;
  ::std::vector< ::fst::MutableFst<ArcTpl<LatticeWeightTpl<float> > >::StateId> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_delete_states", names[0], "::std::vector< ::fst::MutableFst<ArcTpl<LatticeWeightTpl<float> > >::StateId>", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DeleteStates(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _delete_all_states()
static PyObject* wrapDeleteStates_as__delete_all_states(PyObject* self) {
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DeleteStates();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _delete_arcs(state:int, n:int)
static PyObject* wrapDeleteArcs_as__delete_arcs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("state"),
      C("n"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_delete_arcs", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_delete_arcs", names[0], "int", a[0]);
  unsigned long arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_delete_arcs", names[1], "unsigned long", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DeleteArcs(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _delete_all_arcs(state:int)
static PyObject* wrapDeleteArcs_as__delete_all_arcs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_delete_all_arcs", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_delete_all_arcs", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DeleteArcs(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _reserve_states(n:int)
static PyObject* wrapReserveStates_as__reserve_states(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("n"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_reserve_states", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_reserve_states", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ReserveStates(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _reserve_arcs(state:int, n:int)
static PyObject* wrapReserveArcs_as__reserve_arcs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("state"),
      C("n"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_reserve_arcs", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_reserve_arcs", names[0], "int", a[0]);
  unsigned long arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_reserve_arcs", names[1], "unsigned long", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ReserveArcs(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _mutable_input_symbols() -> SymbolTable
static PyObject* wrapMutableInputSymbols_as__mutable_input_symbols(PyObject* self) {
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->MutableInputSymbols();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _mutable_output_symbols() -> SymbolTable
static PyObject* wrapMutableOutputSymbols_as__mutable_output_symbols(PyObject* self) {
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->MutableOutputSymbols();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _set_input_symbols(isyms:SymbolTable)
static PyObject* wrapSetInputSymbols_as__set_input_symbols(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("isyms"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_set_input_symbols", names, &a[0])) return nullptr;
  ::fst::SymbolTable * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_input_symbols", names[0], "::fst::SymbolTable *", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetInputSymbols(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _set_output_symbols(osyms:SymbolTable)
static PyObject* wrapSetOutputSymbols_as__set_output_symbols(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("osyms"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_set_output_symbols", names, &a[0])) return nullptr;
  ::fst::SymbolTable * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_output_symbols", names[0], "::fst::SymbolTable *", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetOutputSymbols(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*
static PyObject* as_fst_ExpandedFst__fst_ArcTpl__fst_LatticeWeightTpl_float(PyObject* self) {
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >"), nullptr);
}

// Implicit cast this as ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*
static PyObject* as_fst_Fst__fst_ArcTpl__fst_LatticeWeightTpl_float(PyObject* self) {
  ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("_set_start"), (PyCFunction)wrapSetStart_as__set_start, METH_VARARGS | METH_KEYWORDS, C("_set_start(state:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::SetStart(int)")},
  {C("_set_final"), (PyCFunction)wrapSetFinal_as__set_final, METH_VARARGS | METH_KEYWORDS, C("_set_final(state:int, weight:LatticeWeight)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::SetFinal(int, ::fst::LatticeWeightTpl<float>)")},
  {C("_set_properties"), (PyCFunction)wrapSetProperties_as__set_properties, METH_VARARGS | METH_KEYWORDS, C("_set_properties(props:int, mask:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::SetProperties(unsigned long, unsigned long)")},
  {C("_add_state"), (PyCFunction)wrapAddState_as__add_state, METH_NOARGS, C("_add_state() -> int\n  Calls C++ function\n  int ::fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::AddState()")},
  {C("_add_arc"), (PyCFunction)wrapAddArc_as__add_arc, METH_VARARGS | METH_KEYWORDS, C("_add_arc(state:int, arc:LatticeArc)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::AddArc(int, ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >)")},
  {C("_delete_states"), (PyCFunction)wrapDeleteStates_as__delete_states, METH_VARARGS | METH_KEYWORDS, C("_delete_states(dstates:list<int>)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::DeleteStates(::std::vector< ::fst::MutableFst<ArcTpl<LatticeWeightTpl<float> > >::StateId>)")},
  {C("_delete_all_states"), (PyCFunction)wrapDeleteStates_as__delete_all_states, METH_NOARGS, C("_delete_all_states()\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::DeleteStates()")},
  {C("_delete_arcs"), (PyCFunction)wrapDeleteArcs_as__delete_arcs, METH_VARARGS | METH_KEYWORDS, C("_delete_arcs(state:int, n:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::DeleteArcs(int, unsigned long)")},
  {C("_delete_all_arcs"), (PyCFunction)wrapDeleteArcs_as__delete_all_arcs, METH_VARARGS | METH_KEYWORDS, C("_delete_all_arcs(state:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::DeleteArcs(int)")},
  {C("_reserve_states"), (PyCFunction)wrapReserveStates_as__reserve_states, METH_VARARGS | METH_KEYWORDS, C("_reserve_states(n:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::ReserveStates(int)")},
  {C("_reserve_arcs"), (PyCFunction)wrapReserveArcs_as__reserve_arcs, METH_VARARGS | METH_KEYWORDS, C("_reserve_arcs(state:int, n:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::ReserveArcs(int, unsigned long)")},
  {C("_mutable_input_symbols"), (PyCFunction)wrapMutableInputSymbols_as__mutable_input_symbols, METH_NOARGS, C("_mutable_input_symbols() -> SymbolTable\n  Calls C++ function\n  ::fst::SymbolTable * ::fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::MutableInputSymbols()")},
  {C("_mutable_output_symbols"), (PyCFunction)wrapMutableOutputSymbols_as__mutable_output_symbols, METH_NOARGS, C("_mutable_output_symbols() -> SymbolTable\n  Calls C++ function\n  ::fst::SymbolTable * ::fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::MutableOutputSymbols()")},
  {C("_set_input_symbols"), (PyCFunction)wrapSetInputSymbols_as__set_input_symbols, METH_VARARGS | METH_KEYWORDS, C("_set_input_symbols(isyms:SymbolTable)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::SetInputSymbols(::fst::SymbolTable *)")},
  {C("_set_output_symbols"), (PyCFunction)wrapSetOutputSymbols_as__set_output_symbols, METH_VARARGS | METH_KEYWORDS, C("_set_output_symbols(osyms:SymbolTable)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float> > >::SetOutputSymbols(::fst::SymbolTable *)")},
  {C("as_fst_ExpandedFst__fst_ArcTpl__fst_LatticeWeightTpl_float"), (PyCFunction)as_fst_ExpandedFst__fst_ArcTpl__fst_LatticeWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*")},
  {C("as_fst_Fst__fst_ArcTpl__fst_LatticeWeightTpl_float"), (PyCFunction)as_fst_Fst__fst_ArcTpl__fst_LatticeWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::Fst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*")},
  {}
};

// LatticeMutableFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// LatticeMutableFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_mutable_fst.LatticeMutableFst",    // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_MutableFst__fst_ArcTpl__fst_LatticeWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >"));
      if (!PyErr_Occurred()) {
        ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c = static_cast<::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyLatticeMutableFst

namespace pyCompactLatticeMutableFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >> cpp;
};
static ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* ThisPtr(PyObject*);

// _set_start(state:int)
static PyObject* wrapSetStart_as__set_start(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_set_start", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_start", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetStart(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _set_final(state:int, weight:CompactLatticeWeight)
static PyObject* wrapSetFinal_as__set_final(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("state"),
      C("weight"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_set_final", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_final", names[0], "int", a[0]);
  ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_set_final", names[1], "::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetFinal(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _set_properties(props:int, mask:int)
static PyObject* wrapSetProperties_as__set_properties(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("props"),
      C("mask"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_set_properties", names, &a[0], &a[1])) return nullptr;
  unsigned long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_properties", names[0], "unsigned long", a[0]);
  unsigned long arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_set_properties", names[1], "unsigned long", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetProperties(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _add_state() -> int
static PyObject* wrapAddState_as__add_state(PyObject* self) {
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->AddState();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _add_arc(state:int, arc:CompactLatticeArc)
static PyObject* wrapAddArc_as__add_arc(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("state"),
      C("arc"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_add_arc", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_add_arc", names[0], "int", a[0]);
  ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_add_arc", names[1], "::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AddArc(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _delete_states(dstates:list<int>)
static PyObject* wrapDeleteStates_as__delete_states(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("dstates"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_delete_states", names, &a[0])) return nullptr;
  ::std::vector< ::fst::MutableFst<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>, int> > >::StateId> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_delete_states", names[0], "::std::vector< ::fst::MutableFst<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>, int> > >::StateId>", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DeleteStates(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _delete_all_states()
static PyObject* wrapDeleteStates_as__delete_all_states(PyObject* self) {
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DeleteStates();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _delete_arcs(state:int, n:int)
static PyObject* wrapDeleteArcs_as__delete_arcs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("state"),
      C("n"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_delete_arcs", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_delete_arcs", names[0], "int", a[0]);
  unsigned long arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_delete_arcs", names[1], "unsigned long", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DeleteArcs(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _delete_all_arcs(state:int)
static PyObject* wrapDeleteArcs_as__delete_all_arcs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_delete_all_arcs", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_delete_all_arcs", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DeleteArcs(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _reserve_states(n:int)
static PyObject* wrapReserveStates_as__reserve_states(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("n"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_reserve_states", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_reserve_states", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ReserveStates(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _reserve_arcs(state:int, n:int)
static PyObject* wrapReserveArcs_as__reserve_arcs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("state"),
      C("n"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_reserve_arcs", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_reserve_arcs", names[0], "int", a[0]);
  unsigned long arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_reserve_arcs", names[1], "unsigned long", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ReserveArcs(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _mutable_input_symbols() -> SymbolTable
static PyObject* wrapMutableInputSymbols_as__mutable_input_symbols(PyObject* self) {
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->MutableInputSymbols();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _mutable_output_symbols() -> SymbolTable
static PyObject* wrapMutableOutputSymbols_as__mutable_output_symbols(PyObject* self) {
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->MutableOutputSymbols();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _set_input_symbols(isyms:SymbolTable)
static PyObject* wrapSetInputSymbols_as__set_input_symbols(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("isyms"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_set_input_symbols", names, &a[0])) return nullptr;
  ::fst::SymbolTable * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_input_symbols", names[0], "::fst::SymbolTable *", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetInputSymbols(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _set_output_symbols(osyms:SymbolTable)
static PyObject* wrapSetOutputSymbols_as__set_output_symbols(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("osyms"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_set_output_symbols", names, &a[0])) return nullptr;
  ::fst::SymbolTable * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_output_symbols", names[0], "::fst::SymbolTable *", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetOutputSymbols(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*
static PyObject* as_fst_ExpandedFst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int(PyObject* self) {
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >"), nullptr);
}

// Implicit cast this as ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*
static PyObject* as_fst_Fst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int(PyObject* self) {
  ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("_set_start"), (PyCFunction)wrapSetStart_as__set_start, METH_VARARGS | METH_KEYWORDS, C("_set_start(state:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::SetStart(int)")},
  {C("_set_final"), (PyCFunction)wrapSetFinal_as__set_final, METH_VARARGS | METH_KEYWORDS, C("_set_final(state:int, weight:CompactLatticeWeight)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::SetFinal(int, ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int>)")},
  {C("_set_properties"), (PyCFunction)wrapSetProperties_as__set_properties, METH_VARARGS | METH_KEYWORDS, C("_set_properties(props:int, mask:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::SetProperties(unsigned long, unsigned long)")},
  {C("_add_state"), (PyCFunction)wrapAddState_as__add_state, METH_NOARGS, C("_add_state() -> int\n  Calls C++ function\n  int ::fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::AddState()")},
  {C("_add_arc"), (PyCFunction)wrapAddArc_as__add_arc, METH_VARARGS | METH_KEYWORDS, C("_add_arc(state:int, arc:CompactLatticeArc)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::AddArc(int, ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >)")},
  {C("_delete_states"), (PyCFunction)wrapDeleteStates_as__delete_states, METH_VARARGS | METH_KEYWORDS, C("_delete_states(dstates:list<int>)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::DeleteStates(::std::vector< ::fst::MutableFst<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>, int> > >::StateId>)")},
  {C("_delete_all_states"), (PyCFunction)wrapDeleteStates_as__delete_all_states, METH_NOARGS, C("_delete_all_states()\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::DeleteStates()")},
  {C("_delete_arcs"), (PyCFunction)wrapDeleteArcs_as__delete_arcs, METH_VARARGS | METH_KEYWORDS, C("_delete_arcs(state:int, n:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::DeleteArcs(int, unsigned long)")},
  {C("_delete_all_arcs"), (PyCFunction)wrapDeleteArcs_as__delete_all_arcs, METH_VARARGS | METH_KEYWORDS, C("_delete_all_arcs(state:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::DeleteArcs(int)")},
  {C("_reserve_states"), (PyCFunction)wrapReserveStates_as__reserve_states, METH_VARARGS | METH_KEYWORDS, C("_reserve_states(n:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::ReserveStates(int)")},
  {C("_reserve_arcs"), (PyCFunction)wrapReserveArcs_as__reserve_arcs, METH_VARARGS | METH_KEYWORDS, C("_reserve_arcs(state:int, n:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::ReserveArcs(int, unsigned long)")},
  {C("_mutable_input_symbols"), (PyCFunction)wrapMutableInputSymbols_as__mutable_input_symbols, METH_NOARGS, C("_mutable_input_symbols() -> SymbolTable\n  Calls C++ function\n  ::fst::SymbolTable * ::fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::MutableInputSymbols()")},
  {C("_mutable_output_symbols"), (PyCFunction)wrapMutableOutputSymbols_as__mutable_output_symbols, METH_NOARGS, C("_mutable_output_symbols() -> SymbolTable\n  Calls C++ function\n  ::fst::SymbolTable * ::fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::MutableOutputSymbols()")},
  {C("_set_input_symbols"), (PyCFunction)wrapSetInputSymbols_as__set_input_symbols, METH_VARARGS | METH_KEYWORDS, C("_set_input_symbols(isyms:SymbolTable)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::SetInputSymbols(::fst::SymbolTable *)")},
  {C("_set_output_symbols"), (PyCFunction)wrapSetOutputSymbols_as__set_output_symbols, METH_VARARGS | METH_KEYWORDS, C("_set_output_symbols(osyms:SymbolTable)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>, int> > >::SetOutputSymbols(::fst::SymbolTable *)")},
  {C("as_fst_ExpandedFst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int"), (PyCFunction)as_fst_ExpandedFst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int, METH_NOARGS, C("Upcast to ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*")},
  {C("as_fst_Fst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int"), (PyCFunction)as_fst_Fst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int, METH_NOARGS, C("Upcast to ::fst::Fst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*")},
  {}
};

// CompactLatticeMutableFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// CompactLatticeMutableFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_mutable_fst.CompactLatticeMutableFst", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_MutableFst__fst_ArcTpl__fst_CompactLatticeWeightTpl__fst_LatticeWeightTpl_float__int"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >"));
      if (!PyErr_Occurred()) {
        ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c = static_cast<::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyCompactLatticeMutableFst

namespace pyKwsIndexMutableFst {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >> cpp;
};
static ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* ThisPtr(PyObject*);

// _set_start(state:int)
static PyObject* wrapSetStart_as__set_start(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_set_start", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_start", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetStart(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _set_final(state:int, weight:KwsIndexWeight)
static PyObject* wrapSetFinal_as__set_final(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("state"),
      C("weight"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_set_final", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_final", names[0], "int", a[0]);
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_set_final", names[1], "::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetFinal(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _set_properties(props:int, mask:int)
static PyObject* wrapSetProperties_as__set_properties(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("props"),
      C("mask"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_set_properties", names, &a[0], &a[1])) return nullptr;
  unsigned long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_properties", names[0], "unsigned long", a[0]);
  unsigned long arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_set_properties", names[1], "unsigned long", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetProperties(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _add_state() -> int
static PyObject* wrapAddState_as__add_state(PyObject* self) {
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->AddState();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _add_arc(state:int, arc:KwsIndexArc)
static PyObject* wrapAddArc_as__add_arc(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("state"),
      C("arc"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_add_arc", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_add_arc", names[0], "int", a[0]);
  ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_add_arc", names[1], "::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AddArc(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _delete_states(dstates:list<int>)
static PyObject* wrapDeleteStates_as__delete_states(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("dstates"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_delete_states", names, &a[0])) return nullptr;
  ::std::vector< ::fst::MutableFst<ArcTpl<LexicographicWeight<TropicalWeightTpl<float>, LexicographicWeight<TropicalWeightTpl<float>, TropicalWeightTpl<float> > > > >::StateId> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_delete_states", names[0], "::std::vector< ::fst::MutableFst<ArcTpl<LexicographicWeight<TropicalWeightTpl<float>, LexicographicWeight<TropicalWeightTpl<float>, TropicalWeightTpl<float> > > > >::StateId>", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DeleteStates(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _delete_all_states()
static PyObject* wrapDeleteStates_as__delete_all_states(PyObject* self) {
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DeleteStates();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _delete_arcs(state:int, n:int)
static PyObject* wrapDeleteArcs_as__delete_arcs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("state"),
      C("n"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_delete_arcs", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_delete_arcs", names[0], "int", a[0]);
  unsigned long arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_delete_arcs", names[1], "unsigned long", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DeleteArcs(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _delete_all_arcs(state:int)
static PyObject* wrapDeleteArcs_as__delete_all_arcs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_delete_all_arcs", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_delete_all_arcs", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DeleteArcs(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _reserve_states(n:int)
static PyObject* wrapReserveStates_as__reserve_states(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("n"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_reserve_states", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_reserve_states", names[0], "int", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ReserveStates(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _reserve_arcs(state:int, n:int)
static PyObject* wrapReserveArcs_as__reserve_arcs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("state"),
      C("n"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:_reserve_arcs", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_reserve_arcs", names[0], "int", a[0]);
  unsigned long arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("_reserve_arcs", names[1], "unsigned long", a[1]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ReserveArcs(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _mutable_input_symbols() -> SymbolTable
static PyObject* wrapMutableInputSymbols_as__mutable_input_symbols(PyObject* self) {
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->MutableInputSymbols();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _mutable_output_symbols() -> SymbolTable
static PyObject* wrapMutableOutputSymbols_as__mutable_output_symbols(PyObject* self) {
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::SymbolTable * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->MutableOutputSymbols();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// _set_input_symbols(isyms:SymbolTable)
static PyObject* wrapSetInputSymbols_as__set_input_symbols(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("isyms"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_set_input_symbols", names, &a[0])) return nullptr;
  ::fst::SymbolTable * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_input_symbols", names[0], "::fst::SymbolTable *", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetInputSymbols(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// _set_output_symbols(osyms:SymbolTable)
static PyObject* wrapSetOutputSymbols_as__set_output_symbols(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("osyms"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_set_output_symbols", names, &a[0])) return nullptr;
  ::fst::SymbolTable * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_set_output_symbols", names[0], "::fst::SymbolTable *", a[0]);
  // Call actual C++ method.
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetOutputSymbols(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*
static PyObject* as_fst_ExpandedFst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float(PyObject* self) {
  ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >"), nullptr);
}

// Implicit cast this as ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*
static PyObject* as_fst_Fst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float(PyObject* self) {
  ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("_set_start"), (PyCFunction)wrapSetStart_as__set_start, METH_VARARGS | METH_KEYWORDS, C("_set_start(state:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::SetStart(int)")},
  {C("_set_final"), (PyCFunction)wrapSetFinal_as__set_final, METH_VARARGS | METH_KEYWORDS, C("_set_final(state:int, weight:KwsIndexWeight)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::SetFinal(int, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >)")},
  {C("_set_properties"), (PyCFunction)wrapSetProperties_as__set_properties, METH_VARARGS | METH_KEYWORDS, C("_set_properties(props:int, mask:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::SetProperties(unsigned long, unsigned long)")},
  {C("_add_state"), (PyCFunction)wrapAddState_as__add_state, METH_NOARGS, C("_add_state() -> int\n  Calls C++ function\n  int ::fst::MutableFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::AddState()")},
  {C("_add_arc"), (PyCFunction)wrapAddArc_as__add_arc, METH_VARARGS | METH_KEYWORDS, C("_add_arc(state:int, arc:KwsIndexArc)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::AddArc(int, ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >)")},
  {C("_delete_states"), (PyCFunction)wrapDeleteStates_as__delete_states, METH_VARARGS | METH_KEYWORDS, C("_delete_states(dstates:list<int>)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::DeleteStates(::std::vector< ::fst::MutableFst<ArcTpl<LexicographicWeight<TropicalWeightTpl<float>, LexicographicWeight<TropicalWeightTpl<float>, TropicalWeightTpl<float> > > > >::StateId>)")},
  {C("_delete_all_states"), (PyCFunction)wrapDeleteStates_as__delete_all_states, METH_NOARGS, C("_delete_all_states()\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::DeleteStates()")},
  {C("_delete_arcs"), (PyCFunction)wrapDeleteArcs_as__delete_arcs, METH_VARARGS | METH_KEYWORDS, C("_delete_arcs(state:int, n:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::DeleteArcs(int, unsigned long)")},
  {C("_delete_all_arcs"), (PyCFunction)wrapDeleteArcs_as__delete_all_arcs, METH_VARARGS | METH_KEYWORDS, C("_delete_all_arcs(state:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::DeleteArcs(int)")},
  {C("_reserve_states"), (PyCFunction)wrapReserveStates_as__reserve_states, METH_VARARGS | METH_KEYWORDS, C("_reserve_states(n:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::ReserveStates(int)")},
  {C("_reserve_arcs"), (PyCFunction)wrapReserveArcs_as__reserve_arcs, METH_VARARGS | METH_KEYWORDS, C("_reserve_arcs(state:int, n:int)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::ReserveArcs(int, unsigned long)")},
  {C("_mutable_input_symbols"), (PyCFunction)wrapMutableInputSymbols_as__mutable_input_symbols, METH_NOARGS, C("_mutable_input_symbols() -> SymbolTable\n  Calls C++ function\n  ::fst::SymbolTable * ::fst::MutableFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::MutableInputSymbols()")},
  {C("_mutable_output_symbols"), (PyCFunction)wrapMutableOutputSymbols_as__mutable_output_symbols, METH_NOARGS, C("_mutable_output_symbols() -> SymbolTable\n  Calls C++ function\n  ::fst::SymbolTable * ::fst::MutableFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::MutableOutputSymbols()")},
  {C("_set_input_symbols"), (PyCFunction)wrapSetInputSymbols_as__set_input_symbols, METH_VARARGS | METH_KEYWORDS, C("_set_input_symbols(isyms:SymbolTable)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::SetInputSymbols(::fst::SymbolTable *)")},
  {C("_set_output_symbols"), (PyCFunction)wrapSetOutputSymbols_as__set_output_symbols, METH_VARARGS | METH_KEYWORDS, C("_set_output_symbols(osyms:SymbolTable)\n  Calls C++ function\n  void ::fst::MutableFst<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > >::SetOutputSymbols(::fst::SymbolTable *)")},
  {C("as_fst_ExpandedFst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float"), (PyCFunction)as_fst_ExpandedFst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::ExpandedFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*")},
  {C("as_fst_Fst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float"), (PyCFunction)as_fst_Fst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::Fst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*")},
  {}
};

// KwsIndexMutableFst __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// KwsIndexMutableFst __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_mutable_fst.KwsIndexMutableFst",   // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_MutableFst__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >"));
      if (!PyErr_Occurred()) {
        ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c = static_cast<::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyKwsIndexMutableFst


// Initialize module

bool Ready() {
  PyObject* base_cls = ImportFQName("kaldi.fstext._expanded_fst.StdExpandedFst");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._expanded_fst.StdExpandedFst is not a new style class inheriting from object.");
    return false;
  }
  pyStdMutableFst::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyStdMutableFst::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._expanded_fst.StdExpandedFst is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyStdMutableFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyStdMutableFst::wrapper_Type);  // For PyModule_AddObject to steal.
  base_cls = ImportFQName("kaldi.fstext._expanded_fst.LogExpandedFst");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._expanded_fst.LogExpandedFst is not a new style class inheriting from object.");
    return false;
  }
  pyLogMutableFst::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyLogMutableFst::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._expanded_fst.LogExpandedFst is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyLogMutableFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyLogMutableFst::wrapper_Type);  // For PyModule_AddObject to steal.
  base_cls = ImportFQName("kaldi.fstext._expanded_fst.LatticeExpandedFst");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._expanded_fst.LatticeExpandedFst is not a new style class inheriting from object.");
    return false;
  }
  pyLatticeMutableFst::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyLatticeMutableFst::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._expanded_fst.LatticeExpandedFst is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyLatticeMutableFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyLatticeMutableFst::wrapper_Type);  // For PyModule_AddObject to steal.
  base_cls = ImportFQName("kaldi.fstext._expanded_fst.CompactLatticeExpandedFst");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._expanded_fst.CompactLatticeExpandedFst is not a new style class inheriting from object.");
    return false;
  }
  pyCompactLatticeMutableFst::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyCompactLatticeMutableFst::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._expanded_fst.CompactLatticeExpandedFst is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyCompactLatticeMutableFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyCompactLatticeMutableFst::wrapper_Type);  // For PyModule_AddObject to steal.
  base_cls = ImportFQName("kaldi.fstext._expanded_fst.KwsIndexExpandedFst");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._expanded_fst.KwsIndexExpandedFst is not a new style class inheriting from object.");
    return false;
  }
  pyKwsIndexMutableFst::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyKwsIndexMutableFst::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.fstext._expanded_fst.KwsIndexExpandedFst is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyKwsIndexMutableFst::wrapper_Type) < 0) return false;
  Py_INCREF(&pyKwsIndexMutableFst::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_mutable_fst",  // module name
  "CLIF-generated module for fst/mutable-fst.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_float_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_lattice_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_lexicographic_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_arc")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_symbol_table")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "StdMutableFst", reinterpret_cast<PyObject*>(&pyStdMutableFst::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "LogMutableFst", reinterpret_cast<PyObject*>(&pyLogMutableFst::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "LatticeMutableFst", reinterpret_cast<PyObject*>(&pyLatticeMutableFst::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "CompactLatticeMutableFst", reinterpret_cast<PyObject*>(&pyCompactLatticeMutableFst::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "KwsIndexMutableFst", reinterpret_cast<PyObject*>(&pyKwsIndexMutableFst::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __mutable__fst_clifwrap

namespace fst {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// CompactLatticeMutableFst to/from ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* cpp = __mutable__fst_clifwrap::pyCompactLatticeMutableFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>* c) {
  assert(c != nullptr);
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* cpp = __mutable__fst_clifwrap::pyCompactLatticeMutableFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__mutable__fst_clifwrap::pyCompactLatticeMutableFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>* c) {
  assert(c != nullptr);
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* cpp = __mutable__fst_clifwrap::pyCompactLatticeMutableFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__mutable__fst_clifwrap::pyCompactLatticeMutableFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert CompactLatticeMutableFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mutable__fst_clifwrap::pyCompactLatticeMutableFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mutable__fst_clifwrap::pyCompactLatticeMutableFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mutable__fst_clifwrap::pyCompactLatticeMutableFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mutable__fst_clifwrap::pyCompactLatticeMutableFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mutable__fst_clifwrap::pyCompactLatticeMutableFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mutable__fst_clifwrap::pyCompactLatticeMutableFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::MutableFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> > >>(std::move(c));
  return py;
}

// KwsIndexMutableFst to/from ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* cpp = __mutable__fst_clifwrap::pyKwsIndexMutableFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>* c) {
  assert(c != nullptr);
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* cpp = __mutable__fst_clifwrap::pyKwsIndexMutableFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__mutable__fst_clifwrap::pyKwsIndexMutableFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>* c) {
  assert(c != nullptr);
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* cpp = __mutable__fst_clifwrap::pyKwsIndexMutableFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__mutable__fst_clifwrap::pyKwsIndexMutableFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert KwsIndexMutableFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mutable__fst_clifwrap::pyKwsIndexMutableFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mutable__fst_clifwrap::pyKwsIndexMutableFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mutable__fst_clifwrap::pyKwsIndexMutableFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mutable__fst_clifwrap::pyKwsIndexMutableFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mutable__fst_clifwrap::pyKwsIndexMutableFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mutable__fst_clifwrap::pyKwsIndexMutableFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::MutableFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > >>(std::move(c));
  return py;
}

// LatticeMutableFst to/from ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* cpp = __mutable__fst_clifwrap::pyLatticeMutableFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* cpp = __mutable__fst_clifwrap::pyLatticeMutableFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__mutable__fst_clifwrap::pyLatticeMutableFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* cpp = __mutable__fst_clifwrap::pyLatticeMutableFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__mutable__fst_clifwrap::pyLatticeMutableFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert LatticeMutableFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mutable__fst_clifwrap::pyLatticeMutableFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mutable__fst_clifwrap::pyLatticeMutableFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mutable__fst_clifwrap::pyLatticeMutableFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mutable__fst_clifwrap::pyLatticeMutableFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mutable__fst_clifwrap::pyLatticeMutableFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mutable__fst_clifwrap::pyLatticeMutableFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::MutableFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> > >>(std::move(c));
  return py;
}

// LogMutableFst to/from ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* cpp = __mutable__fst_clifwrap::pyLogMutableFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* cpp = __mutable__fst_clifwrap::pyLogMutableFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__mutable__fst_clifwrap::pyLogMutableFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* cpp = __mutable__fst_clifwrap::pyLogMutableFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__mutable__fst_clifwrap::pyLogMutableFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert LogMutableFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mutable__fst_clifwrap::pyLogMutableFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mutable__fst_clifwrap::pyLogMutableFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mutable__fst_clifwrap::pyLogMutableFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mutable__fst_clifwrap::pyLogMutableFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mutable__fst_clifwrap::pyLogMutableFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mutable__fst_clifwrap::pyLogMutableFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::MutableFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > >>(std::move(c));
  return py;
}

// StdMutableFst to/from ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* cpp = __mutable__fst_clifwrap::pyStdMutableFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* cpp = __mutable__fst_clifwrap::pyStdMutableFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__mutable__fst_clifwrap::pyStdMutableFst::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* cpp = __mutable__fst_clifwrap::pyStdMutableFst::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__mutable__fst_clifwrap::pyStdMutableFst::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert StdMutableFst instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mutable__fst_clifwrap::pyStdMutableFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mutable__fst_clifwrap::pyStdMutableFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mutable__fst_clifwrap::pyStdMutableFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mutable__fst_clifwrap::pyStdMutableFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__mutable__fst_clifwrap::pyStdMutableFst::wrapper_Type, NULL, NULL);
  reinterpret_cast<__mutable__fst_clifwrap::pyStdMutableFst::wrapper*>(py)->cpp = ::clif::Instance<::fst::MutableFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>(std::move(c));
  return py;
}

}  // namespace fst
