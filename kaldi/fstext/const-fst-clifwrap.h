//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/fstext/const-fst.clif

#include <memory>
#include "clif/python/optional.h"
#include "fstext/const-fst-ext.h"
#include "clif/python/postconv.h"

namespace fst {
using namespace ::clif;

// CLIF use `::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>` as CompactLatticeConstFst
bool Clif_PyObjAs(PyObject* input, ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>>* output);
PyObject* Clif_PyObjFrom(::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int>&, py::PostConv);
// CLIF use `::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >` as CompactLatticeConstFstArcIterator
bool Clif_PyObjAs(PyObject* input, ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>* output);
PyObject* Clif_PyObjFrom(::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >&, py::PostConv);
// CLIF use `::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >` as CompactLatticeConstFstStateIterator
bool Clif_PyObjAs(PyObject* input, ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>* output);
PyObject* Clif_PyObjFrom(::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::CompactLatticeWeightTpl< ::fst::LatticeWeightTpl<float>, int> >, unsigned int> >&, py::PostConv) = delete;
// CLIF use `::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>` as KwsIndexConstFst
bool Clif_PyObjAs(PyObject* input, ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>>* output);
PyObject* Clif_PyObjFrom(::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int>&, py::PostConv);
// CLIF use `::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >` as KwsIndexConstFstArcIterator
bool Clif_PyObjAs(PyObject* input, ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>* output);
PyObject* Clif_PyObjFrom(::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >&, py::PostConv);
// CLIF use `::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >` as KwsIndexConstFstStateIterator
bool Clif_PyObjAs(PyObject* input, ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>* output);
PyObject* Clif_PyObjFrom(::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, unsigned int> >&, py::PostConv) = delete;
// CLIF use `::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>` as LatticeConstFst
bool Clif_PyObjAs(PyObject* input, ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>>* output);
PyObject* Clif_PyObjFrom(::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int>&, py::PostConv);
// CLIF use `::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >` as LatticeConstFstArcIterator
bool Clif_PyObjAs(PyObject* input, ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>* output);
PyObject* Clif_PyObjFrom(::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >&, py::PostConv);
// CLIF use `::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >` as LatticeConstFstStateIterator
bool Clif_PyObjAs(PyObject* input, ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>* output);
PyObject* Clif_PyObjFrom(::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LatticeWeightTpl<float> >, unsigned int> >&, py::PostConv) = delete;
// CLIF use `::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>` as LogConstFst
bool Clif_PyObjAs(PyObject* input, ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>>* output);
PyObject* Clif_PyObjFrom(::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int>&, py::PostConv);
// CLIF use `::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >` as LogConstFstArcIterator
bool Clif_PyObjAs(PyObject* input, ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>* output);
PyObject* Clif_PyObjFrom(::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >&, py::PostConv);
// CLIF use `::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >` as LogConstFstStateIterator
bool Clif_PyObjAs(PyObject* input, ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>* output);
PyObject* Clif_PyObjFrom(::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, unsigned int> >&, py::PostConv) = delete;
// CLIF use `::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>` as StdConstFst
bool Clif_PyObjAs(PyObject* input, ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>>* output);
PyObject* Clif_PyObjFrom(::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int>&, py::PostConv);
// CLIF use `::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >` as StdConstFstArcIterator
bool Clif_PyObjAs(PyObject* input, ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>* output);
PyObject* Clif_PyObjFrom(::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::ArcIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >&, py::PostConv);
// CLIF use `::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >` as StdConstFstStateIterator
bool Clif_PyObjAs(PyObject* input, ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>* output);
PyObject* Clif_PyObjFrom(::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::StateIterator< ::fst::ConstFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, unsigned int> >&, py::PostConv) = delete;

}  // namespace fst

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_const_fst")) Py_DECREF(m);
// CLIF init_module else goto err;
