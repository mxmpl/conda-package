//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/fstext/lexicographic-weight.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "fstext/weight-clifwrap.h"
#include "fstext/float-weight-clifwrap.h"
#include "lexicographic-weight-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __lexicographic__weight_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyKwsTimeWeight {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >> cpp;
};
static ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >* ThisPtr(PyObject*);

// @classmethod from_components(w1:TropicalWeight, w2:TropicalWeight) -> KwsTimeWeight
static PyObject* wrapLexicographicWeight_as_from_components(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("w1"),
      C("w2"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:from_components", names, &a[0], &a[1])) return nullptr;
  ::fst::TropicalWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_components", names[0], "::fst::TropicalWeightTpl<float>", a[0]);
  ::fst::TropicalWeightTpl<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_components", names[1], "::fst::TropicalWeightTpl<float>", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >>(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod zero() -> KwsTimeWeight
static PyObject* wrapZero_as_zero(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> >::Zero();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod one() -> KwsTimeWeight
static PyObject* wrapOne_as_one(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> >::One();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod no_weight() -> KwsTimeWeight
static PyObject* wrapNoWeight_as_no_weight(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> >::NoWeight();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod type() -> str
static PyObject* wrapType_as_type(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> >::Type();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// @classmethod properties() -> int
static PyObject* wrapProperties_as_properties(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> >::Properties();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// member() -> bool
static PyObject* wrapMember_as_member(PyObject* self) {
  // Call actual C++ method.
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Member();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// quantize(delta:float=default) -> KwsTimeWeight
static PyObject* wrapQuantize_as_quantize(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("delta"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:quantize", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  float arg1;
  if (nargs > 0) {
    if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("quantize", names[0], "float", a[0]);
  }
  // Call actual C++ method.
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    ret0 = c->Quantize(); break;
  case 1:
    ret0 = c->Quantize(std::move(arg1)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// reverse() -> KwsTimeWeight
static PyObject* wrapReverse_as_reverse(PyObject* self) {
  // Call actual C++ method.
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Reverse();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyObject* get_value1(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->Value1(), {});
}

static int set_value1(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the value1 attribute");
    return -1;
  }
  ::fst::TropicalWeightTpl<float> cval;
  if (Clif_PyObjAs(value, &cval)) {
    auto cpp = ThisPtr(self); if (!cpp) return -1;
    cpp->SetValue1(cval);
    return 0;
  }
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for value1:TropicalWeight", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_value2(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->Value2(), {});
}

static int set_value2(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the value2 attribute");
    return -1;
  }
  ::fst::TropicalWeightTpl<float> cval;
  if (Clif_PyObjAs(value, &cval)) {
    auto cpp = ThisPtr(self); if (!cpp) return -1;
    cpp->SetValue2(cval);
    return 0;
  }
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for value2:TropicalWeight", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("value1"), get_value1, set_value1, C("The first component weight.")},
  {C("value2"), get_value2, set_value2, C("The second component weight.")},
  {}
};

// Implicit cast this as ::fst::PairWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >*
static PyObject* as_fst_PairWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float(PyObject* self) {
  ::fst::PairWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::PairWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("from_components"), (PyCFunction)wrapLexicographicWeight_as_from_components, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_components(w1:TropicalWeight, w2:TropicalWeight) -> KwsTimeWeight\n\nCreates a new KWS time weight from component weights.")},
  {C("zero"), (PyCFunction)wrapZero_as_zero, METH_NOARGS | METH_CLASS, C("zero() -> KwsTimeWeight\n\nZero in the KWS time semiring.")},
  {C("one"), (PyCFunction)wrapOne_as_one, METH_NOARGS | METH_CLASS, C("one() -> KwsTimeWeight\n\nOne in the KWS time semiring.")},
  {C("no_weight"), (PyCFunction)wrapNoWeight_as_no_weight, METH_NOARGS | METH_CLASS, C("no_weight() -> KwsTimeWeight\n\nNo weight in the KWS time semiring.")},
  {C("type"), (PyCFunction)wrapType_as_type, METH_NOARGS | METH_CLASS, C("type() -> str\n\nReturns weight type.")},
  {C("properties"), (PyCFunction)wrapProperties_as_properties, METH_NOARGS | METH_CLASS, C("properties() -> int\n\nReturns weight properties.")},
  {C("member"), (PyCFunction)wrapMember_as_member, METH_NOARGS, C("member() -> bool\n\nChecks if weight is a member of the KWS time semiring.")},
  {C("quantize"), (PyCFunction)wrapQuantize_as_quantize, METH_VARARGS | METH_KEYWORDS, C("quantize(delta:float=default) -> KwsTimeWeight\n\nQuantizes the weight.")},
  {C("reverse"), (PyCFunction)wrapReverse_as_reverse, METH_NOARGS, C("reverse() -> KwsTimeWeight\n\nReverses the weight.")},
  {C("as_fst_PairWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float"), (PyCFunction)as_fst_PairWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::PairWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >*")},
  {}
};

// KwsTimeWeight __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// KwsTimeWeight __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// KwsTimeWeight __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_lexicographic_weight.KwsTimeWeight", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "KWS time weight.\n\nA tropical weight pair with lexicographic ordering.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "KwsTimeWeight takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >"));
      if (!PyErr_Occurred()) {
        ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >* c = static_cast<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyKwsTimeWeight

// plus_tropical_lt_tropical_weight(w1:KwsTimeWeight, w2:KwsTimeWeight) -> KwsTimeWeight
static PyObject* wrapPlus_as_plus_tropical_lt_tropical_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("w1"),
      C("w2"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:plus_tropical_lt_tropical_weight", names, &a[0], &a[1])) return nullptr;
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("plus_tropical_lt_tropical_weight", names[0], "::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >", a[0]);
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("plus_tropical_lt_tropical_weight", names[1], "::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::Plus(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// times_tropical_lt_tropical_weight(w1:KwsTimeWeight, w2:KwsTimeWeight) -> KwsTimeWeight
static PyObject* wrapTimes_as_times_tropical_lt_tropical_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("w1"),
      C("w2"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:times_tropical_lt_tropical_weight", names, &a[0], &a[1])) return nullptr;
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("times_tropical_lt_tropical_weight", names[0], "::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >", a[0]);
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("times_tropical_lt_tropical_weight", names[1], "::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::Times(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// divide_tropical_lt_tropical_weight(w1:KwsTimeWeight, w2:KwsTimeWeight, typ:DivideType=default) -> KwsTimeWeight
static PyObject* wrapDivide_as_divide_tropical_lt_tropical_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("w1"),
      C("w2"),
      C("typ"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:divide_tropical_lt_tropical_weight", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("divide_tropical_lt_tropical_weight", names[0], "::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >", a[0]);
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("divide_tropical_lt_tropical_weight", names[1], "::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >", a[1]);
  ::fst::DivideType arg3;
  if (nargs > 2) {
    if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("divide_tropical_lt_tropical_weight", names[2], "::fst::DivideType", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ret0 = ::fst::Divide(*arg1, *arg2); break;
  case 3:
    ret0 = ::fst::Divide(*arg1, *arg2, std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

namespace pyKwsIndexWeight {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >> cpp;
};
static ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >* ThisPtr(PyObject*);

// @classmethod from_components(w1:TropicalWeight, w2:KwsTimeWeight) -> KwsIndexWeight
static PyObject* wrapLexicographicWeight_as_from_components(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("w1"),
      C("w2"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:from_components", names, &a[0], &a[1])) return nullptr;
  ::fst::TropicalWeightTpl<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_components", names[0], "::fst::TropicalWeightTpl<float>", a[0]);
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_components", names[1], "::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >>(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod zero() -> KwsIndexWeight
static PyObject* wrapZero_as_zero(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > >::Zero();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod one() -> KwsIndexWeight
static PyObject* wrapOne_as_one(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > >::One();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod no_weight() -> KwsIndexWeight
static PyObject* wrapNoWeight_as_no_weight(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > >::NoWeight();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod type() -> str
static PyObject* wrapType_as_type(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > >::Type();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// @classmethod properties() -> int
static PyObject* wrapProperties_as_properties(PyObject* cls) {
  // Call actual C++ method.
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  unsigned long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > >::Properties();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// member() -> bool
static PyObject* wrapMember_as_member(PyObject* self) {
  // Call actual C++ method.
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Member();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// quantize(delta:float=default) -> KwsIndexWeight
static PyObject* wrapQuantize_as_quantize(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("delta"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:quantize", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  float arg1;
  if (nargs > 0) {
    if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("quantize", names[0], "float", a[0]);
  }
  // Call actual C++ method.
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    ret0 = c->Quantize(); break;
  case 1:
    ret0 = c->Quantize(std::move(arg1)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// reverse() -> KwsIndexWeight
static PyObject* wrapReverse_as_reverse(PyObject* self) {
  // Call actual C++ method.
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Reverse();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyObject* get_value1(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->Value1(), {});
}

static int set_value1(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the value1 attribute");
    return -1;
  }
  ::fst::TropicalWeightTpl<float> cval;
  if (Clif_PyObjAs(value, &cval)) {
    auto cpp = ThisPtr(self); if (!cpp) return -1;
    cpp->SetValue1(cval);
    return 0;
  }
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for value1:TropicalWeight", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_value2(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->Value2(), {});
}

static int set_value2(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the value2 attribute");
    return -1;
  }
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > cval;
  if (Clif_PyObjAs(value, &cval)) {
    auto cpp = ThisPtr(self); if (!cpp) return -1;
    cpp->SetValue2(cval);
    return 0;
  }
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for value2:KwsTimeWeight", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("value1"), get_value1, set_value1, C("The first component weight.")},
  {C("value2"), get_value2, set_value2, C("The second component weight.")},
  {}
};

// Implicit cast this as ::fst::PairWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >*
static PyObject* as_fst_PairWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float(PyObject* self) {
  ::fst::PairWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::fst::PairWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("from_components"), (PyCFunction)wrapLexicographicWeight_as_from_components, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_components(w1:TropicalWeight, w2:KwsTimeWeight) -> KwsIndexWeight\n\nCreates a new KWS index weight from component weights.")},
  {C("zero"), (PyCFunction)wrapZero_as_zero, METH_NOARGS | METH_CLASS, C("zero() -> KwsIndexWeight\n\nZero in KWS index semiring.")},
  {C("one"), (PyCFunction)wrapOne_as_one, METH_NOARGS | METH_CLASS, C("one() -> KwsIndexWeight\n\nOne in KWS index semiring.")},
  {C("no_weight"), (PyCFunction)wrapNoWeight_as_no_weight, METH_NOARGS | METH_CLASS, C("no_weight() -> KwsIndexWeight\n\nNo weight in KWS index semiring.")},
  {C("type"), (PyCFunction)wrapType_as_type, METH_NOARGS | METH_CLASS, C("type() -> str\n\nReturns weight type.")},
  {C("properties"), (PyCFunction)wrapProperties_as_properties, METH_NOARGS | METH_CLASS, C("properties() -> int\n\nReturns weight properties.")},
  {C("member"), (PyCFunction)wrapMember_as_member, METH_NOARGS, C("member() -> bool\n\nChecks if weight is a member of the KWS index semiring.")},
  {C("quantize"), (PyCFunction)wrapQuantize_as_quantize, METH_VARARGS | METH_KEYWORDS, C("quantize(delta:float=default) -> KwsIndexWeight\n\nQuantizes the weight.")},
  {C("reverse"), (PyCFunction)wrapReverse_as_reverse, METH_NOARGS, C("reverse() -> KwsIndexWeight\n\nReverses the weight.")},
  {C("as_fst_PairWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float"), (PyCFunction)as_fst_PairWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float, METH_NOARGS, C("Upcast to ::fst::PairWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >*")},
  {}
};

// KwsIndexWeight __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// KwsIndexWeight __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// KwsIndexWeight __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_lexicographic_weight.KwsIndexWeight", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "KWS index weight.\n\nA tropical weight triplet with lexicographic ordering.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "KwsIndexWeight takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >"));
      if (!PyErr_Occurred()) {
        ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >* c = static_cast<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyKwsIndexWeight

// plus_kws_index_weight(w1:KwsIndexWeight, w2:KwsIndexWeight) -> KwsIndexWeight
static PyObject* wrapPlus_as_plus_kws_index_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("w1"),
      C("w2"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:plus_kws_index_weight", names, &a[0], &a[1])) return nullptr;
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("plus_kws_index_weight", names[0], "::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >", a[0]);
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("plus_kws_index_weight", names[1], "::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::Plus(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// times_kws_index_weight(w1:KwsIndexWeight, w2:KwsIndexWeight) -> KwsIndexWeight
static PyObject* wrapTimes_as_times_kws_index_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("w1"),
      C("w2"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:times_kws_index_weight", names, &a[0], &a[1])) return nullptr;
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("times_kws_index_weight", names[0], "::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >", a[0]);
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("times_kws_index_weight", names[1], "::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::fst::Times(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// divide_kws_index_weight(w1:KwsIndexWeight, w2:KwsIndexWeight, typ:DivideType=default) -> KwsIndexWeight
static PyObject* wrapDivide_as_divide_kws_index_weight(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("w1"),
      C("w2"),
      C("typ"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:divide_kws_index_weight", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("divide_kws_index_weight", names[0], "::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >", a[0]);
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("divide_kws_index_weight", names[1], "::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >", a[1]);
  ::fst::DivideType arg3;
  if (nargs > 2) {
    if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("divide_kws_index_weight", names[2], "::fst::DivideType", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ret0 = ::fst::Divide(*arg1, *arg2); break;
  case 3:
    ret0 = ::fst::Divide(*arg1, *arg2, std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("plus_tropical_lt_tropical_weight"), (PyCFunction)wrapPlus_as_plus_tropical_lt_tropical_weight, METH_VARARGS | METH_KEYWORDS, C("plus_tropical_lt_tropical_weight(w1:KwsTimeWeight, w2:KwsTimeWeight) -> KwsTimeWeight\n\n:math:`\\oplus` operation in the KWS time semiring.")},
  {C("times_tropical_lt_tropical_weight"), (PyCFunction)wrapTimes_as_times_tropical_lt_tropical_weight, METH_VARARGS | METH_KEYWORDS, C("times_tropical_lt_tropical_weight(w1:KwsTimeWeight, w2:KwsTimeWeight) -> KwsTimeWeight\n\n:math:`\\otimes` operation in the KWS time semiring.")},
  {C("divide_tropical_lt_tropical_weight"), (PyCFunction)wrapDivide_as_divide_tropical_lt_tropical_weight, METH_VARARGS | METH_KEYWORDS, C("divide_tropical_lt_tropical_weight(w1:KwsTimeWeight, w2:KwsTimeWeight, typ:DivideType=default) -> KwsTimeWeight\n\n:math:`\\oslash` operation in the KWS time semiring.")},
  {C("plus_kws_index_weight"), (PyCFunction)wrapPlus_as_plus_kws_index_weight, METH_VARARGS | METH_KEYWORDS, C("plus_kws_index_weight(w1:KwsIndexWeight, w2:KwsIndexWeight) -> KwsIndexWeight\n\n:math:`\\oplus` operation in the KWS index semiring.")},
  {C("times_kws_index_weight"), (PyCFunction)wrapTimes_as_times_kws_index_weight, METH_VARARGS | METH_KEYWORDS, C("times_kws_index_weight(w1:KwsIndexWeight, w2:KwsIndexWeight) -> KwsIndexWeight\n\n:math:`\\otimes` operation in the KWS index semiring.")},
  {C("divide_kws_index_weight"), (PyCFunction)wrapDivide_as_divide_kws_index_weight, METH_VARARGS | METH_KEYWORDS, C("divide_kws_index_weight(w1:KwsIndexWeight, w2:KwsIndexWeight, typ:DivideType=default) -> KwsIndexWeight\n\n:math:`\\oslash` operation in the KWS index semiring.")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyKwsTimeWeight::wrapper_Type) < 0) return false;
  Py_INCREF(&pyKwsTimeWeight::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyKwsIndexWeight::wrapper_Type) < 0) return false;
  Py_INCREF(&pyKwsIndexWeight::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_lexicographic_weight",  // module name
  "CLIF-generated module for fstext/lexicographic-weight-ext.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_float_weight")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "KwsTimeWeight", reinterpret_cast<PyObject*>(&pyKwsTimeWeight::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "KwsIndexWeight", reinterpret_cast<PyObject*>(&pyKwsIndexWeight::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __lexicographic__weight_clifwrap

namespace fst {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// KwsIndexWeight to/from ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >* cpp = __lexicographic__weight_clifwrap::pyKwsIndexWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >* cpp = __lexicographic__weight_clifwrap::pyKwsIndexWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__lexicographic__weight_clifwrap::pyKwsIndexWeight::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >* cpp = __lexicographic__weight_clifwrap::pyKwsIndexWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__lexicographic__weight_clifwrap::pyKwsIndexWeight::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert KwsIndexWeight instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >* c) {
  assert(c != nullptr);
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >* cpp = __lexicographic__weight_clifwrap::pyKwsIndexWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >>* c) {
  assert(c != nullptr);
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >* cpp = __lexicographic__weight_clifwrap::pyKwsIndexWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lexicographic__weight_clifwrap::pyKwsIndexWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lexicographic__weight_clifwrap::pyKwsIndexWeight::wrapper*>(py)->cpp = ::clif::Instance<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lexicographic__weight_clifwrap::pyKwsIndexWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lexicographic__weight_clifwrap::pyKwsIndexWeight::wrapper*>(py)->cpp = ::clif::Instance<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lexicographic__weight_clifwrap::pyKwsIndexWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lexicographic__weight_clifwrap::pyKwsIndexWeight::wrapper*>(py)->cpp = ::clif::Instance<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__lexicographic__weight_clifwrap::pyKwsIndexWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lexicographic__weight_clifwrap::pyKwsIndexWeight::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > >>(c);
  return py;
}

// KwsTimeWeight to/from ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > conversion

bool Clif_PyObjAs(PyObject* py, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >* cpp = __lexicographic__weight_clifwrap::pyKwsTimeWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >>* c) {
  assert(c != nullptr);
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >* cpp = __lexicographic__weight_clifwrap::pyKwsTimeWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__lexicographic__weight_clifwrap::pyKwsTimeWeight::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >>* c) {
  assert(c != nullptr);
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >* cpp = __lexicographic__weight_clifwrap::pyKwsTimeWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__lexicographic__weight_clifwrap::pyKwsTimeWeight::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert KwsTimeWeight instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >* c) {
  assert(c != nullptr);
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >* cpp = __lexicographic__weight_clifwrap::pyKwsTimeWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >>* c) {
  assert(c != nullptr);
  ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >* cpp = __lexicographic__weight_clifwrap::pyKwsTimeWeight::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lexicographic__weight_clifwrap::pyKwsTimeWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lexicographic__weight_clifwrap::pyKwsTimeWeight::wrapper*>(py)->cpp = ::clif::Instance<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lexicographic__weight_clifwrap::pyKwsTimeWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lexicographic__weight_clifwrap::pyKwsTimeWeight::wrapper*>(py)->cpp = ::clif::Instance<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__lexicographic__weight_clifwrap::pyKwsTimeWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lexicographic__weight_clifwrap::pyKwsTimeWeight::wrapper*>(py)->cpp = ::clif::Instance<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__lexicographic__weight_clifwrap::pyKwsTimeWeight::wrapper_Type, NULL, NULL);
  reinterpret_cast<__lexicographic__weight_clifwrap::pyKwsTimeWeight::wrapper*>(py)->cpp = ::clif::MakeShared<::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> >>(c);
  return py;
}

}  // namespace fst
