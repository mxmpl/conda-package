//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/fstext/deterministic-fst.clif

#include <memory>
#include "clif/python/optional.h"
#include "fstext/deterministic-fst.h"
#include "clif/python/postconv.h"

namespace fst {
using namespace ::clif;

// CLIF use `::fst::BackoffDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >` as StdBackoffDeterministicOnDemandFst
bool Clif_PyObjAs(PyObject* input, ::fst::BackoffDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::BackoffDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::BackoffDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* output);
PyObject* Clif_PyObjFrom(::fst::BackoffDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::BackoffDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::BackoffDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::BackoffDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::BackoffDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >&, py::PostConv) = delete;
// CLIF use `::fst::CacheDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >` as StdCacheDeterministicOnDemandFst
bool Clif_PyObjAs(PyObject* input, ::fst::CacheDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::CacheDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::CacheDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::CacheDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::CacheDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* output);
PyObject* Clif_PyObjFrom(::fst::CacheDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::CacheDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::CacheDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::CacheDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >&, py::PostConv);
// CLIF use `::fst::ComposeDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >` as StdComposeDeterministicOnDemandFst
bool Clif_PyObjAs(PyObject* input, ::fst::ComposeDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::ComposeDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::ComposeDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::ComposeDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::ComposeDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* output);
PyObject* Clif_PyObjFrom(::fst::ComposeDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::ComposeDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::ComposeDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::ComposeDeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >&, py::PostConv);
// CLIF use `::fst::DeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >` as StdDeterministicOnDemandFst
bool Clif_PyObjAs(PyObject* input, ::fst::DeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::DeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::DeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* output);
PyObject* Clif_PyObjFrom(::fst::DeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::DeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::DeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::DeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::fst::DeterministicOnDemandFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >&, py::PostConv) = delete;
// CLIF use `::fst::UnweightedNgramFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >` as StdUnweightedNgramFst
bool Clif_PyObjAs(PyObject* input, ::fst::UnweightedNgramFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::fst::UnweightedNgramFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::fst::UnweightedNgramFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, ::fst::UnweightedNgramFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::fst::UnweightedNgramFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>* output);
PyObject* Clif_PyObjFrom(::fst::UnweightedNgramFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::fst::UnweightedNgramFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::fst::UnweightedNgramFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::fst::UnweightedNgramFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > >&, py::PostConv);

}  // namespace fst

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_deterministic_fst")) Py_DECREF(m);
// CLIF init_module else goto err;
