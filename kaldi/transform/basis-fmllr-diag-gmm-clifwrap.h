//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/transform/basis-fmllr-diag-gmm.clif

#include <memory>
#include "clif/python/optional.h"
#include "transform/basis-fmllr-diag-gmm.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::BasisFmllrAccus` as BasisFmllrAccus
bool Clif_PyObjAs(PyObject* input, ::kaldi::BasisFmllrAccus** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::BasisFmllrAccus>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::BasisFmllrAccus>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::BasisFmllrAccus* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::BasisFmllrAccus>* output);
PyObject* Clif_PyObjFrom(::kaldi::BasisFmllrAccus*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::BasisFmllrAccus>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::BasisFmllrAccus>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::BasisFmllrAccus&, py::PostConv);
// CLIF use `::kaldi::BasisFmllrEstimate` as BasisFmllrEstimate
bool Clif_PyObjAs(PyObject* input, ::kaldi::BasisFmllrEstimate** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::BasisFmllrEstimate>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::BasisFmllrEstimate>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::BasisFmllrEstimate* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::BasisFmllrEstimate>* output);
PyObject* Clif_PyObjFrom(::kaldi::BasisFmllrEstimate*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::BasisFmllrEstimate>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::BasisFmllrEstimate>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::BasisFmllrEstimate&, py::PostConv);
// CLIF use `::kaldi::BasisFmllrOptions` as BasisFmllrOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::BasisFmllrOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::BasisFmllrOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::BasisFmllrOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::BasisFmllrOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::BasisFmllrOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::BasisFmllrOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::BasisFmllrOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::BasisFmllrOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::BasisFmllrOptions&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_basis_fmllr_diag_gmm")) Py_DECREF(m);
// CLIF init_module else goto err;
