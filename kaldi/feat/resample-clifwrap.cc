//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/feat/resample.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "resample-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __resample_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyArbitraryResample {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::ArbitraryResample> cpp;
};
static ::kaldi::ArbitraryResample* ThisPtr(PyObject*);

// __init__(num_samples_in:int, samp_rate_hz:float, filter_cutoff_hz:float, sample_points_secs:Vector, num_zeros:int)
static PyObject* wrapArbitraryResample_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[5];
  char* names[] = {
      C("num_samples_in"),
      C("samp_rate_hz"),
      C("filter_cutoff_hz"),
      C("sample_points_secs"),
      C("num_zeros"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOO:__init__", names, &a[0], &a[1], &a[2], &a[3], &a[4])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "int", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "float", a[1]);
  float arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "float", a[2]);
  ::kaldi::Vector<float>* arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "::kaldi::Vector<float>", a[3]);
  int arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("__init__", names[4], "int", a[4]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::ArbitraryResample>(std::move(arg1), std::move(arg2), std::move(arg3), *arg4, std::move(arg5));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// num_samples_in() -> int
static PyObject* wrapNumSamplesIn_as_num_samples_in(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::ArbitraryResample* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumSamplesIn();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_samples_out() -> int
static PyObject* wrapNumSamplesOut_as_num_samples_out(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::ArbitraryResample* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumSamplesOut();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// resample(input:MatrixBase, output:MatrixBase)
static PyObject* wrapResample_as_resample(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("input"),
      C("output"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:resample", names, &a[0], &a[1])) return nullptr;
  ::kaldi::MatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("resample", names[0], "::kaldi::MatrixBase<float>", a[0]);
  ::kaldi::MatrixBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("resample", names[1], "::kaldi::MatrixBase<float> *", a[1]);
  // Call actual C++ method.
  ::kaldi::ArbitraryResample* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Resample(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// resample_vector(input:VectorBase, output:VectorBase)
static PyObject* wrapResample_as_resample_vector(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("input"),
      C("output"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:resample_vector", names, &a[0], &a[1])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("resample_vector", names[0], "::kaldi::VectorBase<float>", a[0]);
  ::kaldi::VectorBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("resample_vector", names[1], "::kaldi::VectorBase<float> *", a[1]);
  // Call actual C++ method.
  ::kaldi::ArbitraryResample* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Resample(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapArbitraryResample_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(num_samples_in:int, samp_rate_hz:float, filter_cutoff_hz:float, sample_points_secs:Vector, num_zeros:int)\n  Calls C++ function\n  void ::kaldi::ArbitraryResample::ArbitraryResample(int, float, float, ::kaldi::Vector<float>, int)")},
  {C("num_samples_in"), (PyCFunction)wrapNumSamplesIn_as_num_samples_in, METH_NOARGS, C("num_samples_in() -> int\n  Calls C++ function\n  int ::kaldi::ArbitraryResample::NumSamplesIn()")},
  {C("num_samples_out"), (PyCFunction)wrapNumSamplesOut_as_num_samples_out, METH_NOARGS, C("num_samples_out() -> int\n  Calls C++ function\n  int ::kaldi::ArbitraryResample::NumSamplesOut()")},
  {C("resample"), (PyCFunction)wrapResample_as_resample, METH_VARARGS | METH_KEYWORDS, C("resample(input:MatrixBase, output:MatrixBase)\n  Calls C++ function\n  void ::kaldi::ArbitraryResample::Resample(::kaldi::MatrixBase<float>, ::kaldi::MatrixBase<float> *)")},
  {C("resample_vector"), (PyCFunction)wrapResample_as_resample_vector, METH_VARARGS | METH_KEYWORDS, C("resample_vector(input:VectorBase, output:VectorBase)\n  Calls C++ function\n  void ::kaldi::ArbitraryResample::Resample(::kaldi::VectorBase<float>, ::kaldi::VectorBase<float> *)")},
  {}
};

// ArbitraryResample __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ArbitraryResample __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ArbitraryResample __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_resample.ArbitraryResample",       // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::ArbitraryResample", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapArbitraryResample_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::ArbitraryResample* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_ArbitraryResample"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::ArbitraryResample"));
      if (!PyErr_Occurred()) {
        ::kaldi::ArbitraryResample* c = static_cast<::kaldi::ArbitraryResample*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::ArbitraryResample*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyArbitraryResample

namespace pyLinearResample {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::LinearResample> cpp;
};
static ::kaldi::LinearResample* ThisPtr(PyObject*);

// __init__(sample_rate_in_hz:int, samp_rate_out_hz:int, filter_cutoff_hz:float, num_zeros:int)
static PyObject* wrapLinearResample_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("sample_rate_in_hz"),
      C("samp_rate_out_hz"),
      C("filter_cutoff_hz"),
      C("num_zeros"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:__init__", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "int", a[1]);
  float arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "float", a[2]);
  int arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "int", a[3]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::LinearResample>(std::move(arg1), std::move(arg2), std::move(arg3), std::move(arg4));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// resample(input:VectorBase, flush:bool) -> Vector
static PyObject* wrapResample_as_resample(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("input"),
      C("flush"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:resample", names, &a[0], &a[1])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("resample", names[0], "::kaldi::VectorBase<float>", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("resample", names[1], "bool", a[1]);
  ::kaldi::Vector<float> ret0{};
  // Call actual C++ method.
  ::kaldi::LinearResample* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Resample(*arg1, std::move(arg2), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// reset()
static PyObject* wrapReset_as_reset(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::LinearResample* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Reset();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapLinearResample_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(sample_rate_in_hz:int, samp_rate_out_hz:int, filter_cutoff_hz:float, num_zeros:int)\n  Calls C++ function\n  void ::kaldi::LinearResample::LinearResample(int, int, float, int)")},
  {C("resample"), (PyCFunction)wrapResample_as_resample, METH_VARARGS | METH_KEYWORDS, C("resample(input:VectorBase, flush:bool) -> Vector\n  Calls C++ function\n  void ::kaldi::LinearResample::Resample(::kaldi::VectorBase<float>, bool, ::kaldi::Vector<float>*)")},
  {C("reset"), (PyCFunction)wrapReset_as_reset, METH_NOARGS, C("reset()\n  Calls C++ function\n  void ::kaldi::LinearResample::Reset()")},
  {}
};

// LinearResample __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// LinearResample __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// LinearResample __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_resample.LinearResample",          // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::LinearResample", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapLinearResample_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::LinearResample* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_LinearResample"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::LinearResample"));
      if (!PyErr_Occurred()) {
        ::kaldi::LinearResample* c = static_cast<::kaldi::LinearResample*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::LinearResample*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyLinearResample

// downsample_wave_form(orig_freq:float, wave:VectorBase, new_freq:float) -> Vector
static PyObject* wrapDownsampleWaveForm_as_downsample_wave_form(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("orig_freq"),
      C("wave"),
      C("new_freq"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:downsample_wave_form", names, &a[0], &a[1], &a[2])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("downsample_wave_form", names[0], "float", a[0]);
  ::kaldi::VectorBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("downsample_wave_form", names[1], "::kaldi::VectorBase<float>", a[1]);
  float arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("downsample_wave_form", names[2], "float", a[2]);
  ::kaldi::Vector<float> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::DownsampleWaveForm(std::move(arg1), *arg2, std::move(arg3), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("downsample_wave_form"), (PyCFunction)wrapDownsampleWaveForm_as_downsample_wave_form, METH_VARARGS | METH_KEYWORDS, C("downsample_wave_form(orig_freq:float, wave:VectorBase, new_freq:float) -> Vector\n  Calls C++ function\n  void ::kaldi::DownsampleWaveForm(float, ::kaldi::VectorBase<float>, float, ::kaldi::Vector<float>*)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyArbitraryResample::wrapper_Type) < 0) return false;
  Py_INCREF(&pyArbitraryResample::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyLinearResample::wrapper_Type) < 0) return false;
  Py_INCREF(&pyLinearResample::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_resample",  // module name
  "CLIF-generated module for feat/resample.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "ArbitraryResample", reinterpret_cast<PyObject*>(&pyArbitraryResample::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "LinearResample", reinterpret_cast<PyObject*>(&pyLinearResample::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __resample_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// ArbitraryResample to/from ::kaldi::ArbitraryResample conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::ArbitraryResample** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::ArbitraryResample* cpp = __resample_clifwrap::pyArbitraryResample::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::ArbitraryResample>* c) {
  assert(c != nullptr);
  ::kaldi::ArbitraryResample* cpp = __resample_clifwrap::pyArbitraryResample::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__resample_clifwrap::pyArbitraryResample::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::ArbitraryResample>* c) {
  assert(c != nullptr);
  ::kaldi::ArbitraryResample* cpp = __resample_clifwrap::pyArbitraryResample::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__resample_clifwrap::pyArbitraryResample::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ArbitraryResample instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::ArbitraryResample* c) {
  assert(c != nullptr);
  ::kaldi::ArbitraryResample* cpp = __resample_clifwrap::pyArbitraryResample::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::ArbitraryResample>* c) {
  assert(c != nullptr);
  ::kaldi::ArbitraryResample* cpp = __resample_clifwrap::pyArbitraryResample::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::ArbitraryResample* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__resample_clifwrap::pyArbitraryResample::wrapper_Type, NULL, NULL);
  reinterpret_cast<__resample_clifwrap::pyArbitraryResample::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ArbitraryResample>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::ArbitraryResample> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__resample_clifwrap::pyArbitraryResample::wrapper_Type, NULL, NULL);
  reinterpret_cast<__resample_clifwrap::pyArbitraryResample::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ArbitraryResample>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::ArbitraryResample> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__resample_clifwrap::pyArbitraryResample::wrapper_Type, NULL, NULL);
  reinterpret_cast<__resample_clifwrap::pyArbitraryResample::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::ArbitraryResample>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::ArbitraryResample& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__resample_clifwrap::pyArbitraryResample::wrapper_Type, NULL, NULL);
  reinterpret_cast<__resample_clifwrap::pyArbitraryResample::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::ArbitraryResample>(c);
  return py;
}

// LinearResample to/from ::kaldi::LinearResample conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::LinearResample** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::LinearResample* cpp = __resample_clifwrap::pyLinearResample::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::LinearResample>* c) {
  assert(c != nullptr);
  ::kaldi::LinearResample* cpp = __resample_clifwrap::pyLinearResample::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__resample_clifwrap::pyLinearResample::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::LinearResample>* c) {
  assert(c != nullptr);
  ::kaldi::LinearResample* cpp = __resample_clifwrap::pyLinearResample::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__resample_clifwrap::pyLinearResample::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert LinearResample instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::LinearResample* c) {
  assert(c != nullptr);
  ::kaldi::LinearResample* cpp = __resample_clifwrap::pyLinearResample::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::LinearResample>* c) {
  assert(c != nullptr);
  ::kaldi::LinearResample* cpp = __resample_clifwrap::pyLinearResample::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::LinearResample* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__resample_clifwrap::pyLinearResample::wrapper_Type, NULL, NULL);
  reinterpret_cast<__resample_clifwrap::pyLinearResample::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::LinearResample>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::LinearResample> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__resample_clifwrap::pyLinearResample::wrapper_Type, NULL, NULL);
  reinterpret_cast<__resample_clifwrap::pyLinearResample::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::LinearResample>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::LinearResample> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__resample_clifwrap::pyLinearResample::wrapper_Type, NULL, NULL);
  reinterpret_cast<__resample_clifwrap::pyLinearResample::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::LinearResample>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::LinearResample& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__resample_clifwrap::pyLinearResample::wrapper_Type, NULL, NULL);
  reinterpret_cast<__resample_clifwrap::pyLinearResample::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::LinearResample>(c);
  return py;
}

}  // namespace kaldi
