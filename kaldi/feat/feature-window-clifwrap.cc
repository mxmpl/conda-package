//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/feat/feature-window.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "itf/options-itf-clifwrap.h"
#include "feature-window-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __feature__window_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyFrameExtractionOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::FrameExtractionOptions> cpp;
};
static ::kaldi::FrameExtractionOptions* ThisPtr(PyObject*);

static PyObject* get_samp_freq(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->samp_freq, {});
}

static int set_samp_freq(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the samp_freq attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->samp_freq)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for samp_freq:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_frame_shift_ms(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->frame_shift_ms, {});
}

static int set_frame_shift_ms(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the frame_shift_ms attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->frame_shift_ms)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for frame_shift_ms:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_frame_length_ms(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->frame_length_ms, {});
}

static int set_frame_length_ms(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the frame_length_ms attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->frame_length_ms)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for frame_length_ms:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_dither(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->dither, {});
}

static int set_dither(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the dither attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->dither)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for dither:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_preemph_coeff(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->preemph_coeff, {});
}

static int set_preemph_coeff(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the preemph_coeff attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->preemph_coeff)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for preemph_coeff:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_remove_dc_offset(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->remove_dc_offset, {});
}

static int set_remove_dc_offset(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the remove_dc_offset attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->remove_dc_offset)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for remove_dc_offset:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_window_type(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->window_type, _1);
}

static int set_window_type(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the window_type attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->window_type)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for window_type:str", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_round_to_power_of_two(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->round_to_power_of_two, {});
}

static int set_round_to_power_of_two(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the round_to_power_of_two attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->round_to_power_of_two)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for round_to_power_of_two:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_blackman_coeff(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->blackman_coeff, {});
}

static int set_blackman_coeff(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the blackman_coeff attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->blackman_coeff)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for blackman_coeff:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_snip_edges(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->snip_edges, {});
}

static int set_snip_edges(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the snip_edges attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->snip_edges)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for snip_edges:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_allow_downsample(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->allow_downsample, {});
}

static int set_allow_downsample(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the allow_downsample attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->allow_downsample)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for allow_downsample:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::FrameExtractionOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// window_shift() -> int
static PyObject* wrapWindowShift_as_window_shift(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::FrameExtractionOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->WindowShift();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// window_size() -> int
static PyObject* wrapWindowSize_as_window_size(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::FrameExtractionOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->WindowSize();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// padded_window_size() -> int
static PyObject* wrapPaddedWindowSize_as_padded_window_size(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::FrameExtractionOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->PaddedWindowSize();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyGetSetDef Properties[] = {
  {C("samp_freq"), get_samp_freq, set_samp_freq, C("C++ ::kaldi::BaseFloat FrameExtractionOptions.samp_freq")},
  {C("frame_shift_ms"), get_frame_shift_ms, set_frame_shift_ms, C("C++ ::kaldi::BaseFloat FrameExtractionOptions.frame_shift_ms")},
  {C("frame_length_ms"), get_frame_length_ms, set_frame_length_ms, C("C++ ::kaldi::BaseFloat FrameExtractionOptions.frame_length_ms")},
  {C("dither"), get_dither, set_dither, C("C++ ::kaldi::BaseFloat FrameExtractionOptions.dither")},
  {C("preemph_coeff"), get_preemph_coeff, set_preemph_coeff, C("C++ ::kaldi::BaseFloat FrameExtractionOptions.preemph_coeff")},
  {C("remove_dc_offset"), get_remove_dc_offset, set_remove_dc_offset, C("C++ bool FrameExtractionOptions.remove_dc_offset")},
  {C("window_type"), get_window_type, set_window_type, C("C++ ::std::string FrameExtractionOptions.window_type")},
  {C("round_to_power_of_two"), get_round_to_power_of_two, set_round_to_power_of_two, C("C++ bool FrameExtractionOptions.round_to_power_of_two")},
  {C("blackman_coeff"), get_blackman_coeff, set_blackman_coeff, C("C++ ::kaldi::BaseFloat FrameExtractionOptions.blackman_coeff")},
  {C("snip_edges"), get_snip_edges, set_snip_edges, C("C++ bool FrameExtractionOptions.snip_edges")},
  {C("allow_downsample"), get_allow_downsample, set_allow_downsample, C("C++ bool FrameExtractionOptions.allow_downsample")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::FrameExtractionOptions::Register(::kaldi::OptionsItf *)")},
  {C("window_shift"), (PyCFunction)wrapWindowShift_as_window_shift, METH_NOARGS, C("window_shift() -> int\n  Calls C++ function\n  int ::kaldi::FrameExtractionOptions::WindowShift()")},
  {C("window_size"), (PyCFunction)wrapWindowSize_as_window_size, METH_NOARGS, C("window_size() -> int\n  Calls C++ function\n  int ::kaldi::FrameExtractionOptions::WindowSize()")},
  {C("padded_window_size"), (PyCFunction)wrapPaddedWindowSize_as_padded_window_size, METH_NOARGS, C("padded_window_size() -> int\n  Calls C++ function\n  int ::kaldi::FrameExtractionOptions::PaddedWindowSize()")},
  {}
};

// FrameExtractionOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// FrameExtractionOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// FrameExtractionOptions __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_feature_window.FrameExtractionOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::FrameExtractionOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "FrameExtractionOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::FrameExtractionOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::FrameExtractionOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_FrameExtractionOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::FrameExtractionOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::FrameExtractionOptions* c = static_cast<::kaldi::FrameExtractionOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::FrameExtractionOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyFrameExtractionOptions

namespace pyFeatureWindowFunction {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::FeatureWindowFunction> cpp;
};
static ::kaldi::FeatureWindowFunction* ThisPtr(PyObject*);

// @classmethod from_options(opts:FrameExtractionOptions) -> FeatureWindowFunction
static PyObject* wrapFeatureWindowFunction_as_from_options(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_options", names, &a[0])) return nullptr;
  ::kaldi::FrameExtractionOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_options", names[0], "::kaldi::FrameExtractionOptions", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::FeatureWindowFunction> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::FeatureWindowFunction>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_other(other:FeatureWindowFunction) -> FeatureWindowFunction
static PyObject* wrapFeatureWindowFunction_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::kaldi::FeatureWindowFunction* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::kaldi::FeatureWindowFunction", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::FeatureWindowFunction> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::FeatureWindowFunction>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyObject* get_window(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->window), {});
}

static int set_window(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the window attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->window)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for window:Vector", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("window"), get_window, set_window, C("C++ ::kaldi::Vector< ::kaldi::BaseFloat> FeatureWindowFunction.window")},
  {}
};

static PyMethodDef Methods[] = {
  {C("from_options"), (PyCFunction)wrapFeatureWindowFunction_as_from_options, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_options(opts:FrameExtractionOptions) -> FeatureWindowFunction\n  Calls C++ function\n  std::unique_ptr<::kaldi::FeatureWindowFunction> ::kaldi::FeatureWindowFunction::FeatureWindowFunction(::kaldi::FrameExtractionOptions)")},
  {C("from_other"), (PyCFunction)wrapFeatureWindowFunction_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(other:FeatureWindowFunction) -> FeatureWindowFunction\n  Calls C++ function\n  std::unique_ptr<::kaldi::FeatureWindowFunction> ::kaldi::FeatureWindowFunction::FeatureWindowFunction(::kaldi::FeatureWindowFunction)")},
  {}
};

// FeatureWindowFunction __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// FeatureWindowFunction __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// FeatureWindowFunction __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_feature_window.FeatureWindowFunction", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::FeatureWindowFunction", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "FeatureWindowFunction takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::FeatureWindowFunction>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::FeatureWindowFunction* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_FeatureWindowFunction"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::FeatureWindowFunction"));
      if (!PyErr_Occurred()) {
        ::kaldi::FeatureWindowFunction* c = static_cast<::kaldi::FeatureWindowFunction*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::FeatureWindowFunction*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyFeatureWindowFunction

// num_frames(num_samples:int, opts:FrameExtractionOptions, flush:bool=default) -> int
static PyObject* wrapNumFrames_as_num_frames(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("num_samples"),
      C("opts"),
      C("flush"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:num_frames", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  long arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("num_frames", names[0], "long", a[0]);
  ::kaldi::FrameExtractionOptions* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("num_frames", names[1], "::kaldi::FrameExtractionOptions", a[1]);
  bool arg3;
  if (nargs > 2) {
    if (!a[2]) arg3 = (bool)true;
    else if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("num_frames", names[2], "bool", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    ret0 = ::kaldi::NumFrames(std::move(arg1), *arg2); break;
  case 3:
    ret0 = ::kaldi::NumFrames(std::move(arg1), *arg2, std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// first_sample_of_frame(frame:int, opts:FrameExtractionOptions) -> int
static PyObject* wrapFirstSampleOfFrame_as_first_sample_of_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:first_sample_of_frame", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("first_sample_of_frame", names[0], "int", a[0]);
  ::kaldi::FrameExtractionOptions* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("first_sample_of_frame", names[1], "::kaldi::FrameExtractionOptions", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  long ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::FirstSampleOfFrame(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// dither(waveform:VectorBase, dither_value:float)
static PyObject* wrapDither_as_dither(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("waveform"),
      C("dither_value"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:dither", names, &a[0], &a[1])) return nullptr;
  ::kaldi::VectorBase<float> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("dither", names[0], "::kaldi::VectorBase<float> *", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("dither", names[1], "float", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::Dither(arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// preemphasize(waveform:VectorBase, preemph_coeff:float)
static PyObject* wrapPreemphasize_as_preemphasize(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("waveform"),
      C("preemph_coeff"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:preemphasize", names, &a[0], &a[1])) return nullptr;
  ::kaldi::VectorBase<float> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("preemphasize", names[0], "::kaldi::VectorBase<float> *", a[0]);
  float arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("preemphasize", names[1], "float", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::Preemphasize(arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// extract_waveform_remainder(wave:VectorBase, opts:FrameExtractionOptions, wave_remainder:Vector)
static PyObject* wrapExtractWaveformRemainder_as_extract_waveform_remainder(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("wave"),
      C("opts"),
      C("wave_remainder"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:extract_waveform_remainder", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("extract_waveform_remainder", names[0], "::kaldi::VectorBase<float>", a[0]);
  ::kaldi::FrameExtractionOptions* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("extract_waveform_remainder", names[1], "::kaldi::FrameExtractionOptions", a[1]);
  ::kaldi::Vector<float> * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("extract_waveform_remainder", names[2], "::kaldi::Vector<float> *", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::ExtractWaveformRemainder(*arg1, *arg2, arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("num_frames"), (PyCFunction)wrapNumFrames_as_num_frames, METH_VARARGS | METH_KEYWORDS, C("num_frames(num_samples:int, opts:FrameExtractionOptions, flush:bool=default) -> int\n  Calls C++ function\n  int ::kaldi::NumFrames(long, ::kaldi::FrameExtractionOptions, bool)")},
  {C("first_sample_of_frame"), (PyCFunction)wrapFirstSampleOfFrame_as_first_sample_of_frame, METH_VARARGS | METH_KEYWORDS, C("first_sample_of_frame(frame:int, opts:FrameExtractionOptions) -> int\n  Calls C++ function\n  long ::kaldi::FirstSampleOfFrame(int, ::kaldi::FrameExtractionOptions)")},
  {C("dither"), (PyCFunction)wrapDither_as_dither, METH_VARARGS | METH_KEYWORDS, C("dither(waveform:VectorBase, dither_value:float)\n  Calls C++ function\n  void ::kaldi::Dither(::kaldi::VectorBase<float> *, float)")},
  {C("preemphasize"), (PyCFunction)wrapPreemphasize_as_preemphasize, METH_VARARGS | METH_KEYWORDS, C("preemphasize(waveform:VectorBase, preemph_coeff:float)\n  Calls C++ function\n  void ::kaldi::Preemphasize(::kaldi::VectorBase<float> *, float)")},
  {C("extract_waveform_remainder"), (PyCFunction)wrapExtractWaveformRemainder_as_extract_waveform_remainder, METH_VARARGS | METH_KEYWORDS, C("extract_waveform_remainder(wave:VectorBase, opts:FrameExtractionOptions, wave_remainder:Vector)\n  Calls C++ function\n  void ::kaldi::ExtractWaveformRemainder(::kaldi::VectorBase<float>, ::kaldi::FrameExtractionOptions, ::kaldi::Vector<float> *)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyFrameExtractionOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyFrameExtractionOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyFeatureWindowFunction::wrapper_Type) < 0) return false;
  Py_INCREF(&pyFeatureWindowFunction::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_feature_window",  // module name
  "CLIF-generated module for feat/feature-window.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "FrameExtractionOptions", reinterpret_cast<PyObject*>(&pyFrameExtractionOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "FeatureWindowFunction", reinterpret_cast<PyObject*>(&pyFeatureWindowFunction::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __feature__window_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// FeatureWindowFunction to/from ::kaldi::FeatureWindowFunction conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::FeatureWindowFunction** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::FeatureWindowFunction* cpp = __feature__window_clifwrap::pyFeatureWindowFunction::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::FeatureWindowFunction>* c) {
  assert(c != nullptr);
  ::kaldi::FeatureWindowFunction* cpp = __feature__window_clifwrap::pyFeatureWindowFunction::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__feature__window_clifwrap::pyFeatureWindowFunction::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::FeatureWindowFunction>* c) {
  assert(c != nullptr);
  ::kaldi::FeatureWindowFunction* cpp = __feature__window_clifwrap::pyFeatureWindowFunction::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__feature__window_clifwrap::pyFeatureWindowFunction::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert FeatureWindowFunction instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::FeatureWindowFunction* c) {
  assert(c != nullptr);
  ::kaldi::FeatureWindowFunction* cpp = __feature__window_clifwrap::pyFeatureWindowFunction::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::FeatureWindowFunction>* c) {
  assert(c != nullptr);
  ::kaldi::FeatureWindowFunction* cpp = __feature__window_clifwrap::pyFeatureWindowFunction::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::FeatureWindowFunction* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__window_clifwrap::pyFeatureWindowFunction::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__window_clifwrap::pyFeatureWindowFunction::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FeatureWindowFunction>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::FeatureWindowFunction> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__window_clifwrap::pyFeatureWindowFunction::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__window_clifwrap::pyFeatureWindowFunction::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FeatureWindowFunction>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::FeatureWindowFunction> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__window_clifwrap::pyFeatureWindowFunction::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__window_clifwrap::pyFeatureWindowFunction::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FeatureWindowFunction>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::FeatureWindowFunction& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__feature__window_clifwrap::pyFeatureWindowFunction::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__window_clifwrap::pyFeatureWindowFunction::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::FeatureWindowFunction>(c);
  return py;
}

// FrameExtractionOptions to/from ::kaldi::FrameExtractionOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::FrameExtractionOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::FrameExtractionOptions* cpp = __feature__window_clifwrap::pyFrameExtractionOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::FrameExtractionOptions>* c) {
  assert(c != nullptr);
  ::kaldi::FrameExtractionOptions* cpp = __feature__window_clifwrap::pyFrameExtractionOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__feature__window_clifwrap::pyFrameExtractionOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::FrameExtractionOptions>* c) {
  assert(c != nullptr);
  ::kaldi::FrameExtractionOptions* cpp = __feature__window_clifwrap::pyFrameExtractionOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__feature__window_clifwrap::pyFrameExtractionOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert FrameExtractionOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::FrameExtractionOptions* c) {
  assert(c != nullptr);
  ::kaldi::FrameExtractionOptions* cpp = __feature__window_clifwrap::pyFrameExtractionOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::FrameExtractionOptions>* c) {
  assert(c != nullptr);
  ::kaldi::FrameExtractionOptions* cpp = __feature__window_clifwrap::pyFrameExtractionOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::FrameExtractionOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__window_clifwrap::pyFrameExtractionOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__window_clifwrap::pyFrameExtractionOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FrameExtractionOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::FrameExtractionOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__window_clifwrap::pyFrameExtractionOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__window_clifwrap::pyFrameExtractionOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FrameExtractionOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::FrameExtractionOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__feature__window_clifwrap::pyFrameExtractionOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__window_clifwrap::pyFrameExtractionOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::FrameExtractionOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::FrameExtractionOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__feature__window_clifwrap::pyFrameExtractionOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__feature__window_clifwrap::pyFrameExtractionOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::FrameExtractionOptions>(c);
  return py;
}

}  // namespace kaldi
