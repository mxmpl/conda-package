//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/feat/signal.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "signal-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __signal_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


// convolve_signals(filter:Vector, signal:Vector)
static PyObject* wrapConvolveSignals_as_convolve_signals(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("filter"),
      C("signal"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:convolve_signals", names, &a[0], &a[1])) return nullptr;
  ::kaldi::Vector<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("convolve_signals", names[0], "::kaldi::Vector<float>", a[0]);
  ::kaldi::Vector<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("convolve_signals", names[1], "::kaldi::Vector<float> *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::ConvolveSignals(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// fft_based_convolve_signals(filter:Vector, signal:Vector)
static PyObject* wrapFFTbasedConvolveSignals_as_fft_based_convolve_signals(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("filter"),
      C("signal"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:fft_based_convolve_signals", names, &a[0], &a[1])) return nullptr;
  ::kaldi::Vector<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("fft_based_convolve_signals", names[0], "::kaldi::Vector<float>", a[0]);
  ::kaldi::Vector<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("fft_based_convolve_signals", names[1], "::kaldi::Vector<float> *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::FFTbasedConvolveSignals(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// fft_based_block_convolve_signals(filter:Vector, signal:Vector)
static PyObject* wrapFFTbasedBlockConvolveSignals_as_fft_based_block_convolve_signals(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("filter"),
      C("signal"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:fft_based_block_convolve_signals", names, &a[0], &a[1])) return nullptr;
  ::kaldi::Vector<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("fft_based_block_convolve_signals", names[0], "::kaldi::Vector<float>", a[0]);
  ::kaldi::Vector<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("fft_based_block_convolve_signals", names[1], "::kaldi::Vector<float> *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::FFTbasedBlockConvolveSignals(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("convolve_signals"), (PyCFunction)wrapConvolveSignals_as_convolve_signals, METH_VARARGS | METH_KEYWORDS, C("convolve_signals(filter:Vector, signal:Vector)\n  Calls C++ function\n  void ::kaldi::ConvolveSignals(::kaldi::Vector<float>, ::kaldi::Vector<float> *)")},
  {C("fft_based_convolve_signals"), (PyCFunction)wrapFFTbasedConvolveSignals_as_fft_based_convolve_signals, METH_VARARGS | METH_KEYWORDS, C("fft_based_convolve_signals(filter:Vector, signal:Vector)\n  Calls C++ function\n  void ::kaldi::FFTbasedConvolveSignals(::kaldi::Vector<float>, ::kaldi::Vector<float> *)")},
  {C("fft_based_block_convolve_signals"), (PyCFunction)wrapFFTbasedBlockConvolveSignals_as_fft_based_block_convolve_signals, METH_VARARGS | METH_KEYWORDS, C("fft_based_block_convolve_signals(filter:Vector, signal:Vector)\n  Calls C++ function\n  void ::kaldi::FFTbasedBlockConvolveSignals(::kaldi::Vector<float>, ::kaldi::Vector<float> *)")},
  {}
};

bool Ready() {
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_signal",  // module name
  "CLIF-generated module for feat/signal.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __signal_clifwrap
