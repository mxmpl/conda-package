//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/hmm/transition-model.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "itf/options-itf-clifwrap.h"
#include "itf/context-dep-itf-clifwrap.h"
#include "base/iostream-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "hmm/hmm-topology-clifwrap.h"
#include "transition-model-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __transition__model_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyMleTransitionUpdateConfig {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::MleTransitionUpdateConfig> cpp;
};
static ::kaldi::MleTransitionUpdateConfig* ThisPtr(PyObject*);

static PyObject* get_floor(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->floor, {});
}

static int set_floor(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the floor attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->floor)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for floor:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_mincount(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->mincount, {});
}

static int set_mincount(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the mincount attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->mincount)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for mincount:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_share_for_pdfs(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->share_for_pdfs, {});
}

static int set_share_for_pdfs(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the share_for_pdfs attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->share_for_pdfs)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for share_for_pdfs:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// __init__(floor:float=default, mincount:float=default, share_for_pdfs:bool=default)
static PyObject* wrapMleTransitionUpdateConfig_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("floor"),
      C("mincount"),
      C("share_for_pdfs"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|OOO:__init__", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  float arg1;
  if (nargs > 0) {
    if (!a[0]) arg1 = (float)1.000000e-02;
    else if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "float", a[0]);
  }
  float arg2;
  if (nargs > 1) {
    if (!a[1]) arg2 = (float)5.000000e+00;
    else if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "float", a[1]);
  }
  bool arg3;
  if (nargs > 2) {
    if (!a[2]) arg3 = (bool)false;
    else if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "bool", a[2]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::MleTransitionUpdateConfig>(); break;
  case 1:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::MleTransitionUpdateConfig>(std::move(arg1)); break;
  case 2:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::MleTransitionUpdateConfig>(std::move(arg1), std::move(arg2)); break;
  case 3:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::MleTransitionUpdateConfig>(std::move(arg1), std::move(arg2), std::move(arg3)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::MleTransitionUpdateConfig* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("floor"), get_floor, set_floor, C("C++ ::kaldi::BaseFloat MleTransitionUpdateConfig.floor")},
  {C("mincount"), get_mincount, set_mincount, C("C++ ::kaldi::BaseFloat MleTransitionUpdateConfig.mincount")},
  {C("share_for_pdfs"), get_share_for_pdfs, set_share_for_pdfs, C("C++ bool MleTransitionUpdateConfig.share_for_pdfs")},
  {}
};

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapMleTransitionUpdateConfig_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(floor:float=default, mincount:float=default, share_for_pdfs:bool=default)\n  Calls C++ function\n  void ::kaldi::MleTransitionUpdateConfig::MleTransitionUpdateConfig(float, float, bool)")},
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::MleTransitionUpdateConfig::Register(::kaldi::OptionsItf *)")},
  {}
};

// MleTransitionUpdateConfig __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// MleTransitionUpdateConfig __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// MleTransitionUpdateConfig __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_transition_model.MleTransitionUpdateConfig", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::MleTransitionUpdateConfig", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapMleTransitionUpdateConfig_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::MleTransitionUpdateConfig* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_MleTransitionUpdateConfig"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::MleTransitionUpdateConfig"));
      if (!PyErr_Occurred()) {
        ::kaldi::MleTransitionUpdateConfig* c = static_cast<::kaldi::MleTransitionUpdateConfig*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::MleTransitionUpdateConfig*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyMleTransitionUpdateConfig

namespace pyMapTransitionUpdateConfig {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::MapTransitionUpdateConfig> cpp;
};
static ::kaldi::MapTransitionUpdateConfig* ThisPtr(PyObject*);

static PyObject* get_tau(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->tau, {});
}

static int set_tau(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the tau attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->tau)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for tau:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_share_for_pdfs(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->share_for_pdfs, {});
}

static int set_share_for_pdfs(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the share_for_pdfs attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->share_for_pdfs)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for share_for_pdfs:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::MapTransitionUpdateConfig* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("tau"), get_tau, set_tau, C("C++ ::kaldi::BaseFloat MapTransitionUpdateConfig.tau")},
  {C("share_for_pdfs"), get_share_for_pdfs, set_share_for_pdfs, C("C++ bool MapTransitionUpdateConfig.share_for_pdfs")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::MapTransitionUpdateConfig::Register(::kaldi::OptionsItf *)")},
  {}
};

// MapTransitionUpdateConfig __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// MapTransitionUpdateConfig __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// MapTransitionUpdateConfig __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_transition_model.MapTransitionUpdateConfig", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::MapTransitionUpdateConfig", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "MapTransitionUpdateConfig takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::MapTransitionUpdateConfig>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::MapTransitionUpdateConfig* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_MapTransitionUpdateConfig"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::MapTransitionUpdateConfig"));
      if (!PyErr_Occurred()) {
        ::kaldi::MapTransitionUpdateConfig* c = static_cast<::kaldi::MapTransitionUpdateConfig*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::MapTransitionUpdateConfig*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyMapTransitionUpdateConfig

namespace pyTransitionModel {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::TransitionModel> cpp;
};
static ::kaldi::TransitionModel* ThisPtr(PyObject*);

// @classmethod from_topo(ctx_dep:ContextDependencyInterface, hmm_topo:HmmTopology) -> TransitionModel
static PyObject* wrapTransitionModel_as_from_topo(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("ctx_dep"),
      C("hmm_topo"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:from_topo", names, &a[0], &a[1])) return nullptr;
  ::kaldi::ContextDependencyInterface* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_topo", names[0], "::kaldi::ContextDependencyInterface", a[0]);
  ::kaldi::HmmTopology* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_topo", names[1], "::kaldi::HmmTopology", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::TransitionModel> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::TransitionModel>(*arg1, *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// read(is:istream, binary:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// get_topo() -> HmmTopology
static PyObject* wrapGetTopo_as_get_topo(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::HmmTopology ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetTopo();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// tuple_to_transition_state(phone:int, hmm_state:int, pdf:int, self_loop_pdf:int) -> int
static PyObject* wrapTupleToTransitionState_as_tuple_to_transition_state(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("phone"),
      C("hmm_state"),
      C("pdf"),
      C("self_loop_pdf"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:tuple_to_transition_state", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("tuple_to_transition_state", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("tuple_to_transition_state", names[1], "int", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("tuple_to_transition_state", names[2], "int", a[2]);
  int arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("tuple_to_transition_state", names[3], "int", a[3]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->TupleToTransitionState(std::move(arg1), std::move(arg2), std::move(arg3), std::move(arg4));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// pair_to_transition_id(trans_state:int, trans_index:int) -> int
static PyObject* wrapPairToTransitionId_as_pair_to_transition_id(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("trans_state"),
      C("trans_index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:pair_to_transition_id", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("pair_to_transition_id", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("pair_to_transition_id", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->PairToTransitionId(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// transition_id_to_transition_state(trans_id:int) -> int
static PyObject* wrapTransitionIdToTransitionState_as_transition_id_to_transition_state(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("trans_id"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:transition_id_to_transition_state", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("transition_id_to_transition_state", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->TransitionIdToTransitionState(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// transition_id_to_transition_index(trans_id:int) -> int
static PyObject* wrapTransitionIdToTransitionIndex_as_transition_id_to_transition_index(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("trans_id"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:transition_id_to_transition_index", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("transition_id_to_transition_index", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->TransitionIdToTransitionIndex(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// transition_state_to_phone(trans_state:int) -> int
static PyObject* wrapTransitionStateToPhone_as_transition_state_to_phone(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("trans_state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:transition_state_to_phone", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("transition_state_to_phone", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->TransitionStateToPhone(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// transition_state_to_hmm_state(trans_state:int) -> int
static PyObject* wrapTransitionStateToHmmState_as_transition_state_to_hmm_state(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("trans_state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:transition_state_to_hmm_state", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("transition_state_to_hmm_state", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->TransitionStateToHmmState(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// transition_state_to_forward_pdf_class(trans_state:int) -> int
static PyObject* wrapTransitionStateToForwardPdfClass_as_transition_state_to_forward_pdf_class(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("trans_state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:transition_state_to_forward_pdf_class", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("transition_state_to_forward_pdf_class", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->TransitionStateToForwardPdfClass(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// transition_state_to_self_loop_pdf_class(trans_state:int) -> int
static PyObject* wrapTransitionStateToSelfLoopPdfClass_as_transition_state_to_self_loop_pdf_class(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("trans_state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:transition_state_to_self_loop_pdf_class", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("transition_state_to_self_loop_pdf_class", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->TransitionStateToSelfLoopPdfClass(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// transition_state_to_forward_pdf(trans_state:int) -> int
static PyObject* wrapTransitionStateToForwardPdf_as_transition_state_to_forward_pdf(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("trans_state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:transition_state_to_forward_pdf", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("transition_state_to_forward_pdf", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->TransitionStateToForwardPdf(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// transition_state_to_self_loop_pdf(trans_state:int) -> int
static PyObject* wrapTransitionStateToSelfLoopPdf_as_transition_state_to_self_loop_pdf(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("trans_state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:transition_state_to_self_loop_pdf", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("transition_state_to_self_loop_pdf", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->TransitionStateToSelfLoopPdf(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// self_loop_of(trans_state:int) -> int
static PyObject* wrapSelfLoopOf_as_self_loop_of(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("trans_state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:self_loop_of", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("self_loop_of", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->SelfLoopOf(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// transition_id_to_pdf(trans_id:int) -> int
static PyObject* wrapTransitionIdToPdf_as_transition_id_to_pdf(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("trans_id"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:transition_id_to_pdf", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("transition_id_to_pdf", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->TransitionIdToPdf(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// transition_id_to_phone(trans_id:int) -> int
static PyObject* wrapTransitionIdToPhone_as_transition_id_to_phone(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("trans_id"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:transition_id_to_phone", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("transition_id_to_phone", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->TransitionIdToPhone(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// transition_id_to_pdf_class(trans_id:int) -> int
static PyObject* wrapTransitionIdToPdfClass_as_transition_id_to_pdf_class(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("trans_id"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:transition_id_to_pdf_class", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("transition_id_to_pdf_class", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->TransitionIdToPdfClass(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// transition_id_to_hmm_state(trans_id:int) -> int
static PyObject* wrapTransitionIdToHmmState_as_transition_id_to_hmm_state(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("trans_id"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:transition_id_to_hmm_state", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("transition_id_to_hmm_state", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->TransitionIdToHmmState(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_final(trans_id:int) -> bool
static PyObject* wrapIsFinal_as_is_final(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("trans_id"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_final", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_final", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsFinal(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_self_loop(trans_id:int) -> bool
static PyObject* wrapIsSelfLoop_as_is_self_loop(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("trans_id"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_self_loop", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_self_loop", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsSelfLoop(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_transition_ids() -> int
static PyObject* wrapNumTransitionIds_as_num_transition_ids(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumTransitionIds();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_transition_indices(trans_state:int) -> int
static PyObject* wrapNumTransitionIndices_as_num_transition_indices(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("trans_state"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:num_transition_indices", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("num_transition_indices", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumTransitionIndices(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_transition_states() -> int
static PyObject* wrapNumTransitionStates_as_num_transition_states(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumTransitionStates();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_pdfs() -> int
static PyObject* wrapNumPdfs_as_num_pdfs(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumPdfs();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_phones() -> int
static PyObject* wrapNumPhones_as_num_phones(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumPhones();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_phones() -> list<int>
static PyObject* wrapGetPhones_as_get_phones(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::vector< ::int32> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetPhones();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_transition_prob(trans_id:int) -> float
static PyObject* wrapGetTransitionProb_as_get_transition_prob(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("trans_id"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_transition_prob", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_transition_prob", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetTransitionProb(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_transition_log_prob(trans_id:int) -> float
static PyObject* wrapGetTransitionLogProb_as_get_transition_log_prob(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("trans_id"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_transition_log_prob", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_transition_log_prob", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetTransitionLogProb(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_transition_log_prob_ignoring_self_loops(trans_id:int) -> float
static PyObject* wrapGetTransitionLogProbIgnoringSelfLoops_as_get_transition_log_prob_ignoring_self_loops(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("trans_id"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_transition_log_prob_ignoring_self_loops", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_transition_log_prob_ignoring_self_loops", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetTransitionLogProbIgnoringSelfLoops(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_non_self_loop_log_prob(trans_id:int) -> float
static PyObject* wrapGetNonSelfLoopLogProb_as_get_non_self_loop_log_prob(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("trans_id"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_non_self_loop_log_prob", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_non_self_loop_log_prob", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetNonSelfLoopLogProb(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// mle_update(stats:DoubleVector, cfg:MleTransitionUpdateConfig) -> (objf_impr_out:float, count_out:float)
static PyObject* wrapMleUpdate_as_mle_update(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("stats"),
      C("cfg"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:mle_update", names, &a[0], &a[1])) return nullptr;
  ::kaldi::Vector<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("mle_update", names[0], "::kaldi::Vector<double>", a[0]);
  ::kaldi::MleTransitionUpdateConfig* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("mle_update", names[1], "::kaldi::MleTransitionUpdateConfig", a[1]);
  float ret0{};
  float ret1{};
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->MleUpdate(*arg1, *arg2, &ret0, &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// map_update(stats:DoubleVector, cfg:MapTransitionUpdateConfig) -> (objf_impr_out:float, count_out:float)
static PyObject* wrapMapUpdate_as_map_update(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("stats"),
      C("cfg"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:map_update", names, &a[0], &a[1])) return nullptr;
  ::kaldi::Vector<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("map_update", names[0], "::kaldi::Vector<double>", a[0]);
  ::kaldi::MapTransitionUpdateConfig* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("map_update", names[1], "::kaldi::MapTransitionUpdateConfig", a[1]);
  float ret0{};
  float ret1{};
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->MapUpdate(*arg1, *arg2, &ret0, &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// print_model(os:ostream, phone_names:list<str>, occs:DoubleVector=default)
static PyObject* wrapPrint_as_print_model(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3]{};
  char* names[] = {
      C("os"),
      C("phone_names"),
      C("occs"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO|O:print_model", names, &a[0], &a[1], &a[2])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 3; nargs > 2; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("print_model", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  ::std::vector< ::std::string> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("print_model", names[1], "::std::vector< ::std::string>", a[1]);
  ::kaldi::Vector<double> * arg3;
  if (nargs > 2) {
    if (!a[2]) arg3 = (::kaldi::Vector<double> *)nullptr;
    else if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("print_model", names[2], "::kaldi::Vector<double> *", a[2]);
  }
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 2:
    c->Print(*arg1, std::move(arg2)); break;
  case 3:
    c->Print(*arg1, std::move(arg2), arg3); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// init_stats(stats:DoubleVector)
static PyObject* wrapInitStats_as_init_stats(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("stats"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:init_stats", names, &a[0])) return nullptr;
  ::kaldi::Vector<double> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("init_stats", names[0], "::kaldi::Vector<double> *", a[0]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->InitStats(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// accumulate(prob:float, trans_id:int, stats:DoubleVector)
static PyObject* wrapAccumulate_as_accumulate(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("prob"),
      C("trans_id"),
      C("stats"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:accumulate", names, &a[0], &a[1], &a[2])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accumulate", names[0], "float", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accumulate", names[1], "int", a[1]);
  ::kaldi::Vector<double> * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("accumulate", names[2], "::kaldi::Vector<double> *", a[2]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Accumulate(std::move(arg1), std::move(arg2), arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// compatible(other:TransitionModel) -> bool
static PyObject* wrapCompatible_as_compatible(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:compatible", names, &a[0])) return nullptr;
  ::kaldi::TransitionModel* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("compatible", names[0], "::kaldi::TransitionModel", a[0]);
  // Call actual C++ method.
  ::kaldi::TransitionModel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Compatible(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("from_topo"), (PyCFunction)wrapTransitionModel_as_from_topo, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_topo(ctx_dep:ContextDependencyInterface, hmm_topo:HmmTopology) -> TransitionModel\n  Calls C++ function\n  std::unique_ptr<::kaldi::TransitionModel> ::kaldi::TransitionModel::TransitionModel(::kaldi::ContextDependencyInterface, ::kaldi::HmmTopology)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool)\n  Calls C++ function\n  void ::kaldi::TransitionModel::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool)")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::TransitionModel::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("get_topo"), (PyCFunction)wrapGetTopo_as_get_topo, METH_NOARGS, C("get_topo() -> HmmTopology\n  Calls C++ function\n  ::kaldi::HmmTopology ::kaldi::TransitionModel::GetTopo()")},
  {C("tuple_to_transition_state"), (PyCFunction)wrapTupleToTransitionState_as_tuple_to_transition_state, METH_VARARGS | METH_KEYWORDS, C("tuple_to_transition_state(phone:int, hmm_state:int, pdf:int, self_loop_pdf:int) -> int\n  Calls C++ function\n  int ::kaldi::TransitionModel::TupleToTransitionState(int, int, int, int)")},
  {C("pair_to_transition_id"), (PyCFunction)wrapPairToTransitionId_as_pair_to_transition_id, METH_VARARGS | METH_KEYWORDS, C("pair_to_transition_id(trans_state:int, trans_index:int) -> int\n  Calls C++ function\n  int ::kaldi::TransitionModel::PairToTransitionId(int, int)")},
  {C("transition_id_to_transition_state"), (PyCFunction)wrapTransitionIdToTransitionState_as_transition_id_to_transition_state, METH_VARARGS | METH_KEYWORDS, C("transition_id_to_transition_state(trans_id:int) -> int\n  Calls C++ function\n  int ::kaldi::TransitionModel::TransitionIdToTransitionState(int)")},
  {C("transition_id_to_transition_index"), (PyCFunction)wrapTransitionIdToTransitionIndex_as_transition_id_to_transition_index, METH_VARARGS | METH_KEYWORDS, C("transition_id_to_transition_index(trans_id:int) -> int\n  Calls C++ function\n  int ::kaldi::TransitionModel::TransitionIdToTransitionIndex(int)")},
  {C("transition_state_to_phone"), (PyCFunction)wrapTransitionStateToPhone_as_transition_state_to_phone, METH_VARARGS | METH_KEYWORDS, C("transition_state_to_phone(trans_state:int) -> int\n  Calls C++ function\n  int ::kaldi::TransitionModel::TransitionStateToPhone(int)")},
  {C("transition_state_to_hmm_state"), (PyCFunction)wrapTransitionStateToHmmState_as_transition_state_to_hmm_state, METH_VARARGS | METH_KEYWORDS, C("transition_state_to_hmm_state(trans_state:int) -> int\n  Calls C++ function\n  int ::kaldi::TransitionModel::TransitionStateToHmmState(int)")},
  {C("transition_state_to_forward_pdf_class"), (PyCFunction)wrapTransitionStateToForwardPdfClass_as_transition_state_to_forward_pdf_class, METH_VARARGS | METH_KEYWORDS, C("transition_state_to_forward_pdf_class(trans_state:int) -> int\n  Calls C++ function\n  int ::kaldi::TransitionModel::TransitionStateToForwardPdfClass(int)")},
  {C("transition_state_to_self_loop_pdf_class"), (PyCFunction)wrapTransitionStateToSelfLoopPdfClass_as_transition_state_to_self_loop_pdf_class, METH_VARARGS | METH_KEYWORDS, C("transition_state_to_self_loop_pdf_class(trans_state:int) -> int\n  Calls C++ function\n  int ::kaldi::TransitionModel::TransitionStateToSelfLoopPdfClass(int)")},
  {C("transition_state_to_forward_pdf"), (PyCFunction)wrapTransitionStateToForwardPdf_as_transition_state_to_forward_pdf, METH_VARARGS | METH_KEYWORDS, C("transition_state_to_forward_pdf(trans_state:int) -> int\n  Calls C++ function\n  int ::kaldi::TransitionModel::TransitionStateToForwardPdf(int)")},
  {C("transition_state_to_self_loop_pdf"), (PyCFunction)wrapTransitionStateToSelfLoopPdf_as_transition_state_to_self_loop_pdf, METH_VARARGS | METH_KEYWORDS, C("transition_state_to_self_loop_pdf(trans_state:int) -> int\n  Calls C++ function\n  int ::kaldi::TransitionModel::TransitionStateToSelfLoopPdf(int)")},
  {C("self_loop_of"), (PyCFunction)wrapSelfLoopOf_as_self_loop_of, METH_VARARGS | METH_KEYWORDS, C("self_loop_of(trans_state:int) -> int\n  Calls C++ function\n  int ::kaldi::TransitionModel::SelfLoopOf(int)")},
  {C("transition_id_to_pdf"), (PyCFunction)wrapTransitionIdToPdf_as_transition_id_to_pdf, METH_VARARGS | METH_KEYWORDS, C("transition_id_to_pdf(trans_id:int) -> int\n  Calls C++ function\n  int ::kaldi::TransitionModel::TransitionIdToPdf(int)")},
  {C("transition_id_to_phone"), (PyCFunction)wrapTransitionIdToPhone_as_transition_id_to_phone, METH_VARARGS | METH_KEYWORDS, C("transition_id_to_phone(trans_id:int) -> int\n  Calls C++ function\n  int ::kaldi::TransitionModel::TransitionIdToPhone(int)")},
  {C("transition_id_to_pdf_class"), (PyCFunction)wrapTransitionIdToPdfClass_as_transition_id_to_pdf_class, METH_VARARGS | METH_KEYWORDS, C("transition_id_to_pdf_class(trans_id:int) -> int\n  Calls C++ function\n  int ::kaldi::TransitionModel::TransitionIdToPdfClass(int)")},
  {C("transition_id_to_hmm_state"), (PyCFunction)wrapTransitionIdToHmmState_as_transition_id_to_hmm_state, METH_VARARGS | METH_KEYWORDS, C("transition_id_to_hmm_state(trans_id:int) -> int\n  Calls C++ function\n  int ::kaldi::TransitionModel::TransitionIdToHmmState(int)")},
  {C("is_final"), (PyCFunction)wrapIsFinal_as_is_final, METH_VARARGS | METH_KEYWORDS, C("is_final(trans_id:int) -> bool\n  Calls C++ function\n  bool ::kaldi::TransitionModel::IsFinal(int)")},
  {C("is_self_loop"), (PyCFunction)wrapIsSelfLoop_as_is_self_loop, METH_VARARGS | METH_KEYWORDS, C("is_self_loop(trans_id:int) -> bool\n  Calls C++ function\n  bool ::kaldi::TransitionModel::IsSelfLoop(int)")},
  {C("num_transition_ids"), (PyCFunction)wrapNumTransitionIds_as_num_transition_ids, METH_NOARGS, C("num_transition_ids() -> int\n  Calls C++ function\n  int ::kaldi::TransitionModel::NumTransitionIds()")},
  {C("num_transition_indices"), (PyCFunction)wrapNumTransitionIndices_as_num_transition_indices, METH_VARARGS | METH_KEYWORDS, C("num_transition_indices(trans_state:int) -> int\n  Calls C++ function\n  int ::kaldi::TransitionModel::NumTransitionIndices(int)")},
  {C("num_transition_states"), (PyCFunction)wrapNumTransitionStates_as_num_transition_states, METH_NOARGS, C("num_transition_states() -> int\n  Calls C++ function\n  int ::kaldi::TransitionModel::NumTransitionStates()")},
  {C("num_pdfs"), (PyCFunction)wrapNumPdfs_as_num_pdfs, METH_NOARGS, C("num_pdfs() -> int\n  Calls C++ function\n  int ::kaldi::TransitionModel::NumPdfs()")},
  {C("num_phones"), (PyCFunction)wrapNumPhones_as_num_phones, METH_NOARGS, C("num_phones() -> int\n  Calls C++ function\n  int ::kaldi::TransitionModel::NumPhones()")},
  {C("get_phones"), (PyCFunction)wrapGetPhones_as_get_phones, METH_NOARGS, C("get_phones() -> list<int>\n  Calls C++ function\n  ::std::vector< ::int32> ::kaldi::TransitionModel::GetPhones()")},
  {C("get_transition_prob"), (PyCFunction)wrapGetTransitionProb_as_get_transition_prob, METH_VARARGS | METH_KEYWORDS, C("get_transition_prob(trans_id:int) -> float\n  Calls C++ function\n  float ::kaldi::TransitionModel::GetTransitionProb(int)")},
  {C("get_transition_log_prob"), (PyCFunction)wrapGetTransitionLogProb_as_get_transition_log_prob, METH_VARARGS | METH_KEYWORDS, C("get_transition_log_prob(trans_id:int) -> float\n  Calls C++ function\n  float ::kaldi::TransitionModel::GetTransitionLogProb(int)")},
  {C("get_transition_log_prob_ignoring_self_loops"), (PyCFunction)wrapGetTransitionLogProbIgnoringSelfLoops_as_get_transition_log_prob_ignoring_self_loops, METH_VARARGS | METH_KEYWORDS, C("get_transition_log_prob_ignoring_self_loops(trans_id:int) -> float\n  Calls C++ function\n  float ::kaldi::TransitionModel::GetTransitionLogProbIgnoringSelfLoops(int)")},
  {C("get_non_self_loop_log_prob"), (PyCFunction)wrapGetNonSelfLoopLogProb_as_get_non_self_loop_log_prob, METH_VARARGS | METH_KEYWORDS, C("get_non_self_loop_log_prob(trans_id:int) -> float\n  Calls C++ function\n  float ::kaldi::TransitionModel::GetNonSelfLoopLogProb(int)")},
  {C("mle_update"), (PyCFunction)wrapMleUpdate_as_mle_update, METH_VARARGS | METH_KEYWORDS, C("mle_update(stats:DoubleVector, cfg:MleTransitionUpdateConfig) -> (objf_impr_out:float, count_out:float)\n  Calls C++ function\n  void ::kaldi::TransitionModel::MleUpdate(::kaldi::Vector<double>, ::kaldi::MleTransitionUpdateConfig, float*, float*)")},
  {C("map_update"), (PyCFunction)wrapMapUpdate_as_map_update, METH_VARARGS | METH_KEYWORDS, C("map_update(stats:DoubleVector, cfg:MapTransitionUpdateConfig) -> (objf_impr_out:float, count_out:float)\n  Calls C++ function\n  void ::kaldi::TransitionModel::MapUpdate(::kaldi::Vector<double>, ::kaldi::MapTransitionUpdateConfig, float*, float*)")},
  {C("print_model"), (PyCFunction)wrapPrint_as_print_model, METH_VARARGS | METH_KEYWORDS, C("print_model(os:ostream, phone_names:list<str>, occs:DoubleVector=default)\n  Calls C++ function\n  void ::kaldi::TransitionModel::Print(::std::basic_ostream<char, ::std::char_traits<char> >, ::std::vector< ::std::string>, ::kaldi::Vector<double> *)")},
  {C("init_stats"), (PyCFunction)wrapInitStats_as_init_stats, METH_VARARGS | METH_KEYWORDS, C("init_stats(stats:DoubleVector)\n  Calls C++ function\n  void ::kaldi::TransitionModel::InitStats(::kaldi::Vector<double> *)")},
  {C("accumulate"), (PyCFunction)wrapAccumulate_as_accumulate, METH_VARARGS | METH_KEYWORDS, C("accumulate(prob:float, trans_id:int, stats:DoubleVector)\n  Calls C++ function\n  void ::kaldi::TransitionModel::Accumulate(float, int, ::kaldi::Vector<double> *)")},
  {C("compatible"), (PyCFunction)wrapCompatible_as_compatible, METH_VARARGS | METH_KEYWORDS, C("compatible(other:TransitionModel) -> bool\n  Calls C++ function\n  bool ::kaldi::TransitionModel::Compatible(::kaldi::TransitionModel)")},
  {}
};

// TransitionModel __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// TransitionModel __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// TransitionModel __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_transition_model.TransitionModel", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::TransitionModel", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "TransitionModel takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::TransitionModel>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::TransitionModel* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_TransitionModel"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::TransitionModel"));
      if (!PyErr_Occurred()) {
        ::kaldi::TransitionModel* c = static_cast<::kaldi::TransitionModel*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::TransitionModel*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyTransitionModel

// get_pdfs_for_phones(trans_model:TransitionModel, phones:list<int>) -> (ret:bool, pdfs:list<int>)
static PyObject* wrapGetPdfsForPhones_as_get_pdfs_for_phones(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("trans_model"),
      C("phones"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_pdfs_for_phones", names, &a[0], &a[1])) return nullptr;
  ::kaldi::TransitionModel* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_pdfs_for_phones", names[0], "::kaldi::TransitionModel", a[0]);
  ::std::vector< ::int32> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_pdfs_for_phones", names[1], "::std::vector< ::int32>", a[1]);
  ::std::vector< ::int32> ret1{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::GetPdfsForPhones(*arg1, std::move(arg2), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// get_phones_for_pdfs(trans_model:TransitionModel, pdfs:list<int>) -> (ret:bool, phones:list<int>)
static PyObject* wrapGetPhonesForPdfs_as_get_phones_for_pdfs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("trans_model"),
      C("pdfs"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_phones_for_pdfs", names, &a[0], &a[1])) return nullptr;
  ::kaldi::TransitionModel* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_phones_for_pdfs", names[0], "::kaldi::TransitionModel", a[0]);
  ::std::vector< ::int32> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_phones_for_pdfs", names[1], "::std::vector< ::int32>", a[1]);
  ::std::vector< ::int32> ret1{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::GetPhonesForPdfs(*arg1, std::move(arg2), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("get_pdfs_for_phones"), (PyCFunction)wrapGetPdfsForPhones_as_get_pdfs_for_phones, METH_VARARGS | METH_KEYWORDS, C("get_pdfs_for_phones(trans_model:TransitionModel, phones:list<int>) -> (ret:bool, pdfs:list<int>)\n  Calls C++ function\n  bool ::kaldi::GetPdfsForPhones(::kaldi::TransitionModel, ::std::vector< ::int32>, ::std::vector< ::int32>*)")},
  {C("get_phones_for_pdfs"), (PyCFunction)wrapGetPhonesForPdfs_as_get_phones_for_pdfs, METH_VARARGS | METH_KEYWORDS, C("get_phones_for_pdfs(trans_model:TransitionModel, pdfs:list<int>) -> (ret:bool, phones:list<int>)\n  Calls C++ function\n  bool ::kaldi::GetPhonesForPdfs(::kaldi::TransitionModel, ::std::vector< ::int32>, ::std::vector< ::int32>*)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyMleTransitionUpdateConfig::wrapper_Type) < 0) return false;
  Py_INCREF(&pyMleTransitionUpdateConfig::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyMapTransitionUpdateConfig::wrapper_Type) < 0) return false;
  Py_INCREF(&pyMapTransitionUpdateConfig::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyTransitionModel::wrapper_Type) < 0) return false;
  Py_INCREF(&pyTransitionModel::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_transition_model",  // module name
  "CLIF-generated module for hmm/transition-model.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_context_dep_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_hmm_topology")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "MleTransitionUpdateConfig", reinterpret_cast<PyObject*>(&pyMleTransitionUpdateConfig::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "MapTransitionUpdateConfig", reinterpret_cast<PyObject*>(&pyMapTransitionUpdateConfig::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "TransitionModel", reinterpret_cast<PyObject*>(&pyTransitionModel::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __transition__model_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// MapTransitionUpdateConfig to/from ::kaldi::MapTransitionUpdateConfig conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::MapTransitionUpdateConfig** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::MapTransitionUpdateConfig* cpp = __transition__model_clifwrap::pyMapTransitionUpdateConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::MapTransitionUpdateConfig>* c) {
  assert(c != nullptr);
  ::kaldi::MapTransitionUpdateConfig* cpp = __transition__model_clifwrap::pyMapTransitionUpdateConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__transition__model_clifwrap::pyMapTransitionUpdateConfig::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::MapTransitionUpdateConfig>* c) {
  assert(c != nullptr);
  ::kaldi::MapTransitionUpdateConfig* cpp = __transition__model_clifwrap::pyMapTransitionUpdateConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__transition__model_clifwrap::pyMapTransitionUpdateConfig::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert MapTransitionUpdateConfig instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::MapTransitionUpdateConfig* c) {
  assert(c != nullptr);
  ::kaldi::MapTransitionUpdateConfig* cpp = __transition__model_clifwrap::pyMapTransitionUpdateConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::MapTransitionUpdateConfig>* c) {
  assert(c != nullptr);
  ::kaldi::MapTransitionUpdateConfig* cpp = __transition__model_clifwrap::pyMapTransitionUpdateConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::MapTransitionUpdateConfig* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__transition__model_clifwrap::pyMapTransitionUpdateConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__transition__model_clifwrap::pyMapTransitionUpdateConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MapTransitionUpdateConfig>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::MapTransitionUpdateConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__transition__model_clifwrap::pyMapTransitionUpdateConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__transition__model_clifwrap::pyMapTransitionUpdateConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MapTransitionUpdateConfig>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::MapTransitionUpdateConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__transition__model_clifwrap::pyMapTransitionUpdateConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__transition__model_clifwrap::pyMapTransitionUpdateConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MapTransitionUpdateConfig>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::MapTransitionUpdateConfig& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__transition__model_clifwrap::pyMapTransitionUpdateConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__transition__model_clifwrap::pyMapTransitionUpdateConfig::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::MapTransitionUpdateConfig>(c);
  return py;
}

// MleTransitionUpdateConfig to/from ::kaldi::MleTransitionUpdateConfig conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::MleTransitionUpdateConfig** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::MleTransitionUpdateConfig* cpp = __transition__model_clifwrap::pyMleTransitionUpdateConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::MleTransitionUpdateConfig>* c) {
  assert(c != nullptr);
  ::kaldi::MleTransitionUpdateConfig* cpp = __transition__model_clifwrap::pyMleTransitionUpdateConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__transition__model_clifwrap::pyMleTransitionUpdateConfig::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::MleTransitionUpdateConfig>* c) {
  assert(c != nullptr);
  ::kaldi::MleTransitionUpdateConfig* cpp = __transition__model_clifwrap::pyMleTransitionUpdateConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__transition__model_clifwrap::pyMleTransitionUpdateConfig::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert MleTransitionUpdateConfig instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::MleTransitionUpdateConfig* c) {
  assert(c != nullptr);
  ::kaldi::MleTransitionUpdateConfig* cpp = __transition__model_clifwrap::pyMleTransitionUpdateConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::MleTransitionUpdateConfig>* c) {
  assert(c != nullptr);
  ::kaldi::MleTransitionUpdateConfig* cpp = __transition__model_clifwrap::pyMleTransitionUpdateConfig::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::MleTransitionUpdateConfig* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__transition__model_clifwrap::pyMleTransitionUpdateConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__transition__model_clifwrap::pyMleTransitionUpdateConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MleTransitionUpdateConfig>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::MleTransitionUpdateConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__transition__model_clifwrap::pyMleTransitionUpdateConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__transition__model_clifwrap::pyMleTransitionUpdateConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MleTransitionUpdateConfig>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::MleTransitionUpdateConfig> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__transition__model_clifwrap::pyMleTransitionUpdateConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__transition__model_clifwrap::pyMleTransitionUpdateConfig::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::MleTransitionUpdateConfig>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::MleTransitionUpdateConfig& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__transition__model_clifwrap::pyMleTransitionUpdateConfig::wrapper_Type, NULL, NULL);
  reinterpret_cast<__transition__model_clifwrap::pyMleTransitionUpdateConfig::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::MleTransitionUpdateConfig>(c);
  return py;
}

// TransitionModel to/from ::kaldi::TransitionModel conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::TransitionModel** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::TransitionModel* cpp = __transition__model_clifwrap::pyTransitionModel::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::TransitionModel>* c) {
  assert(c != nullptr);
  ::kaldi::TransitionModel* cpp = __transition__model_clifwrap::pyTransitionModel::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__transition__model_clifwrap::pyTransitionModel::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::TransitionModel>* c) {
  assert(c != nullptr);
  ::kaldi::TransitionModel* cpp = __transition__model_clifwrap::pyTransitionModel::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__transition__model_clifwrap::pyTransitionModel::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert TransitionModel instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::TransitionModel* c) {
  assert(c != nullptr);
  ::kaldi::TransitionModel* cpp = __transition__model_clifwrap::pyTransitionModel::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::TransitionModel>* c) {
  assert(c != nullptr);
  ::kaldi::TransitionModel* cpp = __transition__model_clifwrap::pyTransitionModel::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::TransitionModel* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__transition__model_clifwrap::pyTransitionModel::wrapper_Type, NULL, NULL);
  reinterpret_cast<__transition__model_clifwrap::pyTransitionModel::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::TransitionModel>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TransitionModel> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__transition__model_clifwrap::pyTransitionModel::wrapper_Type, NULL, NULL);
  reinterpret_cast<__transition__model_clifwrap::pyTransitionModel::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::TransitionModel>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TransitionModel> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__transition__model_clifwrap::pyTransitionModel::wrapper_Type, NULL, NULL);
  reinterpret_cast<__transition__model_clifwrap::pyTransitionModel::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::TransitionModel>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::TransitionModel& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__transition__model_clifwrap::pyTransitionModel::wrapper_Type, NULL, NULL);
  reinterpret_cast<__transition__model_clifwrap::pyTransitionModel::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::TransitionModel>(c);
  return py;
}

}  // namespace kaldi
