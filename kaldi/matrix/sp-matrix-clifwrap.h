//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/matrix/sp-matrix.clif

#include <memory>
#include "clif/python/optional.h"
#include "matrix/sp-matrix.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::SpMatrix<double>` as DoubleSpMatrix
bool Clif_PyObjAs(PyObject* input, ::kaldi::SpMatrix<double>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SpMatrix<double>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SpMatrix<double>>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::SpMatrix<double>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::SpMatrix<double>>* output);
PyObject* Clif_PyObjFrom(::kaldi::SpMatrix<double>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SpMatrix<double>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SpMatrix<double>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SpMatrix<double>&, py::PostConv);
// CLIF use `::kaldi::SolverOptions` as SolverOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::SolverOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SolverOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SolverOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::SolverOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::SolverOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::SolverOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SolverOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SolverOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SolverOptions&, py::PostConv);
// CLIF use `::kaldi::SpMatrix<float>` as SpMatrix
bool Clif_PyObjAs(PyObject* input, ::kaldi::SpMatrix<float>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SpMatrix<float>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SpMatrix<float>>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::SpMatrix<float>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::SpMatrix<float>>* output);
PyObject* Clif_PyObjFrom(::kaldi::SpMatrix<float>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SpMatrix<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SpMatrix<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SpMatrix<float>&, py::PostConv);

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_sp_matrix")) Py_DECREF(m);
// CLIF init_module else goto err;
