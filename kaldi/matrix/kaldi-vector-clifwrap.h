//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/matrix/kaldi-vector.clif

#include <memory>
#include "clif/python/optional.h"
#include "matrix/kaldi-vector.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::Vector<double>` as DoubleVector
bool Clif_PyObjAs(PyObject* input, ::kaldi::Vector<double>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::Vector<double>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::Vector<double>>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::Vector<double>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::Vector<double>>* output);
PyObject* Clif_PyObjFrom(::kaldi::Vector<double>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::Vector<double>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::Vector<double>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::Vector<double>&, py::PostConv);
// CLIF use `::kaldi::VectorBase<double>` as DoubleVectorBase
bool Clif_PyObjAs(PyObject* input, ::kaldi::VectorBase<double>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::VectorBase<double>>* output);
PyObject* Clif_PyObjFrom(::kaldi::VectorBase<double>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::VectorBase<double>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::VectorBase<double>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::VectorBase<double>&, py::PostConv) = delete;
// CLIF use `::kaldi::Vector<float>` as Vector
bool Clif_PyObjAs(PyObject* input, ::kaldi::Vector<float>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::Vector<float>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::Vector<float>>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::Vector<float>* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::Vector<float>>* output);
PyObject* Clif_PyObjFrom(::kaldi::Vector<float>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::Vector<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::Vector<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::Vector<float>&, py::PostConv);
// CLIF use `::kaldi::VectorBase<float>` as VectorBase
bool Clif_PyObjAs(PyObject* input, ::kaldi::VectorBase<float>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::VectorBase<float>>* output);
PyObject* Clif_PyObjFrom(::kaldi::VectorBase<float>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::VectorBase<float>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::VectorBase<float>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::VectorBase<float>&, py::PostConv) = delete;

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
// CLIF init_module else goto err;
