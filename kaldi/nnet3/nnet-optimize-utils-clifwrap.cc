//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/nnet-optimize-utils.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "nnet3/nnet-misc-computation-info-clifwrap.h"
#include "nnet3/nnet-computation-clifwrap.h"
#include "nnet3/nnet-nnet-clifwrap.h"
#include "nnet3/nnet-analyze-clifwrap.h"
#include "nnet3/nnet-optimize-clifwrap.h"
#include "nnet-optimize-utils-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __nnet__optimize__utils_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyVariableMergingOptimizer {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::VariableMergingOptimizer> cpp;
};
static ::kaldi::nnet3::VariableMergingOptimizer* ThisPtr(PyObject*);

// __init__(config:NnetOptimizeOptions, nnet:Nnet, computation:NnetComputation)
static PyObject* wrapVariableMergingOptimizer_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("config"),
      C("nnet"),
      C("computation"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:__init__", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::nnet3::NnetOptimizeOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::nnet3::NnetOptimizeOptions", a[0]);
  ::kaldi::nnet3::Nnet* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::nnet3::Nnet", a[1]);
  ::kaldi::nnet3::NnetComputation * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::kaldi::nnet3::NnetComputation *", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::VariableMergingOptimizer>(*arg1, *arg2, arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// merge_variables() -> bool
static PyObject* wrapMergeVariables_as_merge_variables(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::VariableMergingOptimizer* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->MergeVariables();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapVariableMergingOptimizer_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(config:NnetOptimizeOptions, nnet:Nnet, computation:NnetComputation)\n  Calls C++ function\n  void ::kaldi::nnet3::VariableMergingOptimizer::VariableMergingOptimizer(::kaldi::nnet3::NnetOptimizeOptions, ::kaldi::nnet3::Nnet, ::kaldi::nnet3::NnetComputation *)")},
  {C("merge_variables"), (PyCFunction)wrapMergeVariables_as_merge_variables, METH_NOARGS, C("merge_variables() -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::VariableMergingOptimizer::MergeVariables()")},
  {}
};

// VariableMergingOptimizer __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// VariableMergingOptimizer __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// VariableMergingOptimizer __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_optimize_utils.VariableMergingOptimizer", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::VariableMergingOptimizer", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapVariableMergingOptimizer_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::VariableMergingOptimizer* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_VariableMergingOptimizer"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::VariableMergingOptimizer"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::VariableMergingOptimizer* c = static_cast<::kaldi::nnet3::VariableMergingOptimizer*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::VariableMergingOptimizer*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyVariableMergingOptimizer

// extend_matrices(computation:NnetComputation)
static PyObject* wrapExtendMatrices_as_extend_matrices(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("computation"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:extend_matrices", names, &a[0])) return nullptr;
  ::kaldi::nnet3::NnetComputation * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("extend_matrices", names[0], "::kaldi::nnet3::NnetComputation *", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ExtendMatrices(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// consolidate_model_update(nnet:Nnet, computation:NnetComputation)
static PyObject* wrapConsolidateModelUpdate_as_consolidate_model_update(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("nnet"),
      C("computation"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:consolidate_model_update", names, &a[0], &a[1])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("consolidate_model_update", names[0], "::kaldi::nnet3::Nnet", a[0]);
  ::kaldi::nnet3::NnetComputation * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("consolidate_model_update", names[1], "::kaldi::nnet3::NnetComputation *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ConsolidateModelUpdate(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

namespace pyDerivativeTimeLimiter {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::DerivativeTimeLimiter> cpp;
};
static ::kaldi::nnet3::DerivativeTimeLimiter* ThisPtr(PyObject*);

// __init__(nnet:Nnet, min_deriv_time:int, max_deriv_time:int, computation:NnetComputation)
static PyObject* wrapDerivativeTimeLimiter_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("nnet"),
      C("min_deriv_time"),
      C("max_deriv_time"),
      C("computation"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:__init__", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::nnet3::Nnet", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "int", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "int", a[2]);
  ::kaldi::nnet3::NnetComputation * arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "::kaldi::nnet3::NnetComputation *", a[3]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::DerivativeTimeLimiter>(*arg1, std::move(arg2), std::move(arg3), arg4);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// limit_deriv_times()
static PyObject* wrapLimitDerivTimes_as_limit_deriv_times(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::DerivativeTimeLimiter* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->LimitDerivTimes();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapDerivativeTimeLimiter_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(nnet:Nnet, min_deriv_time:int, max_deriv_time:int, computation:NnetComputation)\n  Calls C++ function\n  void ::kaldi::nnet3::DerivativeTimeLimiter::DerivativeTimeLimiter(::kaldi::nnet3::Nnet, int, int, ::kaldi::nnet3::NnetComputation *)")},
  {C("limit_deriv_times"), (PyCFunction)wrapLimitDerivTimes_as_limit_deriv_times, METH_NOARGS, C("limit_deriv_times()\n  Calls C++ function\n  void ::kaldi::nnet3::DerivativeTimeLimiter::LimitDerivTimes()")},
  {}
};

// DerivativeTimeLimiter __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// DerivativeTimeLimiter __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// DerivativeTimeLimiter __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_optimize_utils.DerivativeTimeLimiter", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::DerivativeTimeLimiter", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapDerivativeTimeLimiter_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::DerivativeTimeLimiter* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_DerivativeTimeLimiter"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::DerivativeTimeLimiter"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::DerivativeTimeLimiter* c = static_cast<::kaldi::nnet3::DerivativeTimeLimiter*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::DerivativeTimeLimiter*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyDerivativeTimeLimiter

// limit_derivative_times(nnet:Nnet, min_deriv_time:int, max_deriv_time:int, computation:NnetComputation)
static PyObject* wrapLimitDerivativeTimes_as_limit_derivative_times(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("nnet"),
      C("min_deriv_time"),
      C("max_deriv_time"),
      C("computation"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:limit_derivative_times", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("limit_derivative_times", names[0], "::kaldi::nnet3::Nnet", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("limit_derivative_times", names[1], "int", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("limit_derivative_times", names[2], "int", a[2]);
  ::kaldi::nnet3::NnetComputation * arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("limit_derivative_times", names[3], "::kaldi::nnet3::NnetComputation *", a[3]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::LimitDerivativeTimes(*arg1, std::move(arg2), std::move(arg3), arg4);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// request_is_decomposable(request:ComputationRequest) -> (suc:bool, mini_request:ComputationRequest, num_n_values:int)
static PyObject* wrapRequestIsDecomposable_as_request_is_decomposable(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("request"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:request_is_decomposable", names, &a[0])) return nullptr;
  ::kaldi::nnet3::ComputationRequest* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("request_is_decomposable", names[0], "::kaldi::nnet3::ComputationRequest", a[0]);
  ::kaldi::nnet3::ComputationRequest ret1{};
  int ret2{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::RequestIsDecomposable(*arg1, &ret1, &ret2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(3);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  if ((p=Clif_PyObjFrom(std::move(ret2), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 2, p);
  return result_tuple;
}

// expand_computation(nnet:Nnet, misc_info:MiscComputationInfo, computation:NnetComputation, need_debug_info:bool, num_n_values:int) -> NnetComputation
static PyObject* wrapExpandComputation_as_expand_computation(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[5];
  char* names[] = {
      C("nnet"),
      C("misc_info"),
      C("computation"),
      C("need_debug_info"),
      C("num_n_values"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOO:expand_computation", names, &a[0], &a[1], &a[2], &a[3], &a[4])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("expand_computation", names[0], "::kaldi::nnet3::Nnet", a[0]);
  ::kaldi::nnet3::MiscComputationInfo* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("expand_computation", names[1], "::kaldi::nnet3::MiscComputationInfo", a[1]);
  ::kaldi::nnet3::NnetComputation* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("expand_computation", names[2], "::kaldi::nnet3::NnetComputation", a[2]);
  bool arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("expand_computation", names[3], "bool", a[3]);
  int arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("expand_computation", names[4], "int", a[4]);
  ::kaldi::nnet3::NnetComputation ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ExpandComputation(*arg1, *arg2, *arg3, std::move(arg4), std::move(arg5), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// replace_row_with_matrix_ops(computation:NnetComputation) -> bool
static PyObject* wrapReplaceRowWithMatrixOps_as_replace_row_with_matrix_ops(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("computation"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:replace_row_with_matrix_ops", names, &a[0])) return nullptr;
  ::kaldi::nnet3::NnetComputation * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("replace_row_with_matrix_ops", names[0], "::kaldi::nnet3::NnetComputation *", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::ReplaceRowWithMatrixOps(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// snip_row_ops(computation:NnetComputation) -> bool
static PyObject* wrapSnipRowOps_as_snip_row_ops(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("computation"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:snip_row_ops", names, &a[0])) return nullptr;
  ::kaldi::nnet3::NnetComputation * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("snip_row_ops", names[0], "::kaldi::nnet3::NnetComputation *", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::SnipRowOps(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// renumber_computation(computation:NnetComputation)
static PyObject* wrapRenumberComputation_as_renumber_computation(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("computation"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:renumber_computation", names, &a[0])) return nullptr;
  ::kaldi::nnet3::NnetComputation * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("renumber_computation", names[0], "::kaldi::nnet3::NnetComputation *", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::RenumberComputation(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// remove_no_ops(computation:NnetComputation)
static PyObject* wrapRemoveNoOps_as_remove_no_ops(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("computation"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:remove_no_ops", names, &a[0])) return nullptr;
  ::kaldi::nnet3::NnetComputation * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("remove_no_ops", names[0], "::kaldi::nnet3::NnetComputation *", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::RemoveNoOps(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// identify_submatrix_args(command:NnetComputation.Command) -> list<int>
static PyObject* wrapIdentifySubmatrixArgs_as_identify_submatrix_args(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("command"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:identify_submatrix_args", names, &a[0])) return nullptr;
  ::kaldi::nnet3::NnetComputation::Command * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("identify_submatrix_args", names[0], "::kaldi::nnet3::NnetComputation::Command *", a[0]);
  ::std::vector< ::int32 *> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::IdentifySubmatrixArgs(arg1, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// matrix_is_unused(analyzer:Analyzer, computation:NnetComputation, m:int) -> bool
static PyObject* wrapMatrixIsUnused_as_matrix_is_unused(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("analyzer"),
      C("computation"),
      C("m"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:matrix_is_unused", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::nnet3::Analyzer* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("matrix_is_unused", names[0], "::kaldi::nnet3::Analyzer", a[0]);
  ::kaldi::nnet3::NnetComputation* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("matrix_is_unused", names[1], "::kaldi::nnet3::NnetComputation", a[1]);
  int arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("matrix_is_unused", names[2], "int", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::MatrixIsUnused(*arg1, *arg2, std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// remove_commands_for_unused_matrix(analyzer:Analyzer, m:int, computation:NnetComputation)
static PyObject* wrapRemoveCommandsForUnusedMatrix_as_remove_commands_for_unused_matrix(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("analyzer"),
      C("m"),
      C("computation"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:remove_commands_for_unused_matrix", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::nnet3::Analyzer* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("remove_commands_for_unused_matrix", names[0], "::kaldi::nnet3::Analyzer", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("remove_commands_for_unused_matrix", names[1], "int", a[1]);
  ::kaldi::nnet3::NnetComputation * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("remove_commands_for_unused_matrix", names[2], "::kaldi::nnet3::NnetComputation *", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::RemoveCommandsForUnusedMatrix(*arg1, std::move(arg2), arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// identify_submatrix_args_in_computation(computation:NnetComputation) -> list<int>
static PyObject* wrapIdentifySubmatrixArgsInComputation_as_identify_submatrix_args_in_computation(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("computation"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:identify_submatrix_args_in_computation", names, &a[0])) return nullptr;
  ::kaldi::nnet3::NnetComputation * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("identify_submatrix_args_in_computation", names[0], "::kaldi::nnet3::NnetComputation *", a[0]);
  ::std::vector< ::int32 *> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::IdentifySubmatrixArgsInComputation(arg1, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// optimize_memory_compression(nnet:Nnet, memory_compression_level:int, computation:NnetComputation)
static PyObject* wrapOptimizeMemoryCompression_as_optimize_memory_compression(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("nnet"),
      C("memory_compression_level"),
      C("computation"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:optimize_memory_compression", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("optimize_memory_compression", names[0], "::kaldi::nnet3::Nnet", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("optimize_memory_compression", names[1], "int", a[1]);
  ::kaldi::nnet3::NnetComputation * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("optimize_memory_compression", names[2], "::kaldi::nnet3::NnetComputation *", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::OptimizeMemoryCompression(*arg1, std::move(arg2), arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// optimize_looped_computation(nnet:Nnet, computation:NnetComputation)
static PyObject* wrapOptimizeLoopedComputation_as_optimize_looped_computation(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("nnet"),
      C("computation"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:optimize_looped_computation", names, &a[0], &a[1])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("optimize_looped_computation", names[0], "::kaldi::nnet3::Nnet", a[0]);
  ::kaldi::nnet3::NnetComputation * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("optimize_looped_computation", names[1], "::kaldi::nnet3::NnetComputation *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::OptimizeLoopedComputation(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// fix_goto_label(computation:NnetComputation)
static PyObject* wrapFixGotoLabel_as_fix_goto_label(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("computation"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:fix_goto_label", names, &a[0])) return nullptr;
  ::kaldi::nnet3::NnetComputation * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("fix_goto_label", names[0], "::kaldi::nnet3::NnetComputation *", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::FixGotoLabel(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("extend_matrices"), (PyCFunction)wrapExtendMatrices_as_extend_matrices, METH_VARARGS | METH_KEYWORDS, C("extend_matrices(computation:NnetComputation)\n  Calls C++ function\n  void ::kaldi::nnet3::ExtendMatrices(::kaldi::nnet3::NnetComputation *)")},
  {C("consolidate_model_update"), (PyCFunction)wrapConsolidateModelUpdate_as_consolidate_model_update, METH_VARARGS | METH_KEYWORDS, C("consolidate_model_update(nnet:Nnet, computation:NnetComputation)\n  Calls C++ function\n  void ::kaldi::nnet3::ConsolidateModelUpdate(::kaldi::nnet3::Nnet, ::kaldi::nnet3::NnetComputation *)")},
  {C("limit_derivative_times"), (PyCFunction)wrapLimitDerivativeTimes_as_limit_derivative_times, METH_VARARGS | METH_KEYWORDS, C("limit_derivative_times(nnet:Nnet, min_deriv_time:int, max_deriv_time:int, computation:NnetComputation)\n  Calls C++ function\n  void ::kaldi::nnet3::LimitDerivativeTimes(::kaldi::nnet3::Nnet, int, int, ::kaldi::nnet3::NnetComputation *)")},
  {C("request_is_decomposable"), (PyCFunction)wrapRequestIsDecomposable_as_request_is_decomposable, METH_VARARGS | METH_KEYWORDS, C("request_is_decomposable(request:ComputationRequest) -> (suc:bool, mini_request:ComputationRequest, num_n_values:int)\n  Calls C++ function\n  bool ::kaldi::nnet3::RequestIsDecomposable(::kaldi::nnet3::ComputationRequest, ::kaldi::nnet3::ComputationRequest*, int*)")},
  {C("expand_computation"), (PyCFunction)wrapExpandComputation_as_expand_computation, METH_VARARGS | METH_KEYWORDS, C("expand_computation(nnet:Nnet, misc_info:MiscComputationInfo, computation:NnetComputation, need_debug_info:bool, num_n_values:int) -> NnetComputation\n  Calls C++ function\n  void ::kaldi::nnet3::ExpandComputation(::kaldi::nnet3::Nnet, ::kaldi::nnet3::MiscComputationInfo, ::kaldi::nnet3::NnetComputation, bool, int, ::kaldi::nnet3::NnetComputation*)")},
  {C("replace_row_with_matrix_ops"), (PyCFunction)wrapReplaceRowWithMatrixOps_as_replace_row_with_matrix_ops, METH_VARARGS | METH_KEYWORDS, C("replace_row_with_matrix_ops(computation:NnetComputation) -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::ReplaceRowWithMatrixOps(::kaldi::nnet3::NnetComputation *)")},
  {C("snip_row_ops"), (PyCFunction)wrapSnipRowOps_as_snip_row_ops, METH_VARARGS | METH_KEYWORDS, C("snip_row_ops(computation:NnetComputation) -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::SnipRowOps(::kaldi::nnet3::NnetComputation *)")},
  {C("renumber_computation"), (PyCFunction)wrapRenumberComputation_as_renumber_computation, METH_VARARGS | METH_KEYWORDS, C("renumber_computation(computation:NnetComputation)\n  Calls C++ function\n  void ::kaldi::nnet3::RenumberComputation(::kaldi::nnet3::NnetComputation *)")},
  {C("remove_no_ops"), (PyCFunction)wrapRemoveNoOps_as_remove_no_ops, METH_VARARGS | METH_KEYWORDS, C("remove_no_ops(computation:NnetComputation)\n  Calls C++ function\n  void ::kaldi::nnet3::RemoveNoOps(::kaldi::nnet3::NnetComputation *)")},
  {C("identify_submatrix_args"), (PyCFunction)wrapIdentifySubmatrixArgs_as_identify_submatrix_args, METH_VARARGS | METH_KEYWORDS, C("identify_submatrix_args(command:NnetComputation.Command) -> list<int>\n  Calls C++ function\n  void ::kaldi::nnet3::IdentifySubmatrixArgs(::kaldi::nnet3::NnetComputation::Command *, ::std::vector< ::int32 *>*)")},
  {C("matrix_is_unused"), (PyCFunction)wrapMatrixIsUnused_as_matrix_is_unused, METH_VARARGS | METH_KEYWORDS, C("matrix_is_unused(analyzer:Analyzer, computation:NnetComputation, m:int) -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::MatrixIsUnused(::kaldi::nnet3::Analyzer, ::kaldi::nnet3::NnetComputation, int)")},
  {C("remove_commands_for_unused_matrix"), (PyCFunction)wrapRemoveCommandsForUnusedMatrix_as_remove_commands_for_unused_matrix, METH_VARARGS | METH_KEYWORDS, C("remove_commands_for_unused_matrix(analyzer:Analyzer, m:int, computation:NnetComputation)\n  Calls C++ function\n  void ::kaldi::nnet3::RemoveCommandsForUnusedMatrix(::kaldi::nnet3::Analyzer, int, ::kaldi::nnet3::NnetComputation *)")},
  {C("identify_submatrix_args_in_computation"), (PyCFunction)wrapIdentifySubmatrixArgsInComputation_as_identify_submatrix_args_in_computation, METH_VARARGS | METH_KEYWORDS, C("identify_submatrix_args_in_computation(computation:NnetComputation) -> list<int>\n  Calls C++ function\n  void ::kaldi::nnet3::IdentifySubmatrixArgsInComputation(::kaldi::nnet3::NnetComputation *, ::std::vector< ::int32 *>*)")},
  {C("optimize_memory_compression"), (PyCFunction)wrapOptimizeMemoryCompression_as_optimize_memory_compression, METH_VARARGS | METH_KEYWORDS, C("optimize_memory_compression(nnet:Nnet, memory_compression_level:int, computation:NnetComputation)\n  Calls C++ function\n  void ::kaldi::nnet3::OptimizeMemoryCompression(::kaldi::nnet3::Nnet, int, ::kaldi::nnet3::NnetComputation *)")},
  {C("optimize_looped_computation"), (PyCFunction)wrapOptimizeLoopedComputation_as_optimize_looped_computation, METH_VARARGS | METH_KEYWORDS, C("optimize_looped_computation(nnet:Nnet, computation:NnetComputation)\n  Calls C++ function\n  void ::kaldi::nnet3::OptimizeLoopedComputation(::kaldi::nnet3::Nnet, ::kaldi::nnet3::NnetComputation *)")},
  {C("fix_goto_label"), (PyCFunction)wrapFixGotoLabel_as_fix_goto_label, METH_VARARGS | METH_KEYWORDS, C("fix_goto_label(computation:NnetComputation)\n  Calls C++ function\n  void ::kaldi::nnet3::FixGotoLabel(::kaldi::nnet3::NnetComputation *)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyVariableMergingOptimizer::wrapper_Type) < 0) return false;
  Py_INCREF(&pyVariableMergingOptimizer::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyDerivativeTimeLimiter::wrapper_Type) < 0) return false;
  Py_INCREF(&pyDerivativeTimeLimiter::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_nnet_optimize_utils",  // module name
  "CLIF-generated module for nnet3/nnet-optimize-utils.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_nnet_misc_computation_info")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_computation")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_nnet")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_analyze")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_optimize")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "VariableMergingOptimizer", reinterpret_cast<PyObject*>(&pyVariableMergingOptimizer::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "DerivativeTimeLimiter", reinterpret_cast<PyObject*>(&pyDerivativeTimeLimiter::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __nnet__optimize__utils_clifwrap

namespace kaldi { namespace nnet3 {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// DerivativeTimeLimiter to/from ::kaldi::nnet3::DerivativeTimeLimiter conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::DerivativeTimeLimiter** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::DerivativeTimeLimiter* cpp = __nnet__optimize__utils_clifwrap::pyDerivativeTimeLimiter::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::DerivativeTimeLimiter>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::DerivativeTimeLimiter* cpp = __nnet__optimize__utils_clifwrap::pyDerivativeTimeLimiter::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__optimize__utils_clifwrap::pyDerivativeTimeLimiter::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::DerivativeTimeLimiter>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::DerivativeTimeLimiter* cpp = __nnet__optimize__utils_clifwrap::pyDerivativeTimeLimiter::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__optimize__utils_clifwrap::pyDerivativeTimeLimiter::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert DerivativeTimeLimiter instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::DerivativeTimeLimiter* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__optimize__utils_clifwrap::pyDerivativeTimeLimiter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__optimize__utils_clifwrap::pyDerivativeTimeLimiter::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::DerivativeTimeLimiter>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::DerivativeTimeLimiter> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__optimize__utils_clifwrap::pyDerivativeTimeLimiter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__optimize__utils_clifwrap::pyDerivativeTimeLimiter::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::DerivativeTimeLimiter>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::DerivativeTimeLimiter> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__optimize__utils_clifwrap::pyDerivativeTimeLimiter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__optimize__utils_clifwrap::pyDerivativeTimeLimiter::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::DerivativeTimeLimiter>(std::move(c));
  return py;
}

// VariableMergingOptimizer to/from ::kaldi::nnet3::VariableMergingOptimizer conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::VariableMergingOptimizer** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::VariableMergingOptimizer* cpp = __nnet__optimize__utils_clifwrap::pyVariableMergingOptimizer::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::VariableMergingOptimizer>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::VariableMergingOptimizer* cpp = __nnet__optimize__utils_clifwrap::pyVariableMergingOptimizer::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__optimize__utils_clifwrap::pyVariableMergingOptimizer::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::VariableMergingOptimizer>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::VariableMergingOptimizer* cpp = __nnet__optimize__utils_clifwrap::pyVariableMergingOptimizer::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__optimize__utils_clifwrap::pyVariableMergingOptimizer::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert VariableMergingOptimizer instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::VariableMergingOptimizer* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__optimize__utils_clifwrap::pyVariableMergingOptimizer::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__optimize__utils_clifwrap::pyVariableMergingOptimizer::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::VariableMergingOptimizer>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::VariableMergingOptimizer> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__optimize__utils_clifwrap::pyVariableMergingOptimizer::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__optimize__utils_clifwrap::pyVariableMergingOptimizer::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::VariableMergingOptimizer>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::VariableMergingOptimizer> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__optimize__utils_clifwrap::pyVariableMergingOptimizer::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__optimize__utils_clifwrap::pyVariableMergingOptimizer::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::VariableMergingOptimizer>(std::move(c));
  return py;
}

} }  // namespace kaldi::nnet3
