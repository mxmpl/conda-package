//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/nnet-diagnostics.clif

#include <memory>
#include "clif/python/optional.h"
#include "nnet3/nnet-diagnostics.h"
#include "clif/python/postconv.h"

namespace kaldi { namespace nnet3 {
using namespace ::clif;

// CLIF use `::kaldi::nnet3::NnetComputeProb` as NnetComputeProb
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::NnetComputeProb** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::NnetComputeProb>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::NnetComputeProb>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::NnetComputeProb*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::NnetComputeProb>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::NnetComputeProb>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::NnetComputeProb*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::NnetComputeProb&, py::PostConv) = delete;
// CLIF use `::kaldi::nnet3::NnetComputeProbOptions` as NnetComputeProbOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::NnetComputeProbOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::NnetComputeProbOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::NnetComputeProbOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::NnetComputeProbOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::nnet3::NnetComputeProbOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::NnetComputeProbOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::NnetComputeProbOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::NnetComputeProbOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::NnetComputeProbOptions&, py::PostConv);
// CLIF use `::kaldi::nnet3::PerDimObjectiveInfo` as PerDimObjectiveInfo
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::PerDimObjectiveInfo** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::PerDimObjectiveInfo>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::PerDimObjectiveInfo>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::PerDimObjectiveInfo* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::nnet3::PerDimObjectiveInfo>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::PerDimObjectiveInfo*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::PerDimObjectiveInfo>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::PerDimObjectiveInfo>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::PerDimObjectiveInfo&, py::PostConv);
// CLIF use `::kaldi::nnet3::SimpleObjectiveInfo` as SimpleObjectiveInfo
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::SimpleObjectiveInfo** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::nnet3::SimpleObjectiveInfo>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::nnet3::SimpleObjectiveInfo>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::nnet3::SimpleObjectiveInfo* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::nnet3::SimpleObjectiveInfo>* output);
PyObject* Clif_PyObjFrom(::kaldi::nnet3::SimpleObjectiveInfo*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::SimpleObjectiveInfo>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::SimpleObjectiveInfo>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::SimpleObjectiveInfo&, py::PostConv);

} }  // namespace kaldi::nnet3

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_nnet_diagnostics")) Py_DECREF(m);
// CLIF init_module else goto err;
