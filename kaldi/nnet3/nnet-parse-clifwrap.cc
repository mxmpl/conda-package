//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/nnet-parse.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "base/sstream-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "cudamatrix/cu-vector-clifwrap.h"
#include "cudamatrix/cu-matrix-clifwrap.h"
#include "nnet-parse-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __nnet__parse_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyConfigLine {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::ConfigLine> cpp;
};
static ::kaldi::nnet3::ConfigLine* ThisPtr(PyObject*);

// parse_line(line:str) -> bool
static PyObject* wrapParseLine_as_parse_line(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("line"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:parse_line", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("parse_line", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::ConfigLine* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->ParseLine(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_str(key:str) -> (suc:bool, value:str)
static PyObject* wrapGetValue_as_get_str(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("key"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_str", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_str", names[0], "::std::string", a[0]);
  ::std::string ret1{};
  // Call actual C++ method.
  ::kaldi::nnet3::ConfigLine* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetValue(std::move(arg1), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), _1)) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// get_float(key:str) -> (suc:bool, value:float)
static PyObject* wrapGetValue_as_get_float(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("key"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_float", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_float", names[0], "::std::string", a[0]);
  float ret1{};
  // Call actual C++ method.
  ::kaldi::nnet3::ConfigLine* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetValue(std::move(arg1), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// get_int(key:str) -> (suc:bool, value:int)
static PyObject* wrapGetValue_as_get_int(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("key"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_int", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_int", names[0], "::std::string", a[0]);
  int ret1{};
  // Call actual C++ method.
  ::kaldi::nnet3::ConfigLine* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetValue(std::move(arg1), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// get_intlist(key:str) -> (suc:bool, value:list<int>)
static PyObject* wrapGetValue_as_get_intlist(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("key"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_intlist", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_intlist", names[0], "::std::string", a[0]);
  ::std::vector< ::int32> ret1{};
  // Call actual C++ method.
  ::kaldi::nnet3::ConfigLine* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetValue(std::move(arg1), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// get_bool(key:str) -> (suc:bool, value:bool)
static PyObject* wrapGetValue_as_get_bool(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("key"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_bool", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_bool", names[0], "::std::string", a[0]);
  bool ret1{};
  // Call actual C++ method.
  ::kaldi::nnet3::ConfigLine* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetValue(std::move(arg1), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// has_unused_values() -> bool
static PyObject* wrapHasUnusedValues_as_has_unused_values(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::ConfigLine* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->HasUnusedValues();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// unused_values() -> str
static PyObject* wrapUnusedValues_as_unused_values(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::ConfigLine* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->UnusedValues();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// first_token() -> str
static PyObject* wrapFirstToken_as_first_token(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::ConfigLine* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->FirstToken();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// whole_line() -> str
static PyObject* wrapWholeLine_as_whole_line(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::ConfigLine* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->WholeLine();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

static PyMethodDef Methods[] = {
  {C("parse_line"), (PyCFunction)wrapParseLine_as_parse_line, METH_VARARGS | METH_KEYWORDS, C("parse_line(line:str) -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::ConfigLine::ParseLine(::std::string)")},
  {C("get_str"), (PyCFunction)wrapGetValue_as_get_str, METH_VARARGS | METH_KEYWORDS, C("get_str(key:str) -> (suc:bool, value:str)\n  Calls C++ function\n  bool ::kaldi::nnet3::ConfigLine::GetValue(::std::string, ::std::string*)")},
  {C("get_float"), (PyCFunction)wrapGetValue_as_get_float, METH_VARARGS | METH_KEYWORDS, C("get_float(key:str) -> (suc:bool, value:float)\n  Calls C++ function\n  bool ::kaldi::nnet3::ConfigLine::GetValue(::std::string, float*)")},
  {C("get_int"), (PyCFunction)wrapGetValue_as_get_int, METH_VARARGS | METH_KEYWORDS, C("get_int(key:str) -> (suc:bool, value:int)\n  Calls C++ function\n  bool ::kaldi::nnet3::ConfigLine::GetValue(::std::string, int*)")},
  {C("get_intlist"), (PyCFunction)wrapGetValue_as_get_intlist, METH_VARARGS | METH_KEYWORDS, C("get_intlist(key:str) -> (suc:bool, value:list<int>)\n  Calls C++ function\n  bool ::kaldi::nnet3::ConfigLine::GetValue(::std::string, ::std::vector< ::int32>*)")},
  {C("get_bool"), (PyCFunction)wrapGetValue_as_get_bool, METH_VARARGS | METH_KEYWORDS, C("get_bool(key:str) -> (suc:bool, value:bool)\n  Calls C++ function\n  bool ::kaldi::nnet3::ConfigLine::GetValue(::std::string, bool*)")},
  {C("has_unused_values"), (PyCFunction)wrapHasUnusedValues_as_has_unused_values, METH_NOARGS, C("has_unused_values() -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::ConfigLine::HasUnusedValues()")},
  {C("unused_values"), (PyCFunction)wrapUnusedValues_as_unused_values, METH_NOARGS, C("unused_values() -> str\n  Calls C++ function\n  ::std::string ::kaldi::nnet3::ConfigLine::UnusedValues()")},
  {C("first_token"), (PyCFunction)wrapFirstToken_as_first_token, METH_NOARGS, C("first_token() -> str\n  Calls C++ function\n  ::std::string ::kaldi::nnet3::ConfigLine::FirstToken()")},
  {C("whole_line"), (PyCFunction)wrapWholeLine_as_whole_line, METH_NOARGS, C("whole_line() -> str\n  Calls C++ function\n  ::std::string ::kaldi::nnet3::ConfigLine::WholeLine()")},
  {}
};

// ConfigLine __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ConfigLine __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ConfigLine __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_parse.ConfigLine",            // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::ConfigLine", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "ConfigLine takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::ConfigLine>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::ConfigLine* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_ConfigLine"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::ConfigLine"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::ConfigLine* c = static_cast<::kaldi::nnet3::ConfigLine*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::ConfigLine*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyConfigLine

// descriptor_tokenize(input:str) -> (suc:bool, tokens:list<str>)
static PyObject* wrapDescriptorTokenize_as_descriptor_tokenize(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("input"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:descriptor_tokenize", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("descriptor_tokenize", names[0], "::std::string", a[0]);
  ::std::vector< ::std::string> ret1{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::DescriptorTokenize(std::move(arg1), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {_1})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// is_valid_name(name:str) -> bool
static PyObject* wrapIsValidName_as_is_valid_name(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("name"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_valid_name", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_valid_name", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::IsValidName(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// read_config_lines(is:istream) -> list<str>
static PyObject* wrapReadConfigLines_as_read_config_lines(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("is"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:read_config_lines", names, &a[0])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read_config_lines", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  ::std::vector< ::std::string> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ReadConfigLines(*arg1, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {_1});
}

// parse_config_lines(lines:list<str>) -> list<ConfigLine>
static PyObject* wrapParseConfigLines_as_parse_config_lines(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("lines"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:parse_config_lines", names, &a[0])) return nullptr;
  ::std::vector< ::std::string> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("parse_config_lines", names[0], "::std::vector< ::std::string>", a[0]);
  ::std::vector< ::kaldi::nnet3::ConfigLine> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::nnet3::ParseConfigLines(std::move(arg1), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// error_context_from_stream(is:istream) -> str
static PyObject* wrapErrorContext_as_error_context_from_stream(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("is"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:error_context_from_stream", names, &a[0])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("error_context_from_stream", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::ErrorContext(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// error_context(str:str) -> str
static PyObject* wrapErrorContext_as_error_context(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("str"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:error_context", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("error_context", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::ErrorContext(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// summarize_vector(vec:VectorBase) -> str
static PyObject* wrapSummarizeVector_as_summarize_vector(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("vec"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:summarize_vector", names, &a[0])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("summarize_vector", names[0], "::kaldi::VectorBase<float>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::SummarizeVector(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// summarize_double_vector(vec:DoubleVectorBase) -> str
static PyObject* wrapSummarizeVector_as_summarize_double_vector(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("vec"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:summarize_double_vector", names, &a[0])) return nullptr;
  ::kaldi::VectorBase<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("summarize_double_vector", names[0], "::kaldi::VectorBase<double>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::SummarizeVector(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// summarize_cu_vector(vec:CuVectorBase) -> str
static PyObject* wrapSummarizeVector_as_summarize_cu_vector(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("vec"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:summarize_cu_vector", names, &a[0])) return nullptr;
  ::kaldi::CuVectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("summarize_cu_vector", names[0], "::kaldi::CuVectorBase<float>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::SummarizeVector(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// print_parameter_vector_stats(os:ostringstream, name:str, params:CuVectorBase, include_mean:bool=default)
static PyObject* wrapPrintParameterStats_as_print_parameter_vector_stats(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4]{};
  char* names[] = {
      C("os"),
      C("name"),
      C("params"),
      C("include_mean"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO|O:print_parameter_vector_stats", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 4; nargs > 3; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::std::basic_ostringstream<char, ::std::char_traits<char>, ::std::allocator<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("print_parameter_vector_stats", names[0], "::std::basic_ostringstream<char, ::std::char_traits<char>, ::std::allocator<char> >", a[0]);
  ::std::string arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("print_parameter_vector_stats", names[1], "::std::string", a[1]);
  ::kaldi::CuVectorBase<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("print_parameter_vector_stats", names[2], "::kaldi::CuVectorBase<float>", a[2]);
  bool arg4;
  if (nargs > 3) {
    if (!a[3]) arg4 = (bool)false;
    else if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("print_parameter_vector_stats", names[3], "bool", a[3]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 3:
    ::kaldi::nnet3::PrintParameterStats(*arg1, std::move(arg2), *arg3); break;
  case 4:
    ::kaldi::nnet3::PrintParameterStats(*arg1, std::move(arg2), *arg3, std::move(arg4)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// print_parameter_matrix_stats(os:ostringstream, name:str, params:CuMatrix, include_mean:bool=default, include_row_norms:bool=default, include_column_norms:bool=default, include_singular_values:bool=default)
static PyObject* wrapPrintParameterStats_as_print_parameter_matrix_stats(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[7]{};
  char* names[] = {
      C("os"),
      C("name"),
      C("params"),
      C("include_mean"),
      C("include_row_norms"),
      C("include_column_norms"),
      C("include_singular_values"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO|OOOO:print_parameter_matrix_stats", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5], &a[6])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 7; nargs > 3; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::std::basic_ostringstream<char, ::std::char_traits<char>, ::std::allocator<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("print_parameter_matrix_stats", names[0], "::std::basic_ostringstream<char, ::std::char_traits<char>, ::std::allocator<char> >", a[0]);
  ::std::string arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("print_parameter_matrix_stats", names[1], "::std::string", a[1]);
  ::kaldi::CuMatrix<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("print_parameter_matrix_stats", names[2], "::kaldi::CuMatrix<float>", a[2]);
  bool arg4;
  if (nargs > 3) {
    if (!a[3]) arg4 = (bool)false;
    else if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("print_parameter_matrix_stats", names[3], "bool", a[3]);
  }
  bool arg5;
  if (nargs > 4) {
    if (!a[4]) arg5 = (bool)false;
    else if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("print_parameter_matrix_stats", names[4], "bool", a[4]);
  }
  bool arg6;
  if (nargs > 5) {
    if (!a[5]) arg6 = (bool)false;
    else if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("print_parameter_matrix_stats", names[5], "bool", a[5]);
  }
  bool arg7;
  if (nargs > 6) {
    if (!a[6]) arg7 = (bool)false;
    else if (!Clif_PyObjAs(a[6], &arg7)) return ArgError("print_parameter_matrix_stats", names[6], "bool", a[6]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 3:
    ::kaldi::nnet3::PrintParameterStats(*arg1, std::move(arg2), *arg3); break;
  case 4:
    ::kaldi::nnet3::PrintParameterStats(*arg1, std::move(arg2), *arg3, std::move(arg4)); break;
  case 5:
    ::kaldi::nnet3::PrintParameterStats(*arg1, std::move(arg2), *arg3, std::move(arg4), std::move(arg5)); break;
  case 6:
    ::kaldi::nnet3::PrintParameterStats(*arg1, std::move(arg2), *arg3, std::move(arg4), std::move(arg5), std::move(arg6)); break;
  case 7:
    ::kaldi::nnet3::PrintParameterStats(*arg1, std::move(arg2), *arg3, std::move(arg4), std::move(arg5), std::move(arg6), std::move(arg7)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("descriptor_tokenize"), (PyCFunction)wrapDescriptorTokenize_as_descriptor_tokenize, METH_VARARGS | METH_KEYWORDS, C("descriptor_tokenize(input:str) -> (suc:bool, tokens:list<str>)\n  Calls C++ function\n  bool ::kaldi::nnet3::DescriptorTokenize(::std::string, ::std::vector< ::std::string>*)")},
  {C("is_valid_name"), (PyCFunction)wrapIsValidName_as_is_valid_name, METH_VARARGS | METH_KEYWORDS, C("is_valid_name(name:str) -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::IsValidName(::std::string)")},
  {C("read_config_lines"), (PyCFunction)wrapReadConfigLines_as_read_config_lines, METH_VARARGS | METH_KEYWORDS, C("read_config_lines(is:istream) -> list<str>\n  Calls C++ function\n  void ::kaldi::nnet3::ReadConfigLines(::std::basic_istream<char, ::std::char_traits<char> >, ::std::vector< ::std::string>*)")},
  {C("parse_config_lines"), (PyCFunction)wrapParseConfigLines_as_parse_config_lines, METH_VARARGS | METH_KEYWORDS, C("parse_config_lines(lines:list<str>) -> list<ConfigLine>\n  Calls C++ function\n  void ::kaldi::nnet3::ParseConfigLines(::std::vector< ::std::string>, ::std::vector< ::kaldi::nnet3::ConfigLine>*)")},
  {C("error_context_from_stream"), (PyCFunction)wrapErrorContext_as_error_context_from_stream, METH_VARARGS | METH_KEYWORDS, C("error_context_from_stream(is:istream) -> str\n  Calls C++ function\n  ::std::string ::kaldi::nnet3::ErrorContext(::std::basic_istream<char, ::std::char_traits<char> >)")},
  {C("error_context"), (PyCFunction)wrapErrorContext_as_error_context, METH_VARARGS | METH_KEYWORDS, C("error_context(str:str) -> str\n  Calls C++ function\n  ::std::string ::kaldi::nnet3::ErrorContext(::std::string)")},
  {C("summarize_vector"), (PyCFunction)wrapSummarizeVector_as_summarize_vector, METH_VARARGS | METH_KEYWORDS, C("summarize_vector(vec:VectorBase) -> str\n  Calls C++ function\n  ::std::string ::kaldi::nnet3::SummarizeVector(::kaldi::VectorBase<float>)")},
  {C("summarize_double_vector"), (PyCFunction)wrapSummarizeVector_as_summarize_double_vector, METH_VARARGS | METH_KEYWORDS, C("summarize_double_vector(vec:DoubleVectorBase) -> str\n  Calls C++ function\n  ::std::string ::kaldi::nnet3::SummarizeVector(::kaldi::VectorBase<double>)")},
  {C("summarize_cu_vector"), (PyCFunction)wrapSummarizeVector_as_summarize_cu_vector, METH_VARARGS | METH_KEYWORDS, C("summarize_cu_vector(vec:CuVectorBase) -> str\n  Calls C++ function\n  ::std::string ::kaldi::nnet3::SummarizeVector(::kaldi::CuVectorBase<float>)")},
  {C("print_parameter_vector_stats"), (PyCFunction)wrapPrintParameterStats_as_print_parameter_vector_stats, METH_VARARGS | METH_KEYWORDS, C("print_parameter_vector_stats(os:ostringstream, name:str, params:CuVectorBase, include_mean:bool=default)\n  Calls C++ function\n  void ::kaldi::nnet3::PrintParameterStats(::std::basic_ostringstream<char, ::std::char_traits<char>, ::std::allocator<char> >, ::std::string, ::kaldi::CuVectorBase<float>, bool)")},
  {C("print_parameter_matrix_stats"), (PyCFunction)wrapPrintParameterStats_as_print_parameter_matrix_stats, METH_VARARGS | METH_KEYWORDS, C("print_parameter_matrix_stats(os:ostringstream, name:str, params:CuMatrix, include_mean:bool=default, include_row_norms:bool=default, include_column_norms:bool=default, include_singular_values:bool=default)\n  Calls C++ function\n  void ::kaldi::nnet3::PrintParameterStats(::std::basic_ostringstream<char, ::std::char_traits<char>, ::std::allocator<char> >, ::std::string, ::kaldi::CuMatrix<float>, bool, bool, bool, bool)")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyConfigLine::wrapper_Type) < 0) return false;
  Py_INCREF(&pyConfigLine::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_nnet_parse",  // module name
  "CLIF-generated module for nnet3/nnet-parse.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_sstream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_cu_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_cu_matrix")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "ConfigLine", reinterpret_cast<PyObject*>(&pyConfigLine::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __nnet__parse_clifwrap

namespace kaldi { namespace nnet3 {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// ConfigLine to/from ::kaldi::nnet3::ConfigLine conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ConfigLine** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::ConfigLine* cpp = __nnet__parse_clifwrap::pyConfigLine::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::ConfigLine>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ConfigLine* cpp = __nnet__parse_clifwrap::pyConfigLine::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__parse_clifwrap::pyConfigLine::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::ConfigLine>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ConfigLine* cpp = __nnet__parse_clifwrap::pyConfigLine::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__parse_clifwrap::pyConfigLine::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ConfigLine instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ConfigLine* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ConfigLine* cpp = __nnet__parse_clifwrap::pyConfigLine::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::ConfigLine>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ConfigLine* cpp = __nnet__parse_clifwrap::pyConfigLine::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::ConfigLine* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__parse_clifwrap::pyConfigLine::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__parse_clifwrap::pyConfigLine::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ConfigLine>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ConfigLine> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__parse_clifwrap::pyConfigLine::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__parse_clifwrap::pyConfigLine::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ConfigLine>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ConfigLine> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__parse_clifwrap::pyConfigLine::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__parse_clifwrap::pyConfigLine::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ConfigLine>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ConfigLine& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__parse_clifwrap::pyConfigLine::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__parse_clifwrap::pyConfigLine::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::ConfigLine>(c);
  return py;
}

} }  // namespace kaldi::nnet3
