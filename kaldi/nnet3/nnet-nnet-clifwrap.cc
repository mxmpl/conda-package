//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/nnet-nnet.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "nnet3/nnet-component-itf-clifwrap.h"
#include "nnet3/nnet-descriptor-clifwrap.h"
#include "nnet-nnet-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __nnet__nnet_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes

static PyObject *_Enum{}, *_IntEnum{};  // set below in Init()


// Create Python Enum object (cached in _ObjectiveType) for ::kaldi::nnet3::ObjectiveType
static PyObject* wrapObjectiveType() {
  PyObject *py, *py_enum_class{}, *names = PyTuple_New(2);
  if (names == nullptr) return nullptr;
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("LINEAR"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::ObjectiveType>::type>(::kaldi::nnet3::ObjectiveType::kLinear)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 0, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("QUADRATIC"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::ObjectiveType>::type>(::kaldi::nnet3::ObjectiveType::kQuadratic)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 1, py);
  py = PyUnicode_FromString("ObjectiveType");
  py_enum_class = PyObject_CallFunctionObjArgs(_IntEnum, py, names, nullptr);
  Py_DECREF(py);
err:
  Py_DECREF(names);
  return py_enum_class;
}
static PyObject* _ObjectiveType{};  // set by above func in Init()

// Create Python Enum object (cached in _NodeType) for ::kaldi::nnet3::NodeType
static PyObject* wrapNodeType() {
  PyObject *py, *py_enum_class{}, *names = PyTuple_New(5);
  if (names == nullptr) return nullptr;
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("INPUT"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::NodeType>::type>(::kaldi::nnet3::NodeType::kInput)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 0, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("DESCRIPTOR"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::NodeType>::type>(::kaldi::nnet3::NodeType::kDescriptor)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 1, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("COMPONENT"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::NodeType>::type>(::kaldi::nnet3::NodeType::kComponent)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 2, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("DIM_RANGE"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::NodeType>::type>(::kaldi::nnet3::NodeType::kDimRange)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 3, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("NONE"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::NodeType>::type>(::kaldi::nnet3::NodeType::kNone)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 4, py);
  py = PyUnicode_FromString("NodeType");
  py_enum_class = PyObject_CallFunctionObjArgs(_IntEnum, py, names, nullptr);
  Py_DECREF(py);
err:
  Py_DECREF(names);
  return py_enum_class;
}
static PyObject* _NodeType{};  // set by above func in Init()

namespace pyNetworkNode {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::NetworkNode> cpp;
};
static ::kaldi::nnet3::NetworkNode* ThisPtr(PyObject*);

static PyObject* get_node_type(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->node_type, {});
}

static int set_node_type(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the node_type attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->node_type)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for node_type:NodeType", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_descriptor(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->descriptor), {});
}

static int set_descriptor(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the descriptor attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->descriptor)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for descriptor:Descriptor", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_dim(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->dim, {});
}

static int set_dim(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the dim attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->dim)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for dim:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_dim_offset(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->dim_offset, {});
}

static int set_dim_offset(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the dim_offset attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->dim_offset)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for dim_offset:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// __init__(nt:NodeType=default)
static PyObject* wrapNetworkNode_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("nt"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:__init__", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::nnet3::NodeType arg1;
  if (nargs > 0) {
    if (!a[0]) arg1 = (::kaldi::nnet3::NodeType)4;
    else if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::nnet3::NodeType", a[0]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::NetworkNode>(); break;
  case 1:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::NetworkNode>(std::move(arg1)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// @classmethod from_other(other:NetworkNode) -> NetworkNode
static PyObject* wrapNetworkNode_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::kaldi::nnet3::NetworkNode* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::kaldi::nnet3::NetworkNode", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::nnet3::NetworkNode> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::nnet3::NetworkNode>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyGetSetDef Properties[] = {
  {C("node_type"), get_node_type, set_node_type, C("C++ ::kaldi::nnet3::NodeType NetworkNode.node_type")},
  {C("descriptor"), get_descriptor, set_descriptor, C("C++ ::kaldi::nnet3::Descriptor NetworkNode.descriptor")},
  {C("dim"), get_dim, set_dim, C("C++ ::int32 NetworkNode.dim")},
  {C("dim_offset"), get_dim_offset, set_dim_offset, C("C++ ::int32 NetworkNode.dim_offset")},
  {}
};

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapNetworkNode_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(nt:NodeType=default)\n  Calls C++ function\n  void ::kaldi::nnet3::NetworkNode::NetworkNode(::kaldi::nnet3::NodeType)")},
  {C("from_other"), (PyCFunction)wrapNetworkNode_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(other:NetworkNode) -> NetworkNode\n  Calls C++ function\n  std::unique_ptr<::kaldi::nnet3::NetworkNode> ::kaldi::nnet3::NetworkNode::NetworkNode(::kaldi::nnet3::NetworkNode)")},
  {}
};

// NetworkNode __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// NetworkNode __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// NetworkNode __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_nnet.NetworkNode",            // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::NetworkNode", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapNetworkNode_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::NetworkNode* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_NetworkNode"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::NetworkNode"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::NetworkNode* c = static_cast<::kaldi::nnet3::NetworkNode*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::NetworkNode*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyNetworkNode

namespace pyNnet {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::Nnet> cpp;
};
static ::kaldi::nnet3::Nnet* ThisPtr(PyObject*);

// read_config(config_file:istream)
static PyObject* wrapReadConfig_as_read_config(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("config_file"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:read_config", names, &a[0])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read_config", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ReadConfig(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// num_components() -> int
static PyObject* wrapNumComponents_as_num_components(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumComponents();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_nodes() -> int
static PyObject* wrapNumNodes_as_num_nodes(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumNodes();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// set_component(c:int, component:Component)
static PyObject* wrapSetComponent_as_set_component(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("c"),
      C("component"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:set_component", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_component", names[0], "int", a[0]);
  ::kaldi::nnet3::Component * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("set_component", names[1], "::kaldi::nnet3::Component *", a[1]);
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetComponent(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// add_component(name:str, component:Component) -> int
static PyObject* wrapAddComponent_as_add_component(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("name"),
      C("component"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:add_component", names, &a[0], &a[1])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add_component", names[0], "::std::string", a[0]);
  ::kaldi::nnet3::Component * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("add_component", names[1], "::kaldi::nnet3::Component *", a[1]);
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->AddComponent(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_node(node:int) -> NetworkNode
static PyObject* wrapGetNode_as_get_node(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("node"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_node", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_node", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::nnet3::NetworkNode ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetNode(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_component_node(node:int) -> bool
static PyObject* wrapIsComponentNode_as_is_component_node(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("node"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_component_node", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_component_node", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsComponentNode(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_dim_range_node(node:int) -> bool
static PyObject* wrapIsDimRangeNode_as_is_dim_range_node(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("node"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_dim_range_node", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_dim_range_node", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsDimRangeNode(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_input_node(node:int) -> bool
static PyObject* wrapIsInputNode_as_is_input_node(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("node"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_input_node", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_input_node", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsInputNode(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_descriptor_node(node:int) -> bool
static PyObject* wrapIsDescriptorNode_as_is_descriptor_node(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("node"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_descriptor_node", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_descriptor_node", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsDescriptorNode(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_output_node(node:int) -> bool
static PyObject* wrapIsOutputNode_as_is_output_node(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("node"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_output_node", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_output_node", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsOutputNode(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_component_input_node(node:int) -> bool
static PyObject* wrapIsComponentInputNode_as_is_component_input_node(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("node"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_component_input_node", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_component_input_node", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsComponentInputNode(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_node_names() -> list<str>
static PyObject* wrapGetNodeNames_as_get_node_names(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::vector< ::std::string> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetNodeNames();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {_1});
}

// get_node_name(node_index:int) -> str
static PyObject* wrapGetNodeName_as_get_node_name(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("node_index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_node_name", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_node_name", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetNodeName(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// set_node_name(node_index:int, new_name:str)
static PyObject* wrapSetNodeName_as_set_node_name(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("node_index"),
      C("new_name"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:set_node_name", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_node_name", names[0], "int", a[0]);
  ::std::string arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("set_node_name", names[1], "::std::string", a[1]);
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetNodeName(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// get_component_names() -> list<str>
static PyObject* wrapGetComponentNames_as_get_component_names(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::vector< ::std::string> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetComponentNames();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {_1});
}

// get_component_name(node_index:int) -> str
static PyObject* wrapGetComponentName_as_get_component_name(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("node_index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_component_name", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_component_name", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetComponentName(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// get_node_index(node_name:str) -> int
static PyObject* wrapGetNodeIndex_as_get_node_index(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("node_name"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_node_index", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_node_index", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetNodeIndex(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_component_index(component_name:str) -> int
static PyObject* wrapGetComponentIndex_as_get_component_index(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("component_name"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_component_index", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_component_index", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetComponentIndex(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// input_dim(input_name:str) -> int
static PyObject* wrapInputDim_as_input_dim(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("input_name"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:input_dim", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("input_dim", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->InputDim(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// output_dim(output_name:str) -> int
static PyObject* wrapOutputDim_as_output_dim(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("output_name"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:output_dim", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("output_dim", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->OutputDim(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// read(is:istream, binary:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// check(warn_for_orphans:bool=default)
static PyObject* wrapCheck_as_check(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("warn_for_orphans"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:check", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  bool arg1;
  if (nargs > 0) {
    if (!a[0]) arg1 = (bool)true;
    else if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("check", names[0], "bool", a[0]);
  }
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    c->Check(); break;
  case 1:
    c->Check(std::move(arg1)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// info() -> str
static PyObject* wrapInfo_as_info(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Info();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// modulus() -> int
static PyObject* wrapModulus_as_modulus(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Modulus();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod from_other(other:Nnet) -> Nnet
static PyObject* wrapNnet_as_from_other(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:from_other", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Nnet* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_other", names[0], "::kaldi::nnet3::Nnet", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::nnet3::Nnet> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::nnet3::Nnet>(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// copy() -> Nnet
static PyObject* wrapCopy_as_copy(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::nnet3::Nnet * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Copy();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// swap(other:Nnet)
static PyObject* wrapSwap_as_swap(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:swap", names, &a[0])) return nullptr;
  ::kaldi::nnet3::Nnet * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("swap", names[0], "::kaldi::nnet3::Nnet *", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Swap(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// remove_orphan_nodes(remove_orphan_inputs:bool=default)
static PyObject* wrapRemoveOrphanNodes_as_remove_orphan_nodes(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("remove_orphan_inputs"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:remove_orphan_nodes", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  bool arg1;
  if (nargs > 0) {
    if (!a[0]) arg1 = (bool)false;
    else if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("remove_orphan_nodes", names[0], "bool", a[0]);
  }
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    c->RemoveOrphanNodes(); break;
  case 1:
    c->RemoveOrphanNodes(std::move(arg1)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// remove_orphan_components()
static PyObject* wrapRemoveOrphanComponents_as_remove_orphan_components(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->RemoveOrphanComponents();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// remove_some_nodes(nodes_to_remove:list<int>)
static PyObject* wrapRemoveSomeNodes_as_remove_some_nodes(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("nodes_to_remove"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:remove_some_nodes", names, &a[0])) return nullptr;
  ::std::vector< ::int32> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("remove_some_nodes", names[0], "::std::vector< ::int32>", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->RemoveSomeNodes(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// reset_generators()
static PyObject* wrapResetGenerators_as_reset_generators(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ResetGenerators();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// get_config_lines(include_dim:bool) -> list<str>
static PyObject* wrapGetConfigLines_as_get_config_lines(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("include_dim"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:get_config_lines", names, &a[0])) return nullptr;
  bool arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_config_lines", names[0], "bool", a[0]);
  ::std::vector< ::std::string> ret0{};
  // Call actual C++ method.
  ::kaldi::nnet3::Nnet* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetConfigLines(std::move(arg1), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {_1});
}

static PyMethodDef Methods[] = {
  {C("read_config"), (PyCFunction)wrapReadConfig_as_read_config, METH_VARARGS | METH_KEYWORDS, C("read_config(config_file:istream)\n  Calls C++ function\n  void ::kaldi::nnet3::Nnet::ReadConfig(::std::basic_istream<char, ::std::char_traits<char> >)")},
  {C("num_components"), (PyCFunction)wrapNumComponents_as_num_components, METH_NOARGS, C("num_components() -> int\n  Calls C++ function\n  int ::kaldi::nnet3::Nnet::NumComponents()")},
  {C("num_nodes"), (PyCFunction)wrapNumNodes_as_num_nodes, METH_NOARGS, C("num_nodes() -> int\n  Calls C++ function\n  int ::kaldi::nnet3::Nnet::NumNodes()")},
  {C("set_component"), (PyCFunction)wrapSetComponent_as_set_component, METH_VARARGS | METH_KEYWORDS, C("set_component(c:int, component:Component)\n  Calls C++ function\n  void ::kaldi::nnet3::Nnet::SetComponent(int, ::kaldi::nnet3::Component *)")},
  {C("add_component"), (PyCFunction)wrapAddComponent_as_add_component, METH_VARARGS | METH_KEYWORDS, C("add_component(name:str, component:Component) -> int\n  Calls C++ function\n  int ::kaldi::nnet3::Nnet::AddComponent(::std::string, ::kaldi::nnet3::Component *)")},
  {C("get_node"), (PyCFunction)wrapGetNode_as_get_node, METH_VARARGS | METH_KEYWORDS, C("get_node(node:int) -> NetworkNode\n  Calls C++ function\n  ::kaldi::nnet3::NetworkNode ::kaldi::nnet3::Nnet::GetNode(int)")},
  {C("is_component_node"), (PyCFunction)wrapIsComponentNode_as_is_component_node, METH_VARARGS | METH_KEYWORDS, C("is_component_node(node:int) -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::Nnet::IsComponentNode(int)")},
  {C("is_dim_range_node"), (PyCFunction)wrapIsDimRangeNode_as_is_dim_range_node, METH_VARARGS | METH_KEYWORDS, C("is_dim_range_node(node:int) -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::Nnet::IsDimRangeNode(int)")},
  {C("is_input_node"), (PyCFunction)wrapIsInputNode_as_is_input_node, METH_VARARGS | METH_KEYWORDS, C("is_input_node(node:int) -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::Nnet::IsInputNode(int)")},
  {C("is_descriptor_node"), (PyCFunction)wrapIsDescriptorNode_as_is_descriptor_node, METH_VARARGS | METH_KEYWORDS, C("is_descriptor_node(node:int) -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::Nnet::IsDescriptorNode(int)")},
  {C("is_output_node"), (PyCFunction)wrapIsOutputNode_as_is_output_node, METH_VARARGS | METH_KEYWORDS, C("is_output_node(node:int) -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::Nnet::IsOutputNode(int)")},
  {C("is_component_input_node"), (PyCFunction)wrapIsComponentInputNode_as_is_component_input_node, METH_VARARGS | METH_KEYWORDS, C("is_component_input_node(node:int) -> bool\n  Calls C++ function\n  bool ::kaldi::nnet3::Nnet::IsComponentInputNode(int)")},
  {C("get_node_names"), (PyCFunction)wrapGetNodeNames_as_get_node_names, METH_NOARGS, C("get_node_names() -> list<str>\n  Calls C++ function\n  ::std::vector< ::std::string> ::kaldi::nnet3::Nnet::GetNodeNames()")},
  {C("get_node_name"), (PyCFunction)wrapGetNodeName_as_get_node_name, METH_VARARGS | METH_KEYWORDS, C("get_node_name(node_index:int) -> str\n  Calls C++ function\n  ::std::string ::kaldi::nnet3::Nnet::GetNodeName(int)")},
  {C("set_node_name"), (PyCFunction)wrapSetNodeName_as_set_node_name, METH_VARARGS | METH_KEYWORDS, C("set_node_name(node_index:int, new_name:str)\n  Calls C++ function\n  void ::kaldi::nnet3::Nnet::SetNodeName(int, ::std::string)")},
  {C("get_component_names"), (PyCFunction)wrapGetComponentNames_as_get_component_names, METH_NOARGS, C("get_component_names() -> list<str>\n  Calls C++ function\n  ::std::vector< ::std::string> ::kaldi::nnet3::Nnet::GetComponentNames()")},
  {C("get_component_name"), (PyCFunction)wrapGetComponentName_as_get_component_name, METH_VARARGS | METH_KEYWORDS, C("get_component_name(node_index:int) -> str\n  Calls C++ function\n  ::std::string ::kaldi::nnet3::Nnet::GetComponentName(int)")},
  {C("get_node_index"), (PyCFunction)wrapGetNodeIndex_as_get_node_index, METH_VARARGS | METH_KEYWORDS, C("get_node_index(node_name:str) -> int\n  Calls C++ function\n  int ::kaldi::nnet3::Nnet::GetNodeIndex(::std::string)")},
  {C("get_component_index"), (PyCFunction)wrapGetComponentIndex_as_get_component_index, METH_VARARGS | METH_KEYWORDS, C("get_component_index(component_name:str) -> int\n  Calls C++ function\n  int ::kaldi::nnet3::Nnet::GetComponentIndex(::std::string)")},
  {C("input_dim"), (PyCFunction)wrapInputDim_as_input_dim, METH_VARARGS | METH_KEYWORDS, C("input_dim(input_name:str) -> int\n  Calls C++ function\n  int ::kaldi::nnet3::Nnet::InputDim(::std::string)")},
  {C("output_dim"), (PyCFunction)wrapOutputDim_as_output_dim, METH_VARARGS | METH_KEYWORDS, C("output_dim(output_name:str) -> int\n  Calls C++ function\n  int ::kaldi::nnet3::Nnet::OutputDim(::std::string)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool)\n  Calls C++ function\n  void ::kaldi::nnet3::Nnet::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool)")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::nnet3::Nnet::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("check"), (PyCFunction)wrapCheck_as_check, METH_VARARGS | METH_KEYWORDS, C("check(warn_for_orphans:bool=default)\n  Calls C++ function\n  void ::kaldi::nnet3::Nnet::Check(bool)")},
  {C("info"), (PyCFunction)wrapInfo_as_info, METH_NOARGS, C("info() -> str\n  Calls C++ function\n  ::std::string ::kaldi::nnet3::Nnet::Info()")},
  {C("modulus"), (PyCFunction)wrapModulus_as_modulus, METH_NOARGS, C("modulus() -> int\n  Calls C++ function\n  int ::kaldi::nnet3::Nnet::Modulus()")},
  {C("from_other"), (PyCFunction)wrapNnet_as_from_other, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("from_other(other:Nnet) -> Nnet\n  Calls C++ function\n  std::unique_ptr<::kaldi::nnet3::Nnet> ::kaldi::nnet3::Nnet::Nnet(::kaldi::nnet3::Nnet)")},
  {C("copy"), (PyCFunction)wrapCopy_as_copy, METH_NOARGS, C("copy() -> Nnet\n  Calls C++ function\n  ::kaldi::nnet3::Nnet * ::kaldi::nnet3::Nnet::Copy()")},
  {C("swap"), (PyCFunction)wrapSwap_as_swap, METH_VARARGS | METH_KEYWORDS, C("swap(other:Nnet)\n  Calls C++ function\n  void ::kaldi::nnet3::Nnet::Swap(::kaldi::nnet3::Nnet *)")},
  {C("remove_orphan_nodes"), (PyCFunction)wrapRemoveOrphanNodes_as_remove_orphan_nodes, METH_VARARGS | METH_KEYWORDS, C("remove_orphan_nodes(remove_orphan_inputs:bool=default)\n  Calls C++ function\n  void ::kaldi::nnet3::Nnet::RemoveOrphanNodes(bool)")},
  {C("remove_orphan_components"), (PyCFunction)wrapRemoveOrphanComponents_as_remove_orphan_components, METH_NOARGS, C("remove_orphan_components()\n  Calls C++ function\n  void ::kaldi::nnet3::Nnet::RemoveOrphanComponents()")},
  {C("remove_some_nodes"), (PyCFunction)wrapRemoveSomeNodes_as_remove_some_nodes, METH_VARARGS | METH_KEYWORDS, C("remove_some_nodes(nodes_to_remove:list<int>)\n  Calls C++ function\n  void ::kaldi::nnet3::Nnet::RemoveSomeNodes(::std::vector< ::int32>)")},
  {C("reset_generators"), (PyCFunction)wrapResetGenerators_as_reset_generators, METH_NOARGS, C("reset_generators()\n  Calls C++ function\n  void ::kaldi::nnet3::Nnet::ResetGenerators()")},
  {C("get_config_lines"), (PyCFunction)wrapGetConfigLines_as_get_config_lines, METH_VARARGS | METH_KEYWORDS, C("get_config_lines(include_dim:bool) -> list<str>\n  Calls C++ function\n  void ::kaldi::nnet3::Nnet::GetConfigLines(bool, ::std::vector< ::std::string>*)")},
  {}
};

// Nnet __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// Nnet __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// Nnet __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_nnet.Nnet",                   // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::Nnet", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "Nnet takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::Nnet>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::Nnet* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_Nnet"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::Nnet"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::Nnet* c = static_cast<::kaldi::nnet3::Nnet*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::Nnet*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyNnet


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyNetworkNode::wrapper_Type) < 0) return false;
  Py_INCREF(&pyNetworkNode::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyNnet::wrapper_Type) < 0) return false;
  Py_INCREF(&pyNnet::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_nnet_nnet",  // module name
  "CLIF-generated module for nnet3/nnet-nnet.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_component_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_descriptor")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  {PyObject* em = PyImport_ImportModule("enum");
   if (em == nullptr) goto err;
   _Enum = PyObject_GetAttrString(em, "Enum");
   _IntEnum = PyObject_GetAttrString(em, "IntEnum");
   Py_DECREF(em);}
  if (!_Enum || !_IntEnum) {
    Py_XDECREF(_Enum);
    Py_XDECREF(_IntEnum);
    goto err;
  }
  if (PyModule_AddObject(module, "ObjectiveType", (_ObjectiveType=wrapObjectiveType())) < 0) goto err;
  if (PyModule_AddObject(module, "NodeType", (_NodeType=wrapNodeType())) < 0) goto err;
  if (PyModule_AddObject(module, "NetworkNode", reinterpret_cast<PyObject*>(&pyNetworkNode::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "Nnet", reinterpret_cast<PyObject*>(&pyNnet::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __nnet__nnet_clifwrap

namespace kaldi { namespace nnet3 {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// NetworkNode to/from ::kaldi::nnet3::NetworkNode conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::NetworkNode** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::NetworkNode* cpp = __nnet__nnet_clifwrap::pyNetworkNode::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::NetworkNode>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NetworkNode* cpp = __nnet__nnet_clifwrap::pyNetworkNode::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__nnet_clifwrap::pyNetworkNode::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::NetworkNode>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NetworkNode* cpp = __nnet__nnet_clifwrap::pyNetworkNode::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__nnet_clifwrap::pyNetworkNode::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert NetworkNode instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::NetworkNode* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NetworkNode* cpp = __nnet__nnet_clifwrap::pyNetworkNode::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::NetworkNode>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NetworkNode* cpp = __nnet__nnet_clifwrap::pyNetworkNode::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::NetworkNode* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__nnet_clifwrap::pyNetworkNode::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__nnet_clifwrap::pyNetworkNode::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NetworkNode>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::NetworkNode> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__nnet_clifwrap::pyNetworkNode::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__nnet_clifwrap::pyNetworkNode::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NetworkNode>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::NetworkNode> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__nnet_clifwrap::pyNetworkNode::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__nnet_clifwrap::pyNetworkNode::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NetworkNode>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::NetworkNode& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__nnet_clifwrap::pyNetworkNode::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__nnet_clifwrap::pyNetworkNode::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::NetworkNode>(c);
  return py;
}

// Nnet to/from ::kaldi::nnet3::Nnet conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::Nnet** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::Nnet* cpp = __nnet__nnet_clifwrap::pyNnet::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::Nnet>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::Nnet* cpp = __nnet__nnet_clifwrap::pyNnet::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__nnet_clifwrap::pyNnet::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::Nnet>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::Nnet* cpp = __nnet__nnet_clifwrap::pyNnet::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__nnet_clifwrap::pyNnet::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert Nnet instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::Nnet* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::Nnet* cpp = __nnet__nnet_clifwrap::pyNnet::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::Nnet>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::Nnet* cpp = __nnet__nnet_clifwrap::pyNnet::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::Nnet* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__nnet_clifwrap::pyNnet::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__nnet_clifwrap::pyNnet::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::Nnet>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::Nnet> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__nnet_clifwrap::pyNnet::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__nnet_clifwrap::pyNnet::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::Nnet>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::Nnet> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__nnet_clifwrap::pyNnet::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__nnet_clifwrap::pyNnet::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::Nnet>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::Nnet& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__nnet_clifwrap::pyNnet::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__nnet_clifwrap::pyNnet::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::Nnet>(c);
  return py;
}

// NodeType:IntEnum to/from enum ::kaldi::nnet3::NodeType conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::NodeType* c) {
  assert(c != nullptr);
  if (!PyObject_IsInstance(py, __nnet__nnet_clifwrap::_NodeType)) {
    PyErr_Format(PyExc_TypeError, "expecting enum NodeType, got %s %s", ClassName(py), ClassType(py));
    return false;
  }
  typename std::underlying_type<::kaldi::nnet3::NodeType>::type v;
  PyObject* value = PyObject_GetAttrString(py, "value");
  if (value == nullptr || !Clif_PyObjAs(value, &v)) return false;
  Py_DECREF(value);
  *c = static_cast<::kaldi::nnet3::NodeType>(v);
  return true;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::NodeType& c, py::PostConv) {
  return PyObject_CallFunctionObjArgs(__nnet__nnet_clifwrap::_NodeType, PyInt_FromLong(
      static_cast<typename std::underlying_type<::kaldi::nnet3::NodeType>::type>(c)), nullptr);
}

// ObjectiveType:IntEnum to/from enum ::kaldi::nnet3::ObjectiveType conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ObjectiveType* c) {
  assert(c != nullptr);
  if (!PyObject_IsInstance(py, __nnet__nnet_clifwrap::_ObjectiveType)) {
    PyErr_Format(PyExc_TypeError, "expecting enum ObjectiveType, got %s %s", ClassName(py), ClassType(py));
    return false;
  }
  typename std::underlying_type<::kaldi::nnet3::ObjectiveType>::type v;
  PyObject* value = PyObject_GetAttrString(py, "value");
  if (value == nullptr || !Clif_PyObjAs(value, &v)) return false;
  Py_DECREF(value);
  *c = static_cast<::kaldi::nnet3::ObjectiveType>(v);
  return true;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ObjectiveType& c, py::PostConv) {
  return PyObject_CallFunctionObjArgs(__nnet__nnet_clifwrap::_ObjectiveType, PyInt_FromLong(
      static_cast<typename std::underlying_type<::kaldi::nnet3::ObjectiveType>::type>(c)), nullptr);
}

} }  // namespace kaldi::nnet3
