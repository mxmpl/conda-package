//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/nnet-am-decodable-simple.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "itf/options-itf-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "hmm/transition-model-clifwrap.h"
#include "nnet3/nnet-nnet-clifwrap.h"
#include "nnet3/nnet-compute-clifwrap.h"
#include "nnet3/nnet-optimize-clifwrap.h"
#include "nnet3/am-nnet-simple-clifwrap.h"
#include "nnet-am-decodable-simple-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __nnet__am__decodable__simple_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyNnetSimpleComputationOptions {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::NnetSimpleComputationOptions> cpp;
};
static ::kaldi::nnet3::NnetSimpleComputationOptions* ThisPtr(PyObject*);

static PyObject* get_extra_left_context(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->extra_left_context, {});
}

static int set_extra_left_context(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the extra_left_context attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->extra_left_context)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for extra_left_context:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_extra_right_context(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->extra_right_context, {});
}

static int set_extra_right_context(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the extra_right_context attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->extra_right_context)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for extra_right_context:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_extra_left_context_initial(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->extra_left_context_initial, {});
}

static int set_extra_left_context_initial(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the extra_left_context_initial attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->extra_left_context_initial)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for extra_left_context_initial:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_extra_right_context_final(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->extra_right_context_final, {});
}

static int set_extra_right_context_final(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the extra_right_context_final attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->extra_right_context_final)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for extra_right_context_final:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_frame_subsampling_factor(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->frame_subsampling_factor, {});
}

static int set_frame_subsampling_factor(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the frame_subsampling_factor attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->frame_subsampling_factor)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for frame_subsampling_factor:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_frames_per_chunk(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->frames_per_chunk, {});
}

static int set_frames_per_chunk(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the frames_per_chunk attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->frames_per_chunk)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for frames_per_chunk:int", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_acoustic_scale(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->acoustic_scale, {});
}

static int set_acoustic_scale(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the acoustic_scale attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->acoustic_scale)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for acoustic_scale:float", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_debug_computation(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->debug_computation, {});
}

static int set_debug_computation(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the debug_computation attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->debug_computation)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for debug_computation:bool", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_optimize_config(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->optimize_config), {});
}

static int set_optimize_config(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the optimize_config attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->optimize_config)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for optimize_config:NnetOptimizeOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_compute_config(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->compute_config), {});
}

static int set_compute_config(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the compute_config attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->compute_config)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for compute_config:NnetComputeOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_compiler_config(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->compiler_config), {});
}

static int set_compiler_config(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the compiler_config attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->compiler_config)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for compiler_config:CachingOptimizingCompilerOptions", s? PyUnicode_AsUTF8(s): "input");
  Py_XDECREF(s);
  return -1;
}

// register(opts:OptionsItf)
static PyObject* wrapRegister_as_register(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("opts"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:register", names, &a[0])) return nullptr;
  ::kaldi::OptionsItf * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("register", names[0], "::kaldi::OptionsItf *", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::NnetSimpleComputationOptions* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Register(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyGetSetDef Properties[] = {
  {C("extra_left_context"), get_extra_left_context, set_extra_left_context, C("C++ ::int32 NnetSimpleComputationOptions.extra_left_context")},
  {C("extra_right_context"), get_extra_right_context, set_extra_right_context, C("C++ ::int32 NnetSimpleComputationOptions.extra_right_context")},
  {C("extra_left_context_initial"), get_extra_left_context_initial, set_extra_left_context_initial, C("C++ ::int32 NnetSimpleComputationOptions.extra_left_context_initial")},
  {C("extra_right_context_final"), get_extra_right_context_final, set_extra_right_context_final, C("C++ ::int32 NnetSimpleComputationOptions.extra_right_context_final")},
  {C("frame_subsampling_factor"), get_frame_subsampling_factor, set_frame_subsampling_factor, C("C++ ::int32 NnetSimpleComputationOptions.frame_subsampling_factor")},
  {C("frames_per_chunk"), get_frames_per_chunk, set_frames_per_chunk, C("C++ ::int32 NnetSimpleComputationOptions.frames_per_chunk")},
  {C("acoustic_scale"), get_acoustic_scale, set_acoustic_scale, C("C++ ::kaldi::BaseFloat NnetSimpleComputationOptions.acoustic_scale")},
  {C("debug_computation"), get_debug_computation, set_debug_computation, C("C++ bool NnetSimpleComputationOptions.debug_computation")},
  {C("optimize_config"), get_optimize_config, set_optimize_config, C("C++ ::kaldi::nnet3::NnetOptimizeOptions NnetSimpleComputationOptions.optimize_config")},
  {C("compute_config"), get_compute_config, set_compute_config, C("C++ ::kaldi::nnet3::NnetComputeOptions NnetSimpleComputationOptions.compute_config")},
  {C("compiler_config"), get_compiler_config, set_compiler_config, C("C++ ::kaldi::nnet3::CachingOptimizingCompilerOptions NnetSimpleComputationOptions.compiler_config")},
  {}
};

static PyMethodDef Methods[] = {
  {C("register"), (PyCFunction)wrapRegister_as_register, METH_VARARGS | METH_KEYWORDS, C("register(opts:OptionsItf)\n  Calls C++ function\n  void ::kaldi::nnet3::NnetSimpleComputationOptions::Register(::kaldi::OptionsItf *)")},
  {}
};

// NnetSimpleComputationOptions __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// NnetSimpleComputationOptions __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// NnetSimpleComputationOptions __del__
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_am_decodable_simple.NnetSimpleComputationOptions", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  nullptr,                             // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::NnetSimpleComputationOptions", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "NnetSimpleComputationOptions takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::NnetSimpleComputationOptions>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::NnetSimpleComputationOptions* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_NnetSimpleComputationOptions"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::NnetSimpleComputationOptions"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::NnetSimpleComputationOptions* c = static_cast<::kaldi::nnet3::NnetSimpleComputationOptions*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::NnetSimpleComputationOptions*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyNnetSimpleComputationOptions

namespace pyDecodableNnetSimple {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::DecodableNnetSimple> cpp;
};
static ::kaldi::nnet3::DecodableNnetSimple* ThisPtr(PyObject*);

// __init__(opts:NnetSimpleComputationOptions, nnet:Nnet, priors:VectorBase, feats:MatrixBase, compiler:CachingOptimizingCompiler, ivector:VectorBase=default, online_ivectors:MatrixBase=default, online_ivector_period:int=default)
static PyObject* wrapDecodableNnetSimple_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[8]{};
  char* names[] = {
      C("opts"),
      C("nnet"),
      C("priors"),
      C("feats"),
      C("compiler"),
      C("ivector"),
      C("online_ivectors"),
      C("online_ivector_period"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOOO|OOO:__init__", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5], &a[6], &a[7])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 8; nargs > 5; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::nnet3::NnetSimpleComputationOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::nnet3::NnetSimpleComputationOptions", a[0]);
  ::kaldi::nnet3::Nnet* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::nnet3::Nnet", a[1]);
  ::kaldi::VectorBase<float>* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::kaldi::VectorBase<float>", a[2]);
  ::kaldi::MatrixBase<float>* arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "::kaldi::MatrixBase<float>", a[3]);
  ::kaldi::nnet3::CachingOptimizingCompiler * arg5;
  if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("__init__", names[4], "::kaldi::nnet3::CachingOptimizingCompiler *", a[4]);
  ::kaldi::VectorBase<float> * arg6;
  if (nargs > 5) {
    if (!a[5]) arg6 = (::kaldi::VectorBase<float> *)nullptr;
    else if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("__init__", names[5], "::kaldi::VectorBase<float> *", a[5]);
  }
  ::kaldi::MatrixBase<float> * arg7;
  if (nargs > 6) {
    if (!a[6]) arg7 = (::kaldi::MatrixBase<float> *)nullptr;
    else if (!Clif_PyObjAs(a[6], &arg7)) return ArgError("__init__", names[6], "::kaldi::MatrixBase<float> *", a[6]);
  }
  int arg8;
  if (nargs > 7) {
    if (!a[7]) arg8 = (int)1;
    else if (!Clif_PyObjAs(a[7], &arg8)) return ArgError("__init__", names[7], "int", a[7]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 5:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::DecodableNnetSimple>(*arg1, *arg2, *arg3, *arg4, arg5); break;
  case 6:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::DecodableNnetSimple>(*arg1, *arg2, *arg3, *arg4, arg5, arg6); break;
  case 7:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::DecodableNnetSimple>(*arg1, *arg2, *arg3, *arg4, arg5, arg6, arg7); break;
  case 8:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::DecodableNnetSimple>(*arg1, *arg2, *arg3, *arg4, arg5, arg6, arg7, std::move(arg8)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// num_frames() -> int
static PyObject* wrapNumFrames_as_num_frames(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::DecodableNnetSimple* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFrames();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// output_dim() -> int
static PyObject* wrapOutputDim_as_output_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::DecodableNnetSimple* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->OutputDim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// get_output_for_frame(frame:int, output:VectorBase)
static PyObject* wrapGetOutputForFrame_as_get_output_for_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("output"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_output_for_frame", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_output_for_frame", names[0], "int", a[0]);
  ::kaldi::VectorBase<float> * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_output_for_frame", names[1], "::kaldi::VectorBase<float> *", a[1]);
  // Call actual C++ method.
  ::kaldi::nnet3::DecodableNnetSimple* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetOutputForFrame(std::move(arg1), arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// get_output(subsampled_frame:int, pdf_id:int) -> float
static PyObject* wrapGetOutput_as_get_output(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("subsampled_frame"),
      C("pdf_id"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_output", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_output", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_output", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::nnet3::DecodableNnetSimple* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->GetOutput(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapDecodableNnetSimple_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(opts:NnetSimpleComputationOptions, nnet:Nnet, priors:VectorBase, feats:MatrixBase, compiler:CachingOptimizingCompiler, ivector:VectorBase=default, online_ivectors:MatrixBase=default, online_ivector_period:int=default)\n  Calls C++ function\n  void ::kaldi::nnet3::DecodableNnetSimple::DecodableNnetSimple(::kaldi::nnet3::NnetSimpleComputationOptions, ::kaldi::nnet3::Nnet, ::kaldi::VectorBase<float>, ::kaldi::MatrixBase<float>, ::kaldi::nnet3::CachingOptimizingCompiler *, ::kaldi::VectorBase<float> *, ::kaldi::MatrixBase<float> *, int)")},
  {C("num_frames"), (PyCFunction)wrapNumFrames_as_num_frames, METH_NOARGS, C("num_frames() -> int\n  Calls C++ function\n  int ::kaldi::nnet3::DecodableNnetSimple::NumFrames()")},
  {C("output_dim"), (PyCFunction)wrapOutputDim_as_output_dim, METH_NOARGS, C("output_dim() -> int\n  Calls C++ function\n  int ::kaldi::nnet3::DecodableNnetSimple::OutputDim()")},
  {C("get_output_for_frame"), (PyCFunction)wrapGetOutputForFrame_as_get_output_for_frame, METH_VARARGS | METH_KEYWORDS, C("get_output_for_frame(frame:int, output:VectorBase)\n  Calls C++ function\n  void ::kaldi::nnet3::DecodableNnetSimple::GetOutputForFrame(int, ::kaldi::VectorBase<float> *)")},
  {C("get_output"), (PyCFunction)wrapGetOutput_as_get_output, METH_VARARGS | METH_KEYWORDS, C("get_output(subsampled_frame:int, pdf_id:int) -> float\n  Calls C++ function\n  float ::kaldi::nnet3::DecodableNnetSimple::GetOutput(int, int)")},
  {}
};

// DecodableNnetSimple __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// DecodableNnetSimple __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// DecodableNnetSimple __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_am_decodable_simple.DecodableNnetSimple", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::DecodableNnetSimple", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapDecodableNnetSimple_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::DecodableNnetSimple* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_DecodableNnetSimple"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::DecodableNnetSimple"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::DecodableNnetSimple* c = static_cast<::kaldi::nnet3::DecodableNnetSimple*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::DecodableNnetSimple*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyDecodableNnetSimple

namespace pyDecodableAmNnetSimple {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::DecodableAmNnetSimple> cpp;
};
static ::kaldi::nnet3::DecodableAmNnetSimple* ThisPtr(PyObject*);

// __init__(opts:NnetSimpleComputationOptions, trans_model:TransitionModel, am_nnet:AmNnetSimple, feats:MatrixBase, ivector:VectorBase=default, online_ivectors:MatrixBase=default, online_ivector_period:int=default, compiler:CachingOptimizingCompiler=default)
static PyObject* wrapDecodableAmNnetSimple_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[8]{};
  char* names[] = {
      C("opts"),
      C("trans_model"),
      C("am_nnet"),
      C("feats"),
      C("ivector"),
      C("online_ivectors"),
      C("online_ivector_period"),
      C("compiler"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO|OOOO:__init__", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5], &a[6], &a[7])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 8; nargs > 4; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::nnet3::NnetSimpleComputationOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::nnet3::NnetSimpleComputationOptions", a[0]);
  ::kaldi::TransitionModel* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::TransitionModel", a[1]);
  ::kaldi::nnet3::AmNnetSimple* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::kaldi::nnet3::AmNnetSimple", a[2]);
  ::kaldi::MatrixBase<float>* arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "::kaldi::MatrixBase<float>", a[3]);
  ::kaldi::VectorBase<float> * arg5;
  if (nargs > 4) {
    if (!a[4]) arg5 = (::kaldi::VectorBase<float> *)nullptr;
    else if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("__init__", names[4], "::kaldi::VectorBase<float> *", a[4]);
  }
  ::kaldi::MatrixBase<float> * arg6;
  if (nargs > 5) {
    if (!a[5]) arg6 = (::kaldi::MatrixBase<float> *)nullptr;
    else if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("__init__", names[5], "::kaldi::MatrixBase<float> *", a[5]);
  }
  int arg7;
  if (nargs > 6) {
    if (!a[6]) arg7 = (int)1;
    else if (!Clif_PyObjAs(a[6], &arg7)) return ArgError("__init__", names[6], "int", a[6]);
  }
  ::kaldi::nnet3::CachingOptimizingCompiler * arg8;
  if (nargs > 7) {
    if (!a[7]) arg8 = (::kaldi::nnet3::CachingOptimizingCompiler *)nullptr;
    else if (!Clif_PyObjAs(a[7], &arg8)) return ArgError("__init__", names[7], "::kaldi::nnet3::CachingOptimizingCompiler *", a[7]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 4:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::DecodableAmNnetSimple>(*arg1, *arg2, *arg3, *arg4); break;
  case 5:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::DecodableAmNnetSimple>(*arg1, *arg2, *arg3, *arg4, arg5); break;
  case 6:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::DecodableAmNnetSimple>(*arg1, *arg2, *arg3, *arg4, arg5, arg6); break;
  case 7:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::DecodableAmNnetSimple>(*arg1, *arg2, *arg3, *arg4, arg5, arg6, std::move(arg7)); break;
  case 8:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::DecodableAmNnetSimple>(*arg1, *arg2, *arg3, *arg4, arg5, arg6, std::move(arg7), arg8); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// log_likelihood(frame:int, index:int) -> float
static PyObject* wrapLogLikelihood_as_log_likelihood(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:log_likelihood", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("log_likelihood", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("log_likelihood", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::nnet3::DecodableAmNnetSimple* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->LogLikelihood(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_last_frame(frame:int) -> bool
static PyObject* wrapIsLastFrame_as_is_last_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_last_frame", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_last_frame", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::DecodableAmNnetSimple* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsLastFrame(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_frames_ready() -> int
static PyObject* wrapNumFramesReady_as_num_frames_ready(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::DecodableAmNnetSimple* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFramesReady();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_indices() -> int
static PyObject* wrapNumIndices_as_num_indices(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::DecodableAmNnetSimple* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumIndices();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::kaldi::DecodableInterface*
static PyObject* as_kaldi_DecodableInterface(PyObject* self) {
  ::kaldi::DecodableInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::DecodableInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapDecodableAmNnetSimple_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(opts:NnetSimpleComputationOptions, trans_model:TransitionModel, am_nnet:AmNnetSimple, feats:MatrixBase, ivector:VectorBase=default, online_ivectors:MatrixBase=default, online_ivector_period:int=default, compiler:CachingOptimizingCompiler=default)\n  Calls C++ function\n  void ::kaldi::nnet3::DecodableAmNnetSimple::DecodableAmNnetSimple(::kaldi::nnet3::NnetSimpleComputationOptions, ::kaldi::TransitionModel, ::kaldi::nnet3::AmNnetSimple, ::kaldi::MatrixBase<float>, ::kaldi::VectorBase<float> *, ::kaldi::MatrixBase<float> *, int, ::kaldi::nnet3::CachingOptimizingCompiler *)")},
  {C("log_likelihood"), (PyCFunction)wrapLogLikelihood_as_log_likelihood, METH_VARARGS | METH_KEYWORDS, C("log_likelihood(frame:int, index:int) -> float\n\nReturns the log-likehood of the given index for the given frame.")},
  {C("is_last_frame"), (PyCFunction)wrapIsLastFrame_as_is_last_frame, METH_VARARGS | METH_KEYWORDS, C("is_last_frame(frame:int) -> bool\n\nChecks if given frame is the last frame.")},
  {C("num_frames_ready"), (PyCFunction)wrapNumFramesReady_as_num_frames_ready, METH_NOARGS, C("num_frames_ready() -> int\n\nReturns number of frames ready for decoding.")},
  {C("num_indices"), (PyCFunction)wrapNumIndices_as_num_indices, METH_NOARGS, C("num_indices() -> int\n\nReturns number of indices.")},
  {C("as_kaldi_DecodableInterface"), (PyCFunction)as_kaldi_DecodableInterface, METH_NOARGS, C("Upcast to ::kaldi::DecodableInterface*")},
  {}
};

// DecodableAmNnetSimple __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// DecodableAmNnetSimple __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// DecodableAmNnetSimple __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_am_decodable_simple.DecodableAmNnetSimple", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::DecodableAmNnetSimple", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapDecodableAmNnetSimple_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::DecodableAmNnetSimple* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_DecodableAmNnetSimple"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::DecodableAmNnetSimple"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::DecodableAmNnetSimple* c = static_cast<::kaldi::nnet3::DecodableAmNnetSimple*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::DecodableAmNnetSimple*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyDecodableAmNnetSimple

namespace pyDecodableAmNnetSimpleParallel {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::DecodableAmNnetSimpleParallel> cpp;
};
static ::kaldi::nnet3::DecodableAmNnetSimpleParallel* ThisPtr(PyObject*);

// __init__(opts:NnetSimpleComputationOptions, trans_model:TransitionModel, am_nnet:AmNnetSimple, feats:MatrixBase, ivector:VectorBase=default, online_ivectors:MatrixBase=default, online_ivector_period:int=default)
static PyObject* wrapDecodableAmNnetSimpleParallel_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[7]{};
  char* names[] = {
      C("opts"),
      C("trans_model"),
      C("am_nnet"),
      C("feats"),
      C("ivector"),
      C("online_ivectors"),
      C("online_ivector_period"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO|OOO:__init__", names, &a[0], &a[1], &a[2], &a[3], &a[4], &a[5], &a[6])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 7; nargs > 4; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  ::kaldi::nnet3::NnetSimpleComputationOptions* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::nnet3::NnetSimpleComputationOptions", a[0]);
  ::kaldi::TransitionModel* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::TransitionModel", a[1]);
  ::kaldi::nnet3::AmNnetSimple* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::kaldi::nnet3::AmNnetSimple", a[2]);
  ::kaldi::MatrixBase<float>* arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "::kaldi::MatrixBase<float>", a[3]);
  ::kaldi::VectorBase<float> * arg5;
  if (nargs > 4) {
    if (!a[4]) arg5 = (::kaldi::VectorBase<float> *)nullptr;
    else if (!Clif_PyObjAs(a[4], &arg5)) return ArgError("__init__", names[4], "::kaldi::VectorBase<float> *", a[4]);
  }
  ::kaldi::MatrixBase<float> * arg6;
  if (nargs > 5) {
    if (!a[5]) arg6 = (::kaldi::MatrixBase<float> *)nullptr;
    else if (!Clif_PyObjAs(a[5], &arg6)) return ArgError("__init__", names[5], "::kaldi::MatrixBase<float> *", a[5]);
  }
  int arg7;
  if (nargs > 6) {
    if (!a[6]) arg7 = (int)1;
    else if (!Clif_PyObjAs(a[6], &arg7)) return ArgError("__init__", names[6], "int", a[6]);
  }
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 4:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::DecodableAmNnetSimpleParallel>(*arg1, *arg2, *arg3, *arg4); break;
  case 5:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::DecodableAmNnetSimpleParallel>(*arg1, *arg2, *arg3, *arg4, arg5); break;
  case 6:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::DecodableAmNnetSimpleParallel>(*arg1, *arg2, *arg3, *arg4, arg5, arg6); break;
  case 7:
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::nnet3::DecodableAmNnetSimpleParallel>(*arg1, *arg2, *arg3, *arg4, arg5, arg6, std::move(arg7)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// log_likelihood(frame:int, index:int) -> float
static PyObject* wrapLogLikelihood_as_log_likelihood(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("frame"),
      C("index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:log_likelihood", names, &a[0], &a[1])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("log_likelihood", names[0], "int", a[0]);
  int arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("log_likelihood", names[1], "int", a[1]);
  // Call actual C++ method.
  ::kaldi::nnet3::DecodableAmNnetSimpleParallel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->LogLikelihood(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_last_frame(frame:int) -> bool
static PyObject* wrapIsLastFrame_as_is_last_frame(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("frame"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:is_last_frame", names, &a[0])) return nullptr;
  int arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_last_frame", names[0], "int", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::DecodableAmNnetSimpleParallel* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsLastFrame(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_frames_ready() -> int
static PyObject* wrapNumFramesReady_as_num_frames_ready(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::DecodableAmNnetSimpleParallel* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumFramesReady();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// num_indices() -> int
static PyObject* wrapNumIndices_as_num_indices(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::DecodableAmNnetSimpleParallel* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumIndices();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::kaldi::DecodableInterface*
static PyObject* as_kaldi_DecodableInterface(PyObject* self) {
  ::kaldi::DecodableInterface* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::DecodableInterface"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapDecodableAmNnetSimpleParallel_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(opts:NnetSimpleComputationOptions, trans_model:TransitionModel, am_nnet:AmNnetSimple, feats:MatrixBase, ivector:VectorBase=default, online_ivectors:MatrixBase=default, online_ivector_period:int=default)\n  Calls C++ function\n  void ::kaldi::nnet3::DecodableAmNnetSimpleParallel::DecodableAmNnetSimpleParallel(::kaldi::nnet3::NnetSimpleComputationOptions, ::kaldi::TransitionModel, ::kaldi::nnet3::AmNnetSimple, ::kaldi::MatrixBase<float>, ::kaldi::VectorBase<float> *, ::kaldi::MatrixBase<float> *, int)")},
  {C("log_likelihood"), (PyCFunction)wrapLogLikelihood_as_log_likelihood, METH_VARARGS | METH_KEYWORDS, C("log_likelihood(frame:int, index:int) -> float\n\nReturns the log-likehood of the given index for the given frame.")},
  {C("is_last_frame"), (PyCFunction)wrapIsLastFrame_as_is_last_frame, METH_VARARGS | METH_KEYWORDS, C("is_last_frame(frame:int) -> bool\n\nChecks if given frame is the last frame.")},
  {C("num_frames_ready"), (PyCFunction)wrapNumFramesReady_as_num_frames_ready, METH_NOARGS, C("num_frames_ready() -> int\n\nReturns number of frames ready for decoding.")},
  {C("num_indices"), (PyCFunction)wrapNumIndices_as_num_indices, METH_NOARGS, C("num_indices() -> int\n\nReturns number of indices.")},
  {C("as_kaldi_DecodableInterface"), (PyCFunction)as_kaldi_DecodableInterface, METH_NOARGS, C("Upcast to ::kaldi::DecodableInterface*")},
  {}
};

// DecodableAmNnetSimpleParallel __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// DecodableAmNnetSimpleParallel __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// DecodableAmNnetSimpleParallel __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_am_decodable_simple.DecodableAmNnetSimpleParallel", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::DecodableAmNnetSimpleParallel", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapDecodableAmNnetSimpleParallel_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::DecodableAmNnetSimpleParallel* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_DecodableAmNnetSimpleParallel"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::DecodableAmNnetSimpleParallel"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::DecodableAmNnetSimpleParallel* c = static_cast<::kaldi::nnet3::DecodableAmNnetSimpleParallel*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::DecodableAmNnetSimpleParallel*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyDecodableAmNnetSimpleParallel


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyNnetSimpleComputationOptions::wrapper_Type) < 0) return false;
  Py_INCREF(&pyNnetSimpleComputationOptions::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyDecodableNnetSimple::wrapper_Type) < 0) return false;
  Py_INCREF(&pyDecodableNnetSimple::wrapper_Type);  // For PyModule_AddObject to steal.
  PyObject* base_cls = ImportFQName("kaldi.itf._decodable_itf.DecodableInterface");
  if (base_cls == nullptr) return false;
  if (!PyObject_TypeCheck(base_cls, &PyType_Type)) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._decodable_itf.DecodableInterface is not a new style class inheriting from object.");
    return false;
  }
  pyDecodableAmNnetSimple::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  // Check that base_cls is a *statically* allocated PyType.
  if (pyDecodableAmNnetSimple::wrapper_Type.tp_base->tp_alloc == PyType_GenericAlloc) {
    Py_DECREF(base_cls);
    PyErr_SetString(PyExc_TypeError, "Base class kaldi.itf._decodable_itf.DecodableInterface is a dynamic (Python defined) class.");
    return false;
  }
  if (PyType_Ready(&pyDecodableAmNnetSimple::wrapper_Type) < 0) return false;
  Py_INCREF(&pyDecodableAmNnetSimple::wrapper_Type);  // For PyModule_AddObject to steal.
  Py_INCREF(base_cls);
  pyDecodableAmNnetSimpleParallel::wrapper_Type.tp_base = reinterpret_cast<PyTypeObject*>(base_cls);
  if (PyType_Ready(&pyDecodableAmNnetSimpleParallel::wrapper_Type) < 0) return false;
  Py_INCREF(&pyDecodableAmNnetSimpleParallel::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_nnet_am_decodable_simple",  // module name
  "CLIF-generated module for nnet3/nnet-am-decodable-simple.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_options_itf")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_transition_model")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_nnet")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_compute")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_optimize")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_am_nnet_simple")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "NnetSimpleComputationOptions", reinterpret_cast<PyObject*>(&pyNnetSimpleComputationOptions::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "DecodableNnetSimple", reinterpret_cast<PyObject*>(&pyDecodableNnetSimple::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "DecodableAmNnetSimple", reinterpret_cast<PyObject*>(&pyDecodableAmNnetSimple::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "DecodableAmNnetSimpleParallel", reinterpret_cast<PyObject*>(&pyDecodableAmNnetSimpleParallel::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __nnet__am__decodable__simple_clifwrap

namespace kaldi { namespace nnet3 {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// DecodableAmNnetSimple to/from ::kaldi::nnet3::DecodableAmNnetSimple conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::DecodableAmNnetSimple** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::DecodableAmNnetSimple* cpp = __nnet__am__decodable__simple_clifwrap::pyDecodableAmNnetSimple::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::DecodableAmNnetSimple>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::DecodableAmNnetSimple* cpp = __nnet__am__decodable__simple_clifwrap::pyDecodableAmNnetSimple::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__am__decodable__simple_clifwrap::pyDecodableAmNnetSimple::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::DecodableAmNnetSimple>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::DecodableAmNnetSimple* cpp = __nnet__am__decodable__simple_clifwrap::pyDecodableAmNnetSimple::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__am__decodable__simple_clifwrap::pyDecodableAmNnetSimple::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert DecodableAmNnetSimple instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::DecodableAmNnetSimple* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__am__decodable__simple_clifwrap::pyDecodableAmNnetSimple::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__am__decodable__simple_clifwrap::pyDecodableAmNnetSimple::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::DecodableAmNnetSimple>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::DecodableAmNnetSimple> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__am__decodable__simple_clifwrap::pyDecodableAmNnetSimple::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__am__decodable__simple_clifwrap::pyDecodableAmNnetSimple::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::DecodableAmNnetSimple>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::DecodableAmNnetSimple> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__am__decodable__simple_clifwrap::pyDecodableAmNnetSimple::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__am__decodable__simple_clifwrap::pyDecodableAmNnetSimple::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::DecodableAmNnetSimple>(std::move(c));
  return py;
}

// DecodableAmNnetSimpleParallel to/from ::kaldi::nnet3::DecodableAmNnetSimpleParallel conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::DecodableAmNnetSimpleParallel** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::DecodableAmNnetSimpleParallel* cpp = __nnet__am__decodable__simple_clifwrap::pyDecodableAmNnetSimpleParallel::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::DecodableAmNnetSimpleParallel>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::DecodableAmNnetSimpleParallel* cpp = __nnet__am__decodable__simple_clifwrap::pyDecodableAmNnetSimpleParallel::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__am__decodable__simple_clifwrap::pyDecodableAmNnetSimpleParallel::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::DecodableAmNnetSimpleParallel>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::DecodableAmNnetSimpleParallel* cpp = __nnet__am__decodable__simple_clifwrap::pyDecodableAmNnetSimpleParallel::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__am__decodable__simple_clifwrap::pyDecodableAmNnetSimpleParallel::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert DecodableAmNnetSimpleParallel instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::DecodableAmNnetSimpleParallel* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__am__decodable__simple_clifwrap::pyDecodableAmNnetSimpleParallel::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__am__decodable__simple_clifwrap::pyDecodableAmNnetSimpleParallel::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::DecodableAmNnetSimpleParallel>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::DecodableAmNnetSimpleParallel> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__am__decodable__simple_clifwrap::pyDecodableAmNnetSimpleParallel::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__am__decodable__simple_clifwrap::pyDecodableAmNnetSimpleParallel::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::DecodableAmNnetSimpleParallel>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::DecodableAmNnetSimpleParallel> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__am__decodable__simple_clifwrap::pyDecodableAmNnetSimpleParallel::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__am__decodable__simple_clifwrap::pyDecodableAmNnetSimpleParallel::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::DecodableAmNnetSimpleParallel>(std::move(c));
  return py;
}

// DecodableNnetSimple to/from ::kaldi::nnet3::DecodableNnetSimple conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::DecodableNnetSimple** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::DecodableNnetSimple* cpp = __nnet__am__decodable__simple_clifwrap::pyDecodableNnetSimple::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::DecodableNnetSimple>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::DecodableNnetSimple* cpp = __nnet__am__decodable__simple_clifwrap::pyDecodableNnetSimple::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__am__decodable__simple_clifwrap::pyDecodableNnetSimple::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::DecodableNnetSimple>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::DecodableNnetSimple* cpp = __nnet__am__decodable__simple_clifwrap::pyDecodableNnetSimple::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__am__decodable__simple_clifwrap::pyDecodableNnetSimple::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert DecodableNnetSimple instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::DecodableNnetSimple* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__am__decodable__simple_clifwrap::pyDecodableNnetSimple::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__am__decodable__simple_clifwrap::pyDecodableNnetSimple::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::DecodableNnetSimple>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::DecodableNnetSimple> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__am__decodable__simple_clifwrap::pyDecodableNnetSimple::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__am__decodable__simple_clifwrap::pyDecodableNnetSimple::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::DecodableNnetSimple>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::DecodableNnetSimple> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__am__decodable__simple_clifwrap::pyDecodableNnetSimple::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__am__decodable__simple_clifwrap::pyDecodableNnetSimple::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::DecodableNnetSimple>(std::move(c));
  return py;
}

// NnetSimpleComputationOptions to/from ::kaldi::nnet3::NnetSimpleComputationOptions conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::NnetSimpleComputationOptions** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::NnetSimpleComputationOptions* cpp = __nnet__am__decodable__simple_clifwrap::pyNnetSimpleComputationOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::NnetSimpleComputationOptions>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NnetSimpleComputationOptions* cpp = __nnet__am__decodable__simple_clifwrap::pyNnetSimpleComputationOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__am__decodable__simple_clifwrap::pyNnetSimpleComputationOptions::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::NnetSimpleComputationOptions>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NnetSimpleComputationOptions* cpp = __nnet__am__decodable__simple_clifwrap::pyNnetSimpleComputationOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__am__decodable__simple_clifwrap::pyNnetSimpleComputationOptions::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert NnetSimpleComputationOptions instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::NnetSimpleComputationOptions* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NnetSimpleComputationOptions* cpp = __nnet__am__decodable__simple_clifwrap::pyNnetSimpleComputationOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::nnet3::NnetSimpleComputationOptions>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NnetSimpleComputationOptions* cpp = __nnet__am__decodable__simple_clifwrap::pyNnetSimpleComputationOptions::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::NnetSimpleComputationOptions* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__am__decodable__simple_clifwrap::pyNnetSimpleComputationOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__am__decodable__simple_clifwrap::pyNnetSimpleComputationOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NnetSimpleComputationOptions>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::NnetSimpleComputationOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__am__decodable__simple_clifwrap::pyNnetSimpleComputationOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__am__decodable__simple_clifwrap::pyNnetSimpleComputationOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NnetSimpleComputationOptions>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::NnetSimpleComputationOptions> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__am__decodable__simple_clifwrap::pyNnetSimpleComputationOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__am__decodable__simple_clifwrap::pyNnetSimpleComputationOptions::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NnetSimpleComputationOptions>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::NnetSimpleComputationOptions& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__nnet__am__decodable__simple_clifwrap::pyNnetSimpleComputationOptions::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__am__decodable__simple_clifwrap::pyNnetSimpleComputationOptions::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::nnet3::NnetSimpleComputationOptions>(c);
  return py;
}

} }  // namespace kaldi::nnet3
