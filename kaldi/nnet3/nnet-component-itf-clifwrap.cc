//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/nnet3/nnet-component-itf.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "cudamatrix/cu-vector-clifwrap.h"
#include "cudamatrix/cu-matrix-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "nnet3/nnet-common-clifwrap.h"
#include "nnet3/nnet-parse-clifwrap.h"
#include "nnet3/nnet-computation-graph-ext-clifwrap.h"
#include "nnet3/nnet-misc-computation-info-clifwrap.h"
#include "nnet-component-itf-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __nnet__component__itf_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes

static PyObject *_Enum{}, *_IntEnum{};  // set below in Init()


// Create Python Enum object (cached in _ComponentProperties) for ::kaldi::nnet3::ComponentProperties
static PyObject* wrapComponentProperties() {
  PyObject *py, *py_enum_class{}, *names = PyTuple_New(14);
  if (names == nullptr) return nullptr;
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("SIMPLE_COMPONENT"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::ComponentProperties>::type>(::kaldi::nnet3::ComponentProperties::kSimpleComponent)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 0, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("UPDATABLE_COMPONENT"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::ComponentProperties>::type>(::kaldi::nnet3::ComponentProperties::kUpdatableComponent)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 1, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("PROPAGATE_IN_PLACE"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::ComponentProperties>::type>(::kaldi::nnet3::ComponentProperties::kPropagateInPlace)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 2, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("PROPAGATE_ADDS"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::ComponentProperties>::type>(::kaldi::nnet3::ComponentProperties::kPropagateAdds)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 3, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("REORDERS_INDEXES"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::ComponentProperties>::type>(::kaldi::nnet3::ComponentProperties::kReordersIndexes)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 4, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("BACKPROP_ADDS"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::ComponentProperties>::type>(::kaldi::nnet3::ComponentProperties::kBackpropAdds)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 5, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("BACKPROP_NEEDS_INPUT"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::ComponentProperties>::type>(::kaldi::nnet3::ComponentProperties::kBackpropNeedsInput)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 6, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("BACKPROP_NEEDS_OUTPUT"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::ComponentProperties>::type>(::kaldi::nnet3::ComponentProperties::kBackpropNeedsOutput)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 7, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("BACKPROP_IN_PLACE"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::ComponentProperties>::type>(::kaldi::nnet3::ComponentProperties::kBackpropInPlace)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 8, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("STORES_STATS"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::ComponentProperties>::type>(::kaldi::nnet3::ComponentProperties::kStoresStats)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 9, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("INPUT_CONTIGUOUS"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::ComponentProperties>::type>(::kaldi::nnet3::ComponentProperties::kInputContiguous)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 10, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("OUTPUT_CONTIGUOUS"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::ComponentProperties>::type>(::kaldi::nnet3::ComponentProperties::kOutputContiguous)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 11, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("USES_MEMO"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::ComponentProperties>::type>(::kaldi::nnet3::ComponentProperties::kUsesMemo)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 12, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("RANDOM_COMPONENT"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::nnet3::ComponentProperties>::type>(::kaldi::nnet3::ComponentProperties::kRandomComponent)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 13, py);
  py = PyUnicode_FromString("ComponentProperties");
  py_enum_class = PyObject_CallFunctionObjArgs(_IntEnum, py, names, nullptr);
  Py_DECREF(py);
err:
  Py_DECREF(names);
  return py_enum_class;
}
static PyObject* _ComponentProperties{};  // set by above func in Init()

namespace pyComponentPrecomputedIndexes {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::ComponentPrecomputedIndexes> cpp;
};
static ::kaldi::nnet3::ComponentPrecomputedIndexes* ThisPtr(PyObject*);

// @classmethod read_new(is:istream, binary:bool) -> ComponentPrecomputedIndexes
static PyObject* wrapReadNew_as_read_new(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read_new", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read_new", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read_new", names[1], "bool", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::nnet3::ComponentPrecomputedIndexes * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::ComponentPrecomputedIndexes::ReadNew(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod new_component_precomputed_indexes_of_type(cpi_type:str) -> ComponentPrecomputedIndexes
static PyObject* wrapNewComponentPrecomputedIndexesOfType_as_new_component_precomputed_indexes_of_type(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("cpi_type"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:new_component_precomputed_indexes_of_type", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new_component_precomputed_indexes_of_type", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::nnet3::ComponentPrecomputedIndexes * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::ComponentPrecomputedIndexes::NewComponentPrecomputedIndexesOfType(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("read_new"), (PyCFunction)wrapReadNew_as_read_new, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("read_new(is:istream, binary:bool) -> ComponentPrecomputedIndexes\n  Calls C++ function\n  ::kaldi::nnet3::ComponentPrecomputedIndexes * ::kaldi::nnet3::ComponentPrecomputedIndexes::ReadNew(::std::basic_istream<char, ::std::char_traits<char> >, bool)")},
  {C("new_component_precomputed_indexes_of_type"), (PyCFunction)wrapNewComponentPrecomputedIndexesOfType_as_new_component_precomputed_indexes_of_type, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new_component_precomputed_indexes_of_type(cpi_type:str) -> ComponentPrecomputedIndexes\n  Calls C++ function\n  ::kaldi::nnet3::ComponentPrecomputedIndexes * ::kaldi::nnet3::ComponentPrecomputedIndexes::NewComponentPrecomputedIndexesOfType(::std::string)")},
  {}
};

// ComponentPrecomputedIndexes __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ComponentPrecomputedIndexes __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_component_itf.ComponentPrecomputedIndexes", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::ComponentPrecomputedIndexes", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::ComponentPrecomputedIndexes* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_ComponentPrecomputedIndexes"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::ComponentPrecomputedIndexes"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::ComponentPrecomputedIndexes* c = static_cast<::kaldi::nnet3::ComponentPrecomputedIndexes*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::ComponentPrecomputedIndexes*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyComponentPrecomputedIndexes

namespace pyComponent {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::Component> cpp;
};
static ::kaldi::nnet3::Component* ThisPtr(PyObject*);

// store_stats(in_value:CuMatrixBase, out_value:CuMatrixBase, memo:Memo)
static PyObject* wrapStoreStats_as_store_stats(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("in_value"),
      C("out_value"),
      C("memo"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:store_stats", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::CuMatrixBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("store_stats", names[0], "::kaldi::CuMatrixBase<float>", a[0]);
  ::kaldi::CuMatrixBase<float>* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("store_stats", names[1], "::kaldi::CuMatrixBase<float>", a[1]);
  void * arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("store_stats", names[2], "void *", a[2]);
  // Call actual C++ method.
  ::kaldi::nnet3::Component* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->StoreStats(*arg1, *arg2, arg3);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// zero_stats()
static PyObject* wrapZeroStats_as_zero_stats(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::Component* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ZeroStats();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// get_input_indexes(misc_info:MiscComputationInfo, output_index:Index) -> list<Index>
static PyObject* wrapGetInputIndexes_as_get_input_indexes(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("misc_info"),
      C("output_index"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:get_input_indexes", names, &a[0], &a[1])) return nullptr;
  ::kaldi::nnet3::MiscComputationInfo* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("get_input_indexes", names[0], "::kaldi::nnet3::MiscComputationInfo", a[0]);
  ::kaldi::nnet3::Index* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("get_input_indexes", names[1], "::kaldi::nnet3::Index", a[1]);
  ::std::vector< ::kaldi::nnet3::Index> ret0{};
  // Call actual C++ method.
  ::kaldi::nnet3::Component* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->GetInputIndexes(*arg1, *arg2, &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_computable(misc_info:MiscComputationInfo, output_index:Index, input_index_set:IndexSet) -> (ret:bool, used_inputs:list<Index>)
static PyObject* wrapIsComputable_as_is_computable(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("misc_info"),
      C("output_index"),
      C("input_index_set"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:is_computable", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::nnet3::MiscComputationInfo* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("is_computable", names[0], "::kaldi::nnet3::MiscComputationInfo", a[0]);
  ::kaldi::nnet3::Index* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("is_computable", names[1], "::kaldi::nnet3::Index", a[1]);
  ::kaldi::nnet3::IndexSet* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("is_computable", names[2], "::kaldi::nnet3::IndexSet", a[2]);
  ::std::vector< ::kaldi::nnet3::Index> ret1{};
  // Call actual C++ method.
  ::kaldi::nnet3::Component* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsComputable(*arg1, *arg2, *arg3, &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// precompute_indexes(misc_info:MiscComputationInfo, input_indexes:list<Index>, output_indexes:list<Index>, need_backprop:bool) -> ComponentPrecomputedIndexes
static PyObject* wrapPrecomputeIndexes_as_precompute_indexes(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("misc_info"),
      C("input_indexes"),
      C("output_indexes"),
      C("need_backprop"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:precompute_indexes", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::nnet3::MiscComputationInfo* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("precompute_indexes", names[0], "::kaldi::nnet3::MiscComputationInfo", a[0]);
  ::std::vector< ::kaldi::nnet3::Index> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("precompute_indexes", names[1], "::std::vector< ::kaldi::nnet3::Index>", a[1]);
  ::std::vector< ::kaldi::nnet3::Index> arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("precompute_indexes", names[2], "::std::vector< ::kaldi::nnet3::Index>", a[2]);
  bool arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("precompute_indexes", names[3], "bool", a[3]);
  // Call actual C++ method.
  ::kaldi::nnet3::Component* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::nnet3::ComponentPrecomputedIndexes * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->PrecomputeIndexes(*arg1, std::move(arg2), std::move(arg3), std::move(arg4));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod read_new(is:istream, binary:bool) -> Component
static PyObject* wrapReadNew_as_read_new(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read_new", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read_new", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read_new", names[1], "bool", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::nnet3::Component * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::Component::ReadNew(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// @classmethod new_component_of_type(type:str) -> Component
static PyObject* wrapNewComponentOfType_as_new_component_of_type(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("type"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:new_component_of_type", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("new_component_of_type", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::nnet3::Component * ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::nnet3::Component::NewComponentOfType(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// info() -> str
static PyObject* wrapInfo_as_info(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::Component* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Info();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// scale(scale:float)
static PyObject* wrapScale_as_scale(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("scale"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:scale", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("scale", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Component* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Scale(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// add(alpha:float, other:Component)
static PyObject* wrapAdd_as_add(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("alpha"),
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:add", names, &a[0], &a[1])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add", names[0], "float", a[0]);
  ::kaldi::nnet3::Component* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("add", names[1], "::kaldi::nnet3::Component", a[1]);
  // Call actual C++ method.
  ::kaldi::nnet3::Component* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Add(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// delete_memo(memo:Memo)
static PyObject* wrapDeleteMemo_as_delete_memo(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("memo"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:delete_memo", names, &a[0])) return nullptr;
  void * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("delete_memo", names[0], "void *", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::Component* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->DeleteMemo(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("store_stats"), (PyCFunction)wrapStoreStats_as_store_stats, METH_VARARGS | METH_KEYWORDS, C("store_stats(in_value:CuMatrixBase, out_value:CuMatrixBase, memo:Memo)\n  Calls C++ function\n  void ::kaldi::nnet3::Component::StoreStats(::kaldi::CuMatrixBase<float>, ::kaldi::CuMatrixBase<float>, void *)")},
  {C("zero_stats"), (PyCFunction)wrapZeroStats_as_zero_stats, METH_NOARGS, C("zero_stats()\n  Calls C++ function\n  void ::kaldi::nnet3::Component::ZeroStats()")},
  {C("get_input_indexes"), (PyCFunction)wrapGetInputIndexes_as_get_input_indexes, METH_VARARGS | METH_KEYWORDS, C("get_input_indexes(misc_info:MiscComputationInfo, output_index:Index) -> list<Index>\n  Calls C++ function\n  void ::kaldi::nnet3::Component::GetInputIndexes(::kaldi::nnet3::MiscComputationInfo, ::kaldi::nnet3::Index, ::std::vector< ::kaldi::nnet3::Index>*)")},
  {C("is_computable"), (PyCFunction)wrapIsComputable_as_is_computable, METH_VARARGS | METH_KEYWORDS, C("is_computable(misc_info:MiscComputationInfo, output_index:Index, input_index_set:IndexSet) -> (ret:bool, used_inputs:list<Index>)\n  Calls C++ function\n  bool ::kaldi::nnet3::Component::IsComputable(::kaldi::nnet3::MiscComputationInfo, ::kaldi::nnet3::Index, ::kaldi::nnet3::IndexSet, ::std::vector< ::kaldi::nnet3::Index>*)")},
  {C("precompute_indexes"), (PyCFunction)wrapPrecomputeIndexes_as_precompute_indexes, METH_VARARGS | METH_KEYWORDS, C("precompute_indexes(misc_info:MiscComputationInfo, input_indexes:list<Index>, output_indexes:list<Index>, need_backprop:bool) -> ComponentPrecomputedIndexes\n  Calls C++ function\n  ::kaldi::nnet3::ComponentPrecomputedIndexes * ::kaldi::nnet3::Component::PrecomputeIndexes(::kaldi::nnet3::MiscComputationInfo, ::std::vector< ::kaldi::nnet3::Index>, ::std::vector< ::kaldi::nnet3::Index>, bool)")},
  {C("read_new"), (PyCFunction)wrapReadNew_as_read_new, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("read_new(is:istream, binary:bool) -> Component\n  Calls C++ function\n  ::kaldi::nnet3::Component * ::kaldi::nnet3::Component::ReadNew(::std::basic_istream<char, ::std::char_traits<char> >, bool)")},
  {C("new_component_of_type"), (PyCFunction)wrapNewComponentOfType_as_new_component_of_type, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("new_component_of_type(type:str) -> Component\n  Calls C++ function\n  ::kaldi::nnet3::Component * ::kaldi::nnet3::Component::NewComponentOfType(::std::string)")},
  {C("info"), (PyCFunction)wrapInfo_as_info, METH_NOARGS, C("info() -> str\n  Calls C++ function\n  ::std::string ::kaldi::nnet3::Component::Info()")},
  {C("scale"), (PyCFunction)wrapScale_as_scale, METH_VARARGS | METH_KEYWORDS, C("scale(scale:float)\n  Calls C++ function\n  void ::kaldi::nnet3::Component::Scale(float)")},
  {C("add"), (PyCFunction)wrapAdd_as_add, METH_VARARGS | METH_KEYWORDS, C("add(alpha:float, other:Component)\n  Calls C++ function\n  void ::kaldi::nnet3::Component::Add(float, ::kaldi::nnet3::Component)")},
  {C("delete_memo"), (PyCFunction)wrapDeleteMemo_as_delete_memo, METH_VARARGS | METH_KEYWORDS, C("delete_memo(memo:Memo)\n  Calls C++ function\n  void ::kaldi::nnet3::Component::DeleteMemo(void *)")},
  {}
};

// Component __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// Component __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_component_itf.Component",     // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::Component", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::Component* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_Component"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::Component"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::Component* c = static_cast<::kaldi::nnet3::Component*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::Component*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyComponent

namespace pyRandomComponent {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::RandomComponent> cpp;
};
static ::kaldi::nnet3::RandomComponent* ThisPtr(PyObject*);

// reset_generator()
static PyObject* wrapResetGenerator_as_reset_generator(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::RandomComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ResetGenerator();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_test_mode(test_mode:bool)
static PyObject* wrapSetTestMode_as_set_test_mode(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("test_mode"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_test_mode", names, &a[0])) return nullptr;
  bool arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_test_mode", names[0], "bool", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::RandomComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetTestMode(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::kaldi::nnet3::Component*
static PyObject* as_kaldi_nnet3_Component(PyObject* self) {
  ::kaldi::nnet3::Component* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::nnet3::Component"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("reset_generator"), (PyCFunction)wrapResetGenerator_as_reset_generator, METH_NOARGS, C("reset_generator()\n  Calls C++ function\n  void ::kaldi::nnet3::RandomComponent::ResetGenerator()")},
  {C("set_test_mode"), (PyCFunction)wrapSetTestMode_as_set_test_mode, METH_VARARGS | METH_KEYWORDS, C("set_test_mode(test_mode:bool)\n  Calls C++ function\n  void ::kaldi::nnet3::RandomComponent::SetTestMode(bool)")},
  {C("as_kaldi_nnet3_Component"), (PyCFunction)as_kaldi_nnet3_Component, METH_NOARGS, C("Upcast to ::kaldi::nnet3::Component*")},
  {}
};

// RandomComponent __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// RandomComponent __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_component_itf.RandomComponent", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::RandomComponent", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::RandomComponent* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_RandomComponent"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::RandomComponent"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::RandomComponent* c = static_cast<::kaldi::nnet3::RandomComponent*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::RandomComponent*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyRandomComponent

namespace pyUpdatableComponent {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::UpdatableComponent> cpp;
};
static ::kaldi::nnet3::UpdatableComponent* ThisPtr(PyObject*);

// set_underlying_learning_rate(lrate:float)
static PyObject* wrapSetUnderlyingLearningRate_as_set_underlying_learning_rate(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("lrate"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_underlying_learning_rate", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_underlying_learning_rate", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::UpdatableComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetUnderlyingLearningRate(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_actual_learning_rate(lrate:float)
static PyObject* wrapSetActualLearningRate_as_set_actual_learning_rate(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("lrate"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_actual_learning_rate", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_actual_learning_rate", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::UpdatableComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetActualLearningRate(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_as_gradient()
static PyObject* wrapSetAsGradient_as_set_as_gradient(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::UpdatableComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetAsGradient();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// learning_rate_factor() -> float
static PyObject* wrapLearningRateFactor_as_learning_rate_factor(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::UpdatableComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->LearningRateFactor();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// set_learning_rate_factor(lrate_factor:float)
static PyObject* wrapSetLearningRateFactor_as_set_learning_rate_factor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("lrate_factor"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_learning_rate_factor", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_learning_rate_factor", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::UpdatableComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetLearningRateFactor(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// set_updatable_configs(other:UpdatableComponent)
static PyObject* wrapSetUpdatableConfigs_as_set_updatable_configs(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_updatable_configs", names, &a[0])) return nullptr;
  ::kaldi::nnet3::UpdatableComponent* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_updatable_configs", names[0], "::kaldi::nnet3::UpdatableComponent", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::UpdatableComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetUpdatableConfigs(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// freeze_natural_gradient(freeze:bool)
static PyObject* wrapFreezeNaturalGradient_as_freeze_natural_gradient(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("freeze"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:freeze_natural_gradient", names, &a[0])) return nullptr;
  bool arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("freeze_natural_gradient", names[0], "bool", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::UpdatableComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->FreezeNaturalGradient(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// learning_rate() -> float
static PyObject* wrapLearningRate_as_learning_rate(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::UpdatableComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->LearningRate();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// max_change() -> float
static PyObject* wrapMaxChange_as_max_change(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::UpdatableComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->MaxChange();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// set_max_change(max_change:float)
static PyObject* wrapSetMaxChange_as_set_max_change(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("max_change"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_max_change", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_max_change", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::UpdatableComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetMaxChange(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// l2_regularization() -> float
static PyObject* wrapL2Regularization_as_l2_regularization(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::UpdatableComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  float ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->L2Regularization();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// set_l2_regularization(a:float)
static PyObject* wrapSetL2Regularization_as_set_l2_regularization(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("a"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:set_l2_regularization", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("set_l2_regularization", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::UpdatableComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SetL2Regularization(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// info() -> str
static PyObject* wrapInfo_as_info(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::UpdatableComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Info();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// num_parameters() -> int
static PyObject* wrapNumParameters_as_num_parameters(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::UpdatableComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->NumParameters();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// vectorize(params:VectorBase)
static PyObject* wrapVectorize_as_vectorize(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("params"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:vectorize", names, &a[0])) return nullptr;
  ::kaldi::VectorBase<float> * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("vectorize", names[0], "::kaldi::VectorBase<float> *", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::UpdatableComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Vectorize(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// unvectorize(params:VectorBase)
static PyObject* wrapUnVectorize_as_unvectorize(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("params"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:unvectorize", names, &a[0])) return nullptr;
  ::kaldi::VectorBase<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("unvectorize", names[0], "::kaldi::VectorBase<float>", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::UpdatableComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->UnVectorize(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// Implicit cast this as ::kaldi::nnet3::Component*
static PyObject* as_kaldi_nnet3_Component(PyObject* self) {
  ::kaldi::nnet3::Component* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::nnet3::Component"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("set_underlying_learning_rate"), (PyCFunction)wrapSetUnderlyingLearningRate_as_set_underlying_learning_rate, METH_VARARGS | METH_KEYWORDS, C("set_underlying_learning_rate(lrate:float)\n  Calls C++ function\n  void ::kaldi::nnet3::UpdatableComponent::SetUnderlyingLearningRate(float)")},
  {C("set_actual_learning_rate"), (PyCFunction)wrapSetActualLearningRate_as_set_actual_learning_rate, METH_VARARGS | METH_KEYWORDS, C("set_actual_learning_rate(lrate:float)\n  Calls C++ function\n  void ::kaldi::nnet3::UpdatableComponent::SetActualLearningRate(float)")},
  {C("set_as_gradient"), (PyCFunction)wrapSetAsGradient_as_set_as_gradient, METH_NOARGS, C("set_as_gradient()\n  Calls C++ function\n  void ::kaldi::nnet3::UpdatableComponent::SetAsGradient()")},
  {C("learning_rate_factor"), (PyCFunction)wrapLearningRateFactor_as_learning_rate_factor, METH_NOARGS, C("learning_rate_factor() -> float\n  Calls C++ function\n  float ::kaldi::nnet3::UpdatableComponent::LearningRateFactor()")},
  {C("set_learning_rate_factor"), (PyCFunction)wrapSetLearningRateFactor_as_set_learning_rate_factor, METH_VARARGS | METH_KEYWORDS, C("set_learning_rate_factor(lrate_factor:float)\n  Calls C++ function\n  void ::kaldi::nnet3::UpdatableComponent::SetLearningRateFactor(float)")},
  {C("set_updatable_configs"), (PyCFunction)wrapSetUpdatableConfigs_as_set_updatable_configs, METH_VARARGS | METH_KEYWORDS, C("set_updatable_configs(other:UpdatableComponent)\n  Calls C++ function\n  void ::kaldi::nnet3::UpdatableComponent::SetUpdatableConfigs(::kaldi::nnet3::UpdatableComponent)")},
  {C("freeze_natural_gradient"), (PyCFunction)wrapFreezeNaturalGradient_as_freeze_natural_gradient, METH_VARARGS | METH_KEYWORDS, C("freeze_natural_gradient(freeze:bool)\n  Calls C++ function\n  void ::kaldi::nnet3::UpdatableComponent::FreezeNaturalGradient(bool)")},
  {C("learning_rate"), (PyCFunction)wrapLearningRate_as_learning_rate, METH_NOARGS, C("learning_rate() -> float\n  Calls C++ function\n  float ::kaldi::nnet3::UpdatableComponent::LearningRate()")},
  {C("max_change"), (PyCFunction)wrapMaxChange_as_max_change, METH_NOARGS, C("max_change() -> float\n  Calls C++ function\n  float ::kaldi::nnet3::UpdatableComponent::MaxChange()")},
  {C("set_max_change"), (PyCFunction)wrapSetMaxChange_as_set_max_change, METH_VARARGS | METH_KEYWORDS, C("set_max_change(max_change:float)\n  Calls C++ function\n  void ::kaldi::nnet3::UpdatableComponent::SetMaxChange(float)")},
  {C("l2_regularization"), (PyCFunction)wrapL2Regularization_as_l2_regularization, METH_NOARGS, C("l2_regularization() -> float\n  Calls C++ function\n  float ::kaldi::nnet3::UpdatableComponent::L2Regularization()")},
  {C("set_l2_regularization"), (PyCFunction)wrapSetL2Regularization_as_set_l2_regularization, METH_VARARGS | METH_KEYWORDS, C("set_l2_regularization(a:float)\n  Calls C++ function\n  void ::kaldi::nnet3::UpdatableComponent::SetL2Regularization(float)")},
  {C("info"), (PyCFunction)wrapInfo_as_info, METH_NOARGS, C("info() -> str\n  Calls C++ function\n  ::std::string ::kaldi::nnet3::UpdatableComponent::Info()")},
  {C("num_parameters"), (PyCFunction)wrapNumParameters_as_num_parameters, METH_NOARGS, C("num_parameters() -> int\n  Calls C++ function\n  int ::kaldi::nnet3::UpdatableComponent::NumParameters()")},
  {C("vectorize"), (PyCFunction)wrapVectorize_as_vectorize, METH_VARARGS | METH_KEYWORDS, C("vectorize(params:VectorBase)\n  Calls C++ function\n  void ::kaldi::nnet3::UpdatableComponent::Vectorize(::kaldi::VectorBase<float> *)")},
  {C("unvectorize"), (PyCFunction)wrapUnVectorize_as_unvectorize, METH_VARARGS | METH_KEYWORDS, C("unvectorize(params:VectorBase)\n  Calls C++ function\n  void ::kaldi::nnet3::UpdatableComponent::UnVectorize(::kaldi::VectorBase<float>)")},
  {C("as_kaldi_nnet3_Component"), (PyCFunction)as_kaldi_nnet3_Component, METH_NOARGS, C("Upcast to ::kaldi::nnet3::Component*")},
  {}
};

// UpdatableComponent __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// UpdatableComponent __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_component_itf.UpdatableComponent", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::UpdatableComponent", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::UpdatableComponent* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_UpdatableComponent"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::UpdatableComponent"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::UpdatableComponent* c = static_cast<::kaldi::nnet3::UpdatableComponent*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::UpdatableComponent*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyUpdatableComponent

namespace pyNonlinearComponent {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::nnet3::NonlinearComponent> cpp;
};
static ::kaldi::nnet3::NonlinearComponent* ThisPtr(PyObject*);

// input_dim() -> int
static PyObject* wrapInputDim_as_input_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::NonlinearComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->InputDim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// output_dim() -> int
static PyObject* wrapOutputDim_as_output_dim(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::NonlinearComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->OutputDim();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// init_from_config(cfl:ConfigLine)
static PyObject* wrapInitFromConfig_as_init_from_config(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("cfl"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:init_from_config", names, &a[0])) return nullptr;
  ::kaldi::nnet3::ConfigLine * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("init_from_config", names[0], "::kaldi::nnet3::ConfigLine *", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::NonlinearComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->InitFromConfig(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read(is:istream, binary:bool)
static PyObject* wrapRead_as_read(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("is"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:read", names, &a[0], &a[1])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("read", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::nnet3::NonlinearComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Read(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// zero_stats()
static PyObject* wrapZeroStats_as_zero_stats(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::NonlinearComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->ZeroStats();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// info() -> str
static PyObject* wrapInfo_as_info(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::NonlinearComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Info();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// write(os:ostream, binary:bool)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("os"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::basic_ostream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_ostream<char, ::std::char_traits<char> >", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "bool", a[1]);
  // Call actual C++ method.
  ::kaldi::nnet3::NonlinearComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(*arg1, std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// scale(scale:float)
static PyObject* wrapScale_as_scale(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("scale"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:scale", names, &a[0])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("scale", names[0], "float", a[0]);
  // Call actual C++ method.
  ::kaldi::nnet3::NonlinearComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Scale(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// add(alpha:float, other:Component)
static PyObject* wrapAdd_as_add(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("alpha"),
      C("other"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:add", names, &a[0], &a[1])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("add", names[0], "float", a[0]);
  ::kaldi::nnet3::Component* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("add", names[1], "::kaldi::nnet3::Component", a[1]);
  // Call actual C++ method.
  ::kaldi::nnet3::NonlinearComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Add(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// ValueSum() -> CuDoubleVector
static PyObject* wrapValueSum(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::NonlinearComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::CuVector<double> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->ValueSum();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// DerivSum() -> CuDoubleVector
static PyObject* wrapDerivSum(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::NonlinearComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::CuVector<double> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->DerivSum();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// count() -> float
static PyObject* wrapCount_as_count(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::nnet3::NonlinearComponent* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  double ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Count();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Implicit cast this as ::kaldi::nnet3::Component*
static PyObject* as_kaldi_nnet3_Component(PyObject* self) {
  ::kaldi::nnet3::Component* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, C("::kaldi::nnet3::Component"), nullptr);
}

static PyMethodDef Methods[] = {
  {C("input_dim"), (PyCFunction)wrapInputDim_as_input_dim, METH_NOARGS, C("input_dim() -> int\n  Calls C++ function\n  int ::kaldi::nnet3::NonlinearComponent::InputDim()")},
  {C("output_dim"), (PyCFunction)wrapOutputDim_as_output_dim, METH_NOARGS, C("output_dim() -> int\n  Calls C++ function\n  int ::kaldi::nnet3::NonlinearComponent::OutputDim()")},
  {C("init_from_config"), (PyCFunction)wrapInitFromConfig_as_init_from_config, METH_VARARGS | METH_KEYWORDS, C("init_from_config(cfl:ConfigLine)\n  Calls C++ function\n  void ::kaldi::nnet3::NonlinearComponent::InitFromConfig(::kaldi::nnet3::ConfigLine *)")},
  {C("read"), (PyCFunction)wrapRead_as_read, METH_VARARGS | METH_KEYWORDS, C("read(is:istream, binary:bool)\n  Calls C++ function\n  void ::kaldi::nnet3::NonlinearComponent::Read(::std::basic_istream<char, ::std::char_traits<char> >, bool)")},
  {C("zero_stats"), (PyCFunction)wrapZeroStats_as_zero_stats, METH_NOARGS, C("zero_stats()\n  Calls C++ function\n  void ::kaldi::nnet3::NonlinearComponent::ZeroStats()")},
  {C("info"), (PyCFunction)wrapInfo_as_info, METH_NOARGS, C("info() -> str\n  Calls C++ function\n  ::std::string ::kaldi::nnet3::NonlinearComponent::Info()")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(os:ostream, binary:bool)\n  Calls C++ function\n  void ::kaldi::nnet3::NonlinearComponent::Write(::std::basic_ostream<char, ::std::char_traits<char> >, bool)")},
  {C("scale"), (PyCFunction)wrapScale_as_scale, METH_VARARGS | METH_KEYWORDS, C("scale(scale:float)\n  Calls C++ function\n  void ::kaldi::nnet3::NonlinearComponent::Scale(float)")},
  {C("add"), (PyCFunction)wrapAdd_as_add, METH_VARARGS | METH_KEYWORDS, C("add(alpha:float, other:Component)\n  Calls C++ function\n  void ::kaldi::nnet3::NonlinearComponent::Add(float, ::kaldi::nnet3::Component)")},
  {C("ValueSum"), (PyCFunction)wrapValueSum, METH_NOARGS, C("ValueSum() -> CuDoubleVector\n  Calls C++ function\n  ::kaldi::CuVector<double> ::kaldi::nnet3::NonlinearComponent::ValueSum()")},
  {C("DerivSum"), (PyCFunction)wrapDerivSum, METH_NOARGS, C("DerivSum() -> CuDoubleVector\n  Calls C++ function\n  ::kaldi::CuVector<double> ::kaldi::nnet3::NonlinearComponent::DerivSum()")},
  {C("count"), (PyCFunction)wrapCount_as_count, METH_NOARGS, C("count() -> float\n  Calls C++ function\n  double ::kaldi::nnet3::NonlinearComponent::Count()")},
  {C("as_kaldi_nnet3_Component"), (PyCFunction)as_kaldi_nnet3_Component, METH_NOARGS, C("Upcast to ::kaldi::nnet3::Component*")},
  {}
};

// NonlinearComponent __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// NonlinearComponent __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_nnet_component_itf.NonlinearComponent", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::nnet3::NonlinearComponent", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  Clif_PyType_Inconstructible,         // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};


static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::nnet3::NonlinearComponent* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_nnet3_NonlinearComponent"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::nnet3::NonlinearComponent"));
      if (!PyErr_Occurred()) {
        ::kaldi::nnet3::NonlinearComponent* c = static_cast<::kaldi::nnet3::NonlinearComponent*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::nnet3::NonlinearComponent*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyNonlinearComponent


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyComponentPrecomputedIndexes::wrapper_Type) < 0) return false;
  Py_INCREF(&pyComponentPrecomputedIndexes::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyComponent::wrapper_Type) < 0) return false;
  Py_INCREF(&pyComponent::wrapper_Type);  // For PyModule_AddObject to steal.
  pyRandomComponent::wrapper_Type.tp_base = &pyComponent::wrapper_Type;
  if (PyType_Ready(&pyRandomComponent::wrapper_Type) < 0) return false;
  Py_INCREF(&pyRandomComponent::wrapper_Type);  // For PyModule_AddObject to steal.
  pyUpdatableComponent::wrapper_Type.tp_base = &pyComponent::wrapper_Type;
  if (PyType_Ready(&pyUpdatableComponent::wrapper_Type) < 0) return false;
  Py_INCREF(&pyUpdatableComponent::wrapper_Type);  // For PyModule_AddObject to steal.
  pyNonlinearComponent::wrapper_Type.tp_base = &pyComponent::wrapper_Type;
  if (PyType_Ready(&pyNonlinearComponent::wrapper_Type) < 0) return false;
  Py_INCREF(&pyNonlinearComponent::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_nnet_component_itf",  // module name
  "CLIF-generated module for nnet3/nnet-component-itf.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_cu_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_cu_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_common")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_parse")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_computation_graph_ext")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_misc_computation_info")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  {PyObject* em = PyImport_ImportModule("enum");
   if (em == nullptr) goto err;
   _Enum = PyObject_GetAttrString(em, "Enum");
   _IntEnum = PyObject_GetAttrString(em, "IntEnum");
   Py_DECREF(em);}
  if (!_Enum || !_IntEnum) {
    Py_XDECREF(_Enum);
    Py_XDECREF(_IntEnum);
    goto err;
  }
  if (PyModule_AddObject(module, "ComponentProperties", (_ComponentProperties=wrapComponentProperties())) < 0) goto err;
  if (PyModule_AddObject(module, "ComponentPrecomputedIndexes", reinterpret_cast<PyObject*>(&pyComponentPrecomputedIndexes::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "Component", reinterpret_cast<PyObject*>(&pyComponent::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "RandomComponent", reinterpret_cast<PyObject*>(&pyRandomComponent::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "UpdatableComponent", reinterpret_cast<PyObject*>(&pyUpdatableComponent::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "NonlinearComponent", reinterpret_cast<PyObject*>(&pyNonlinearComponent::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __nnet__component__itf_clifwrap

namespace clif {

// Memo to/from void conversion

bool Clif_PyObjAs(PyObject* py, void** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  if (PyCapsule_CheckExact(py)) {
    void* p = PyCapsule_GetPointer(py, C("void"));
    bool ok = PyErr_Occurred() == nullptr;
    if (ok) *c = static_cast<void*>(p);
    return ok;
  }
  PyObject* base = PyObject_CallMethod(py, C("as_void"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("void"));
      if (!PyErr_Occurred()) {
        * c = static_cast<void*>(p);
        Py_DECREF(base);
        return true;
      }
    }
    Py_DECREF(base);
  }
  PyErr_Format(PyExc_TypeError, "expecting Memo capsule, got %s %s", ClassName(py), ClassType(py));
  return false;
}

PyObject* Clif_PyObjFrom(const void* c, py::PostConv) {
  if (c == nullptr) Py_RETURN_NONE;
  return PyCapsule_New((void*)c, C("void"), nullptr);
}

}  // namespace clif

namespace kaldi { namespace nnet3 {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// Component to/from ::kaldi::nnet3::Component conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::Component** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::Component* cpp = __nnet__component__itf_clifwrap::pyComponent::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::Component>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::Component* cpp = __nnet__component__itf_clifwrap::pyComponent::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__component__itf_clifwrap::pyComponent::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::Component>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::Component* cpp = __nnet__component__itf_clifwrap::pyComponent::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__component__itf_clifwrap::pyComponent::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert Component instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::Component* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__component__itf_clifwrap::pyComponent::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__component__itf_clifwrap::pyComponent::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::Component>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::Component> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__component__itf_clifwrap::pyComponent::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__component__itf_clifwrap::pyComponent::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::Component>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::Component> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__component__itf_clifwrap::pyComponent::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__component__itf_clifwrap::pyComponent::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::Component>(std::move(c));
  return py;
}

// ComponentPrecomputedIndexes to/from ::kaldi::nnet3::ComponentPrecomputedIndexes conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ComponentPrecomputedIndexes** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::ComponentPrecomputedIndexes* cpp = __nnet__component__itf_clifwrap::pyComponentPrecomputedIndexes::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::ComponentPrecomputedIndexes>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ComponentPrecomputedIndexes* cpp = __nnet__component__itf_clifwrap::pyComponentPrecomputedIndexes::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__component__itf_clifwrap::pyComponentPrecomputedIndexes::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::ComponentPrecomputedIndexes>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::ComponentPrecomputedIndexes* cpp = __nnet__component__itf_clifwrap::pyComponentPrecomputedIndexes::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__component__itf_clifwrap::pyComponentPrecomputedIndexes::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ComponentPrecomputedIndexes instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::ComponentPrecomputedIndexes* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__component__itf_clifwrap::pyComponentPrecomputedIndexes::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__component__itf_clifwrap::pyComponentPrecomputedIndexes::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ComponentPrecomputedIndexes>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::ComponentPrecomputedIndexes> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__component__itf_clifwrap::pyComponentPrecomputedIndexes::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__component__itf_clifwrap::pyComponentPrecomputedIndexes::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ComponentPrecomputedIndexes>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::ComponentPrecomputedIndexes> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__component__itf_clifwrap::pyComponentPrecomputedIndexes::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__component__itf_clifwrap::pyComponentPrecomputedIndexes::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::ComponentPrecomputedIndexes>(std::move(c));
  return py;
}

// ComponentProperties:IntEnum to/from enum ::kaldi::nnet3::ComponentProperties conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::ComponentProperties* c) {
  assert(c != nullptr);
  if (!PyObject_IsInstance(py, __nnet__component__itf_clifwrap::_ComponentProperties)) {
    PyErr_Format(PyExc_TypeError, "expecting enum ComponentProperties, got %s %s", ClassName(py), ClassType(py));
    return false;
  }
  typename std::underlying_type<::kaldi::nnet3::ComponentProperties>::type v;
  PyObject* value = PyObject_GetAttrString(py, "value");
  if (value == nullptr || !Clif_PyObjAs(value, &v)) return false;
  Py_DECREF(value);
  *c = static_cast<::kaldi::nnet3::ComponentProperties>(v);
  return true;
}

PyObject* Clif_PyObjFrom(const ::kaldi::nnet3::ComponentProperties& c, py::PostConv) {
  return PyObject_CallFunctionObjArgs(__nnet__component__itf_clifwrap::_ComponentProperties, PyInt_FromLong(
      static_cast<typename std::underlying_type<::kaldi::nnet3::ComponentProperties>::type>(c)), nullptr);
}

// NonlinearComponent to/from ::kaldi::nnet3::NonlinearComponent conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::NonlinearComponent** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::NonlinearComponent* cpp = __nnet__component__itf_clifwrap::pyNonlinearComponent::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::NonlinearComponent>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NonlinearComponent* cpp = __nnet__component__itf_clifwrap::pyNonlinearComponent::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__component__itf_clifwrap::pyNonlinearComponent::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::NonlinearComponent>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::NonlinearComponent* cpp = __nnet__component__itf_clifwrap::pyNonlinearComponent::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__component__itf_clifwrap::pyNonlinearComponent::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert NonlinearComponent instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::NonlinearComponent* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__component__itf_clifwrap::pyNonlinearComponent::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__component__itf_clifwrap::pyNonlinearComponent::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NonlinearComponent>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::NonlinearComponent> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__component__itf_clifwrap::pyNonlinearComponent::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__component__itf_clifwrap::pyNonlinearComponent::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NonlinearComponent>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::NonlinearComponent> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__component__itf_clifwrap::pyNonlinearComponent::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__component__itf_clifwrap::pyNonlinearComponent::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::NonlinearComponent>(std::move(c));
  return py;
}

// RandomComponent to/from ::kaldi::nnet3::RandomComponent conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::RandomComponent** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::RandomComponent* cpp = __nnet__component__itf_clifwrap::pyRandomComponent::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::RandomComponent>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::RandomComponent* cpp = __nnet__component__itf_clifwrap::pyRandomComponent::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__component__itf_clifwrap::pyRandomComponent::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::RandomComponent>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::RandomComponent* cpp = __nnet__component__itf_clifwrap::pyRandomComponent::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__component__itf_clifwrap::pyRandomComponent::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert RandomComponent instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::RandomComponent* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__component__itf_clifwrap::pyRandomComponent::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__component__itf_clifwrap::pyRandomComponent::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::RandomComponent>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::RandomComponent> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__component__itf_clifwrap::pyRandomComponent::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__component__itf_clifwrap::pyRandomComponent::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::RandomComponent>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::RandomComponent> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__component__itf_clifwrap::pyRandomComponent::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__component__itf_clifwrap::pyRandomComponent::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::RandomComponent>(std::move(c));
  return py;
}

// UpdatableComponent to/from ::kaldi::nnet3::UpdatableComponent conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::nnet3::UpdatableComponent** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::nnet3::UpdatableComponent* cpp = __nnet__component__itf_clifwrap::pyUpdatableComponent::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::nnet3::UpdatableComponent>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::UpdatableComponent* cpp = __nnet__component__itf_clifwrap::pyUpdatableComponent::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__nnet__component__itf_clifwrap::pyUpdatableComponent::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::nnet3::UpdatableComponent>* c) {
  assert(c != nullptr);
  ::kaldi::nnet3::UpdatableComponent* cpp = __nnet__component__itf_clifwrap::pyUpdatableComponent::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__nnet__component__itf_clifwrap::pyUpdatableComponent::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert UpdatableComponent instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::nnet3::UpdatableComponent* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__component__itf_clifwrap::pyUpdatableComponent::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__component__itf_clifwrap::pyUpdatableComponent::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::UpdatableComponent>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::nnet3::UpdatableComponent> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__component__itf_clifwrap::pyUpdatableComponent::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__component__itf_clifwrap::pyUpdatableComponent::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::UpdatableComponent>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::nnet3::UpdatableComponent> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__nnet__component__itf_clifwrap::pyUpdatableComponent::wrapper_Type, NULL, NULL);
  reinterpret_cast<__nnet__component__itf_clifwrap::pyUpdatableComponent::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::nnet3::UpdatableComponent>(std::move(c));
  return py;
}

} }  // namespace kaldi::nnet3
