//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/rnnlm/rnnlm-training.clif

#include <memory>
#include "clif/python/optional.h"
#include "rnnlm/rnnlm-training.h"
#include "clif/python/postconv.h"

namespace kaldi { namespace rnnlm {
using namespace ::clif;

// CLIF use `::kaldi::rnnlm::RnnlmTrainer` as RnnlmTrainer
bool Clif_PyObjAs(PyObject* input, ::kaldi::rnnlm::RnnlmTrainer** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::rnnlm::RnnlmTrainer>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::rnnlm::RnnlmTrainer>* output);
PyObject* Clif_PyObjFrom(::kaldi::rnnlm::RnnlmTrainer*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::rnnlm::RnnlmTrainer>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::rnnlm::RnnlmTrainer>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::rnnlm::RnnlmTrainer*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::rnnlm::RnnlmTrainer&, py::PostConv) = delete;

} }  // namespace kaldi::rnnlm

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_rnnlm_training")) Py_DECREF(m);
// CLIF init_module else goto err;
