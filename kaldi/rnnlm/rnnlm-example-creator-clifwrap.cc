//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/rnnlm/rnnlm-example-creator.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "base/iostream-clifwrap.h"
#include "rnnlm/rnnlm-example-clifwrap.h"
#include "feat/wave-reader-clifwrap.h"
#include "lat/kaldi-lattice.h"
#include "nnet3/nnet-example-clifwrap.h"
#include "util/kaldi-table-clifwrap.h"
#include "util/kaldi-thread-clifwrap.h"
#include "rnnlm-example-creator-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __rnnlm__example__creator_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyRnnlmExampleCreator {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::rnnlm::RnnlmExampleCreator> cpp;
};
static ::kaldi::rnnlm::RnnlmExampleCreator* ThisPtr(PyObject*);

// __init__(config:RnnlmEgsConfig, sequencer_config:TaskSequencerConfig, minibatch_sampler:RnnlmExampleSampler, writer:RnnlmExampleWriter)
static PyObject* wrapRnnlmExampleCreator_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[4];
  char* names[] = {
      C("config"),
      C("sequencer_config"),
      C("minibatch_sampler"),
      C("writer"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOOO:__init__", names, &a[0], &a[1], &a[2], &a[3])) return nullptr;
  ::kaldi::rnnlm::RnnlmEgsConfig* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::kaldi::rnnlm::RnnlmEgsConfig", a[0]);
  ::kaldi::TaskSequencerConfig* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::kaldi::TaskSequencerConfig", a[1]);
  ::kaldi::rnnlm::RnnlmExampleSampler* arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("__init__", names[2], "::kaldi::rnnlm::RnnlmExampleSampler", a[2]);
  ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> > * arg4;
  if (!Clif_PyObjAs(a[3], &arg4)) return ArgError("__init__", names[3], "::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> > *", a[3]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::rnnlm::RnnlmExampleCreator>(*arg1, *arg2, *arg3, arg4);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// @classmethod without_sampling(config:RnnlmEgsConfig, writer:RnnlmExampleWriter) -> RnnlmExampleCreator
static PyObject* wrapRnnlmExampleCreator_as_without_sampling(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("config"),
      C("writer"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:without_sampling", names, &a[0], &a[1])) return nullptr;
  ::kaldi::rnnlm::RnnlmEgsConfig* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("without_sampling", names[0], "::kaldi::rnnlm::RnnlmEgsConfig", a[0]);
  ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> > * arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("without_sampling", names[1], "::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> > *", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  std::unique_ptr<::kaldi::rnnlm::RnnlmExampleCreator> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::gtl::MakeUnique<::kaldi::rnnlm::RnnlmExampleCreator>(*arg1, arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// accept_sequence(weight:float, words:list<int>)
static PyObject* wrapAcceptSequence_as_accept_sequence(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("weight"),
      C("words"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:accept_sequence", names, &a[0], &a[1])) return nullptr;
  float arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("accept_sequence", names[0], "float", a[0]);
  ::std::vector< ::int32> arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("accept_sequence", names[1], "::std::vector< ::int32>", a[1]);
  // Call actual C++ method.
  ::kaldi::rnnlm::RnnlmExampleCreator* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->AcceptSequence(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// process(is:istream)
static PyObject* wrapProcess_as_process(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("is"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:process", names, &a[0])) return nullptr;
  ::std::basic_istream<char, ::std::char_traits<char> >* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("process", names[0], "::std::basic_istream<char, ::std::char_traits<char> >", a[0]);
  // Call actual C++ method.
  ::kaldi::rnnlm::RnnlmExampleCreator* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Process(*arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// flush()
static PyObject* wrapFlush_as_flush(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::rnnlm::RnnlmExampleCreator* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Flush();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapRnnlmExampleCreator_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(config:RnnlmEgsConfig, sequencer_config:TaskSequencerConfig, minibatch_sampler:RnnlmExampleSampler, writer:RnnlmExampleWriter)\n  Calls C++ function\n  void ::kaldi::rnnlm::RnnlmExampleCreator::RnnlmExampleCreator(::kaldi::rnnlm::RnnlmEgsConfig, ::kaldi::TaskSequencerConfig, ::kaldi::rnnlm::RnnlmExampleSampler, ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> > *)")},
  {C("without_sampling"), (PyCFunction)wrapRnnlmExampleCreator_as_without_sampling, METH_VARARGS | METH_KEYWORDS | METH_CLASS, C("without_sampling(config:RnnlmEgsConfig, writer:RnnlmExampleWriter) -> RnnlmExampleCreator\n\nInstantiates a new RNNLM example creator.\n\nThis constructor is for when you are not using importance sampling,\nso no samples will be stored in the minibatch and the training code\nwill presumably evaluate all the words each time.  This is intended\nto be used for testing purposes.")},
  {C("accept_sequence"), (PyCFunction)wrapAcceptSequence_as_accept_sequence, METH_VARARGS | METH_KEYWORDS, C("accept_sequence(weight:float, words:list<int>)\n\nAccepts a single sequence.\n\nThe user calls this to provide a single sequence (a sentence; or\nmultiple sentences that are part of a continuous stream or dialogue,\nseparated by </s>), to this class.  This class will write out\nminibatches when it's ready.\nThis will normally be the result of reading a line of text with the\nformat:\n  <weight> <word1> <word2> ....\ne.g.:\n  1.0  Hello there\nalthough the \"hello there\" would have been converted to integers\nby the time it was read in, via sym2int.pl, so it would look like:\n  1.0  7620  12309\nWe also allow:\n  1.0  Hello there </s> Hi </s> My name is Bob\nif you want to train the model to predict sentences given\nthe history of the conversation.")},
  {C("process"), (PyCFunction)wrapProcess_as_process, METH_VARARGS | METH_KEYWORDS, C("process(is:istream)\n\nProcesses the lines from input stream.\n\nLines will be of the format:\n  <weight> <possibly-empty-sequence-of-integers>\ne.g.:\n  1.0  2560 8991")},
  {C("flush"), (PyCFunction)wrapFlush_as_flush, METH_NOARGS, C("flush()\n\nFlushes out any pending minibatches.")},
  {}
};

// RnnlmExampleCreator __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// RnnlmExampleCreator __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// RnnlmExampleCreator __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_rnnlm_example_creator.RnnlmExampleCreator", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "RNNLM example creator.\n\nThis class takes care of all of the logic of creating minibatches for\nRNNLM training, including the sampling aspect.", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapRnnlmExampleCreator_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::rnnlm::RnnlmExampleCreator* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_rnnlm_RnnlmExampleCreator"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::rnnlm::RnnlmExampleCreator"));
      if (!PyErr_Occurred()) {
        ::kaldi::rnnlm::RnnlmExampleCreator* c = static_cast<::kaldi::rnnlm::RnnlmExampleCreator*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::rnnlm::RnnlmExampleCreator*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyRnnlmExampleCreator


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyRnnlmExampleCreator::wrapper_Type) < 0) return false;
  Py_INCREF(&pyRnnlmExampleCreator::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_rnnlm_example_creator",  // module name
  "CLIF-generated module for rnnlm/rnnlm-example.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_rnnlm_example")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_wave_reader")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_nnet_example")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_table")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_thread")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "RnnlmExampleCreator", reinterpret_cast<PyObject*>(&pyRnnlmExampleCreator::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __rnnlm__example__creator_clifwrap

namespace kaldi { namespace rnnlm {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// RnnlmExampleCreator to/from ::kaldi::rnnlm::RnnlmExampleCreator conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::rnnlm::RnnlmExampleCreator** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::rnnlm::RnnlmExampleCreator* cpp = __rnnlm__example__creator_clifwrap::pyRnnlmExampleCreator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::rnnlm::RnnlmExampleCreator>* c) {
  assert(c != nullptr);
  ::kaldi::rnnlm::RnnlmExampleCreator* cpp = __rnnlm__example__creator_clifwrap::pyRnnlmExampleCreator::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__rnnlm__example__creator_clifwrap::pyRnnlmExampleCreator::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::rnnlm::RnnlmExampleCreator>* c) {
  assert(c != nullptr);
  ::kaldi::rnnlm::RnnlmExampleCreator* cpp = __rnnlm__example__creator_clifwrap::pyRnnlmExampleCreator::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__rnnlm__example__creator_clifwrap::pyRnnlmExampleCreator::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert RnnlmExampleCreator instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::rnnlm::RnnlmExampleCreator* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__rnnlm__example__creator_clifwrap::pyRnnlmExampleCreator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__rnnlm__example__creator_clifwrap::pyRnnlmExampleCreator::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::rnnlm::RnnlmExampleCreator>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::rnnlm::RnnlmExampleCreator> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__rnnlm__example__creator_clifwrap::pyRnnlmExampleCreator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__rnnlm__example__creator_clifwrap::pyRnnlmExampleCreator::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::rnnlm::RnnlmExampleCreator>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::rnnlm::RnnlmExampleCreator> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__rnnlm__example__creator_clifwrap::pyRnnlmExampleCreator::wrapper_Type, NULL, NULL);
  reinterpret_cast<__rnnlm__example__creator_clifwrap::pyRnnlmExampleCreator::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::rnnlm::RnnlmExampleCreator>(std::move(c));
  return py;
}

} }  // namespace kaldi::rnnlm
