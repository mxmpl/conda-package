//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/online2/online-nnet2-feature-pipeline.clif

#include <memory>
#include "clif/python/optional.h"
#include "online2/online-nnet2-feature-pipeline.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::OnlineNnet2FeaturePipeline` as OnlineNnet2FeaturePipeline
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineNnet2FeaturePipeline** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineNnet2FeaturePipeline>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineNnet2FeaturePipeline>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineNnet2FeaturePipeline*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineNnet2FeaturePipeline>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineNnet2FeaturePipeline>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineNnet2FeaturePipeline*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineNnet2FeaturePipeline&, py::PostConv) = delete;
// CLIF use `::kaldi::OnlineNnet2FeaturePipelineConfig` as OnlineNnet2FeaturePipelineConfig
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineNnet2FeaturePipelineConfig** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineNnet2FeaturePipelineConfig>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineNnet2FeaturePipelineConfig>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineNnet2FeaturePipelineConfig* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::OnlineNnet2FeaturePipelineConfig>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineNnet2FeaturePipelineConfig*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineNnet2FeaturePipelineConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineNnet2FeaturePipelineConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineNnet2FeaturePipelineConfig&, py::PostConv);
// CLIF use `::kaldi::OnlineNnet2FeaturePipelineInfo` as OnlineNnet2FeaturePipelineInfo
bool Clif_PyObjAs(PyObject* input, ::kaldi::OnlineNnet2FeaturePipelineInfo** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::OnlineNnet2FeaturePipelineInfo>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::OnlineNnet2FeaturePipelineInfo>* output);
PyObject* Clif_PyObjFrom(::kaldi::OnlineNnet2FeaturePipelineInfo*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineNnet2FeaturePipelineInfo>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineNnet2FeaturePipelineInfo>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineNnet2FeaturePipelineInfo*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::OnlineNnet2FeaturePipelineInfo&, py::PostConv) = delete;

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_online_nnet2_feature_pipeline")) Py_DECREF(m);
// CLIF init_module else goto err;
