//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/online2/online-timing.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "online-timing-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __online__timing_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pyOnlineTimingStats {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineTimingStats> cpp;
};
static ::kaldi::OnlineTimingStats* ThisPtr(PyObject*);

// print_stats(online:bool=default)
static PyObject* wrapPrint_as_print_stats(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1]{};
  char* names[] = {
      C("online"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "|O:print_stats", names, &a[0])) return nullptr;
  int nargs;  // Find how many args actually passed in.
  for (nargs = 1; nargs > 0; --nargs) {
    if (a[nargs-1] != nullptr) break;
  }
  bool arg1;
  if (nargs > 0) {
    if (!a[0]) arg1 = (bool)true;
    else if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("print_stats", names[0], "bool", a[0]);
  }
  // Call actual C++ method.
  ::kaldi::OnlineTimingStats* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
  switch (nargs) {
  case 0:
    c->Print(); break;
  case 1:
    c->Print(std::move(arg1)); break;
  }
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("print_stats"), (PyCFunction)wrapPrint_as_print_stats, METH_VARARGS | METH_KEYWORDS, C("print_stats(online:bool=default)\n  Calls C++ function\n  void ::kaldi::OnlineTimingStats::Print(bool)")},
  {}
};

// OnlineTimingStats __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlineTimingStats __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineTimingStats __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_timing.OnlineTimingStats",  // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineTimingStats", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "OnlineTimingStats takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineTimingStats>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineTimingStats* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineTimingStats"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineTimingStats"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineTimingStats* c = static_cast<::kaldi::OnlineTimingStats*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineTimingStats*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineTimingStats

namespace pyOnlineTimer {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::OnlineTimer> cpp;
};
static ::kaldi::OnlineTimer* ThisPtr(PyObject*);

// __init__(utterance_id:str)
static PyObject* wrapOnlineTimer_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("utterance_id"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:__init__", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::OnlineTimer>(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// sleep_until(cur_utterance_length:float)
static PyObject* wrapSleepUntil_as_sleep_until(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("cur_utterance_length"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:sleep_until", names, &a[0])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("sleep_until", names[0], "double", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineTimer* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->SleepUntil(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// wait_until(cur_utterance_length:float)
static PyObject* wrapWaitUntil_as_wait_until(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("cur_utterance_length"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:wait_until", names, &a[0])) return nullptr;
  double arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("wait_until", names[0], "double", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineTimer* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->WaitUntil(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// output_stats(stats:OnlineTimingStats)
static PyObject* wrapOutputStats_as_output_stats(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("stats"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:output_stats", names, &a[0])) return nullptr;
  ::kaldi::OnlineTimingStats * arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("output_stats", names[0], "::kaldi::OnlineTimingStats *", a[0]);
  // Call actual C++ method.
  ::kaldi::OnlineTimer* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->OutputStats(arg1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// elapsed() -> float
static PyObject* wrapElapsed_as_elapsed(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::OnlineTimer* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  double ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Elapsed();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapOnlineTimer_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(utterance_id:str)\n  Calls C++ function\n  void ::kaldi::OnlineTimer::OnlineTimer(::std::string)")},
  {C("sleep_until"), (PyCFunction)wrapSleepUntil_as_sleep_until, METH_VARARGS | METH_KEYWORDS, C("sleep_until(cur_utterance_length:float)\n\nWill sleep until cur_utterance_length seconds after this object was initialized")},
  {C("wait_until"), (PyCFunction)wrapWaitUntil_as_wait_until, METH_VARARGS | METH_KEYWORDS, C("wait_until(cur_utterance_length:float)\n\nSimulates the effect of sleeping until cur_utterance_length seconds after this object was initialized but instead of actually sleeping, it increases a counter")},
  {C("output_stats"), (PyCFunction)wrapOutputStats_as_output_stats, METH_VARARGS | METH_KEYWORDS, C("output_stats(stats:OnlineTimingStats)\n\nWrites the stats to the object that accumulates them")},
  {C("elapsed"), (PyCFunction)wrapElapsed_as_elapsed, METH_NOARGS, C("elapsed() -> float\n\nReturns the time elapsed in seconds since the timer was started")},
  {}
};

// OnlineTimer __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// OnlineTimer __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// OnlineTimer __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_online_timing.OnlineTimer",        // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::OnlineTimer", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapOnlineTimer_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::OnlineTimer* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_OnlineTimer"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::OnlineTimer"));
      if (!PyErr_Occurred()) {
        ::kaldi::OnlineTimer* c = static_cast<::kaldi::OnlineTimer*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::OnlineTimer*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOnlineTimer


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyOnlineTimingStats::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineTimingStats::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyOnlineTimer::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOnlineTimer::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_online_timing",  // module name
  "CLIF-generated module for online2/online-timing.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "OnlineTimingStats", reinterpret_cast<PyObject*>(&pyOnlineTimingStats::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "OnlineTimer", reinterpret_cast<PyObject*>(&pyOnlineTimer::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __online__timing_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// OnlineTimer to/from ::kaldi::OnlineTimer conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineTimer** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineTimer* cpp = __online__timing_clifwrap::pyOnlineTimer::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineTimer>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineTimer* cpp = __online__timing_clifwrap::pyOnlineTimer::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__timing_clifwrap::pyOnlineTimer::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineTimer>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineTimer* cpp = __online__timing_clifwrap::pyOnlineTimer::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__timing_clifwrap::pyOnlineTimer::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineTimer instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineTimer* c) {
  assert(c != nullptr);
  ::kaldi::OnlineTimer* cpp = __online__timing_clifwrap::pyOnlineTimer::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::OnlineTimer>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineTimer* cpp = __online__timing_clifwrap::pyOnlineTimer::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineTimer* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__timing_clifwrap::pyOnlineTimer::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__timing_clifwrap::pyOnlineTimer::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineTimer>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineTimer> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__timing_clifwrap::pyOnlineTimer::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__timing_clifwrap::pyOnlineTimer::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineTimer>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineTimer> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__timing_clifwrap::pyOnlineTimer::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__timing_clifwrap::pyOnlineTimer::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineTimer>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::OnlineTimer& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__online__timing_clifwrap::pyOnlineTimer::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__timing_clifwrap::pyOnlineTimer::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::OnlineTimer>(c);
  return py;
}

// OnlineTimingStats to/from ::kaldi::OnlineTimingStats conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineTimingStats** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::OnlineTimingStats* cpp = __online__timing_clifwrap::pyOnlineTimingStats::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::OnlineTimingStats>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineTimingStats* cpp = __online__timing_clifwrap::pyOnlineTimingStats::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__online__timing_clifwrap::pyOnlineTimingStats::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::OnlineTimingStats>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineTimingStats* cpp = __online__timing_clifwrap::pyOnlineTimingStats::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__online__timing_clifwrap::pyOnlineTimingStats::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert OnlineTimingStats instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::kaldi::OnlineTimingStats* c) {
  assert(c != nullptr);
  ::kaldi::OnlineTimingStats* cpp = __online__timing_clifwrap::pyOnlineTimingStats::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::kaldi::OnlineTimingStats>* c) {
  assert(c != nullptr);
  ::kaldi::OnlineTimingStats* cpp = __online__timing_clifwrap::pyOnlineTimingStats::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::OnlineTimingStats* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__timing_clifwrap::pyOnlineTimingStats::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__timing_clifwrap::pyOnlineTimingStats::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineTimingStats>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::OnlineTimingStats> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__timing_clifwrap::pyOnlineTimingStats::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__timing_clifwrap::pyOnlineTimingStats::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineTimingStats>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::OnlineTimingStats> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__online__timing_clifwrap::pyOnlineTimingStats::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__timing_clifwrap::pyOnlineTimingStats::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::OnlineTimingStats>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::kaldi::OnlineTimingStats& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&__online__timing_clifwrap::pyOnlineTimingStats::wrapper_Type, NULL, NULL);
  reinterpret_cast<__online__timing_clifwrap::pyOnlineTimingStats::wrapper*>(py)->cpp = ::clif::MakeShared<::kaldi::OnlineTimingStats>(c);
  return py;
}

}  // namespace kaldi
