//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/util/kaldi-table.clif

#include <memory>
#include "clif/python/optional.h"
#include "util/kaldi-table.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::TableWriter< ::kaldi::BasicHolder<bool> >` as BoolWriter
bool Clif_PyObjAs(PyObject* input, ::kaldi::TableWriter< ::kaldi::BasicHolder<bool> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TableWriter< ::kaldi::BasicHolder<bool> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TableWriter< ::kaldi::BasicHolder<bool> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::kaldi::BasicHolder<bool> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::kaldi::BasicHolder<bool> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::kaldi::BasicHolder<bool> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::BasicHolder<bool> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::BasicHolder<bool> >&, py::PostConv) = delete;
// CLIF use `::kaldi::TableWriter< ::kaldi::CompactLatticeHolder>` as CompactLatticeWriter
bool Clif_PyObjAs(PyObject* input, ::kaldi::TableWriter< ::kaldi::CompactLatticeHolder>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TableWriter< ::kaldi::CompactLatticeHolder>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TableWriter< ::kaldi::CompactLatticeHolder>>* output);
PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::kaldi::CompactLatticeHolder>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::kaldi::CompactLatticeHolder>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::kaldi::CompactLatticeHolder>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::CompactLatticeHolder>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::CompactLatticeHolder>&, py::PostConv) = delete;
// CLIF use `::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::CompressedMatrix> >` as CompressedMatrixWriter
bool Clif_PyObjAs(PyObject* input, ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::CompressedMatrix> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::CompressedMatrix> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::CompressedMatrix> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::CompressedMatrix> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::CompressedMatrix> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::CompressedMatrix> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::CompressedMatrix> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::CompressedMatrix> >&, py::PostConv) = delete;
// CLIF use `::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >` as DoubleMatrixWriter
bool Clif_PyObjAs(PyObject* input, ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >&, py::PostConv) = delete;
// CLIF use `::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >` as DoubleVectorWriter
bool Clif_PyObjAs(PyObject* input, ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >&, py::PostConv) = delete;
// CLIF use `::kaldi::TableWriter< ::kaldi::BasicHolder<double> >` as DoubleWriter
bool Clif_PyObjAs(PyObject* input, ::kaldi::TableWriter< ::kaldi::BasicHolder<double> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TableWriter< ::kaldi::BasicHolder<double> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TableWriter< ::kaldi::BasicHolder<double> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::kaldi::BasicHolder<double> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::kaldi::BasicHolder<double> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::kaldi::BasicHolder<double> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::BasicHolder<double> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::BasicHolder<double> >&, py::PostConv) = delete;
// CLIF use `::kaldi::TableWriter< ::kaldi::BasicPairVectorHolder<float> >` as FloatPairVectorWriter
bool Clif_PyObjAs(PyObject* input, ::kaldi::TableWriter< ::kaldi::BasicPairVectorHolder<float> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TableWriter< ::kaldi::BasicPairVectorHolder<float> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TableWriter< ::kaldi::BasicPairVectorHolder<float> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::kaldi::BasicPairVectorHolder<float> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::kaldi::BasicPairVectorHolder<float> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::kaldi::BasicPairVectorHolder<float> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::BasicPairVectorHolder<float> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::BasicPairVectorHolder<float> >&, py::PostConv) = delete;
// CLIF use `::kaldi::TableWriter< ::kaldi::BasicHolder<float> >` as FloatWriter
bool Clif_PyObjAs(PyObject* input, ::kaldi::TableWriter< ::kaldi::BasicHolder<float> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TableWriter< ::kaldi::BasicHolder<float> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TableWriter< ::kaldi::BasicHolder<float> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::kaldi::BasicHolder<float> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::kaldi::BasicHolder<float> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::kaldi::BasicHolder<float> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::BasicHolder<float> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::BasicHolder<float> >&, py::PostConv) = delete;
// CLIF use `::kaldi::TableWriter< ::kaldi::BasicPairVectorHolder<int> >` as IntPairVectorWriter
bool Clif_PyObjAs(PyObject* input, ::kaldi::TableWriter< ::kaldi::BasicPairVectorHolder<int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TableWriter< ::kaldi::BasicPairVectorHolder<int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TableWriter< ::kaldi::BasicPairVectorHolder<int> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::kaldi::BasicPairVectorHolder<int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::kaldi::BasicPairVectorHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::kaldi::BasicPairVectorHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::BasicPairVectorHolder<int> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::BasicPairVectorHolder<int> >&, py::PostConv) = delete;
// CLIF use `::kaldi::TableWriter< ::kaldi::BasicVectorVectorHolder<int> >` as IntVectorVectorWriter
bool Clif_PyObjAs(PyObject* input, ::kaldi::TableWriter< ::kaldi::BasicVectorVectorHolder<int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TableWriter< ::kaldi::BasicVectorVectorHolder<int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TableWriter< ::kaldi::BasicVectorVectorHolder<int> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::kaldi::BasicVectorVectorHolder<int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::kaldi::BasicVectorVectorHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::kaldi::BasicVectorVectorHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::BasicVectorVectorHolder<int> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::BasicVectorVectorHolder<int> >&, py::PostConv) = delete;
// CLIF use `::kaldi::TableWriter< ::kaldi::BasicVectorHolder<int> >` as IntVectorWriter
bool Clif_PyObjAs(PyObject* input, ::kaldi::TableWriter< ::kaldi::BasicVectorHolder<int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TableWriter< ::kaldi::BasicVectorHolder<int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TableWriter< ::kaldi::BasicVectorHolder<int> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::kaldi::BasicVectorHolder<int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::kaldi::BasicVectorHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::kaldi::BasicVectorHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::BasicVectorHolder<int> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::BasicVectorHolder<int> >&, py::PostConv) = delete;
// CLIF use `::kaldi::TableWriter< ::kaldi::BasicHolder<int> >` as IntWriter
bool Clif_PyObjAs(PyObject* input, ::kaldi::TableWriter< ::kaldi::BasicHolder<int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TableWriter< ::kaldi::BasicHolder<int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TableWriter< ::kaldi::BasicHolder<int> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::kaldi::BasicHolder<int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::kaldi::BasicHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::kaldi::BasicHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::BasicHolder<int> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::BasicHolder<int> >&, py::PostConv) = delete;
// CLIF use `::kaldi::TableWriter< ::kaldi::LatticeHolder>` as LatticeWriter
bool Clif_PyObjAs(PyObject* input, ::kaldi::TableWriter< ::kaldi::LatticeHolder>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TableWriter< ::kaldi::LatticeHolder>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TableWriter< ::kaldi::LatticeHolder>>* output);
PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::kaldi::LatticeHolder>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::kaldi::LatticeHolder>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::kaldi::LatticeHolder>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::LatticeHolder>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::LatticeHolder>&, py::PostConv) = delete;
// CLIF use `::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >` as MatrixWriter
bool Clif_PyObjAs(PyObject* input, ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<bool> >` as RandomAccessBoolReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<bool> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<bool> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<bool> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<bool> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<bool> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<bool> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<bool> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<bool> >&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReader< ::kaldi::CompactLatticeHolder>` as RandomAccessCompactLatticeReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReader< ::kaldi::CompactLatticeHolder>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::CompactLatticeHolder>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::CompactLatticeHolder>>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReader< ::kaldi::CompactLatticeHolder>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::CompactLatticeHolder>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::CompactLatticeHolder>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::CompactLatticeHolder>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::CompactLatticeHolder>&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >` as RandomAccessDoubleMatrixReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >` as RandomAccessDoubleMatrixReaderMapped
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<double> >` as RandomAccessDoubleReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<double> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<double> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<double> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<double> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<double> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<double> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<double> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<double> >&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >` as RandomAccessDoubleVectorReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >` as RandomAccessDoubleVectorReaderMapped
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReader< ::kaldi::BasicPairVectorHolder<float> >` as RandomAccessFloatPairVectorReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReader< ::kaldi::BasicPairVectorHolder<float> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicPairVectorHolder<float> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicPairVectorHolder<float> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReader< ::kaldi::BasicPairVectorHolder<float> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicPairVectorHolder<float> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicPairVectorHolder<float> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::BasicPairVectorHolder<float> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::BasicPairVectorHolder<float> >&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<float> >` as RandomAccessFloatReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<float> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<float> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<float> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<float> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<float> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<float> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<float> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<float> >&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReaderMapped< ::kaldi::BasicHolder<float> >` as RandomAccessFloatReaderMapped
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReaderMapped< ::kaldi::BasicHolder<float> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReaderMapped< ::kaldi::BasicHolder<float> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReaderMapped< ::kaldi::BasicHolder<float> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReaderMapped< ::kaldi::BasicHolder<float> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReaderMapped< ::kaldi::BasicHolder<float> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReaderMapped< ::kaldi::BasicHolder<float> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReaderMapped< ::kaldi::BasicHolder<float> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReaderMapped< ::kaldi::BasicHolder<float> >&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReader< ::kaldi::BasicPairVectorHolder<int> >` as RandomAccessIntPairVectorReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReader< ::kaldi::BasicPairVectorHolder<int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicPairVectorHolder<int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicPairVectorHolder<int> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReader< ::kaldi::BasicPairVectorHolder<int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicPairVectorHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicPairVectorHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::BasicPairVectorHolder<int> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::BasicPairVectorHolder<int> >&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<int> >` as RandomAccessIntReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<int> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<int> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::BasicHolder<int> >&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReader< ::kaldi::BasicVectorHolder<int> >` as RandomAccessIntVectorReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReader< ::kaldi::BasicVectorHolder<int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicVectorHolder<int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicVectorHolder<int> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReader< ::kaldi::BasicVectorHolder<int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicVectorHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicVectorHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::BasicVectorHolder<int> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::BasicVectorHolder<int> >&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReader< ::kaldi::BasicVectorVectorHolder<int> >` as RandomAccessIntVectorVectorReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReader< ::kaldi::BasicVectorVectorHolder<int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicVectorVectorHolder<int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicVectorVectorHolder<int> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReader< ::kaldi::BasicVectorVectorHolder<int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicVectorVectorHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::BasicVectorVectorHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::BasicVectorVectorHolder<int> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::BasicVectorVectorHolder<int> >&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReader< ::kaldi::LatticeHolder>` as RandomAccessLatticeReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReader< ::kaldi::LatticeHolder>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::LatticeHolder>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::LatticeHolder>>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReader< ::kaldi::LatticeHolder>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::LatticeHolder>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::LatticeHolder>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::LatticeHolder>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::LatticeHolder>&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >` as RandomAccessMatrixReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >` as RandomAccessMatrixReaderMapped
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >` as RandomAccessVectorReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >` as RandomAccessVectorReaderMapped
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReaderMapped< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReader< ::kaldi::WaveHolder>` as RandomAccessWaveReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReader< ::kaldi::WaveHolder>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::WaveHolder>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::WaveHolder>>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReader< ::kaldi::WaveHolder>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::WaveHolder>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::WaveHolder>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::WaveHolder>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::WaveHolder>&, py::PostConv) = delete;
// CLIF use `::kaldi::RspecifierOptions` as RspecifierOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::RspecifierOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RspecifierOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RspecifierOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::RspecifierOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::RspecifierOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::RspecifierOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RspecifierOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RspecifierOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RspecifierOptions&, py::PostConv);
// CLIF use `::kaldi::RspecifierType` as RspecifierType
bool Clif_PyObjAs(PyObject* input, ::kaldi::RspecifierType* output);
PyObject* Clif_PyObjFrom(const ::kaldi::RspecifierType&, py::PostConv);
// CLIF use `::kaldi::SequentialTableReader< ::kaldi::BasicHolder<bool> >` as SequentialBoolReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::SequentialTableReader< ::kaldi::BasicHolder<bool> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicHolder<bool> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicHolder<bool> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::kaldi::BasicHolder<bool> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicHolder<bool> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicHolder<bool> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::BasicHolder<bool> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::BasicHolder<bool> >&, py::PostConv) = delete;
// CLIF use `::kaldi::SequentialTableReader< ::kaldi::CompactLatticeHolder>` as SequentialCompactLatticeReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::SequentialTableReader< ::kaldi::CompactLatticeHolder>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::CompactLatticeHolder>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::CompactLatticeHolder>>* output);
PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::kaldi::CompactLatticeHolder>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::CompactLatticeHolder>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::CompactLatticeHolder>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::CompactLatticeHolder>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::CompactLatticeHolder>&, py::PostConv) = delete;
// CLIF use `::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >` as SequentialDoubleMatrixReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<double> > >&, py::PostConv) = delete;
// CLIF use `::kaldi::SequentialTableReader< ::kaldi::BasicHolder<double> >` as SequentialDoubleReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::SequentialTableReader< ::kaldi::BasicHolder<double> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicHolder<double> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicHolder<double> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::kaldi::BasicHolder<double> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicHolder<double> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicHolder<double> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::BasicHolder<double> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::BasicHolder<double> >&, py::PostConv) = delete;
// CLIF use `::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >` as SequentialDoubleVectorReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<double> > >&, py::PostConv) = delete;
// CLIF use `::kaldi::SequentialTableReader< ::kaldi::BasicPairVectorHolder<float> >` as SequentialFloatPairVectorReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::SequentialTableReader< ::kaldi::BasicPairVectorHolder<float> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicPairVectorHolder<float> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicPairVectorHolder<float> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::kaldi::BasicPairVectorHolder<float> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicPairVectorHolder<float> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicPairVectorHolder<float> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::BasicPairVectorHolder<float> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::BasicPairVectorHolder<float> >&, py::PostConv) = delete;
// CLIF use `::kaldi::SequentialTableReader< ::kaldi::BasicHolder<float> >` as SequentialFloatReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::SequentialTableReader< ::kaldi::BasicHolder<float> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicHolder<float> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicHolder<float> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::kaldi::BasicHolder<float> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicHolder<float> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicHolder<float> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::BasicHolder<float> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::BasicHolder<float> >&, py::PostConv) = delete;
// CLIF use `::kaldi::SequentialTableReader< ::kaldi::BasicPairVectorHolder<int> >` as SequentialIntPairVectorReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::SequentialTableReader< ::kaldi::BasicPairVectorHolder<int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicPairVectorHolder<int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicPairVectorHolder<int> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::kaldi::BasicPairVectorHolder<int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicPairVectorHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicPairVectorHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::BasicPairVectorHolder<int> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::BasicPairVectorHolder<int> >&, py::PostConv) = delete;
// CLIF use `::kaldi::SequentialTableReader< ::kaldi::BasicHolder<int> >` as SequentialIntReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::SequentialTableReader< ::kaldi::BasicHolder<int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicHolder<int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicHolder<int> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::kaldi::BasicHolder<int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::BasicHolder<int> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::BasicHolder<int> >&, py::PostConv) = delete;
// CLIF use `::kaldi::SequentialTableReader< ::kaldi::BasicVectorHolder<int> >` as SequentialIntVectorReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::SequentialTableReader< ::kaldi::BasicVectorHolder<int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicVectorHolder<int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicVectorHolder<int> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::kaldi::BasicVectorHolder<int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicVectorHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicVectorHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::BasicVectorHolder<int> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::BasicVectorHolder<int> >&, py::PostConv) = delete;
// CLIF use `::kaldi::SequentialTableReader< ::kaldi::BasicVectorVectorHolder<int> >` as SequentialIntVectorVectorReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::SequentialTableReader< ::kaldi::BasicVectorVectorHolder<int> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicVectorVectorHolder<int> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicVectorVectorHolder<int> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::kaldi::BasicVectorVectorHolder<int> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicVectorVectorHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::BasicVectorVectorHolder<int> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::BasicVectorVectorHolder<int> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::BasicVectorVectorHolder<int> >&, py::PostConv) = delete;
// CLIF use `::kaldi::SequentialTableReader< ::kaldi::LatticeHolder>` as SequentialLatticeReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::SequentialTableReader< ::kaldi::LatticeHolder>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::LatticeHolder>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::LatticeHolder>>* output);
PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::kaldi::LatticeHolder>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::LatticeHolder>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::LatticeHolder>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::LatticeHolder>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::LatticeHolder>&, py::PostConv) = delete;
// CLIF use `::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >` as SequentialMatrixReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Matrix<float> > >&, py::PostConv) = delete;
// CLIF use `::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >` as SequentialVectorReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >&, py::PostConv) = delete;
// CLIF use `::kaldi::SequentialTableReader< ::kaldi::WaveHolder>` as SequentialWaveReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::SequentialTableReader< ::kaldi::WaveHolder>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::WaveHolder>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::WaveHolder>>* output);
PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::kaldi::WaveHolder>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::WaveHolder>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::WaveHolder>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::WaveHolder>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::WaveHolder>&, py::PostConv) = delete;
// CLIF use `::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >` as VectorWriter
bool Clif_PyObjAs(PyObject* input, ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::Vector<float> > >&, py::PostConv) = delete;
// CLIF use `::kaldi::TableWriter< ::kaldi::WaveHolder>` as WaveWriter
bool Clif_PyObjAs(PyObject* input, ::kaldi::TableWriter< ::kaldi::WaveHolder>** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TableWriter< ::kaldi::WaveHolder>>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TableWriter< ::kaldi::WaveHolder>>* output);
PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::kaldi::WaveHolder>*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::kaldi::WaveHolder>>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::kaldi::WaveHolder>>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::WaveHolder>*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::WaveHolder>&, py::PostConv) = delete;
// CLIF use `::kaldi::WspecifierOptions` as WspecifierOptions
bool Clif_PyObjAs(PyObject* input, ::kaldi::WspecifierOptions** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::WspecifierOptions>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::WspecifierOptions>* output);
bool Clif_PyObjAs(PyObject* input, ::kaldi::WspecifierOptions* output);
bool Clif_PyObjAs(PyObject* input, ::gtl::optional<::kaldi::WspecifierOptions>* output);
PyObject* Clif_PyObjFrom(::kaldi::WspecifierOptions*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::WspecifierOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::WspecifierOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::WspecifierOptions&, py::PostConv);
// CLIF use `::kaldi::WspecifierType` as WspecifierType
bool Clif_PyObjAs(PyObject* input, ::kaldi::WspecifierType* output);
PyObject* Clif_PyObjFrom(const ::kaldi::WspecifierType&, py::PostConv);

}  // namespace kaldi

namespace kaldi { namespace nnet3 {
using namespace ::clif;

// CLIF use `::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >` as NnetExampleWriter
bool Clif_PyObjAs(PyObject* input, ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >` as RandomAccessNnetExampleReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >&, py::PostConv) = delete;
// CLIF use `::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >` as SequentialNnetExampleReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::nnet3::NnetExample> >&, py::PostConv) = delete;

} }  // namespace kaldi::nnet3

namespace kaldi { namespace rnnlm {
using namespace ::clif;

// CLIF use `::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> >` as RnnlmExampleWriter
bool Clif_PyObjAs(PyObject* input, ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> >&, py::PostConv) = delete;
// CLIF use `::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> >` as SequentialRnnlmExampleReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> >>* output);
PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::kaldi::KaldiObjectHolder< ::kaldi::rnnlm::RnnlmExample> >&, py::PostConv) = delete;

} }  // namespace kaldi::rnnlm

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_kaldi_table")) Py_DECREF(m);
// CLIF init_module else goto err;
