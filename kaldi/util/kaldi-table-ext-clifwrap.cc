//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/util/kaldi-table-ext.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "fstext/lattice-weight-clifwrap.h"
#include "fstext/vector-fst-clifwrap.h"
#include "kaldi-table-ext-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __kaldi__table__ext_clifwrap {
using namespace clif;
using namespace kaldi;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes


namespace pySequentialFstReader {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >> cpp;
};
static ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* ThisPtr(PyObject*);

// open(rspecifier:str) -> bool
static PyObject* wrapOpen_as_open(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("rspecifier"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:open", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("open", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Open(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// done() -> bool
static PyObject* wrapDone_as_done(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Done();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// key() -> str
static PyObject* wrapKey_as_key(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Key();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// free_current()
static PyObject* wrapFreeCurrent_as_free_current(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->FreeCurrent();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// value() -> StdVectorFst
static PyObject* wrapValue_as_value(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Value();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.fstext.StdVectorFst");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// next()
static PyObject* wrapNext_as_next(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Next();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// is_open() -> bool
static PyObject* wrapIsOpen_as_is_open(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsOpen();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// close() -> bool
static PyObject* wrapClose_as_close(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Close();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __exit__@() -> bool
static PyObject* wrapClose_as___exit__(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Close();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  Py_XDECREF(result_tuple);
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("open"), (PyCFunction)wrapOpen_as_open, METH_VARARGS | METH_KEYWORDS, C("open(rspecifier:str) -> bool\n  Calls C++ function\n  bool ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::TropicalWeightTpl<float> > > >::Open(::std::string)")},
  {C("done"), (PyCFunction)wrapDone_as_done, METH_NOARGS, C("done() -> bool\n  Calls C++ function\n  bool ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::TropicalWeightTpl<float> > > >::Done()")},
  {C("key"), (PyCFunction)wrapKey_as_key, METH_NOARGS, C("key() -> str\n  Calls C++ function\n  ::std::string ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::TropicalWeightTpl<float> > > >::Key()")},
  {C("free_current"), (PyCFunction)wrapFreeCurrent_as_free_current, METH_NOARGS, C("free_current()\n  Calls C++ function\n  void ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::TropicalWeightTpl<float> > > >::FreeCurrent()")},
  {C("value"), (PyCFunction)wrapValue_as_value, METH_NOARGS, C("value() -> StdVectorFst\n  Calls C++ function\n  ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > > ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::TropicalWeightTpl<float> > > >::Value()")},
  {C("next"), (PyCFunction)wrapNext_as_next, METH_NOARGS, C("next()\n  Calls C++ function\n  void ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::TropicalWeightTpl<float> > > >::Next()")},
  {C("is_open"), (PyCFunction)wrapIsOpen_as_is_open, METH_NOARGS, C("is_open() -> bool\n  Calls C++ function\n  bool ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::TropicalWeightTpl<float> > > >::IsOpen()")},
  {C("close"), (PyCFunction)wrapClose_as_close, METH_NOARGS, C("close() -> bool\n  Calls C++ function\n  bool ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::TropicalWeightTpl<float> > > >::Close()")},
  {C("__exit__"), (PyCFunction)wrapClose_as___exit__, METH_VARARGS | METH_KEYWORDS, C("__exit__@() -> bool\n  Calls C++ function\n  bool ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::TropicalWeightTpl<float> > > >::Close()")},
  {}
};

// SequentialFstReader __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// SequentialFstReader __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// SequentialFstReader __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_kaldi_table_ext.SequentialFstReader", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "SequentialFstReader takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_SequentialTableReader__fst_VectorFstTplHolder__fst_ArcTpl__fst_TropicalWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >"));
      if (!PyErr_Occurred()) {
        ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = static_cast<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pySequentialFstReader

namespace pySequentialLogFstReader {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >> cpp;
};
static ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* ThisPtr(PyObject*);

// open(rspecifier:str) -> bool
static PyObject* wrapOpen_as_open(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("rspecifier"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:open", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("open", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Open(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// done() -> bool
static PyObject* wrapDone_as_done(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Done();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// key() -> str
static PyObject* wrapKey_as_key(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Key();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// free_current()
static PyObject* wrapFreeCurrent_as_free_current(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->FreeCurrent();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// value() -> LogVectorFst
static PyObject* wrapValue_as_value(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > > > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Value();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.fstext.LogVectorFst");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// next()
static PyObject* wrapNext_as_next(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Next();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// is_open() -> bool
static PyObject* wrapIsOpen_as_is_open(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsOpen();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// close() -> bool
static PyObject* wrapClose_as_close(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Close();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __exit__@() -> bool
static PyObject* wrapClose_as___exit__(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Close();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  Py_XDECREF(result_tuple);
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("open"), (PyCFunction)wrapOpen_as_open, METH_VARARGS | METH_KEYWORDS, C("open(rspecifier:str) -> bool\n  Calls C++ function\n  bool ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LogWeightTpl<float> > > >::Open(::std::string)")},
  {C("done"), (PyCFunction)wrapDone_as_done, METH_NOARGS, C("done() -> bool\n  Calls C++ function\n  bool ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LogWeightTpl<float> > > >::Done()")},
  {C("key"), (PyCFunction)wrapKey_as_key, METH_NOARGS, C("key() -> str\n  Calls C++ function\n  ::std::string ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LogWeightTpl<float> > > >::Key()")},
  {C("free_current"), (PyCFunction)wrapFreeCurrent_as_free_current, METH_NOARGS, C("free_current()\n  Calls C++ function\n  void ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LogWeightTpl<float> > > >::FreeCurrent()")},
  {C("value"), (PyCFunction)wrapValue_as_value, METH_NOARGS, C("value() -> LogVectorFst\n  Calls C++ function\n  ::fst::VectorFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > > > ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LogWeightTpl<float> > > >::Value()")},
  {C("next"), (PyCFunction)wrapNext_as_next, METH_NOARGS, C("next()\n  Calls C++ function\n  void ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LogWeightTpl<float> > > >::Next()")},
  {C("is_open"), (PyCFunction)wrapIsOpen_as_is_open, METH_NOARGS, C("is_open() -> bool\n  Calls C++ function\n  bool ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LogWeightTpl<float> > > >::IsOpen()")},
  {C("close"), (PyCFunction)wrapClose_as_close, METH_NOARGS, C("close() -> bool\n  Calls C++ function\n  bool ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LogWeightTpl<float> > > >::Close()")},
  {C("__exit__"), (PyCFunction)wrapClose_as___exit__, METH_VARARGS | METH_KEYWORDS, C("__exit__@() -> bool\n  Calls C++ function\n  bool ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LogWeightTpl<float> > > >::Close()")},
  {}
};

// SequentialLogFstReader __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// SequentialLogFstReader __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// SequentialLogFstReader __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_kaldi_table_ext.SequentialLogFstReader", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "SequentialLogFstReader takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_SequentialTableReader__fst_VectorFstTplHolder__fst_ArcTpl__fst_LogWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >"));
      if (!PyErr_Occurred()) {
        ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = static_cast<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pySequentialLogFstReader

namespace pySequentialKwsIndexFstReader {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >> cpp;
};
static ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* ThisPtr(PyObject*);

// open(rspecifier:str) -> bool
static PyObject* wrapOpen_as_open(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("rspecifier"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:open", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("open", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Open(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// done() -> bool
static PyObject* wrapDone_as_done(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Done();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// key() -> str
static PyObject* wrapKey_as_key(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Key();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// free_current()
static PyObject* wrapFreeCurrent_as_free_current(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->FreeCurrent();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// value() -> KwsIndexVectorFst
static PyObject* wrapValue_as_value(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, ::fst::VectorState< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, ::std::allocator< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > > > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Value();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.fstext.KwsIndexVectorFst");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// next()
static PyObject* wrapNext_as_next(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Next();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// is_open() -> bool
static PyObject* wrapIsOpen_as_is_open(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsOpen();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// close() -> bool
static PyObject* wrapClose_as_close(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Close();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __exit__@() -> bool
static PyObject* wrapClose_as___exit__(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Close();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  Py_XDECREF(result_tuple);
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("open"), (PyCFunction)wrapOpen_as_open, METH_VARARGS | METH_KEYWORDS, C("open(rspecifier:str) -> bool\n  Calls C++ function\n  bool ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > > >::Open(::std::string)")},
  {C("done"), (PyCFunction)wrapDone_as_done, METH_NOARGS, C("done() -> bool\n  Calls C++ function\n  bool ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > > >::Done()")},
  {C("key"), (PyCFunction)wrapKey_as_key, METH_NOARGS, C("key() -> str\n  Calls C++ function\n  ::std::string ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > > >::Key()")},
  {C("free_current"), (PyCFunction)wrapFreeCurrent_as_free_current, METH_NOARGS, C("free_current()\n  Calls C++ function\n  void ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > > >::FreeCurrent()")},
  {C("value"), (PyCFunction)wrapValue_as_value, METH_NOARGS, C("value() -> KwsIndexVectorFst\n  Calls C++ function\n  ::fst::VectorFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, ::fst::VectorState< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, ::std::allocator< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > > > ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > > >::Value()")},
  {C("next"), (PyCFunction)wrapNext_as_next, METH_NOARGS, C("next()\n  Calls C++ function\n  void ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > > >::Next()")},
  {C("is_open"), (PyCFunction)wrapIsOpen_as_is_open, METH_NOARGS, C("is_open() -> bool\n  Calls C++ function\n  bool ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > > >::IsOpen()")},
  {C("close"), (PyCFunction)wrapClose_as_close, METH_NOARGS, C("close() -> bool\n  Calls C++ function\n  bool ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > > >::Close()")},
  {C("__exit__"), (PyCFunction)wrapClose_as___exit__, METH_VARARGS | METH_KEYWORDS, C("__exit__@() -> bool\n  Calls C++ function\n  bool ::kaldi::SequentialTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > > >::Close()")},
  {}
};

// SequentialKwsIndexFstReader __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// SequentialKwsIndexFstReader __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// SequentialKwsIndexFstReader __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_kaldi_table_ext.SequentialKwsIndexFstReader", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "SequentialKwsIndexFstReader takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_SequentialTableReader__fst_VectorFstTplHolder__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >"));
      if (!PyErr_Occurred()) {
        ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = static_cast<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pySequentialKwsIndexFstReader

namespace pyRandomAccessFstReader {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >> cpp;
};
static ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* ThisPtr(PyObject*);

// open(rspecifier:str) -> bool
static PyObject* wrapOpen_as_open(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("rspecifier"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:open", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("open", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Open(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// has_key(key:str) -> bool
static PyObject* wrapHasKey_as_has_key(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("key"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:has_key", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("has_key", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->HasKey(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// value(key:str) -> StdVectorFst
static PyObject* wrapValue_as_value(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("key"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:value", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("value", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Value(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.fstext.StdVectorFst");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// is_open() -> bool
static PyObject* wrapIsOpen_as_is_open(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsOpen();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// close() -> bool
static PyObject* wrapClose_as_close(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Close();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __exit__@() -> bool
static PyObject* wrapClose_as___exit__(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Close();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  Py_XDECREF(result_tuple);
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("open"), (PyCFunction)wrapOpen_as_open, METH_VARARGS | METH_KEYWORDS, C("open(rspecifier:str) -> bool\n  Calls C++ function\n  bool ::kaldi::RandomAccessTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::TropicalWeightTpl<float> > > >::Open(::std::string)")},
  {C("has_key"), (PyCFunction)wrapHasKey_as_has_key, METH_VARARGS | METH_KEYWORDS, C("has_key(key:str) -> bool\n  Calls C++ function\n  bool ::kaldi::RandomAccessTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::TropicalWeightTpl<float> > > >::HasKey(::std::string)")},
  {C("value"), (PyCFunction)wrapValue_as_value, METH_VARARGS | METH_KEYWORDS, C("value(key:str) -> StdVectorFst\n  Calls C++ function\n  ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > > ::kaldi::RandomAccessTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::TropicalWeightTpl<float> > > >::Value(::std::string)")},
  {C("is_open"), (PyCFunction)wrapIsOpen_as_is_open, METH_NOARGS, C("is_open() -> bool\n  Calls C++ function\n  bool ::kaldi::RandomAccessTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::TropicalWeightTpl<float> > > >::IsOpen()")},
  {C("close"), (PyCFunction)wrapClose_as_close, METH_NOARGS, C("close() -> bool\n  Calls C++ function\n  bool ::kaldi::RandomAccessTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::TropicalWeightTpl<float> > > >::Close()")},
  {C("__exit__"), (PyCFunction)wrapClose_as___exit__, METH_VARARGS | METH_KEYWORDS, C("__exit__@() -> bool\n  Calls C++ function\n  bool ::kaldi::RandomAccessTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::TropicalWeightTpl<float> > > >::Close()")},
  {}
};

// RandomAccessFstReader __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// RandomAccessFstReader __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// RandomAccessFstReader __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_kaldi_table_ext.RandomAccessFstReader", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "RandomAccessFstReader takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_RandomAccessTableReader__fst_VectorFstTplHolder__fst_ArcTpl__fst_TropicalWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >"));
      if (!PyErr_Occurred()) {
        ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = static_cast<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyRandomAccessFstReader

namespace pyRandomAccessLogFstReader {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >> cpp;
};
static ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* ThisPtr(PyObject*);

// open(rspecifier:str) -> bool
static PyObject* wrapOpen_as_open(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("rspecifier"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:open", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("open", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Open(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// has_key(key:str) -> bool
static PyObject* wrapHasKey_as_has_key(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("key"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:has_key", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("has_key", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->HasKey(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// value(key:str) -> LogVectorFst
static PyObject* wrapValue_as_value(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("key"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:value", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("value", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > > > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Value(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.fstext.LogVectorFst");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// is_open() -> bool
static PyObject* wrapIsOpen_as_is_open(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsOpen();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// close() -> bool
static PyObject* wrapClose_as_close(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Close();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __exit__@() -> bool
static PyObject* wrapClose_as___exit__(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Close();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  Py_XDECREF(result_tuple);
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("open"), (PyCFunction)wrapOpen_as_open, METH_VARARGS | METH_KEYWORDS, C("open(rspecifier:str) -> bool\n  Calls C++ function\n  bool ::kaldi::RandomAccessTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LogWeightTpl<float> > > >::Open(::std::string)")},
  {C("has_key"), (PyCFunction)wrapHasKey_as_has_key, METH_VARARGS | METH_KEYWORDS, C("has_key(key:str) -> bool\n  Calls C++ function\n  bool ::kaldi::RandomAccessTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LogWeightTpl<float> > > >::HasKey(::std::string)")},
  {C("value"), (PyCFunction)wrapValue_as_value, METH_VARARGS | METH_KEYWORDS, C("value(key:str) -> LogVectorFst\n  Calls C++ function\n  ::fst::VectorFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > > > ::kaldi::RandomAccessTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LogWeightTpl<float> > > >::Value(::std::string)")},
  {C("is_open"), (PyCFunction)wrapIsOpen_as_is_open, METH_NOARGS, C("is_open() -> bool\n  Calls C++ function\n  bool ::kaldi::RandomAccessTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LogWeightTpl<float> > > >::IsOpen()")},
  {C("close"), (PyCFunction)wrapClose_as_close, METH_NOARGS, C("close() -> bool\n  Calls C++ function\n  bool ::kaldi::RandomAccessTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LogWeightTpl<float> > > >::Close()")},
  {C("__exit__"), (PyCFunction)wrapClose_as___exit__, METH_VARARGS | METH_KEYWORDS, C("__exit__@() -> bool\n  Calls C++ function\n  bool ::kaldi::RandomAccessTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LogWeightTpl<float> > > >::Close()")},
  {}
};

// RandomAccessLogFstReader __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// RandomAccessLogFstReader __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// RandomAccessLogFstReader __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_kaldi_table_ext.RandomAccessLogFstReader", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "RandomAccessLogFstReader takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_RandomAccessTableReader__fst_VectorFstTplHolder__fst_ArcTpl__fst_LogWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >"));
      if (!PyErr_Occurred()) {
        ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = static_cast<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyRandomAccessLogFstReader

namespace pyRandomAccessKwsIndexFstReader {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >> cpp;
};
static ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* ThisPtr(PyObject*);

// open(rspecifier:str) -> bool
static PyObject* wrapOpen_as_open(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("rspecifier"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:open", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("open", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Open(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// has_key(key:str) -> bool
static PyObject* wrapHasKey_as_has_key(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("key"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:has_key", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("has_key", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->HasKey(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// value(key:str) -> KwsIndexVectorFst
static PyObject* wrapValue_as_value(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("key"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:value", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("value", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, ::fst::VectorState< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, ::std::allocator< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > > > ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Value(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.fstext.KwsIndexVectorFst");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// is_open() -> bool
static PyObject* wrapIsOpen_as_is_open(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsOpen();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// close() -> bool
static PyObject* wrapClose_as_close(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Close();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __exit__@() -> bool
static PyObject* wrapClose_as___exit__(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Close();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  Py_XDECREF(result_tuple);
  Py_RETURN_NONE;
}

static PyMethodDef Methods[] = {
  {C("open"), (PyCFunction)wrapOpen_as_open, METH_VARARGS | METH_KEYWORDS, C("open(rspecifier:str) -> bool\n  Calls C++ function\n  bool ::kaldi::RandomAccessTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > > >::Open(::std::string)")},
  {C("has_key"), (PyCFunction)wrapHasKey_as_has_key, METH_VARARGS | METH_KEYWORDS, C("has_key(key:str) -> bool\n  Calls C++ function\n  bool ::kaldi::RandomAccessTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > > >::HasKey(::std::string)")},
  {C("value"), (PyCFunction)wrapValue_as_value, METH_VARARGS | METH_KEYWORDS, C("value(key:str) -> KwsIndexVectorFst\n  Calls C++ function\n  ::fst::VectorFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, ::fst::VectorState< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, ::std::allocator< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > > > ::kaldi::RandomAccessTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > > >::Value(::std::string)")},
  {C("is_open"), (PyCFunction)wrapIsOpen_as_is_open, METH_NOARGS, C("is_open() -> bool\n  Calls C++ function\n  bool ::kaldi::RandomAccessTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > > >::IsOpen()")},
  {C("close"), (PyCFunction)wrapClose_as_close, METH_NOARGS, C("close() -> bool\n  Calls C++ function\n  bool ::kaldi::RandomAccessTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > > >::Close()")},
  {C("__exit__"), (PyCFunction)wrapClose_as___exit__, METH_VARARGS | METH_KEYWORDS, C("__exit__@() -> bool\n  Calls C++ function\n  bool ::kaldi::RandomAccessTableReader<fst::VectorFstTplHolder<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > > >::Close()")},
  {}
};

// RandomAccessKwsIndexFstReader __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// RandomAccessKwsIndexFstReader __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// RandomAccessKwsIndexFstReader __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_kaldi_table_ext.RandomAccessKwsIndexFstReader", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "RandomAccessKwsIndexFstReader takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_RandomAccessTableReader__fst_VectorFstTplHolder__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >"));
      if (!PyErr_Occurred()) {
        ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = static_cast<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyRandomAccessKwsIndexFstReader

namespace pyFstWriter {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >> cpp;
};
static ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* ThisPtr(PyObject*);

// open(wspecifier:str) -> bool
static PyObject* wrapOpen_as_open(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("wspecifier"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:open", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("open", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Open(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_open() -> bool
static PyObject* wrapIsOpen_as_is_open(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsOpen();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// write(key:str, value:StdVectorFst)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("key"),
      C("value"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::string", a[0]);
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >", a[1]);
  // Call actual C++ method.
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// flush()
static PyObject* wrapFlush_as_flush(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Flush();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// close() -> bool
static PyObject* wrapClose_as_close(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Close();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("open"), (PyCFunction)wrapOpen_as_open, METH_VARARGS | METH_KEYWORDS, C("open(wspecifier:str) -> bool\n  Calls C++ function\n  bool ::kaldi::TableWriter<fst::VectorFstTplHolder<fst::ArcTpl<fst::TropicalWeightTpl<float> > > >::Open(::std::string)")},
  {C("is_open"), (PyCFunction)wrapIsOpen_as_is_open, METH_NOARGS, C("is_open() -> bool\n  Calls C++ function\n  bool ::kaldi::TableWriter<fst::VectorFstTplHolder<fst::ArcTpl<fst::TropicalWeightTpl<float> > > >::IsOpen()")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(key:str, value:StdVectorFst)\n  Calls C++ function\n  void ::kaldi::TableWriter<fst::VectorFstTplHolder<fst::ArcTpl<fst::TropicalWeightTpl<float> > > >::Write(::std::string, ::fst::VectorFst< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > >)")},
  {C("flush"), (PyCFunction)wrapFlush_as_flush, METH_NOARGS, C("flush()\n  Calls C++ function\n  void ::kaldi::TableWriter<fst::VectorFstTplHolder<fst::ArcTpl<fst::TropicalWeightTpl<float> > > >::Flush()")},
  {C("close"), (PyCFunction)wrapClose_as_close, METH_NOARGS, C("close() -> bool\n  Calls C++ function\n  bool ::kaldi::TableWriter<fst::VectorFstTplHolder<fst::ArcTpl<fst::TropicalWeightTpl<float> > > >::Close()")},
  {}
};

// FstWriter __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// FstWriter __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// FstWriter __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_kaldi_table_ext.FstWriter",        // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "FstWriter takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_TableWriter__fst_VectorFstTplHolder__fst_ArcTpl__fst_TropicalWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >"));
      if (!PyErr_Occurred()) {
        ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c = static_cast<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyFstWriter

namespace pyLogFstWriter {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >> cpp;
};
static ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* ThisPtr(PyObject*);

// open(wspecifier:str) -> bool
static PyObject* wrapOpen_as_open(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("wspecifier"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:open", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("open", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Open(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_open() -> bool
static PyObject* wrapIsOpen_as_is_open(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsOpen();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// write(key:str, value:LogVectorFst)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("key"),
      C("value"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::string", a[0]);
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > > >* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "::fst::VectorFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > > >", a[1]);
  // Call actual C++ method.
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// flush()
static PyObject* wrapFlush_as_flush(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Flush();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// close() -> bool
static PyObject* wrapClose_as_close(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Close();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("open"), (PyCFunction)wrapOpen_as_open, METH_VARARGS | METH_KEYWORDS, C("open(wspecifier:str) -> bool\n  Calls C++ function\n  bool ::kaldi::TableWriter<fst::VectorFstTplHolder<fst::ArcTpl<fst::LogWeightTpl<float> > > >::Open(::std::string)")},
  {C("is_open"), (PyCFunction)wrapIsOpen_as_is_open, METH_NOARGS, C("is_open() -> bool\n  Calls C++ function\n  bool ::kaldi::TableWriter<fst::VectorFstTplHolder<fst::ArcTpl<fst::LogWeightTpl<float> > > >::IsOpen()")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(key:str, value:LogVectorFst)\n  Calls C++ function\n  void ::kaldi::TableWriter<fst::VectorFstTplHolder<fst::ArcTpl<fst::LogWeightTpl<float> > > >::Write(::std::string, ::fst::VectorFst< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, ::fst::VectorState< ::fst::ArcTpl< ::fst::LogWeightTpl<float> >, ::std::allocator< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > > >)")},
  {C("flush"), (PyCFunction)wrapFlush_as_flush, METH_NOARGS, C("flush()\n  Calls C++ function\n  void ::kaldi::TableWriter<fst::VectorFstTplHolder<fst::ArcTpl<fst::LogWeightTpl<float> > > >::Flush()")},
  {C("close"), (PyCFunction)wrapClose_as_close, METH_NOARGS, C("close() -> bool\n  Calls C++ function\n  bool ::kaldi::TableWriter<fst::VectorFstTplHolder<fst::ArcTpl<fst::LogWeightTpl<float> > > >::Close()")},
  {}
};

// LogFstWriter __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// LogFstWriter __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// LogFstWriter __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_kaldi_table_ext.LogFstWriter",     // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "LogFstWriter takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_TableWriter__fst_VectorFstTplHolder__fst_ArcTpl__fst_LogWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >"));
      if (!PyErr_Occurred()) {
        ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c = static_cast<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyLogFstWriter

namespace pyKwsIndexFstWriter {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >> cpp;
};
static ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* ThisPtr(PyObject*);

// open(wspecifier:str) -> bool
static PyObject* wrapOpen_as_open(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("wspecifier"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:open", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("open", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Open(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_open() -> bool
static PyObject* wrapIsOpen_as_is_open(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsOpen();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// write(key:str, value:KwsIndexVectorFst)
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("key"),
      C("value"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:write", names, &a[0], &a[1])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::string", a[0]);
  ::fst::VectorFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, ::fst::VectorState< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, ::std::allocator< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > > >* arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write", names[1], "::fst::VectorFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, ::fst::VectorState< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, ::std::allocator< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > > >", a[1]);
  // Call actual C++ method.
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Write(std::move(arg1), *arg2);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// flush()
static PyObject* wrapFlush_as_flush(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    c->Flush();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// close() -> bool
static PyObject* wrapClose_as_close(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Close();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("open"), (PyCFunction)wrapOpen_as_open, METH_VARARGS | METH_KEYWORDS, C("open(wspecifier:str) -> bool\n  Calls C++ function\n  bool ::kaldi::TableWriter<fst::VectorFstTplHolder<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > > >::Open(::std::string)")},
  {C("is_open"), (PyCFunction)wrapIsOpen_as_is_open, METH_NOARGS, C("is_open() -> bool\n  Calls C++ function\n  bool ::kaldi::TableWriter<fst::VectorFstTplHolder<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > > >::IsOpen()")},
  {C("write"), (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, C("write(key:str, value:KwsIndexVectorFst)\n  Calls C++ function\n  void ::kaldi::TableWriter<fst::VectorFstTplHolder<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > > >::Write(::std::string, ::fst::VectorFst< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, ::fst::VectorState< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > >, ::std::allocator< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > > >)")},
  {C("flush"), (PyCFunction)wrapFlush_as_flush, METH_NOARGS, C("flush()\n  Calls C++ function\n  void ::kaldi::TableWriter<fst::VectorFstTplHolder<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > > >::Flush()")},
  {C("close"), (PyCFunction)wrapClose_as_close, METH_NOARGS, C("close() -> bool\n  Calls C++ function\n  bool ::kaldi::TableWriter<fst::VectorFstTplHolder<fst::ArcTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::LexicographicWeight<fst::TropicalWeightTpl<float>, fst::TropicalWeightTpl<float> > > > > >::Close()")},
  {}
};

// KwsIndexFstWriter __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// KwsIndexFstWriter __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// KwsIndexFstWriter __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_kaldi_table_ext.KwsIndexFstWriter", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "KwsIndexFstWriter takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_TableWriter__fst_VectorFstTplHolder__fst_ArcTpl__fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_LexicographicWeight__fst_TropicalWeightTpl_float___fst_TropicalWeightTpl_float"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >"));
      if (!PyErr_Occurred()) {
        ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c = static_cast<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyKwsIndexFstWriter


// Initialize module

bool Ready() {
  if (PyType_Ready(&pySequentialFstReader::wrapper_Type) < 0) return false;
  Py_INCREF(&pySequentialFstReader::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pySequentialLogFstReader::wrapper_Type) < 0) return false;
  Py_INCREF(&pySequentialLogFstReader::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pySequentialKwsIndexFstReader::wrapper_Type) < 0) return false;
  Py_INCREF(&pySequentialKwsIndexFstReader::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyRandomAccessFstReader::wrapper_Type) < 0) return false;
  Py_INCREF(&pyRandomAccessFstReader::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyRandomAccessLogFstReader::wrapper_Type) < 0) return false;
  Py_INCREF(&pyRandomAccessLogFstReader::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyRandomAccessKwsIndexFstReader::wrapper_Type) < 0) return false;
  Py_INCREF(&pyRandomAccessKwsIndexFstReader::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyFstWriter::wrapper_Type) < 0) return false;
  Py_INCREF(&pyFstWriter::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyLogFstWriter::wrapper_Type) < 0) return false;
  Py_INCREF(&pyLogFstWriter::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyKwsIndexFstWriter::wrapper_Type) < 0) return false;
  Py_INCREF(&pyKwsIndexFstWriter::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_kaldi_table_ext",  // module name
  "CLIF-generated module for util/kaldi-table-ext.h", // module doc
  -1,  // module keeps state in global variables
  nullptr
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_lattice_weight")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_vector_fst")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "SequentialFstReader", reinterpret_cast<PyObject*>(&pySequentialFstReader::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "SequentialLogFstReader", reinterpret_cast<PyObject*>(&pySequentialLogFstReader::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "SequentialKwsIndexFstReader", reinterpret_cast<PyObject*>(&pySequentialKwsIndexFstReader::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "RandomAccessFstReader", reinterpret_cast<PyObject*>(&pyRandomAccessFstReader::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "RandomAccessLogFstReader", reinterpret_cast<PyObject*>(&pyRandomAccessLogFstReader::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "RandomAccessKwsIndexFstReader", reinterpret_cast<PyObject*>(&pyRandomAccessKwsIndexFstReader::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "FstWriter", reinterpret_cast<PyObject*>(&pyFstWriter::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "LogFstWriter", reinterpret_cast<PyObject*>(&pyLogFstWriter::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "KwsIndexFstWriter", reinterpret_cast<PyObject*>(&pyKwsIndexFstWriter::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __kaldi__table__ext_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// FstWriter to/from ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* cpp = __kaldi__table__ext_clifwrap::pyFstWriter::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>* c) {
  assert(c != nullptr);
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* cpp = __kaldi__table__ext_clifwrap::pyFstWriter::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__kaldi__table__ext_clifwrap::pyFstWriter::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>* c) {
  assert(c != nullptr);
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* cpp = __kaldi__table__ext_clifwrap::pyFstWriter::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__kaldi__table__ext_clifwrap::pyFstWriter::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert FstWriter instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pyFstWriter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pyFstWriter::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pyFstWriter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pyFstWriter::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pyFstWriter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pyFstWriter::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>(std::move(c));
  return py;
}

// KwsIndexFstWriter to/from ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > > conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* cpp = __kaldi__table__ext_clifwrap::pyKwsIndexFstWriter::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>* c) {
  assert(c != nullptr);
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* cpp = __kaldi__table__ext_clifwrap::pyKwsIndexFstWriter::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__kaldi__table__ext_clifwrap::pyKwsIndexFstWriter::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>* c) {
  assert(c != nullptr);
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* cpp = __kaldi__table__ext_clifwrap::pyKwsIndexFstWriter::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__kaldi__table__ext_clifwrap::pyKwsIndexFstWriter::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert KwsIndexFstWriter instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pyKwsIndexFstWriter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pyKwsIndexFstWriter::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pyKwsIndexFstWriter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pyKwsIndexFstWriter::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pyKwsIndexFstWriter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pyKwsIndexFstWriter::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>(std::move(c));
  return py;
}

// LogFstWriter to/from ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > > conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* cpp = __kaldi__table__ext_clifwrap::pyLogFstWriter::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>* c) {
  assert(c != nullptr);
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* cpp = __kaldi__table__ext_clifwrap::pyLogFstWriter::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__kaldi__table__ext_clifwrap::pyLogFstWriter::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>* c) {
  assert(c != nullptr);
  ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* cpp = __kaldi__table__ext_clifwrap::pyLogFstWriter::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__kaldi__table__ext_clifwrap::pyLogFstWriter::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert LogFstWriter instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pyLogFstWriter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pyLogFstWriter::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pyLogFstWriter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pyLogFstWriter::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pyLogFstWriter::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pyLogFstWriter::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>(std::move(c));
  return py;
}

// RandomAccessFstReader to/from ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* cpp = __kaldi__table__ext_clifwrap::pyRandomAccessFstReader::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>* c) {
  assert(c != nullptr);
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* cpp = __kaldi__table__ext_clifwrap::pyRandomAccessFstReader::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__kaldi__table__ext_clifwrap::pyRandomAccessFstReader::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>* c) {
  assert(c != nullptr);
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* cpp = __kaldi__table__ext_clifwrap::pyRandomAccessFstReader::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__kaldi__table__ext_clifwrap::pyRandomAccessFstReader::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert RandomAccessFstReader instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pyRandomAccessFstReader::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pyRandomAccessFstReader::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pyRandomAccessFstReader::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pyRandomAccessFstReader::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pyRandomAccessFstReader::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pyRandomAccessFstReader::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>(std::move(c));
  return py;
}

// RandomAccessKwsIndexFstReader to/from ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > > conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* cpp = __kaldi__table__ext_clifwrap::pyRandomAccessKwsIndexFstReader::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>* c) {
  assert(c != nullptr);
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* cpp = __kaldi__table__ext_clifwrap::pyRandomAccessKwsIndexFstReader::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__kaldi__table__ext_clifwrap::pyRandomAccessKwsIndexFstReader::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>* c) {
  assert(c != nullptr);
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* cpp = __kaldi__table__ext_clifwrap::pyRandomAccessKwsIndexFstReader::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__kaldi__table__ext_clifwrap::pyRandomAccessKwsIndexFstReader::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert RandomAccessKwsIndexFstReader instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pyRandomAccessKwsIndexFstReader::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pyRandomAccessKwsIndexFstReader::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pyRandomAccessKwsIndexFstReader::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pyRandomAccessKwsIndexFstReader::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pyRandomAccessKwsIndexFstReader::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pyRandomAccessKwsIndexFstReader::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>(std::move(c));
  return py;
}

// RandomAccessLogFstReader to/from ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > > conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* cpp = __kaldi__table__ext_clifwrap::pyRandomAccessLogFstReader::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>* c) {
  assert(c != nullptr);
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* cpp = __kaldi__table__ext_clifwrap::pyRandomAccessLogFstReader::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__kaldi__table__ext_clifwrap::pyRandomAccessLogFstReader::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>* c) {
  assert(c != nullptr);
  ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* cpp = __kaldi__table__ext_clifwrap::pyRandomAccessLogFstReader::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__kaldi__table__ext_clifwrap::pyRandomAccessLogFstReader::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert RandomAccessLogFstReader instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pyRandomAccessLogFstReader::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pyRandomAccessLogFstReader::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pyRandomAccessLogFstReader::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pyRandomAccessLogFstReader::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pyRandomAccessLogFstReader::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pyRandomAccessLogFstReader::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>(std::move(c));
  return py;
}

// SequentialFstReader to/from ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > > conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* cpp = __kaldi__table__ext_clifwrap::pySequentialFstReader::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>* c) {
  assert(c != nullptr);
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* cpp = __kaldi__table__ext_clifwrap::pySequentialFstReader::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__kaldi__table__ext_clifwrap::pySequentialFstReader::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>* c) {
  assert(c != nullptr);
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* cpp = __kaldi__table__ext_clifwrap::pySequentialFstReader::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__kaldi__table__ext_clifwrap::pySequentialFstReader::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert SequentialFstReader instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pySequentialFstReader::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pySequentialFstReader::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pySequentialFstReader::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pySequentialFstReader::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pySequentialFstReader::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pySequentialFstReader::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>(std::move(c));
  return py;
}

// SequentialKwsIndexFstReader to/from ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > > conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* cpp = __kaldi__table__ext_clifwrap::pySequentialKwsIndexFstReader::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>* c) {
  assert(c != nullptr);
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* cpp = __kaldi__table__ext_clifwrap::pySequentialKwsIndexFstReader::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__kaldi__table__ext_clifwrap::pySequentialKwsIndexFstReader::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>* c) {
  assert(c != nullptr);
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* cpp = __kaldi__table__ext_clifwrap::pySequentialKwsIndexFstReader::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__kaldi__table__ext_clifwrap::pySequentialKwsIndexFstReader::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert SequentialKwsIndexFstReader instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pySequentialKwsIndexFstReader::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pySequentialKwsIndexFstReader::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pySequentialKwsIndexFstReader::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pySequentialKwsIndexFstReader::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pySequentialKwsIndexFstReader::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pySequentialKwsIndexFstReader::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>(std::move(c));
  return py;
}

// SequentialLogFstReader to/from ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > > conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* cpp = __kaldi__table__ext_clifwrap::pySequentialLogFstReader::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>* c) {
  assert(c != nullptr);
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* cpp = __kaldi__table__ext_clifwrap::pySequentialLogFstReader::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__kaldi__table__ext_clifwrap::pySequentialLogFstReader::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>* c) {
  assert(c != nullptr);
  ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* cpp = __kaldi__table__ext_clifwrap::pySequentialLogFstReader::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__kaldi__table__ext_clifwrap::pySequentialLogFstReader::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert SequentialLogFstReader instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pySequentialLogFstReader::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pySequentialLogFstReader::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pySequentialLogFstReader::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pySequentialLogFstReader::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__table__ext_clifwrap::pySequentialLogFstReader::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__table__ext_clifwrap::pySequentialLogFstReader::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>(std::move(c));
  return py;
}

}  // namespace kaldi
