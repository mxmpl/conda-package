//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/util/kaldi-table-ext.clif

#include <memory>
#include "clif/python/optional.h"
#include "util/kaldi-table-ext.h"
#include "clif/python/postconv.h"

namespace kaldi {
using namespace ::clif;

// CLIF use `::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >` as FstWriter
bool Clif_PyObjAs(PyObject* input, ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >&, py::PostConv) = delete;
// CLIF use `::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >` as KwsIndexFstWriter
bool Clif_PyObjAs(PyObject* input, ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >&, py::PostConv) = delete;
// CLIF use `::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >` as LogFstWriter
bool Clif_PyObjAs(PyObject* input, ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::TableWriter< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >` as RandomAccessFstReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >` as RandomAccessKwsIndexFstReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >&, py::PostConv) = delete;
// CLIF use `::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >` as RandomAccessLogFstReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::RandomAccessTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >&, py::PostConv) = delete;
// CLIF use `::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >` as SequentialFstReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::TropicalWeightTpl<float> > > >&, py::PostConv) = delete;
// CLIF use `::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >` as SequentialKwsIndexFstReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::LexicographicWeight< ::fst::TropicalWeightTpl<float>, ::fst::TropicalWeightTpl<float> > > > > >&, py::PostConv) = delete;
// CLIF use `::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >` as SequentialLogFstReader
bool Clif_PyObjAs(PyObject* input, ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>* output);
PyObject* Clif_PyObjFrom(::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >>, py::PostConv);
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >*, py::PostConv) = delete;
PyObject* Clif_PyObjFrom(const ::kaldi::SequentialTableReader< ::fst::VectorFstTplHolder< ::fst::ArcTpl< ::fst::LogWeightTpl<float> > > >&, py::PostConv) = delete;

}  // namespace kaldi

// CLIF init_module if (PyObject* m = PyImport_ImportModule("_kaldi_table_ext")) Py_DECREF(m);
// CLIF init_module else goto err;
