//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 3
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /pykaldi/kaldi/util/kaldi-io.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "clif/python/types.h"
#include "matrix/kaldi-matrix-clifwrap.h"
#include "matrix/kaldi-vector-clifwrap.h"
#include "base/iostream-clifwrap.h"
#include "kaldi-io-clifwrap.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace __kaldi__io_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes

static PyObject *_Enum{}, *_IntEnum{};  // set below in Init()


// Create Python Enum object (cached in _OutputType) for ::kaldi::OutputType
static PyObject* wrapOutputType() {
  PyObject *py, *py_enum_class{}, *names = PyTuple_New(4);
  if (names == nullptr) return nullptr;
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("NO_OUTPUT"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::OutputType>::type>(::kaldi::OutputType::kNoOutput)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 0, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("FILE_OUTPUT"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::OutputType>::type>(::kaldi::OutputType::kFileOutput)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 1, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("STANDARD_OUTPUT"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::OutputType>::type>(::kaldi::OutputType::kStandardOutput)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 2, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("PIPE_OUTPUT"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::OutputType>::type>(::kaldi::OutputType::kPipeOutput)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 3, py);
  py = PyUnicode_FromString("OutputType");
  py_enum_class = PyObject_CallFunctionObjArgs(_IntEnum, py, names, nullptr);
  Py_DECREF(py);
err:
  Py_DECREF(names);
  return py_enum_class;
}
static PyObject* _OutputType{};  // set by above func in Init()

// classify_wxfilename(wxfilename:str) -> OutputType
static PyObject* wrapClassifyWxfilename_as_classify_wxfilename(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("wxfilename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:classify_wxfilename", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("classify_wxfilename", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::OutputType ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::ClassifyWxfilename(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Create Python Enum object (cached in _InputType) for ::kaldi::InputType
static PyObject* wrapInputType() {
  PyObject *py, *py_enum_class{}, *names = PyTuple_New(5);
  if (names == nullptr) return nullptr;
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("NO_INPUT"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::InputType>::type>(::kaldi::InputType::kNoInput)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 0, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("FILE_INPUT"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::InputType>::type>(::kaldi::InputType::kFileInput)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 1, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("STANDARD_INPUT"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::InputType>::type>(::kaldi::InputType::kStandardInput)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 2, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("OFFSET_FILE_INPUT"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::InputType>::type>(::kaldi::InputType::kOffsetFileInput)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 3, py);
  if ((py = Py_BuildValue("(NN)", PyUnicode_FromString("PIPE_INPUT"), PyInt_FromLong(
        static_cast<typename std::underlying_type<::kaldi::InputType>::type>(::kaldi::InputType::kPipeInput)))
      ) == nullptr) goto err;
  PyTuple_SET_ITEM(names, 4, py);
  py = PyUnicode_FromString("InputType");
  py_enum_class = PyObject_CallFunctionObjArgs(_IntEnum, py, names, nullptr);
  Py_DECREF(py);
err:
  Py_DECREF(names);
  return py_enum_class;
}
static PyObject* _InputType{};  // set by above func in Init()

// classify_rxfilename(rxfilename:str) -> InputType
static PyObject* wrapClassifyRxfilename_as_classify_rxfilename(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("rxfilename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:classify_rxfilename", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("classify_rxfilename", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::kaldi::InputType ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::ClassifyRxfilename(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

namespace pyOutput {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::Output> cpp;
};
static ::kaldi::Output* ThisPtr(PyObject*);

// open(wxfilename:str, binary:bool, write_header:bool) -> bool
static PyObject* wrapOpen_as_open(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("wxfilename"),
      C("binary"),
      C("write_header"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:open", names, &a[0], &a[1], &a[2])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("open", names[0], "::std::string", a[0]);
  bool arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("open", names[1], "bool", a[1]);
  bool arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("open", names[2], "bool", a[2]);
  // Call actual C++ method.
  ::kaldi::Output* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Open(std::move(arg1), std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_open() -> bool
static PyObject* wrapIsOpen_as_is_open(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::Output* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsOpen();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// stream() -> ostream
static PyObject* wrapStreamPtr_as_stream(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::Output* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::gtl::optional<::std::basic_ostream<char, ::std::char_traits<char> > *> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->StreamPtr();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0.value()), {});
}

// close() -> bool
static PyObject* wrapClose_as_close(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::Output* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Close();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

static PyMethodDef Methods[] = {
  {C("open"), (PyCFunction)wrapOpen_as_open, METH_VARARGS | METH_KEYWORDS, C("open(wxfilename:str, binary:bool, write_header:bool) -> bool\n  Calls C++ function\n  bool ::kaldi::Output::Open(::std::string, bool, bool)")},
  {C("is_open"), (PyCFunction)wrapIsOpen_as_is_open, METH_NOARGS, C("is_open() -> bool\n\nChecks if the stream is open.")},
  {C("stream"), (PyCFunction)wrapStreamPtr_as_stream, METH_NOARGS, C("stream() -> ostream\n\nReturns a handle for the underlying C++ stream.")},
  {C("close"), (PyCFunction)wrapClose_as_close, METH_NOARGS, C("close() -> bool\n\nCloses the stream.\n\nReturns:\n  True if the stream was closed successfully. False otherwise.")},
  {}
};

// Output __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// Output __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// Output __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_kaldi_io.Output",                  // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::Output",  // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "Output takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::Output>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::Output* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_Output"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::Output"));
      if (!PyErr_Occurred()) {
        ::kaldi::Output* c = static_cast<::kaldi::Output*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::Output*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyOutput

namespace pyInput {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::kaldi::Input> cpp;
};
static ::kaldi::Input* ThisPtr(PyObject*);

// open(rxfilename:str) -> (success:bool, contents_binary:bool)
static PyObject* wrapOpen_as_open(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("rxfilename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:open", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("open", names[0], "::std::string", a[0]);
  bool ret1{};
  // Call actual C++ method.
  ::kaldi::Input* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Open(std::move(arg1), &ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// _open_text_mode(rxfilename:str) -> bool
static PyObject* wrapOpenTextMode_as__open_text_mode(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("rxfilename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:_open_text_mode", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("_open_text_mode", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  ::kaldi::Input* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->OpenTextMode(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// is_open() -> bool
static PyObject* wrapIsOpen_as_is_open(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::Input* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsOpen();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// close() -> int
static PyObject* wrapClose_as_close(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::Input* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  int ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Close();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// stream() -> istream
static PyObject* wrapStreamPtr_as_stream(PyObject* self) {
  // Call actual C++ method.
  ::kaldi::Input* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::gtl::optional<::std::basic_istream<char, ::std::char_traits<char> > *> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->StreamPtr();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0.value()), {});
}

static PyMethodDef Methods[] = {
  {C("open"), (PyCFunction)wrapOpen_as_open, METH_VARARGS | METH_KEYWORDS, C("open(rxfilename:str) -> (success:bool, contents_binary:bool)\n  Calls C++ function\n  bool ::kaldi::Input::Open(::std::string, bool*)")},
  {C("_open_text_mode"), (PyCFunction)wrapOpenTextMode_as__open_text_mode, METH_VARARGS | METH_KEYWORDS, C("_open_text_mode(rxfilename:str) -> bool\n  Calls C++ function\n  bool ::kaldi::Input::OpenTextMode(::std::string)")},
  {C("is_open"), (PyCFunction)wrapIsOpen_as_is_open, METH_NOARGS, C("is_open() -> bool\n\nChecks if the stream is open.")},
  {C("close"), (PyCFunction)wrapClose_as_close, METH_NOARGS, C("close() -> int\n\nCloses the stream.\n\nReturns:\n  The exit code as an integer if the stream was a pipe, 0 otherwise.")},
  {C("stream"), (PyCFunction)wrapStreamPtr_as_stream, METH_NOARGS, C("stream() -> istream\n\nReturns a handle for the underlying C++ stream.")},
  {}
};

// Input __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// Input __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// Input __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "_kaldi_io.Input",                   // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  nullptr,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::kaldi::Input",   // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "Input takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::kaldi::Input>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::kaldi::Input* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_kaldi_Input"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::kaldi::Input"));
      if (!PyErr_Occurred()) {
        ::kaldi::Input* c = static_cast<::kaldi::Input*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::kaldi::Input*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyInput

// read_matrix(filename:str) -> Matrix
static PyObject* wrapReadKaldiObject_as_read_matrix(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("filename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:read_matrix", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read_matrix", names[0], "::std::string", a[0]);
  ::kaldi::Matrix<float> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::ReadKaldiObject(std::move(arg1), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.matrix._matrix_wrapper");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// write_matrix(c:Matrix, filename:str, binary:bool)
static PyObject* wrapWriteKaldiObject_as_write_matrix(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("c"),
      C("filename"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:write_matrix", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::Matrix<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write_matrix", names[0], "::kaldi::Matrix<float>", a[0]);
  ::std::string arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write_matrix", names[1], "::std::string", a[1]);
  bool arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("write_matrix", names[2], "bool", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::WriteKaldiObject(*arg1, std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read_double_matrix(filename:str) -> DoubleMatrix
static PyObject* wrapReadKaldiObject_as_read_double_matrix(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("filename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:read_double_matrix", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read_double_matrix", names[0], "::std::string", a[0]);
  ::kaldi::Matrix<double> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::ReadKaldiObject(std::move(arg1), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.matrix._matrix_wrapper");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// write_double_matrix(c:DoubleMatrix, filename:str, binary:bool)
static PyObject* wrapWriteKaldiObject_as_write_double_matrix(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("c"),
      C("filename"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:write_double_matrix", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::Matrix<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write_double_matrix", names[0], "::kaldi::Matrix<double>", a[0]);
  ::std::string arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write_double_matrix", names[1], "::std::string", a[1]);
  bool arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("write_double_matrix", names[2], "bool", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::WriteKaldiObject(*arg1, std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read_vector(filename:str) -> Vector
static PyObject* wrapReadKaldiObject_as_read_vector(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("filename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:read_vector", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read_vector", names[0], "::std::string", a[0]);
  ::kaldi::Vector<float> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::ReadKaldiObject(std::move(arg1), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.matrix._vector_wrapper");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// write_vector(c:Vector, filename:str, binary:bool)
static PyObject* wrapWriteKaldiObject_as_write_vector(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("c"),
      C("filename"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:write_vector", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::Vector<float>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write_vector", names[0], "::kaldi::Vector<float>", a[0]);
  ::std::string arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write_vector", names[1], "::std::string", a[1]);
  bool arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("write_vector", names[2], "bool", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::WriteKaldiObject(*arg1, std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// read_double_vector(filename:str) -> DoubleVector
static PyObject* wrapReadKaldiObject_as_read_double_vector(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("filename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:read_double_vector", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("read_double_vector", names[0], "::std::string", a[0]);
  ::kaldi::Vector<double> ret0{};
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::ReadKaldiObject(std::move(arg1), &ret0);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("kaldi.matrix._vector_wrapper");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// write_double_vector(c:DoubleVector, filename:str, binary:bool)
static PyObject* wrapWriteKaldiObject_as_write_double_vector(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[3];
  char* names[] = {
      C("c"),
      C("filename"),
      C("binary"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OOO:write_double_vector", names, &a[0], &a[1], &a[2])) return nullptr;
  ::kaldi::Vector<double>* arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write_double_vector", names[0], "::kaldi::Vector<double>", a[0]);
  ::std::string arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("write_double_vector", names[1], "::std::string", a[1]);
  bool arg3;
  if (!Clif_PyObjAs(a[2], &arg3)) return ArgError("write_double_vector", names[2], "bool", a[2]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ::kaldi::WriteKaldiObject(*arg1, std::move(arg2), std::move(arg3));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// printable_rxfilename(rxfilename:str) -> str
static PyObject* wrapPrintableRxfilename_as_printable_rxfilename(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("rxfilename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:printable_rxfilename", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("printable_rxfilename", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::PrintableRxfilename(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}

// printable_wxfilename(wxfilename:str) -> str
static PyObject* wrapPrintableWxfilename_as_printable_wxfilename(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  char* names[] = {
      C("wxfilename"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:printable_wxfilename", names, &a[0])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("printable_wxfilename", names[0], "::std::string", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = ::kaldi::PrintableWxfilename(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), _1);
}


// Initialize module

static PyMethodDef Methods[] = {
  {C("classify_wxfilename"), (PyCFunction)wrapClassifyWxfilename_as_classify_wxfilename, METH_VARARGS | METH_KEYWORDS, C("classify_wxfilename(wxfilename:str) -> OutputType\n\nClassifies extended filename into an `OutputType`.")},
  {C("classify_rxfilename"), (PyCFunction)wrapClassifyRxfilename_as_classify_rxfilename, METH_VARARGS | METH_KEYWORDS, C("classify_rxfilename(rxfilename:str) -> InputType\n\nClassifies extended filename into an `InputType`.")},
  {C("read_matrix"), (PyCFunction)wrapReadKaldiObject_as_read_matrix, METH_VARARGS | METH_KEYWORDS, C("read_matrix(filename:str) -> Matrix\n\nReads a single precision matrix from an extended filename.")},
  {C("write_matrix"), (PyCFunction)wrapWriteKaldiObject_as_write_matrix, METH_VARARGS | METH_KEYWORDS, C("write_matrix(c:Matrix, filename:str, binary:bool)\n\nWrites a single precision matrix to an extended filename.")},
  {C("read_double_matrix"), (PyCFunction)wrapReadKaldiObject_as_read_double_matrix, METH_VARARGS | METH_KEYWORDS, C("read_double_matrix(filename:str) -> DoubleMatrix\n\nReads a double precision matrix from an extended filename.")},
  {C("write_double_matrix"), (PyCFunction)wrapWriteKaldiObject_as_write_double_matrix, METH_VARARGS | METH_KEYWORDS, C("write_double_matrix(c:DoubleMatrix, filename:str, binary:bool)\n\nWrites a double precision matrix to an extended filename.")},
  {C("read_vector"), (PyCFunction)wrapReadKaldiObject_as_read_vector, METH_VARARGS | METH_KEYWORDS, C("read_vector(filename:str) -> Vector\n\nReads a single precision vector from an extended filename.")},
  {C("write_vector"), (PyCFunction)wrapWriteKaldiObject_as_write_vector, METH_VARARGS | METH_KEYWORDS, C("write_vector(c:Vector, filename:str, binary:bool)\n\nWrites a single precision vector to an extended filename.")},
  {C("read_double_vector"), (PyCFunction)wrapReadKaldiObject_as_read_double_vector, METH_VARARGS | METH_KEYWORDS, C("read_double_vector(filename:str) -> DoubleVector\n\nReads a double precision vector from an extended filename.")},
  {C("write_double_vector"), (PyCFunction)wrapWriteKaldiObject_as_write_double_vector, METH_VARARGS | METH_KEYWORDS, C("write_double_vector(c:DoubleVector, filename:str, binary:bool)\n\nWrites a double precision vector to an extended filename.")},
  {C("printable_rxfilename"), (PyCFunction)wrapPrintableRxfilename_as_printable_rxfilename, METH_VARARGS | METH_KEYWORDS, C("printable_rxfilename(rxfilename:str) -> str\n\nTurns the rxfilename into a more human-readable form.\n\nThis is useful for error reporting, i.e. it does quoting and escaping and\nreplaces '' or '-' with 'standard input'.")},
  {C("printable_wxfilename"), (PyCFunction)wrapPrintableWxfilename_as_printable_wxfilename, METH_VARARGS | METH_KEYWORDS, C("printable_wxfilename(wxfilename:str) -> str\n\nTurns the wxfilename into a more human-readable form.\n\nThis is useful for error reporting, i.e. it does quoting and escaping and\nreplaces '' or '-' with 'standard input'.")},
  {}
};

bool Ready() {
  if (PyType_Ready(&pyOutput::wrapper_Type) < 0) return false;
  Py_INCREF(&pyOutput::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyInput::wrapper_Type) < 0) return false;
  Py_INCREF(&pyInput::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  "_kaldi_io",  // module name
  "CLIF-generated module for util/kaldi-io.h", // module doc
  -1,  // module keeps state in global variables
  Methods
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  if (PyObject* m = PyImport_ImportModule("_kaldi_matrix")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_kaldi_vector")) Py_DECREF(m);
  else goto err;
  if (PyObject* m = PyImport_ImportModule("_iostream")) Py_DECREF(m);
  else goto err;
  PyEval_InitThreads();
  {PyObject* em = PyImport_ImportModule("enum");
   if (em == nullptr) goto err;
   _Enum = PyObject_GetAttrString(em, "Enum");
   _IntEnum = PyObject_GetAttrString(em, "IntEnum");
   Py_DECREF(em);}
  if (!_Enum || !_IntEnum) {
    Py_XDECREF(_Enum);
    Py_XDECREF(_IntEnum);
    goto err;
  }
  if (PyModule_AddObject(module, "OutputType", (_OutputType=wrapOutputType())) < 0) goto err;
  if (PyModule_AddObject(module, "InputType", (_InputType=wrapInputType())) < 0) goto err;
  if (PyModule_AddObject(module, "Output", reinterpret_cast<PyObject*>(&pyOutput::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "Input", reinterpret_cast<PyObject*>(&pyInput::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace __kaldi__io_clifwrap

namespace kaldi {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// Input to/from ::kaldi::Input conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::Input** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::Input* cpp = __kaldi__io_clifwrap::pyInput::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::Input>* c) {
  assert(c != nullptr);
  ::kaldi::Input* cpp = __kaldi__io_clifwrap::pyInput::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__kaldi__io_clifwrap::pyInput::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::Input>* c) {
  assert(c != nullptr);
  ::kaldi::Input* cpp = __kaldi__io_clifwrap::pyInput::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__kaldi__io_clifwrap::pyInput::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert Input instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::Input* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__io_clifwrap::pyInput::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__io_clifwrap::pyInput::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::Input>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::Input> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__io_clifwrap::pyInput::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__io_clifwrap::pyInput::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::Input>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::Input> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__io_clifwrap::pyInput::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__io_clifwrap::pyInput::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::Input>(std::move(c));
  return py;
}

// InputType:IntEnum to/from enum ::kaldi::InputType conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::InputType* c) {
  assert(c != nullptr);
  if (!PyObject_IsInstance(py, __kaldi__io_clifwrap::_InputType)) {
    PyErr_Format(PyExc_TypeError, "expecting enum InputType, got %s %s", ClassName(py), ClassType(py));
    return false;
  }
  typename std::underlying_type<::kaldi::InputType>::type v;
  PyObject* value = PyObject_GetAttrString(py, "value");
  if (value == nullptr || !Clif_PyObjAs(value, &v)) return false;
  Py_DECREF(value);
  *c = static_cast<::kaldi::InputType>(v);
  return true;
}

PyObject* Clif_PyObjFrom(const ::kaldi::InputType& c, py::PostConv) {
  return PyObject_CallFunctionObjArgs(__kaldi__io_clifwrap::_InputType, PyInt_FromLong(
      static_cast<typename std::underlying_type<::kaldi::InputType>::type>(c)), nullptr);
}

// Output to/from ::kaldi::Output conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::Output** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::kaldi::Output* cpp = __kaldi__io_clifwrap::pyOutput::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::kaldi::Output>* c) {
  assert(c != nullptr);
  ::kaldi::Output* cpp = __kaldi__io_clifwrap::pyOutput::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<__kaldi__io_clifwrap::pyOutput::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::kaldi::Output>* c) {
  assert(c != nullptr);
  ::kaldi::Output* cpp = __kaldi__io_clifwrap::pyOutput::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<__kaldi__io_clifwrap::pyOutput::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert Output instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::kaldi::Output* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__io_clifwrap::pyOutput::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__io_clifwrap::pyOutput::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::Output>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::kaldi::Output> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__io_clifwrap::pyOutput::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__io_clifwrap::pyOutput::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::Output>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::kaldi::Output> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&__kaldi__io_clifwrap::pyOutput::wrapper_Type, NULL, NULL);
  reinterpret_cast<__kaldi__io_clifwrap::pyOutput::wrapper*>(py)->cpp = ::clif::Instance<::kaldi::Output>(std::move(c));
  return py;
}

// OutputType:IntEnum to/from enum ::kaldi::OutputType conversion

bool Clif_PyObjAs(PyObject* py, ::kaldi::OutputType* c) {
  assert(c != nullptr);
  if (!PyObject_IsInstance(py, __kaldi__io_clifwrap::_OutputType)) {
    PyErr_Format(PyExc_TypeError, "expecting enum OutputType, got %s %s", ClassName(py), ClassType(py));
    return false;
  }
  typename std::underlying_type<::kaldi::OutputType>::type v;
  PyObject* value = PyObject_GetAttrString(py, "value");
  if (value == nullptr || !Clif_PyObjAs(value, &v)) return false;
  Py_DECREF(value);
  *c = static_cast<::kaldi::OutputType>(v);
  return true;
}

PyObject* Clif_PyObjFrom(const ::kaldi::OutputType& c, py::PostConv) {
  return PyObject_CallFunctionObjArgs(__kaldi__io_clifwrap::_OutputType, PyInt_FromLong(
      static_cast<typename std::underlying_type<::kaldi::OutputType>::type>(c)), nullptr);
}

}  // namespace kaldi
